
Watch_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001790c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002170  08017a50  08017a50  00027a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08019bc0  08019bc0  00029bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08019bc4  08019bc4  00029bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f4  20000004  08019bc8  00030004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 BLE_APP_CONTEXT 00000088  200001f8  08019dbc  000301f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  20000280  08019e44  00030280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 0000003e  2000031c  08019edd  0003031c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  2000035c  08019f1b  0003035c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0002e084  20000370  08019f2c  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00001404  2002e3f4  08019f2c  0003e3f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036d  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 14 MB_MEM1       000001b8  20030028  20030028  00040000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00040000  2**2
                  ALLOC
 16 .debug_info   00054da3  00000000  00000000  0003039d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_abbrev 00008ce3  00000000  00000000  00085140  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_aranges 000037c0  00000000  00000000  0008de28  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00003428  00000000  00000000  000915e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_macro  00033495  00000000  00000000  00094a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_line   0003506f  00000000  00000000  000c7ea5  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0011212a  00000000  00000000  000fcf14  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .comment      0000007b  00000000  00000000  0020f03e  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000fb4c  00000000  00000000  0020f0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000370 	.word	0x20000370
 800015c:	00000000 	.word	0x00000000
 8000160:	08017a34 	.word	0x08017a34

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000374 	.word	0x20000374
 800017c:	08017a34 	.word	0x08017a34

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <LL_FLASH_GetUDN+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	1fff7580 	.word	0x1fff7580

08000c10 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8000c14:	4b03      	ldr	r3, [pc, #12]	; (8000c24 <LL_FLASH_GetDeviceID+0x14>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	b2db      	uxtb	r3, r3
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	1fff7584 	.word	0x1fff7584

08000c28 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <LL_FLASH_GetSTCompanyID+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	0a1b      	lsrs	r3, r3, #8
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	1fff7584 	.word	0x1fff7584

08000c40 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 8000c40:	b5b0      	push	{r4, r5, r7, lr}
 8000c42:	b08c      	sub	sp, #48	; 0x30
 8000c44:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <APP_BLE_Init+0xb4>)
 8000c48:	463c      	mov	r4, r7
 8000c4a:	461d      	mov	r5, r3
 8000c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c54:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000c58:	c407      	stmia	r4!, {r0, r1, r2}
 8000c5a:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8000c5c:	f000 f9fe 	bl	800105c <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8000c60:	2101      	movs	r1, #1
 8000c62:	2002      	movs	r0, #2
 8000c64:	f013 f832 	bl	8013ccc <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  HciUserEvtProcessId = osThreadNew(HciUserEvtProcess, NULL, &HciUserEvtProcess_attr);
 8000c68:	4a23      	ldr	r2, [pc, #140]	; (8000cf8 <APP_BLE_Init+0xb8>)
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4823      	ldr	r0, [pc, #140]	; (8000cfc <APP_BLE_Init+0xbc>)
 8000c6e:	f00e fead 	bl	800f9cc <osThreadNew>
 8000c72:	4602      	mov	r2, r0
 8000c74:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <APP_BLE_Init+0xc0>)
 8000c76:	601a      	str	r2, [r3, #0]

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f00d fa3a 	bl	800e0f4 <SHCI_C2_BLE_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <APP_BLE_Init+0x4a>
  {
    Error_Handler();
 8000c86:	f005 ff13 	bl	8006ab0 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8000c8a:	f000 fa0f 	bl	80010ac <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8000c8e:	f00c f9dd 	bl	800d04c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000c9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca0:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  AdvUpdateProcessId = osThreadNew(AdvUpdateProcess, NULL, &AdvUpdateProcess_attr);
 8000ca2:	4a19      	ldr	r2, [pc, #100]	; (8000d08 <APP_BLE_Init+0xc8>)
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4819      	ldr	r0, [pc, #100]	; (8000d0c <APP_BLE_Init+0xcc>)
 8000ca8:	f00e fe90 	bl	800f9cc <osThreadNew>
 8000cac:	4602      	mov	r2, r0
 8000cae:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <APP_BLE_Init+0xd0>)
 8000cb0:	601a      	str	r2, [r3, #0]

  /**
   * Initialize HRS Application
   */
  //P2P FIX HRSAPP_Init();
  index_con_int = 0;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <APP_BLE_Init+0xd4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <APP_BLE_Init+0xd8>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Init();
 8000cbe:	f000 fca7 	bl	8001610 <P2PS_APP_Init>

  /**
   * Create timer to handle the connection state machine
   */

  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Mgr);
 8000cc2:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <APP_BLE_Init+0xdc>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	4916      	ldr	r1, [pc, #88]	; (8000d20 <APP_BLE_Init+0xe0>)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f002 fbbd 	bl	8003448 <HW_TS_Create>
  /**
   * Make device discoverable
   */

  //P2P FIX lines below
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL; //AD_TYPE_16_BIT_SERV_UUID;
 8000cce:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;//1;
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <APP_BLE_Init+0xc4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	761a      	strb	r2, [r3, #24]
  //P2P FIX Add_Advertisment_Service_UUID(HEART_RATE_SERVICE_UUID);
  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <APP_BLE_Init+0xe4>)
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <APP_BLE_Init+0xe8>)
 8000ce2:	22a0      	movs	r2, #160	; 0xa0
 8000ce4:	801a      	strh	r2, [r3, #0]

  /**
  * Start to Advertise to be connected by Collector
   */
   Adv_Request(APP_BLE_FAST_ADV);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f000 fabc 	bl	8001264 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 8000cec:	bf00      	nop
}
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf4:	08017b48 	.word	0x08017b48
 8000cf8:	08018744 	.word	0x08018744
 8000cfc:	08001479 	.word	0x08001479
 8000d00:	2002e074 	.word	0x2002e074
 8000d04:	200001f8 	.word	0x200001f8
 8000d08:	08018720 	.word	0x08018720
 8000d0c:	08001451 	.word	0x08001451
 8000d10:	2002e1a4 	.word	0x2002e1a4
 8000d14:	2002e081 	.word	0x2002e081
 8000d18:	2002e080 	.word	0x2002e080
 8000d1c:	08001439 	.word	0x08001439
 8000d20:	20000279 	.word	0x20000279
 8000d24:	2000027c 	.word	0x2000027c
 8000d28:	2000027e 	.word	0x2000027e

08000d2c <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08c      	sub	sp, #48	; 0x30
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8000d34:	2342      	movs	r3, #66	; 0x42
 8000d36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8000d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b3e      	cmp	r3, #62	; 0x3e
 8000d46:	d028      	beq.n	8000d9a <SVCCTL_App_Notification+0x6e>
 8000d48:	2bff      	cmp	r3, #255	; 0xff
 8000d4a:	f000 80a5 	beq.w	8000e98 <SVCCTL_App_Notification+0x16c>
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d000      	beq.n	8000d54 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8000d52:	e145      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8000d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d56:	3302      	adds	r3, #2
 8000d58:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 8000d5a:	693b      	ldr	r3, [r7, #16]
 8000d5c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4ba2      	ldr	r3, [pc, #648]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d64:	8adb      	ldrh	r3, [r3, #22]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d109      	bne.n	8000d7e <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 8000d6a:	4ba0      	ldr	r3, [pc, #640]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8000d70:	4b9e      	ldr	r3, [pc, #632]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8000d78:	489d      	ldr	r0, [pc, #628]	; (8000ff0 <SVCCTL_App_Notification+0x2c4>)
 8000d7a:	f013 fce3 	bl	8014744 <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 fa70 	bl	8001264 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8000d84:	4b9b      	ldr	r3, [pc, #620]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000d8a:	4b98      	ldr	r3, [pc, #608]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000d8c:	8ada      	ldrh	r2, [r3, #22]
 8000d8e:	4b99      	ldr	r3, [pc, #612]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d90:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8000d92:	4898      	ldr	r0, [pc, #608]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000d94:	f000 fc24 	bl	80015e0 <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8000d98:	e122      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8000d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b03      	cmp	r3, #3
 8000da6:	d004      	beq.n	8000db2 <SVCCTL_App_Notification+0x86>
 8000da8:	2b0c      	cmp	r3, #12
 8000daa:	d006      	beq.n	8000dba <SVCCTL_App_Notification+0x8e>
 8000dac:	2b01      	cmp	r3, #1
 8000dae:	d042      	beq.n	8000e36 <SVCCTL_App_Notification+0x10a>
          break;
 8000db0:	e071      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8000db2:	4891      	ldr	r0, [pc, #580]	; (8000ff8 <SVCCTL_App_Notification+0x2cc>)
 8000db4:	f013 fcc6 	bl	8014744 <puts>
          break;
 8000db8:	e06d      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 8000dba:	4890      	ldr	r0, [pc, #576]	; (8000ffc <SVCCTL_App_Notification+0x2d0>)
 8000dbc:	f013 fcc2 	bl	8014744 <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8000dc6:	69bb      	ldr	r3, [r7, #24]
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d103      	bne.n	8000dd6 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 8000dce:	488c      	ldr	r0, [pc, #560]	; (8001000 <SVCCTL_App_Notification+0x2d4>)
 8000dd0:	f013 fcb8 	bl	8014744 <puts>
 8000dd4:	e002      	b.n	8000ddc <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8000dd6:	488b      	ldr	r0, [pc, #556]	; (8001004 <SVCCTL_App_Notification+0x2d8>)
 8000dd8:	f013 fcb4 	bl	8014744 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 8000ddc:	4b83      	ldr	r3, [pc, #524]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000dde:	8adb      	ldrh	r3, [r3, #22]
 8000de0:	f107 020e 	add.w	r2, r7, #14
 8000de4:	f107 010f 	add.w	r1, r7, #15
 8000de8:	4618      	mov	r0, r3
 8000dea:	f00d f894 	bl	800df16 <hci_le_read_phy>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 8000df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d118      	bne.n	8000e2e <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 8000dfc:	4882      	ldr	r0, [pc, #520]	; (8001008 <SVCCTL_App_Notification+0x2dc>)
 8000dfe:	f013 fca1 	bl	8014744 <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 8000e02:	7bfb      	ldrb	r3, [r7, #15]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d10a      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	2b02      	cmp	r3, #2
 8000e0c:	d107      	bne.n	8000e1e <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e0e:	7bfb      	ldrb	r3, [r7, #15]
 8000e10:	4619      	mov	r1, r3
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	461a      	mov	r2, r3
 8000e16:	487d      	ldr	r0, [pc, #500]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e18:	f013 fc20 	bl	801465c <iprintf>
          break;
 8000e1c:	e03b      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	4619      	mov	r1, r3
 8000e22:	7bbb      	ldrb	r3, [r7, #14]
 8000e24:	461a      	mov	r2, r3
 8000e26:	4879      	ldr	r0, [pc, #484]	; (800100c <SVCCTL_App_Notification+0x2e0>)
 8000e28:	f013 fc18 	bl	801465c <iprintf>
          break;
 8000e2c:	e033      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
            APP_DBG_MSG("Read conf not succeess \n");
 8000e2e:	4878      	ldr	r0, [pc, #480]	; (8001010 <SVCCTL_App_Notification+0x2e4>)
 8000e30:	f013 fc88 	bl	8014744 <puts>
          break;
 8000e34:	e02f      	b.n	8000e96 <SVCCTL_App_Notification+0x16a>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8000e3c:	4b6b      	ldr	r3, [pc, #428]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 fb76 	bl	8003534 <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	4870      	ldr	r0, [pc, #448]	; (8001014 <SVCCTL_App_Notification+0x2e8>)
 8000e54:	f013 fc02 	bl	801465c <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8000e58:	4b64      	ldr	r3, [pc, #400]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e5a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	d104      	bne.n	8000e6c <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8000e62:	4b62      	ldr	r3, [pc, #392]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e64:	2206      	movs	r2, #6
 8000e66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000e6a:	e003      	b.n	8000e74 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8000e6c:	4b5f      	ldr	r3, [pc, #380]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	4b5b      	ldr	r3, [pc, #364]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e7e:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8000e80:	4b5c      	ldr	r3, [pc, #368]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8000e86:	4b59      	ldr	r3, [pc, #356]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000e88:	8ada      	ldrh	r2, [r3, #22]
 8000e8a:	4b5a      	ldr	r3, [pc, #360]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e8c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8000e8e:	4859      	ldr	r0, [pc, #356]	; (8000ff4 <SVCCTL_App_Notification+0x2c8>)
 8000e90:	f000 fba6 	bl	80015e0 <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8000e94:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 8000e96:	e0a3      	b.n	8000fe0 <SVCCTL_App_Notification+0x2b4>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8000e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e9a:	3302      	adds	r3, #2
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 8000e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29b      	uxth	r3, r3
 8000ea4:	f240 4205 	movw	r2, #1029	; 0x405
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d04a      	beq.n	8000f42 <SVCCTL_App_Notification+0x216>
 8000eac:	f240 4205 	movw	r2, #1029	; 0x405
 8000eb0:	4293      	cmp	r3, r2
 8000eb2:	dc18      	bgt.n	8000ee6 <SVCCTL_App_Notification+0x1ba>
 8000eb4:	f240 4202 	movw	r2, #1026	; 0x402
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d033      	beq.n	8000f24 <SVCCTL_App_Notification+0x1f8>
 8000ebc:	f240 4202 	movw	r2, #1026	; 0x402
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	dc07      	bgt.n	8000ed4 <SVCCTL_App_Notification+0x1a8>
 8000ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ec8:	d028      	beq.n	8000f1c <SVCCTL_App_Notification+0x1f0>
 8000eca:	f240 4201 	movw	r2, #1025	; 0x401
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d069      	beq.n	8000fa6 <SVCCTL_App_Notification+0x27a>
      break; /* EVT_VENDOR */
 8000ed2:	e084      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ed4:	f240 4203 	movw	r2, #1027	; 0x403
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d02a      	beq.n	8000f32 <SVCCTL_App_Notification+0x206>
 8000edc:	f240 4204 	movw	r2, #1028	; 0x404
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d02a      	beq.n	8000f3a <SVCCTL_App_Notification+0x20e>
      break; /* EVT_VENDOR */
 8000ee4:	e07b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000ee6:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000eea:	d03a      	beq.n	8000f62 <SVCCTL_App_Notification+0x236>
 8000eec:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000ef0:	dc08      	bgt.n	8000f04 <SVCCTL_App_Notification+0x1d8>
 8000ef2:	f240 4206 	movw	r2, #1030	; 0x406
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d02f      	beq.n	8000f5a <SVCCTL_App_Notification+0x22e>
 8000efa:	f240 4207 	movw	r2, #1031	; 0x407
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d069      	beq.n	8000fd6 <SVCCTL_App_Notification+0x2aa>
      break; /* EVT_VENDOR */
 8000f02:	e06c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
      switch (blue_evt->ecode)
 8000f04:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d02e      	beq.n	8000f6a <SVCCTL_App_Notification+0x23e>
 8000f0c:	f240 420a 	movw	r2, #1034	; 0x40a
 8000f10:	4293      	cmp	r3, r2
 8000f12:	db2e      	blt.n	8000f72 <SVCCTL_App_Notification+0x246>
 8000f14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f18:	d05a      	beq.n	8000fd0 <SVCCTL_App_Notification+0x2a4>
      break; /* EVT_VENDOR */
 8000f1a:	e060      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 8000f1c:	483e      	ldr	r0, [pc, #248]	; (8001018 <SVCCTL_App_Notification+0x2ec>)
 8000f1e:	f013 fc11 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 8000f22:	e05c      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 8000f24:	483d      	ldr	r0, [pc, #244]	; (800101c <SVCCTL_App_Notification+0x2f0>)
 8000f26:	f013 fc0d 	bl	8014744 <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 8000f2a:	483d      	ldr	r0, [pc, #244]	; (8001020 <SVCCTL_App_Notification+0x2f4>)
 8000f2c:	f013 fc0a 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8000f30:	e055      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8000f32:	483c      	ldr	r0, [pc, #240]	; (8001024 <SVCCTL_App_Notification+0x2f8>)
 8000f34:	f013 fc06 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 8000f38:	e051      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 8000f3a:	483b      	ldr	r0, [pc, #236]	; (8001028 <SVCCTL_App_Notification+0x2fc>)
 8000f3c:	f013 fc02 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 8000f40:	e04d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 8000f42:	483a      	ldr	r0, [pc, #232]	; (800102c <SVCCTL_App_Notification+0x300>)
 8000f44:	f013 fbfe 	bl	8014744 <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8000f48:	4b28      	ldr	r3, [pc, #160]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f4a:	8adb      	ldrh	r3, [r3, #22]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f00c fc18 	bl	800d782 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8000f52:	4837      	ldr	r0, [pc, #220]	; (8001030 <SVCCTL_App_Notification+0x304>)
 8000f54:	f013 fbf6 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 8000f58:	e041      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f5a:	4836      	ldr	r0, [pc, #216]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f5c:	f013 fbf2 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f60:	e03d      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8000f62:	4834      	ldr	r0, [pc, #208]	; (8001034 <SVCCTL_App_Notification+0x308>)
 8000f64:	f013 fbee 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8000f68:	e039      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 8000f6a:	4833      	ldr	r0, [pc, #204]	; (8001038 <SVCCTL_App_Notification+0x30c>)
 8000f6c:	f013 fbea 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 8000f70:	e035      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8000f76:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	482f      	ldr	r0, [pc, #188]	; (800103c <SVCCTL_App_Notification+0x310>)
 8000f7e:	f013 fb6d 	bl	801465c <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8000f86:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482c      	ldr	r0, [pc, #176]	; (8001040 <SVCCTL_App_Notification+0x314>)
 8000f8e:	f013 fb65 	bl	801465c <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8000f92:	4b16      	ldr	r3, [pc, #88]	; (8000fec <SVCCTL_App_Notification+0x2c0>)
 8000f94:	8adb      	ldrh	r3, [r3, #22]
 8000f96:	2101      	movs	r1, #1
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f00c fc3c 	bl	800d816 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8000f9e:	4829      	ldr	r0, [pc, #164]	; (8001044 <SVCCTL_App_Notification+0x318>)
 8000fa0:	f013 fbd0 	bl	8014744 <puts>
          break;
 8000fa4:	e01b      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8000fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fa8:	3302      	adds	r3, #2
 8000faa:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4825      	ldr	r0, [pc, #148]	; (8001048 <SVCCTL_App_Notification+0x31c>)
 8000fb4:	f013 fb52 	bl	801465c <iprintf>
            if (pairing_complete->Status == 0)
 8000fb8:	6a3b      	ldr	r3, [r7, #32]
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <SVCCTL_App_Notification+0x29c>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8000fc0:	4822      	ldr	r0, [pc, #136]	; (800104c <SVCCTL_App_Notification+0x320>)
 8000fc2:	f013 fbbf 	bl	8014744 <puts>
           break;    
 8000fc6:	e00a      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 8000fc8:	4821      	ldr	r0, [pc, #132]	; (8001050 <SVCCTL_App_Notification+0x324>)
 8000fca:	f013 fbbb 	bl	8014744 <puts>
           break;    
 8000fce:	e006      	b.n	8000fde <SVCCTL_App_Notification+0x2b2>
          mutex = 1;
 8000fd0:	4b20      	ldr	r3, [pc, #128]	; (8001054 <SVCCTL_App_Notification+0x328>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	701a      	strb	r2, [r3, #0]
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 8000fd6:	4820      	ldr	r0, [pc, #128]	; (8001058 <SVCCTL_App_Notification+0x32c>)
 8000fd8:	f013 fbb4 	bl	8014744 <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 8000fdc:	bf00      	nop
      break; /* EVT_VENDOR */
 8000fde:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3730      	adds	r7, #48	; 0x30
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	200001f8 	.word	0x200001f8
 8000ff0:	08017b78 	.word	0x08017b78
 8000ff4:	2002e078 	.word	0x2002e078
 8000ff8:	08017ba0 	.word	0x08017ba0
 8000ffc:	08017bcc 	.word	0x08017bcc
 8001000:	08017be8 	.word	0x08017be8
 8001004:	08017c0c 	.word	0x08017c0c
 8001008:	08017c34 	.word	0x08017c34
 800100c:	08017c48 	.word	0x08017c48
 8001010:	08017c64 	.word	0x08017c64
 8001014:	08017c7c 	.word	0x08017c7c
 8001018:	08017cb0 	.word	0x08017cb0
 800101c:	08017cdc 	.word	0x08017cdc
 8001020:	08017d04 	.word	0x08017d04
 8001024:	08017d24 	.word	0x08017d24
 8001028:	08017d50 	.word	0x08017d50
 800102c:	08017d80 	.word	0x08017d80
 8001030:	08017da0 	.word	0x08017da0
 8001034:	08017dbc 	.word	0x08017dbc
 8001038:	08017de0 	.word	0x08017de0
 800103c:	08017e0c 	.word	0x08017e0c
 8001040:	08017e24 	.word	0x08017e24
 8001044:	08017e38 	.word	0x08017e38
 8001048:	08017e74 	.word	0x08017e74
 800104c:	08017ecc 	.word	0x08017ecc
 8001050:	08017ee0 	.word	0x08017ee0
 8001054:	2002e080 	.word	0x2002e080
 8001058:	08017ef4 	.word	0x08017ef4

0800105c <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  MtxHciId = osMutexNew( NULL );
 8001062:	2000      	movs	r0, #0
 8001064:	f00e fe7c 	bl	800fd60 <osMutexNew>
 8001068:	4602      	mov	r2, r0
 800106a:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <Ble_Tl_Init+0x3c>)
 800106c:	601a      	str	r2, [r3, #0]
  SemHciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 800106e:	2200      	movs	r2, #0
 8001070:	2100      	movs	r1, #0
 8001072:	2001      	movs	r0, #1
 8001074:	f00e ffbc 	bl	800fff0 <osSemaphoreNew>
 8001078:	4602      	mov	r2, r0
 800107a:	4b08      	ldr	r3, [pc, #32]	; (800109c <Ble_Tl_Init+0x40>)
 800107c:	601a      	str	r2, [r3, #0]

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 800107e:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <Ble_Tl_Init+0x44>)
 8001080:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <Ble_Tl_Init+0x48>)
 8001084:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <Ble_Tl_Init+0x4c>)
 800108c:	f00d f860 	bl	800e150 <hci_init>

  return;
 8001090:	bf00      	nop
}
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2002e0a0 	.word	0x2002e0a0
 800109c:	2002e070 	.word	0x2002e070
 80010a0:	20030028 	.word	0x20030028
 80010a4:	08001531 	.word	0x08001531
 80010a8:	080014f9 	.word	0x080014f9

080010ac <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 80010ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ae:	b08f      	sub	sp, #60	; 0x3c
 80010b0:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80010b2:	f44f 7350 	mov.w	r3, #832	; 0x340
 80010b6:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80010b8:	f00c ff09 	bl	800dece <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80010bc:	f000 f978 	bl	80013b0 <BleGetBdAddress>
 80010c0:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80010c2:	69fa      	ldr	r2, [r7, #28]
 80010c4:	2106      	movs	r1, #6
 80010c6:	2000      	movs	r0, #0
 80010c8:	f00c fe41 	bl	800dd4e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	795a      	ldrb	r2, [r3, #5]
 80010d0:	4b5c      	ldr	r3, [pc, #368]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010d2:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	791a      	ldrb	r2, [r3, #4]
 80010d8:	4b5a      	ldr	r3, [pc, #360]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010da:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	78da      	ldrb	r2, [r3, #3]
 80010e0:	4b58      	ldr	r3, [pc, #352]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010e2:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	789a      	ldrb	r2, [r3, #2]
 80010e8:	4b56      	ldr	r3, [pc, #344]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010ea:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	785a      	ldrb	r2, [r3, #1]
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010f2:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <Ble_Hci_Gap_Gatt_Init+0x198>)
 80010fa:	735a      	strb	r2, [r3, #13]

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET,
 80010fc:	4a52      	ldr	r2, [pc, #328]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 80010fe:	2110      	movs	r1, #16
 8001100:	2018      	movs	r0, #24
 8001102:	f00c fe24 	bl	800dd4e <aci_hal_write_config_data>
                            (uint8_t*) BLE_CFG_IR_VALUE);

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET,
 8001106:	4a51      	ldr	r2, [pc, #324]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001108:	2110      	movs	r1, #16
 800110a:	2008      	movs	r0, #8
 800110c:	f00c fe1f 	bl	800dd4e <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 8001110:	f64e 536e 	movw	r3, #60782	; 0xed6e
 8001114:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 8001116:	f7ff fd6f 	bl	8000bf8 <LL_FLASH_GetUDN>
 800111a:	4603      	mov	r3, r0
 800111c:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	461a      	mov	r2, r3
 8001122:	2106      	movs	r1, #6
 8001124:	202e      	movs	r0, #46	; 0x2e
 8001126:	f00c fe12 	bl	800dd4e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 800112a:	4a47      	ldr	r2, [pc, #284]	; (8001248 <Ble_Hci_Gap_Gatt_Init+0x19c>)
 800112c:	2110      	movs	r1, #16
 800112e:	2018      	movs	r0, #24
 8001130:	f00c fe0d 	bl	800dd4e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8001134:	4a45      	ldr	r2, [pc, #276]	; (800124c <Ble_Hci_Gap_Gatt_Init+0x1a0>)
 8001136:	2110      	movs	r1, #16
 8001138:	2008      	movs	r0, #8
 800113a:	f00c fe08 	bl	800dd4e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 800113e:	2118      	movs	r1, #24
 8001140:	2001      	movs	r0, #1
 8001142:	f00c fe6d 	bl	800de20 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8001146:	f00c fbbd 	bl	800d8c4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 800114e:	7efb      	ldrb	r3, [r7, #27]
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8001156:	7efb      	ldrb	r3, [r7, #27]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d024      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
  {
    const char *name = "DRAMSAY";
 800115c:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <Ble_Hci_Gap_Gatt_Init+0x1a4>)
 800115e:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8001160:	f107 0212 	add.w	r2, r7, #18
 8001164:	7ef8      	ldrb	r0, [r7, #27]
 8001166:	f107 030e 	add.w	r3, r7, #14
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	9300      	str	r3, [sp, #0]
 8001172:	4613      	mov	r3, r2
 8001174:	2207      	movs	r2, #7
 8001176:	2100      	movs	r1, #0
 8001178:	f00c f9f8 	bl	800d56c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 800117c:	8a7c      	ldrh	r4, [r7, #18]
 800117e:	8a3d      	ldrh	r5, [r7, #16]
 8001180:	6978      	ldr	r0, [r7, #20]
 8001182:	f7fe fffd 	bl	8000180 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b2da      	uxtb	r2, r3
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	4613      	mov	r3, r2
 8001190:	2200      	movs	r2, #0
 8001192:	4629      	mov	r1, r5
 8001194:	4620      	mov	r0, r4
 8001196:	f00c fd53 	bl	800dc40 <aci_gatt_update_char_value>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <Ble_Hci_Gap_Gatt_Init+0xfa>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
 80011a0:	482c      	ldr	r0, [pc, #176]	; (8001254 <Ble_Hci_Gap_Gatt_Init+0x1a8>)
 80011a2:	f013 facf 	bl	8014744 <puts>
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 80011a6:	8a78      	ldrh	r0, [r7, #18]
 80011a8:	89f9      	ldrh	r1, [r7, #14]
 80011aa:	463b      	mov	r3, r7
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2302      	movs	r3, #2
 80011b0:	2200      	movs	r2, #0
 80011b2:	f00c fd45 	bl	800dc40 <aci_gatt_update_char_value>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d002      	beq.n	80011c2 <Ble_Hci_Gap_Gatt_Init+0x116>
                                gap_appearance_char_handle,
                                0,
                                2,
                                (uint8_t *)&appearance))
  {
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
 80011bc:	4826      	ldr	r0, [pc, #152]	; (8001258 <Ble_Hci_Gap_Gatt_Init+0x1ac>)
 80011be:	f013 fac1 	bl	8014744 <puts>
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 80011c2:	2202      	movs	r2, #2
 80011c4:	2102      	movs	r1, #2
 80011c6:	2000      	movs	r0, #0
 80011c8:	f00c ff0d 	bl	800dfe6 <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f00c f8d6 	bl	800d388 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 80011dc:	4b1f      	ldr	r3, [pc, #124]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011de:	2201      	movs	r2, #1
 80011e0:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 80011e2:	4b1e      	ldr	r3, [pc, #120]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011e4:	2208      	movs	r2, #8
 80011e6:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011ea:	2210      	movs	r2, #16
 80011ec:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 80011f4:	4b19      	ldr	r3, [pc, #100]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011f6:	4a1a      	ldr	r2, [pc, #104]	; (8001260 <Ble_Hci_Gap_Gatt_Init+0x1b4>)
 80011f8:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8001200:	4b16      	ldr	r3, [pc, #88]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001202:	789d      	ldrb	r5, [r3, #2]
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001206:	785e      	ldrb	r6, [r3, #1]
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120a:	791b      	ldrb	r3, [r3, #4]
 800120c:	4a13      	ldr	r2, [pc, #76]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 800120e:	7952      	ldrb	r2, [r2, #5]
 8001210:	4912      	ldr	r1, [pc, #72]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001212:	78c9      	ldrb	r1, [r1, #3]
 8001214:	4811      	ldr	r0, [pc, #68]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001216:	6880      	ldr	r0, [r0, #8]
 8001218:	2400      	movs	r4, #0
 800121a:	9404      	str	r4, [sp, #16]
 800121c:	9003      	str	r0, [sp, #12]
 800121e:	9102      	str	r1, [sp, #8]
 8001220:	9201      	str	r2, [sp, #4]
 8001222:	9300      	str	r3, [sp, #0]
 8001224:	2300      	movs	r3, #0
 8001226:	2201      	movs	r2, #1
 8001228:	4631      	mov	r1, r6
 800122a:	4628      	mov	r0, r5
 800122c:	f00c f8f6 	bl	800d41c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <Ble_Hci_Gap_Gatt_Init+0x1b0>)
 8001232:	789b      	ldrb	r3, [r3, #2]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <Ble_Hci_Gap_Gatt_Init+0x190>
   {
     aci_gap_configure_whitelist();
 8001238:	f00c fa7f 	bl	800d73a <aci_gap_configure_whitelist>
   }
}
 800123c:	bf00      	nop
 800123e:	3724      	adds	r7, #36	; 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001244:	20000004 	.word	0x20000004
 8001248:	080186f8 	.word	0x080186f8
 800124c:	08018708 	.word	0x08018708
 8001250:	08017f1c 	.word	0x08017f1c
 8001254:	08017f24 	.word	0x08017f24
 8001258:	08017f54 	.word	0x08017f54
 800125c:	200001f8 	.word	0x200001f8
 8001260:	0001b207 	.word	0x0001b207

08001264 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af08      	add	r7, sp, #32
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800126e:	2342      	movs	r3, #66	; 0x42
 8001270:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d106      	bne.n	8001286 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8001278:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <Adv_Request+0x114>)
 800127a:	881b      	ldrh	r3, [r3, #0]
 800127c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <Adv_Request+0x118>)
 8001280:	881b      	ldrh	r3, [r3, #0]
 8001282:	81bb      	strh	r3, [r7, #12]
 8001284:	e005      	b.n	8001292 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8001286:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800128a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800128c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001290:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8001292:	4b3b      	ldr	r3, [pc, #236]	; (8001380 <Adv_Request+0x11c>)
 8001294:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001298:	4618      	mov	r0, r3
 800129a:	f002 f94b 	bl	8003534 <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 800129e:	4b38      	ldr	r3, [pc, #224]	; (8001380 <Adv_Request+0x11c>)
 80012a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012a4:	4619      	mov	r1, r3
 80012a6:	4837      	ldr	r0, [pc, #220]	; (8001384 <Adv_Request+0x120>)
 80012a8:	f013 f9d8 	bl	801465c <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d119      	bne.n	80012e6 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80012b2:	4b33      	ldr	r3, [pc, #204]	; (8001380 <Adv_Request+0x11c>)
 80012b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d004      	beq.n	80012c6 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80012bc:	4b30      	ldr	r3, [pc, #192]	; (8001380 <Adv_Request+0x11c>)
 80012be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80012c2:	2b02      	cmp	r3, #2
 80012c4:	d10f      	bne.n	80012e6 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 80012c6:	f00b ff5d 	bl	800d184 <aci_gap_set_non_discoverable>
 80012ca:	4603      	mov	r3, r0
 80012cc:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 80012ce:	7afb      	ldrb	r3, [r7, #11]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d103      	bne.n	80012dc <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 80012d4:	482c      	ldr	r0, [pc, #176]	; (8001388 <Adv_Request+0x124>)
 80012d6:	f013 fa35 	bl	8014744 <puts>
 80012da:	e004      	b.n	80012e6 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	4619      	mov	r1, r3
 80012e0:	482a      	ldr	r0, [pc, #168]	; (800138c <Adv_Request+0x128>)
 80012e2:	f013 f9bb 	bl	801465c <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 80012e6:	4a26      	ldr	r2, [pc, #152]	; (8001380 <Adv_Request+0x11c>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <Adv_Request+0x11c>)
 80012f0:	7e1b      	ldrb	r3, [r3, #24]
 80012f2:	89b8      	ldrh	r0, [r7, #12]
 80012f4:	89f9      	ldrh	r1, [r7, #14]
 80012f6:	2200      	movs	r2, #0
 80012f8:	9206      	str	r2, [sp, #24]
 80012fa:	2200      	movs	r2, #0
 80012fc:	9205      	str	r2, [sp, #20]
 80012fe:	4a24      	ldr	r2, [pc, #144]	; (8001390 <Adv_Request+0x12c>)
 8001300:	9204      	str	r2, [sp, #16]
 8001302:	9303      	str	r3, [sp, #12]
 8001304:	4b23      	ldr	r3, [pc, #140]	; (8001394 <Adv_Request+0x130>)
 8001306:	9302      	str	r3, [sp, #8]
 8001308:	2308      	movs	r3, #8
 800130a:	9301      	str	r3, [sp, #4]
 800130c:	2300      	movs	r3, #0
 800130e:	9300      	str	r3, [sp, #0]
 8001310:	2300      	movs	r3, #0
 8001312:	4602      	mov	r2, r0
 8001314:	2000      	movs	r0, #0
 8001316:	f00b ff59 	bl	800d1cc <aci_gap_set_discoverable>
 800131a:	4603      	mov	r3, r0
 800131c:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 800131e:	491e      	ldr	r1, [pc, #120]	; (8001398 <Adv_Request+0x134>)
 8001320:	200e      	movs	r0, #14
 8001322:	f00c f9ae 	bl	800d682 <aci_gap_update_adv_data>
 8001326:	4603      	mov	r3, r0
 8001328:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 800132a:	7afb      	ldrb	r3, [r7, #11]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8001330:	79fb      	ldrb	r3, [r7, #7]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10a      	bne.n	800134c <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8001336:	4819      	ldr	r0, [pc, #100]	; (800139c <Adv_Request+0x138>)
 8001338:	f013 fa04 	bl	8014744 <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 800133c:	4b10      	ldr	r3, [pc, #64]	; (8001380 <Adv_Request+0x11c>)
 800133e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8001342:	4917      	ldr	r1, [pc, #92]	; (80013a0 <Adv_Request+0x13c>)
 8001344:	4618      	mov	r0, r3
 8001346:	f002 f97f 	bl	8003648 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 800134a:	e012      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 800134c:	4815      	ldr	r0, [pc, #84]	; (80013a4 <Adv_Request+0x140>)
 800134e:	f013 f9f9 	bl	8014744 <puts>
  return;
 8001352:	e00e      	b.n	8001372 <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d105      	bne.n	8001366 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 800135a:	7afb      	ldrb	r3, [r7, #11]
 800135c:	4619      	mov	r1, r3
 800135e:	4812      	ldr	r0, [pc, #72]	; (80013a8 <Adv_Request+0x144>)
 8001360:	f013 f97c 	bl	801465c <iprintf>
  return;
 8001364:	e005      	b.n	8001372 <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8001366:	7afb      	ldrb	r3, [r7, #11]
 8001368:	4619      	mov	r1, r3
 800136a:	4810      	ldr	r0, [pc, #64]	; (80013ac <Adv_Request+0x148>)
 800136c:	f013 f976 	bl	801465c <iprintf>
  return;
 8001370:	bf00      	nop
}
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	2000027c 	.word	0x2000027c
 800137c:	2000027e 	.word	0x2000027e
 8001380:	200001f8 	.word	0x200001f8
 8001384:	08017f84 	.word	0x08017f84
 8001388:	08017fa0 	.word	0x08017fa0
 800138c:	08017fc4 	.word	0x08017fc4
 8001390:	20000211 	.word	0x20000211
 8001394:	08018718 	.word	0x08018718
 8001398:	20000004 	.word	0x20000004
 800139c:	08017fec 	.word	0x08017fec
 80013a0:	0001e046 	.word	0x0001e046
 80013a4:	08018014 	.word	0x08018014
 80013a8:	08018040 	.word	0x08018040
 80013ac:	08018070 	.word	0x08018070

080013b0 <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80013b6:	f7ff fc1f 	bl	8000bf8 <LL_FLASH_GetUDN>
 80013ba:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c2:	d023      	beq.n	800140c <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80013c4:	f7ff fc30 	bl	8000c28 <LL_FLASH_GetSTCompanyID>
 80013c8:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80013ca:	f7ff fc21 	bl	8000c10 <LL_FLASH_GetDeviceID>
 80013ce:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b16      	ldr	r3, [pc, #88]	; (8001430 <BleGetBdAddress+0x80>)
 80013d6:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	0a1b      	lsrs	r3, r3, #8
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <BleGetBdAddress+0x80>)
 80013e0:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	0c1b      	lsrs	r3, r3, #16
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <BleGetBdAddress+0x80>)
 80013ea:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <BleGetBdAddress+0x80>)
 80013f2:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <BleGetBdAddress+0x80>)
 80013fa:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <BleGetBdAddress+0x80>)
 8001404:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8001406:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <BleGetBdAddress+0x80>)
 8001408:	617b      	str	r3, [r7, #20]
 800140a:	e00b      	b.n	8001424 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 800140c:	2000      	movs	r0, #0
 800140e:	f00d fd8d 	bl	800ef2c <OTP_Read>
 8001412:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]
 800141e:	e001      	b.n	8001424 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <BleGetBdAddress+0x84>)
 8001422:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8001424:	697b      	ldr	r3, [r7, #20]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3718      	adds	r7, #24
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000038c 	.word	0x2000038c
 8001434:	080186f0 	.word	0x080186f0

08001438 <Adv_Mgr>:
  return;
}
*/

static void Adv_Mgr( void )
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as an aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  osThreadFlagsSet( AdvUpdateProcessId, 1 );
 800143c:	4b03      	ldr	r3, [pc, #12]	; (800144c <Adv_Mgr+0x14>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2101      	movs	r1, #1
 8001442:	4618      	mov	r0, r3
 8001444:	f00e fb68 	bl	800fb18 <osThreadFlagsSet>

  return;
 8001448:	bf00      	nop
}
 800144a:	bd80      	pop	{r7, pc}
 800144c:	2002e1a4 	.word	0x2002e1a4

08001450 <AdvUpdateProcess>:

static void AdvUpdateProcess(void *argument)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	2100      	movs	r1, #0
 800145e:	2001      	movs	r0, #1
 8001460:	f00e fbbc 	bl	800fbdc <osThreadFlagsWait>
    Adv_Update( );
 8001464:	f000 f801 	bl	800146a <Adv_Update>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001468:	e7f6      	b.n	8001458 <AdvUpdateProcess+0x8>

0800146a <Adv_Update>:
  }
}

static void Adv_Update( void )
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  Adv_Request(APP_BLE_LP_ADV);
 800146e:	2002      	movs	r0, #2
 8001470:	f7ff fef8 	bl	8001264 <Adv_Request>

  return;
 8001474:	bf00      	nop
}
 8001476:	bd80      	pop	{r7, pc}

08001478 <HciUserEvtProcess>:
  }
  return;
}

static void HciUserEvtProcess(void *argument)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  UNUSED(argument);

  for(;;)
  {
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	2100      	movs	r1, #0
 8001486:	2001      	movs	r0, #1
 8001488:	f00e fba8 	bl	800fbdc <osThreadFlagsWait>
    hci_user_evt_proc( );
 800148c:	f00c fe7c 	bl	800e188 <hci_user_evt_proc>
    osThreadFlagsWait( 1, osFlagsWaitAny, osWaitForever);
 8001490:	e7f6      	b.n	8001480 <HciUserEvtProcess+0x8>
	...

08001494 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( HciUserEvtProcessId, 1 );
 800149c:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <hci_notify_asynch_evt+0x1c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00e fb38 	bl	800fb18 <osThreadFlagsSet>
  return;
 80014a8:	bf00      	nop
}
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	2002e074 	.word	0x2002e074

080014b4 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemHciId );
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <hci_cmd_resp_release+0x1c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00e fe99 	bl	80101f8 <osSemaphoreRelease>
  return;
 80014c6:	bf00      	nop
}
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	2002e070 	.word	0x2002e070

080014d4 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemHciId, osWaitForever );
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <hci_cmd_resp_wait+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00e fe21 	bl	801012c <osSemaphoreAcquire>
  return;
 80014ea:	bf00      	nop
}
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2002e070 	.word	0x2002e070

080014f8 <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	3308      	adds	r3, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f00b fde8 	bl	800d0e0 <SVCCTL_UserEvtRx>
 8001510:	4603      	mov	r3, r0
 8001512:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2201      	movs	r2, #1
 800151e:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8001520:	e002      	b.n	8001528 <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	2200      	movs	r2, #0
 8001526:	701a      	strb	r2, [r3, #0]
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
  switch (status)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d002      	beq.n	8001546 <BLE_StatusNot+0x16>
 8001540:	2b01      	cmp	r3, #1
 8001542:	d008      	beq.n	8001556 <BLE_StatusNot+0x26>
    case HCI_TL_CmdAvailable:
      osMutexRelease( MtxHciId );
      break;

    default:
      break;
 8001544:	e00d      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexAcquire( MtxHciId, osWaitForever );
 8001546:	4b09      	ldr	r3, [pc, #36]	; (800156c <BLE_StatusNot+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f04f 31ff 	mov.w	r1, #4294967295
 800154e:	4618      	mov	r0, r3
 8001550:	f00e fca0 	bl	800fe94 <osMutexAcquire>
      break;
 8001554:	e005      	b.n	8001562 <BLE_StatusNot+0x32>
      osMutexRelease( MtxHciId );
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <BLE_StatusNot+0x3c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f00e fcf8 	bl	800ff50 <osMutexRelease>
      break;
 8001560:	bf00      	nop
  }
  return;
 8001562:	bf00      	nop
}
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	2002e0a0 	.word	0x2002e0a0

08001570 <P2PS_STM_App_Notification>:
/* Private function prototypes -----------------------------------------------*/
void P2PS_APP_Context_Init(void);

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d00e      	beq.n	800159e <P2PS_STM_App_Notification+0x2e>
 8001580:	2b03      	cmp	r3, #3
 8001582:	d016      	beq.n	80015b2 <P2PS_STM_App_Notification+0x42>
 8001584:	2b00      	cmp	r3, #0
 8001586:	d000      	beq.n	800158a <P2PS_STM_App_Notification+0x1a>
    case P2PS_STM_WRITE_EVT:
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
      break;

    default:
      break;
 8001588:	e01c      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 1;
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 8001590:	480f      	ldr	r0, [pc, #60]	; (80015d0 <P2PS_STM_App_Notification+0x60>)
 8001592:	f013 f8d7 	bl	8014744 <puts>
      APP_DBG_MSG(" \n\r");
 8001596:	480f      	ldr	r0, [pc, #60]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 8001598:	f013 f860 	bl	801465c <iprintf>
      break;
 800159c:	e012      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
      P2P_Server_App_Context.Notification_Status = 0;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <P2PS_STM_App_Notification+0x5c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <P2PS_STM_App_Notification+0x68>)
 80015a6:	f013 f8cd 	bl	8014744 <puts>
      APP_DBG_MSG(" \n\r");
 80015aa:	480a      	ldr	r0, [pc, #40]	; (80015d4 <P2PS_STM_App_Notification+0x64>)
 80015ac:	f013 f856 	bl	801465c <iprintf>
      break;
 80015b0:	e008      	b.n	80015c4 <P2PS_STM_App_Notification+0x54>
		osMessageQueuePut(bleRXqueueHandle, &(pNotification->DataTransfered), 0, 0);
 80015b2:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <P2PS_STM_App_Notification+0x6c>)
 80015b4:	6818      	ldr	r0, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1d19      	adds	r1, r3, #4
 80015ba:	2300      	movs	r3, #0
 80015bc:	2200      	movs	r2, #0
 80015be:	f00e fef9 	bl	80103b4 <osMessageQueuePut>
      break;
 80015c2:	bf00      	nop
  }
  return;
 80015c4:	bf00      	nop
}
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	2002e088 	.word	0x2002e088
 80015d0:	080181c8 	.word	0x080181c8
 80015d4:	080181fc 	.word	0x080181fc
 80015d8:	08018200 	.word	0x08018200
 80015dc:	2002e07c 	.word	0x2002e07c

080015e0 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  switch(pNotification->P2P_Evt_Opcode)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <P2PS_APP_Notification+0x16>
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d004      	beq.n	80015fe <P2PS_APP_Notification+0x1e>

    case PEER_DISCON_HANDLE_EVT :
       P2PS_APP_Context_Init();
       break;
    default:
      break;
 80015f4:	e006      	b.n	8001604 <P2PS_APP_Notification+0x24>
	  P2P_Server_App_Context.Connected = 1;
 80015f6:	4b05      	ldr	r3, [pc, #20]	; (800160c <P2PS_APP_Notification+0x2c>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	705a      	strb	r2, [r3, #1]
    break;
 80015fc:	e002      	b.n	8001604 <P2PS_APP_Notification+0x24>
       P2PS_APP_Context_Init();
 80015fe:	f000 f813 	bl	8001628 <P2PS_APP_Context_Init>
       break;
 8001602:	bf00      	nop
  }
  return;
 8001604:	bf00      	nop
}
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2002e088 	.word	0x2002e088

08001610 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  P2P_Server_App_Context.Notification_Status=0;
 8001614:	4b03      	ldr	r3, [pc, #12]	; (8001624 <P2PS_APP_Init+0x14>)
 8001616:	2200      	movs	r2, #0
 8001618:	701a      	strb	r2, [r3, #0]
  P2PS_APP_Context_Init();
 800161a:	f000 f805 	bl	8001628 <P2PS_APP_Context_Init>
  return;
 800161e:	bf00      	nop
}
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	2002e088 	.word	0x2002e088

08001628 <P2PS_APP_Context_Init>:

void  P2PS_APP_Context_Init(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
	  //init context on app init and on reconnect events
	  P2P_Server_App_Context.Connected = 0;
 800162c:	4b03      	ldr	r3, [pc, #12]	; (800163c <P2PS_APP_Context_Init+0x14>)
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	2002e088 	.word	0x2002e088

08001640 <LL_PWR_EnableBootC2>:
  * @brief  Boot CPU2 after reset or wakeup from stop or standby modes
  * @rmtoll CR4          C2BOOT        LL_PWR_EnableBootC2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBootC2(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_PWR_EnableBootC2+0x1c>)
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	4a04      	ldr	r2, [pc, #16]	; (800165c <LL_PWR_EnableBootC2+0x1c>)
 800164a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800164e:	60d3      	str	r3, [r2, #12]
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	58000400 	.word	0x58000400

08001660 <LL_C2_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_40
  *         @arg @ref LL_EXTI_LINE_41
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800166a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800166e:	4905      	ldr	r1, [pc, #20]	; (8001684 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8001678:	bf00      	nop
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	58000800 	.word	0x58000800

08001688 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001690:	4b05      	ldr	r3, [pc, #20]	; (80016a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001692:	6a1a      	ldr	r2, [r3, #32]
 8001694:	4904      	ldr	r1, [pc, #16]	; (80016a8 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4313      	orrs	r3, r2
 800169a:	620b      	str	r3, [r1, #32]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	58000800 	.word	0x58000800

080016ac <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 80016b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	650b      	str	r3, [r1, #80]	; 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016d0:	68fb      	ldr	r3, [r7, #12]
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80016de:	b480      	push	{r7}
 80016e0:	b085      	sub	sp, #20
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80016e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ea:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80016ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80016fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016fe:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4013      	ands	r3, r2
 8001706:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001708:	68fb      	ldr	r3, [r7, #12]
}
 800170a:	bf00      	nop
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	601a      	str	r2, [r3, #0]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr

08001736 <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f043 0201 	orr.w	r2, r3, #1
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001756:	b480      	push	{r7}
 8001758:	b083      	sub	sp, #12
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
 800175e:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685a      	ldr	r2, [r3, #4]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	041b      	lsls	r3, r3, #16
 8001768:	43db      	mvns	r3, r3
 800176a:	401a      	ands	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	605a      	str	r2, [r3, #4]
}
 8001770:	bf00      	nop
 8001772:	370c      	adds	r7, #12
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	041b      	lsls	r3, r3, #16
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	43db      	mvns	r3, r3
 80017b2:	401a      	ands	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	605a      	str	r2, [r3, #4]
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	041a      	lsls	r2, r3, #16
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	609a      	str	r2, [r3, #8]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80017fe:	b480      	push	{r7}
 8001800:	b083      	sub	sp, #12
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	4013      	ands	r3, r2
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d101      	bne.n	800181a <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	4013      	ands	r3, r2
 800183a:	683a      	ldr	r2, [r7, #0]
 800183c:	429a      	cmp	r2, r3
 800183e:	d101      	bne.n	8001844 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8001840:	2301      	movs	r3, #1
 8001842:	e000      	b.n	8001846 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8001844:	2300      	movs	r3, #0
}
 8001846:	4618      	mov	r0, r3
 8001848:	370c      	adds	r7, #12
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8001858:	2102      	movs	r1, #2
 800185a:	4819      	ldr	r0, [pc, #100]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800185c:	f7ff ffe4 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HW_IPCC_Rx_Handler+0x26>
 8001866:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	43db      	mvns	r3, r3
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8001874:	f000 f8ea 	bl	8001a4c <HW_IPCC_SYS_EvtHandler>
 8001878:	e01f      	b.n	80018ba <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800187a:	2101      	movs	r1, #1
 800187c:	4810      	ldr	r0, [pc, #64]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800187e:	f7ff ffd3 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HW_IPCC_Rx_Handler+0x46>
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b00      	cmp	r3, #0
 8001892:	d102      	bne.n	800189a <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8001894:	f000 f89e 	bl	80019d4 <HW_IPCC_BLE_EvtHandler>
 8001898:	e00f      	b.n	80018ba <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800189a:	2108      	movs	r1, #8
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 800189e:	f7ff ffc3 	bl	8001828 <LL_C2_IPCC_IsActiveFlag_CHx>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d009      	beq.n	80018bc <HW_IPCC_Rx_Handler+0x68>
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <HW_IPCC_Rx_Handler+0x6c>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	43db      	mvns	r3, r3
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d002      	beq.n	80018bc <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 80018b6:	f000 f915 	bl	8001ae4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
}
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	58000c00 	.word	0x58000c00

080018c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018c8:	2102      	movs	r1, #2
 80018ca:	4822      	ldr	r0, [pc, #136]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018cc:	f7ff ff97 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d109      	bne.n	80018ea <HW_IPCC_Tx_Handler+0x26>
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	43db      	mvns	r3, r3
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80018e4:	f000 f8a6 	bl	8001a34 <HW_IPCC_SYS_CmdEvtHandler>
 80018e8:	e031      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80018ea:	2102      	movs	r1, #2
 80018ec:	4819      	ldr	r0, [pc, #100]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018ee:	f7ff ff86 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HW_IPCC_Tx_Handler+0x48>
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d002      	beq.n	800190c <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8001906:	f000 f895 	bl	8001a34 <HW_IPCC_SYS_CmdEvtHandler>
 800190a:	e020      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800190c:	2108      	movs	r1, #8
 800190e:	4811      	ldr	r0, [pc, #68]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 8001910:	f7ff ff75 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HW_IPCC_Tx_Handler+0x6a>
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	43db      	mvns	r3, r3
 8001920:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d002      	beq.n	800192e <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 8001928:	f000 f8be 	bl	8001aa8 <HW_IPCC_MM_FreeBufHandler>
 800192c:	e00f      	b.n	800194e <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800192e:	2120      	movs	r1, #32
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 8001932:	f7ff ff64 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d109      	bne.n	8001950 <HW_IPCC_Tx_Handler+0x8c>
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HW_IPCC_Tx_Handler+0x90>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	43db      	mvns	r3, r3
 8001942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d002      	beq.n	8001950 <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800194a:	f000 f84f 	bl	80019ec <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800194e:	bf00      	nop
 8001950:	bf00      	nop
}
 8001952:	bd80      	pop	{r7, pc}
 8001954:	58000c00 	.word	0x58000c00

08001958 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800195c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001960:	f7ff febd 	bl	80016de <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8001964:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001968:	f7ff fe7a 	bl	8001660 <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800196c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001970:	f7ff fe8a 	bl	8001688 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8001974:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8001976:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8001978:	f7ff fe62 	bl	8001640 <LL_PWR_EnableBootC2>

  return;
 800197c:	bf00      	nop
}
 800197e:	bd80      	pop	{r7, pc}

08001980 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8001984:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001988:	f7ff fe90 	bl	80016ac <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <HW_IPCC_Init+0x28>)
 800198e:	f7ff fed2 	bl	8001736 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HW_IPCC_Init+0x28>)
 8001994:	f7ff febf 	bl	8001716 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8001998:	202c      	movs	r0, #44	; 0x2c
 800199a:	f006 f9fb 	bl	8007d94 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800199e:	202d      	movs	r0, #45	; 0x2d
 80019a0:	f006 f9f8 	bl	8007d94 <HAL_NVIC_EnableIRQ>

  return;
 80019a4:	bf00      	nop
}
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	58000c00 	.word	0x58000c00

080019ac <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80019b0:	2101      	movs	r1, #1
 80019b2:	4802      	ldr	r0, [pc, #8]	; (80019bc <HW_IPCC_BLE_Init+0x10>)
 80019b4:	f7ff fef4 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80019b8:	bf00      	nop
}
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	58000c00 	.word	0x58000c00

080019c0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80019c4:	2101      	movs	r1, #1
 80019c6:	4802      	ldr	r0, [pc, #8]	; (80019d0 <HW_IPCC_BLE_SendCmd+0x10>)
 80019c8:	f7ff ff0a 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 80019cc:	bf00      	nop
}
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	58000c00 	.word	0x58000c00

080019d4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80019d8:	f00c ff14 	bl	800e804 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80019dc:	2101      	movs	r1, #1
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80019e0:	f7ff fef0 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80019e4:	bf00      	nop
}
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	58000c00 	.word	0x58000c00

080019ec <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80019f0:	2120      	movs	r1, #32
 80019f2:	4803      	ldr	r0, [pc, #12]	; (8001a00 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80019f4:	f7ff fec2 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80019f8:	f00c ff34 	bl	800e864 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80019fc:	bf00      	nop
}
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	58000c00 	.word	0x58000c00

08001a04 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a08:	2102      	movs	r1, #2
 8001a0a:	4802      	ldr	r0, [pc, #8]	; (8001a14 <HW_IPCC_SYS_Init+0x10>)
 8001a0c:	f7ff fec8 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001a10:	bf00      	nop
}
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	58000c00 	.word	0x58000c00

08001a18 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	4804      	ldr	r0, [pc, #16]	; (8001a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a20:	f7ff fede 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a24:	2102      	movs	r1, #2
 8001a26:	4802      	ldr	r0, [pc, #8]	; (8001a30 <HW_IPCC_SYS_SendCmd+0x18>)
 8001a28:	f7ff fe95 	bl	8001756 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8001a2c:	bf00      	nop
}
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	58000c00 	.word	0x58000c00

08001a34 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8001a38:	2102      	movs	r1, #2
 8001a3a:	4803      	ldr	r0, [pc, #12]	; (8001a48 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8001a3c:	f7ff fe9e 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8001a40:	f00c ff60 	bl	800e904 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8001a44:	bf00      	nop
}
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	58000c00 	.word	0x58000c00

08001a4c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8001a50:	f00c ff6e 	bl	800e930 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8001a54:	2102      	movs	r1, #2
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <HW_IPCC_SYS_EvtHandler+0x14>)
 8001a58:	f7ff feb4 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001a5c:	bf00      	nop
}
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	58000c00 	.word	0x58000c00

08001a64 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8001a6c:	2108      	movs	r1, #8
 8001a6e:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a70:	f7ff fec5 	bl	80017fe <LL_C1_IPCC_IsActiveFlag_CHx>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8001a7a:	4a0a      	ldr	r2, [pc, #40]	; (8001aa4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001a80:	2108      	movs	r1, #8
 8001a82:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a84:	f7ff fe67 	bl	8001756 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8001a88:	e006      	b.n	8001a98 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001a8e:	2108      	movs	r1, #8
 8001a90:	4803      	ldr	r0, [pc, #12]	; (8001aa0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8001a92:	f7ff fea5 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8001a96:	bf00      	nop
}
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	58000c00 	.word	0x58000c00
 8001aa4:	20000394 	.word	0x20000394

08001aa8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001aac:	2108      	movs	r1, #8
 8001aae:	4806      	ldr	r0, [pc, #24]	; (8001ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001ab0:	f7ff fe64 	bl	800177c <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8001ab4:	4b05      	ldr	r3, [pc, #20]	; (8001acc <HW_IPCC_MM_FreeBufHandler+0x24>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8001aba:	2108      	movs	r1, #8
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8001abe:	f7ff fe8f 	bl	80017e0 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8001ac2:	bf00      	nop
}
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	58000c00 	.word	0x58000c00
 8001acc:	20000394 	.word	0x20000394

08001ad0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001ad4:	2108      	movs	r1, #8
 8001ad6:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <HW_IPCC_TRACES_Init+0x10>)
 8001ad8:	f7ff fe62 	bl	80017a0 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8001adc:	bf00      	nop
}
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	58000c00 	.word	0x58000c00

08001ae4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8001ae8:	f00c ffca 	bl	800ea80 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8001aec:	2108      	movs	r1, #8
 8001aee:	4802      	ldr	r0, [pc, #8]	; (8001af8 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8001af0:	f7ff fe68 	bl	80017c4 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8001af4:	bf00      	nop
}
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	58000c00 	.word	0x58000c00

08001afc <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8001afc:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afe:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b00:	3304      	adds	r3, #4

08001b02 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b02:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b04:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8001b06:	d3f9      	bcc.n	8001afc <CopyDataInit>
  bx lr
 8001b08:	4770      	bx	lr

08001b0a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8001b0a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8001b0c:	3004      	adds	r0, #4

08001b0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8001b0e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8001b10:	d3fb      	bcc.n	8001b0a <FillZerobss>
  bx lr
 8001b12:	4770      	bx	lr

08001b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001b16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b18:	f005 ff32 	bl	8007980 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <LoopForever+0x8>)
 8001b1e:	490c      	ldr	r1, [pc, #48]	; (8001b50 <LoopForever+0xc>)
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <LoopForever+0x10>)
 8001b22:	2300      	movs	r3, #0
 8001b24:	f7ff ffed 	bl	8001b02 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001b28:	480b      	ldr	r0, [pc, #44]	; (8001b58 <LoopForever+0x14>)
 8001b2a:	490c      	ldr	r1, [pc, #48]	; (8001b5c <LoopForever+0x18>)
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	f7ff ffee 	bl	8001b0e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b32:	480b      	ldr	r0, [pc, #44]	; (8001b60 <LoopForever+0x1c>)
 8001b34:	490b      	ldr	r1, [pc, #44]	; (8001b64 <LoopForever+0x20>)
 8001b36:	2300      	movs	r3, #0
 8001b38:	f7ff ffe9 	bl	8001b0e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001b3c:	f012 f8fa 	bl	8013d34 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8001b40:	f002 f9f6 	bl	8003f30 <main>

08001b44 <LoopForever>:

LoopForever:
  b LoopForever
 8001b44:	e7fe      	b.n	8001b44 <LoopForever>
 8001b46:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001b48:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	200001f8 	.word	0x200001f8
 8001b54:	08019bc8 	.word	0x08019bc8
  INIT_BSS _sbss, _ebss
 8001b58:	20000370 	.word	0x20000370
 8001b5c:	2002e3f4 	.word	0x2002e3f4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8001b60:	200301e0 	.word	0x200301e0
 8001b64:	20030a57 	.word	0x20030a57

08001b68 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC1_IRQHandler>
	...

08001b6c <LL_EXTI_EnableIT_32_63>:
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b76:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001b7a:	4905      	ldr	r1, [pc, #20]	; (8001b90 <LL_EXTI_EnableIT_32_63+0x24>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	58000800 	.word	0x58000800

08001b94 <LL_AHB2_GRP1_EnableClock>:
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001b9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ba0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ba2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
}
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <LL_C2_AHB2_GRP1_EnableClock>:
{
 8001bc6:	b480      	push	{r7}
 8001bc8:	b085      	sub	sp, #20
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8001bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd2:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001bd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8001be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4013      	ands	r3, r2
 8001bee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8001c02:	f005 ff8b 	bl	8007b1c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8001c06:	f005 ff8f 	bl	8007b28 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8001c0a:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8001c0e:	f7ff ffad 	bl	8001b6c <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8001c12:	f00d f911 	bl	800ee38 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8001c16:	f000 f821 	bl	8001c5c <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8001c1a:	f000 f8bf 	bl	8001d9c <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8001c1e:	bf00      	nop
}
 8001c20:	bd80      	pop	{r7, pc}
	...

08001c24 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8001c24:	b5b0      	push	{r4, r5, r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <APPD_EnableCPU2+0x34>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	461d      	mov	r5, r3
 8001c30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c34:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001c38:	c403      	stmia	r4!, {r0, r1}
 8001c3a:	8022      	strh	r2, [r4, #0]
 8001c3c:	3402      	adds	r4, #2
 8001c3e:	0c13      	lsrs	r3, r2, #16
 8001c40:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8001c42:	f00c ff0b 	bl	800ea5c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f00c fa6a 	bl	800e122 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8001c4e:	bf00      	nop
}
 8001c50:	3720      	adds	r7, #32
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bdb0      	pop	{r4, r5, r7, pc}
 8001c56:	bf00      	nop
 8001c58:	080182f0 	.word	0x080182f0

08001c5c <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b088      	sub	sp, #32
 8001c60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	77fb      	strb	r3, [r7, #31]
 8001c80:	e033      	b.n	8001cea <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8001c82:	7ffb      	ldrb	r3, [r7, #31]
 8001c84:	4a42      	ldr	r2, [pc, #264]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001c86:	00db      	lsls	r3, r3, #3
 8001c88:	4413      	add	r3, r2
 8001c8a:	799b      	ldrb	r3, [r3, #6]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d028      	beq.n	8001ce2 <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001c90:	7ffb      	ldrb	r3, [r7, #31]
 8001c92:	4a3f      	ldr	r2, [pc, #252]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001c94:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c98:	4a3e      	ldr	r2, [pc, #248]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00f      	beq.n	8001cbe <APPD_SetCPU2GpioConfig+0x62>
 8001c9e:	4a3e      	ldr	r2, [pc, #248]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d015      	beq.n	8001cd0 <APPD_SetCPU2GpioConfig+0x74>
 8001ca4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ca8:	d000      	beq.n	8001cac <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001caa:	e01b      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8001cac:	7ffb      	ldrb	r3, [r7, #31]
 8001cae:	4a38      	ldr	r2, [pc, #224]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	4413      	add	r3, r2
 8001cb4:	889a      	ldrh	r2, [r3, #4]
 8001cb6:	8bbb      	ldrh	r3, [r7, #28]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	83bb      	strh	r3, [r7, #28]
          break;
 8001cbc:	e012      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8001cbe:	7ffb      	ldrb	r3, [r7, #31]
 8001cc0:	4a33      	ldr	r2, [pc, #204]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cc2:	00db      	lsls	r3, r3, #3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	889a      	ldrh	r2, [r3, #4]
 8001cc8:	8b7b      	ldrh	r3, [r7, #26]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	837b      	strh	r3, [r7, #26]
          break;
 8001cce:	e009      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8001cd0:	7ffb      	ldrb	r3, [r7, #31]
 8001cd2:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <APPD_SetCPU2GpioConfig+0x134>)
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4413      	add	r3, r2
 8001cd8:	889a      	ldrh	r2, [r3, #4]
 8001cda:	8b3b      	ldrh	r3, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	833b      	strh	r3, [r7, #24]
          break;
 8001ce0:	e000      	b.n	8001ce4 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 8001ce2:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001ce4:	7ffb      	ldrb	r3, [r7, #31]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]
 8001cea:	7ffb      	ldrb	r3, [r7, #31]
 8001cec:	2b21      	cmp	r3, #33	; 0x21
 8001cee:	d9c8      	bls.n	8001c82 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 8001cfc:	8bbb      	ldrh	r3, [r7, #28]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d014      	beq.n	8001d2c <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001d02:	8bbb      	ldrh	r3, [r7, #28]
 8001d04:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2001      	movs	r0, #1
 8001d08:	f7ff ff44 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff ff5a 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001d12:	1d3b      	adds	r3, r7, #4
 8001d14:	4619      	mov	r1, r3
 8001d16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d1a:	f006 f873 	bl	8007e04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 8001d1e:	8bbb      	ldrh	r3, [r7, #28]
 8001d20:	2200      	movs	r2, #0
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d28:	f006 f9f4 	bl	8008114 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 8001d2c:	8b7b      	ldrh	r3, [r7, #26]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d012      	beq.n	8001d58 <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001d32:	8b7b      	ldrh	r3, [r7, #26]
 8001d34:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2002      	movs	r0, #2
 8001d38:	f7ff ff2c 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8001d3c:	2002      	movs	r0, #2
 8001d3e:	f7ff ff42 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	4619      	mov	r1, r3
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001d48:	f006 f85c 	bl	8007e04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8001d4c:	8b7b      	ldrh	r3, [r7, #26]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	4619      	mov	r1, r3
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <APPD_SetCPU2GpioConfig+0x138>)
 8001d54:	f006 f9de 	bl	8008114 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001d58:	8b3b      	ldrh	r3, [r7, #24]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d013      	beq.n	8001d86 <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 8001d5e:	8b3b      	ldrh	r3, [r7, #24]
 8001d60:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d62:	2004      	movs	r0, #4
 8001d64:	f7ff ff16 	bl	8001b94 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001d68:	2004      	movs	r0, #4
 8001d6a:	f7ff ff2c 	bl	8001bc6 <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8001d6e:	1d3b      	adds	r3, r7, #4
 8001d70:	4619      	mov	r1, r3
 8001d72:	4809      	ldr	r0, [pc, #36]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d74:	f006 f846 	bl	8007e04 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001d78:	8b3b      	ldrh	r3, [r7, #24]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4806      	ldr	r0, [pc, #24]	; (8001d98 <APPD_SetCPU2GpioConfig+0x13c>)
 8001d80:	f006 f9c8 	bl	8008114 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
}
 8001d88:	3720      	adds	r7, #32
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	08018768 	.word	0x08018768
 8001d94:	48000400 	.word	0x48000400
 8001d98:	48000800 	.word	0x48000800

08001d9c <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8001da0:	bf00      	nop
}
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001daa:	b480      	push	{r7}
 8001dac:	af00      	add	r7, sp, #0
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8001dae:	bf00      	nop
}
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001dc6:	897a      	ldrh	r2, [r7, #10]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68f9      	ldr	r1, [r7, #12]
 8001dcc:	2000      	movs	r0, #0
 8001dce:	f001 fccf 	bl	8003770 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8001dd2:	bf00      	nop
}
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001de4:	4b07      	ldr	r3, [pc, #28]	; (8001e04 <LL_C2_PWR_SetPowerMode+0x28>)
 8001de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dea:	f023 0207 	bic.w	r2, r3, #7
 8001dee:	4905      	ldr	r1, [pc, #20]	; (8001e04 <LL_C2_PWR_SetPowerMode+0x28>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	58000400 	.word	0x58000400

08001e08 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001e10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001e1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	608b      	str	r3, [r1, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 8001e34:	f000 f814 	bl	8001e60 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001e38:	4908      	ldr	r1, [pc, #32]	; (8001e5c <APPE_Init+0x2c>)
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f001 fa1e 	bl	800327c <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8001e40:	f7ff fedd 	bl	8001bfe <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001e44:	2101      	movs	r1, #1
 8001e46:	2001      	movs	r0, #1
 8001e48:	f011 ff40 	bl	8013ccc <UTIL_LPM_SetOffMode>

  Led_Init();
 8001e4c:	f000 f8a1 	bl	8001f92 <Led_Init>

  Button_Init();
 8001e50:	f000 f8a6 	bl	8001fa0 <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001e54:	f000 f812 	bl	8001e7c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001e58:	bf00      	nop
}
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	2002e0a4 	.word	0x2002e0a4

08001e60 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001e64:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e68:	f7ff ffce 	bl	8001e08 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001e6c:	f011 ff1c 	bl	8013ca8 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001e70:	2004      	movs	r0, #4
 8001e72:	f7ff ffb3 	bl	8001ddc <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8001e76:	bf00      	nop
}
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b088      	sub	sp, #32
 8001e80:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8001e82:	f00c fc35 	bl	800e6f0 <TL_Init>

  MtxShciId = osMutexNew( NULL );
 8001e86:	2000      	movs	r0, #0
 8001e88:	f00d ff6a 	bl	800fd60 <osMutexNew>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	4b17      	ldr	r3, [pc, #92]	; (8001eec <appe_Tl_Init+0x70>)
 8001e90:	601a      	str	r2, [r3, #0]
  SemShciId = osSemaphoreNew( 1, 0, NULL ); /*< Create the semaphore and make it busy at initialization */
 8001e92:	2200      	movs	r2, #0
 8001e94:	2100      	movs	r1, #0
 8001e96:	2001      	movs	r0, #1
 8001e98:	f00e f8aa 	bl	800fff0 <osSemaphoreNew>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <appe_Tl_Init+0x74>)
 8001ea0:	601a      	str	r2, [r3, #0]

  /** FreeRTOS system task creation */
  ShciUserEvtProcessId = osThreadNew(ShciUserEvtProcess, NULL, &ShciUserEvtProcess_attr);
 8001ea2:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <appe_Tl_Init+0x78>)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <appe_Tl_Init+0x7c>)
 8001ea8:	f00d fd90 	bl	800f9cc <osThreadNew>
 8001eac:	4602      	mov	r2, r0
 8001eae:	4b13      	ldr	r3, [pc, #76]	; (8001efc <appe_Tl_Init+0x80>)
 8001eb0:	601a      	str	r2, [r3, #0]

  /**< System channel initialization */
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <appe_Tl_Init+0x84>)
 8001eb4:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <appe_Tl_Init+0x88>)
 8001eb8:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001eba:	463b      	mov	r3, r7
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4812      	ldr	r0, [pc, #72]	; (8001f08 <appe_Tl_Init+0x8c>)
 8001ec0:	f00c fadc 	bl	800e47c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <appe_Tl_Init+0x90>)
 8001ec6:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001ec8:	4b11      	ldr	r3, [pc, #68]	; (8001f10 <appe_Tl_Init+0x94>)
 8001eca:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <appe_Tl_Init+0x98>)
 8001ece:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001ed0:	f240 533c 	movw	r3, #1340	; 0x53c
 8001ed4:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8001ed6:	f107 0308 	add.w	r3, r7, #8
 8001eda:	4618      	mov	r0, r3
 8001edc:	f00c fd4a 	bl	800e974 <TL_MM_Init>

  TL_Enable();
 8001ee0:	f00c fc00 	bl	800e6e4 <TL_Enable>

  return;
 8001ee4:	bf00      	nop
}
 8001ee6:	3720      	adds	r7, #32
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	2002e1b8 	.word	0x2002e1b8
 8001ef0:	2002e1c0 	.word	0x2002e1c0
 8001ef4:	08018878 	.word	0x08018878
 8001ef8:	08001f79 	.word	0x08001f79
 8001efc:	2002e1bc 	.word	0x2002e1bc
 8001f00:	20030724 	.word	0x20030724
 8001f04:	08001f19 	.word	0x08001f19
 8001f08:	08001f59 	.word	0x08001f59
 8001f0c:	2003093c 	.word	0x2003093c
 8001f10:	20030830 	.word	0x20030830
 8001f14:	200301e8 	.word	0x200301e8

08001f18 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
  switch (status)
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d002      	beq.n	8001f2e <APPE_SysStatusNot+0x16>
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d008      	beq.n	8001f3e <APPE_SysStatusNot+0x26>
    case SHCI_TL_CmdAvailable:
      osMutexRelease( MtxShciId );
      break;

    default:
      break;
 8001f2c:	e00d      	b.n	8001f4a <APPE_SysStatusNot+0x32>
      osMutexAcquire( MtxShciId, osWaitForever );
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <APPE_SysStatusNot+0x3c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f04f 31ff 	mov.w	r1, #4294967295
 8001f36:	4618      	mov	r0, r3
 8001f38:	f00d ffac 	bl	800fe94 <osMutexAcquire>
      break;
 8001f3c:	e005      	b.n	8001f4a <APPE_SysStatusNot+0x32>
      osMutexRelease( MtxShciId );
 8001f3e:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <APPE_SysStatusNot+0x3c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00e f804 	bl	800ff50 <osMutexRelease>
      break;
 8001f48:	bf00      	nop
  }
  return;
 8001f4a:	bf00      	nop
}
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	2002e1b8 	.word	0x2002e1b8

08001f58 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 8001f60:	f7ff fe60 	bl	8001c24 <APPD_EnableCPU2>

  APP_BLE_Init( );
 8001f64:	f7fe fe6c 	bl	8000c40 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001f68:	2100      	movs	r1, #0
 8001f6a:	2001      	movs	r0, #1
 8001f6c:	f011 feae 	bl	8013ccc <UTIL_LPM_SetOffMode>
  return;
 8001f70:	bf00      	nop
}
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <ShciUserEvtProcess>:
 *
 * FREERTOS WRAPPER FUNCTIONS
 *
*************************************************************/
static void ShciUserEvtProcess(void *argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    /* USER CODE BEGIN SHCI_USER_EVT_PROCESS_1 */

    /* USER CODE END SHCI_USER_EVT_PROCESS_1 */
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001f80:	f04f 32ff 	mov.w	r2, #4294967295
 8001f84:	2100      	movs	r1, #0
 8001f86:	2001      	movs	r0, #1
 8001f88:	f00d fe28 	bl	800fbdc <osThreadFlagsWait>
     shci_user_evt_proc();
 8001f8c:	f00c fa92 	bl	800e4b4 <shci_user_evt_proc>
     osThreadFlagsWait(1, osFlagsWaitAny, osWaitForever);
 8001f90:	e7f6      	b.n	8001f80 <ShciUserEvtProcess+0x8>

08001f92 <Led_Init>:
    }
}

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 8001f92:	b480      	push	{r7}
 8001f94:	af00      	add	r7, sp, #0
  BSP_LED_Init(LED_RED);

  BSP_LED_On(LED_GREEN);
#endif

  return;
 8001f96:	bf00      	nop
}
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <Button_Init>:

static void Button_Init( void )
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
#endif

  return;
 8001fa4:	bf00      	nop
}
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <shci_notify_asynch_evt>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void shci_notify_asynch_evt(void* pdata)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  osThreadFlagsSet( ShciUserEvtProcessId, 1 );
 8001fb8:	4b04      	ldr	r3, [pc, #16]	; (8001fcc <shci_notify_asynch_evt+0x1c>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f00d fdaa 	bl	800fb18 <osThreadFlagsSet>
  return;
 8001fc4:	bf00      	nop
}
 8001fc6:	3708      	adds	r7, #8
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2002e1bc 	.word	0x2002e1bc

08001fd0 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  osSemaphoreRelease( SemShciId );
 8001fd8:	4b04      	ldr	r3, [pc, #16]	; (8001fec <shci_cmd_resp_release+0x1c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f00e f90b 	bl	80101f8 <osSemaphoreRelease>
  return;
 8001fe2:	bf00      	nop
}
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	2002e1c0 	.word	0x2002e1c0

08001ff0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  osSemaphoreAcquire( SemShciId, osWaitForever );
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <shci_cmd_resp_wait+0x20>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8002000:	4618      	mov	r0, r3
 8002002:	f00e f893 	bl	801012c <osSemaphoreAcquire>
  return;
 8002006:	bf00      	nop
}
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2002e1c0 	.word	0x2002e1c0

08002014 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a23      	ldr	r2, [pc, #140]	; (80020b0 <Dotstar_Init+0x9c>)
 8002022:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	889a      	ldrh	r2, [r3, #4]
 8002028:	4b21      	ldr	r3, [pc, #132]	; (80020b0 <Dotstar_Init+0x9c>)
 800202a:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 800202c:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <Dotstar_Init+0x9c>)
 800202e:	2200      	movs	r2, #0
 8002030:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	799b      	ldrb	r3, [r3, #6]
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b1c      	ldr	r3, [pc, #112]	; (80020b0 <Dotstar_Init+0x9c>)
 800203e:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	799b      	ldrb	r3, [r3, #6]
 8002044:	089b      	lsrs	r3, r3, #2
 8002046:	b2db      	uxtb	r3, r3
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	b2da      	uxtb	r2, r3
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <Dotstar_Init+0x9c>)
 8002050:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	799b      	ldrb	r3, [r3, #6]
 8002056:	091b      	lsrs	r3, r3, #4
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	b2da      	uxtb	r2, r3
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <Dotstar_Init+0x9c>)
 8002062:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <Dotstar_Init+0x9c>)
 8002066:	7b1a      	ldrb	r2, [r3, #12]
 8002068:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <Dotstar_Init+0x9c>)
 800206a:	7b5b      	ldrb	r3, [r3, #13]
 800206c:	429a      	cmp	r2, r3
 800206e:	d10c      	bne.n	800208a <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8002070:	4b0f      	ldr	r3, [pc, #60]	; (80020b0 <Dotstar_Init+0x9c>)
 8002072:	889a      	ldrh	r2, [r3, #4]
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <Dotstar_Init+0x9c>)
 8002076:	889b      	ldrh	r3, [r3, #4]
 8002078:	3303      	adds	r3, #3
 800207a:	2b00      	cmp	r3, #0
 800207c:	da00      	bge.n	8002080 <Dotstar_Init+0x6c>
 800207e:	3303      	adds	r3, #3
 8002080:	109b      	asrs	r3, r3, #2
 8002082:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	e005      	b.n	8002096 <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <Dotstar_Init+0x9c>)
 800208c:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 800208e:	461a      	mov	r2, r3
 8002090:	0052      	lsls	r2, r2, #1
 8002092:	4413      	add	r3, r2
 8002094:	b29b      	uxth	r3, r3
 8002096:	81fb      	strh	r3, [r7, #14]

   //dotstar_state.pixels = (uint8_t *)malloc(bytes);
   dotstar_state.pixels = (uint8_t *)pvPortMalloc(bytes);
 8002098:	89fb      	ldrh	r3, [r7, #14]
 800209a:	4618      	mov	r0, r3
 800209c:	f00e fce8 	bl	8010a70 <pvPortMalloc>
 80020a0:	4603      	mov	r3, r0
 80020a2:	461a      	mov	r2, r3
 80020a4:	4b02      	ldr	r3, [pc, #8]	; (80020b0 <Dotstar_Init+0x9c>)
 80020a6:	609a      	str	r2, [r3, #8]
}
 80020a8:	bf00      	nop
 80020aa:	3710      	adds	r7, #16
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	2002e1c4 	.word	0x2002e1c4

080020b4 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b084      	sub	sp, #16
 80020b8:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 80020ba:	4b4b      	ldr	r3, [pc, #300]	; (80021e8 <ds_show+0x134>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f000 808e 	beq.w	80021e0 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 80020c4:	4b48      	ldr	r3, [pc, #288]	; (80021e8 <ds_show+0x134>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <ds_show+0x134>)
 80020cc:	889b      	ldrh	r3, [r3, #4]
 80020ce:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 80020d0:	4b45      	ldr	r3, [pc, #276]	; (80021e8 <ds_show+0x134>)
 80020d2:	799b      	ldrb	r3, [r3, #6]
 80020d4:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 80020d6:	2300      	movs	r3, #0
 80020d8:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 80020da:	2300      	movs	r3, #0
 80020dc:	72fb      	strb	r3, [r7, #11]
 80020de:	e00a      	b.n	80020f6 <ds_show+0x42>
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <ds_show+0x134>)
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	1d79      	adds	r1, r7, #5
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
 80020ea:	2201      	movs	r2, #1
 80020ec:	f009 fa59 	bl	800b5a2 <HAL_SPI_Transmit>
 80020f0:	7afb      	ldrb	r3, [r7, #11]
 80020f2:	3301      	adds	r3, #1
 80020f4:	72fb      	strb	r3, [r7, #11]
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b03      	cmp	r3, #3
 80020fa:	d9f1      	bls.n	80020e0 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 80020fc:	4b3a      	ldr	r3, [pc, #232]	; (80021e8 <ds_show+0x134>)
 80020fe:	799b      	ldrb	r3, [r3, #6]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d02c      	beq.n	800215e <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8002104:	23ff      	movs	r3, #255	; 0xff
 8002106:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002108:	4b37      	ldr	r3, [pc, #220]	; (80021e8 <ds_show+0x134>)
 800210a:	6818      	ldr	r0, [r3, #0]
 800210c:	1d79      	adds	r1, r7, #5
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	2201      	movs	r2, #1
 8002114:	f009 fa45 	bl	800b5a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002118:	2300      	movs	r3, #0
 800211a:	72fb      	strb	r3, [r7, #11]
 800211c:	e015      	b.n	800214a <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60fa      	str	r2, [r7, #12]
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	88fb      	ldrh	r3, [r7, #6]
 800212a:	fb03 f302 	mul.w	r3, r3, r2
 800212e:	121b      	asrs	r3, r3, #8
 8002130:	b2db      	uxtb	r3, r3
 8002132:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8002134:	4b2c      	ldr	r3, [pc, #176]	; (80021e8 <ds_show+0x134>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	1d79      	adds	r1, r7, #5
 800213a:	f04f 33ff 	mov.w	r3, #4294967295
 800213e:	2201      	movs	r2, #1
 8002140:	f009 fa2f 	bl	800b5a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002144:	7afb      	ldrb	r3, [r7, #11]
 8002146:	3301      	adds	r3, #1
 8002148:	72fb      	strb	r3, [r7, #11]
 800214a:	7afb      	ldrb	r3, [r7, #11]
 800214c:	2b02      	cmp	r3, #2
 800214e:	d9e6      	bls.n	800211e <ds_show+0x6a>
        }
      } while(--n);
 8002150:	893b      	ldrh	r3, [r7, #8]
 8002152:	3b01      	subs	r3, #1
 8002154:	813b      	strh	r3, [r7, #8]
 8002156:	893b      	ldrh	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d1d3      	bne.n	8002104 <ds_show+0x50>
 800215c:	e025      	b.n	80021aa <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8002162:	4b21      	ldr	r3, [pc, #132]	; (80021e8 <ds_show+0x134>)
 8002164:	6818      	ldr	r0, [r3, #0]
 8002166:	1d79      	adds	r1, r7, #5
 8002168:	f04f 33ff 	mov.w	r3, #4294967295
 800216c:	2201      	movs	r2, #1
 800216e:	f009 fa18 	bl	800b5a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002172:	2300      	movs	r3, #0
 8002174:	72fb      	strb	r3, [r7, #11]
 8002176:	e00f      	b.n	8002198 <ds_show+0xe4>
        	sendval = *ptr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	60fa      	str	r2, [r7, #12]
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 8002182:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <ds_show+0x134>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	1d79      	adds	r1, r7, #5
 8002188:	f04f 33ff 	mov.w	r3, #4294967295
 800218c:	2201      	movs	r2, #1
 800218e:	f009 fa08 	bl	800b5a2 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8002192:	7afb      	ldrb	r3, [r7, #11]
 8002194:	3301      	adds	r3, #1
 8002196:	72fb      	strb	r3, [r7, #11]
 8002198:	7afb      	ldrb	r3, [r7, #11]
 800219a:	2b02      	cmp	r3, #2
 800219c:	d9ec      	bls.n	8002178 <ds_show+0xc4>
        }
      } while(--n);
 800219e:	893b      	ldrh	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	813b      	strh	r3, [r7, #8]
 80021a4:	893b      	ldrh	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1d9      	bne.n	800215e <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 80021aa:	23ff      	movs	r3, #255	; 0xff
 80021ac:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 80021ae:	2300      	movs	r3, #0
 80021b0:	72fb      	strb	r3, [r7, #11]
 80021b2:	e00a      	b.n	80021ca <ds_show+0x116>
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <ds_show+0x134>)
 80021b6:	6818      	ldr	r0, [r3, #0]
 80021b8:	1d79      	adds	r1, r7, #5
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295
 80021be:	2201      	movs	r2, #1
 80021c0:	f009 f9ef 	bl	800b5a2 <HAL_SPI_Transmit>
 80021c4:	7afb      	ldrb	r3, [r7, #11]
 80021c6:	3301      	adds	r3, #1
 80021c8:	72fb      	strb	r3, [r7, #11]
 80021ca:	7afa      	ldrb	r2, [r7, #11]
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <ds_show+0x134>)
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	330f      	adds	r3, #15
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	da00      	bge.n	80021d8 <ds_show+0x124>
 80021d6:	330f      	adds	r3, #15
 80021d8:	111b      	asrs	r3, r3, #4
 80021da:	429a      	cmp	r2, r3
 80021dc:	dbea      	blt.n	80021b4 <ds_show+0x100>
 80021de:	e000      	b.n	80021e2 <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 80021e0:	bf00      	nop

}
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	2002e1c4 	.word	0x2002e1c4

080021ec <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 80021f0:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <ds_clear+0x44>)
 80021f2:	6898      	ldr	r0, [r3, #8]
 80021f4:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <ds_clear+0x44>)
 80021f6:	7b1a      	ldrb	r2, [r3, #12]
 80021f8:	4b0d      	ldr	r3, [pc, #52]	; (8002230 <ds_clear+0x44>)
 80021fa:	7b5b      	ldrb	r3, [r3, #13]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d10b      	bne.n	8002218 <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8002200:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <ds_clear+0x44>)
 8002202:	889b      	ldrh	r3, [r3, #4]
 8002204:	461a      	mov	r2, r3
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <ds_clear+0x44>)
 8002208:	889b      	ldrh	r3, [r3, #4]
 800220a:	3303      	adds	r3, #3
 800220c:	2b00      	cmp	r3, #0
 800220e:	da00      	bge.n	8002212 <ds_clear+0x26>
 8002210:	3303      	adds	r3, #3
 8002212:	109b      	asrs	r3, r3, #2
 8002214:	4413      	add	r3, r2
 8002216:	e005      	b.n	8002224 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <ds_clear+0x44>)
 800221a:	889b      	ldrh	r3, [r3, #4]
 800221c:	461a      	mov	r2, r3
 800221e:	4613      	mov	r3, r2
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8002224:	461a      	mov	r2, r3
 8002226:	2100      	movs	r1, #0
 8002228:	f011 fdb3 	bl	8013d92 <memset>
}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	2002e1c4 	.word	0x2002e1c4

08002234 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	6039      	str	r1, [r7, #0]
 800223e:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 8002240:	4b16      	ldr	r3, [pc, #88]	; (800229c <ds_setPixelColor32B+0x68>)
 8002242:	889b      	ldrh	r3, [r3, #4]
 8002244:	88fa      	ldrh	r2, [r7, #6]
 8002246:	429a      	cmp	r2, r3
 8002248:	d221      	bcs.n	800228e <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 800224a:	4b14      	ldr	r3, [pc, #80]	; (800229c <ds_setPixelColor32B+0x68>)
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	440b      	add	r3, r1
 8002258:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	0c1a      	lsrs	r2, r3, #16
 800225e:	4b0f      	ldr	r3, [pc, #60]	; (800229c <ds_setPixelColor32B+0x68>)
 8002260:	7b1b      	ldrb	r3, [r3, #12]
 8002262:	4619      	mov	r1, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	440b      	add	r3, r1
 8002268:	b2d2      	uxtb	r2, r2
 800226a:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	0a1a      	lsrs	r2, r3, #8
 8002270:	4b0a      	ldr	r3, [pc, #40]	; (800229c <ds_setPixelColor32B+0x68>)
 8002272:	7b5b      	ldrb	r3, [r3, #13]
 8002274:	4619      	mov	r1, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	440b      	add	r3, r1
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 800227e:	4b07      	ldr	r3, [pc, #28]	; (800229c <ds_setPixelColor32B+0x68>)
 8002280:	7b9b      	ldrb	r3, [r3, #14]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
  }
}
 800228e:	bf00      	nop
 8002290:	3714      	adds	r7, #20
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	2002e1c4 	.word	0x2002e1c4

080022a0 <ds_fill>:
  @param   first  Index of first pixel to fill, starting from 0. Must be
                  in-bounds, no clipping is performed. 0 if unspecified.
  @param   count  Number of pixels to fill, as a positive value. Passing
                  0 or leaving unspecified will fill to end of strip.
*/
void ds_fill(uint32_t c, uint16_t first, uint16_t count) {
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
 80022ac:	4613      	mov	r3, r2
 80022ae:	803b      	strh	r3, [r7, #0]
  uint16_t i, end;

  if(first >= dotstar_state.numLEDs) {
 80022b0:	4b15      	ldr	r3, [pc, #84]	; (8002308 <ds_fill+0x68>)
 80022b2:	889b      	ldrh	r3, [r3, #4]
 80022b4:	887a      	ldrh	r2, [r7, #2]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d222      	bcs.n	8002300 <ds_fill+0x60>
    return; // If first LED is past end of strip, nothing to do
  }

  // Calculate the index ONE AFTER the last pixel to fill
  if(count == 0) {
 80022ba:	883b      	ldrh	r3, [r7, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d103      	bne.n	80022c8 <ds_fill+0x28>
    // Fill to end of strip
    end = dotstar_state.numLEDs;
 80022c0:	4b11      	ldr	r3, [pc, #68]	; (8002308 <ds_fill+0x68>)
 80022c2:	889b      	ldrh	r3, [r3, #4]
 80022c4:	81bb      	strh	r3, [r7, #12]
 80022c6:	e00b      	b.n	80022e0 <ds_fill+0x40>
  } else {
    // Ensure that the loop won't go past the last pixel
    end = first + count;
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	883b      	ldrh	r3, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	81bb      	strh	r3, [r7, #12]
    if(end > dotstar_state.numLEDs) end = dotstar_state.numLEDs;
 80022d0:	4b0d      	ldr	r3, [pc, #52]	; (8002308 <ds_fill+0x68>)
 80022d2:	889b      	ldrh	r3, [r3, #4]
 80022d4:	89ba      	ldrh	r2, [r7, #12]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d902      	bls.n	80022e0 <ds_fill+0x40>
 80022da:	4b0b      	ldr	r3, [pc, #44]	; (8002308 <ds_fill+0x68>)
 80022dc:	889b      	ldrh	r3, [r3, #4]
 80022de:	81bb      	strh	r3, [r7, #12]
  }

  for(i = first; i < end; i++) {
 80022e0:	887b      	ldrh	r3, [r7, #2]
 80022e2:	81fb      	strh	r3, [r7, #14]
 80022e4:	e007      	b.n	80022f6 <ds_fill+0x56>
    ds_setPixelColor32B(i, c);
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ffa2 	bl	8002234 <ds_setPixelColor32B>
  for(i = first; i < end; i++) {
 80022f0:	89fb      	ldrh	r3, [r7, #14]
 80022f2:	3301      	adds	r3, #1
 80022f4:	81fb      	strh	r3, [r7, #14]
 80022f6:	89fa      	ldrh	r2, [r7, #14]
 80022f8:	89bb      	ldrh	r3, [r7, #12]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d3f3      	bcc.n	80022e6 <ds_fill+0x46>
 80022fe:	e000      	b.n	8002302 <ds_fill+0x62>
    return; // If first LED is past end of strip, nothing to do
 8002300:	bf00      	nop
  }
}
 8002302:	3710      	adds	r7, #16
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	2002e1c4 	.word	0x2002e1c4

0800230c <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	3301      	adds	r3, #1
 800231a:	b2da      	uxtb	r2, r3
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <ds_setBrightness+0x20>)
 800231e:	719a      	strb	r2, [r3, #6]
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	2002e1c4 	.word	0x2002e1c4

08002330 <I2C_Write_Byte>:
//#include "stm32wbxx_hal_i2c.h"
//#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af02      	add	r7, sp, #8
 8002336:	4603      	mov	r3, r0
 8002338:	460a      	mov	r2, r1
 800233a:	71fb      	strb	r3, [r7, #7]
 800233c:	4613      	mov	r3, r2
 800233e:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 8002340:	2378      	movs	r3, #120	; 0x78
 8002342:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 800234c:	f107 020c 	add.w	r2, r7, #12
 8002350:	89f9      	ldrh	r1, [r7, #14]
 8002352:	f04f 33ff 	mov.w	r3, #4294967295
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2302      	movs	r3, #2
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <I2C_Write_Byte+0x38>)
 800235c:	f005 ffbe 	bl	80082dc <HAL_I2C_Master_Transmit>
}
 8002360:	bf00      	nop
 8002362:	3710      	adds	r7, #16
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	2002e1e0 	.word	0x2002e1e0

0800236c <er_oled_begin>:

void er_oled_begin()
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8002370:	2100      	movs	r1, #0
 8002372:	20ae      	movs	r0, #174	; 0xae
 8002374:	f7ff ffdc 	bl	8002330 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8002378:	2100      	movs	r1, #0
 800237a:	20d5      	movs	r0, #213	; 0xd5
 800237c:	f7ff ffd8 	bl	8002330 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8002380:	2100      	movs	r1, #0
 8002382:	2080      	movs	r0, #128	; 0x80
 8002384:	f7ff ffd4 	bl	8002330 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8002388:	2100      	movs	r1, #0
 800238a:	20a8      	movs	r0, #168	; 0xa8
 800238c:	f7ff ffd0 	bl	8002330 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8002390:	2100      	movs	r1, #0
 8002392:	2027      	movs	r0, #39	; 0x27
 8002394:	f7ff ffcc 	bl	8002330 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8002398:	2100      	movs	r1, #0
 800239a:	20d3      	movs	r0, #211	; 0xd3
 800239c:	f7ff ffc8 	bl	8002330 <I2C_Write_Byte>
    command(0x00);//-not offset
 80023a0:	2100      	movs	r1, #0
 80023a2:	2000      	movs	r0, #0
 80023a4:	f7ff ffc4 	bl	8002330 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 80023a8:	2100      	movs	r1, #0
 80023aa:	20ad      	movs	r0, #173	; 0xad
 80023ac:	f7ff ffc0 	bl	8002330 <I2C_Write_Byte>
    command(0x30);//--
 80023b0:	2100      	movs	r1, #0
 80023b2:	2030      	movs	r0, #48	; 0x30
 80023b4:	f7ff ffbc 	bl	8002330 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 80023b8:	2100      	movs	r1, #0
 80023ba:	208d      	movs	r0, #141	; 0x8d
 80023bc:	f7ff ffb8 	bl	8002330 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 80023c0:	2100      	movs	r1, #0
 80023c2:	2014      	movs	r0, #20
 80023c4:	f7ff ffb4 	bl	8002330 <I2C_Write_Byte>

    command(0x40);//--set start line address
 80023c8:	2100      	movs	r1, #0
 80023ca:	2040      	movs	r0, #64	; 0x40
 80023cc:	f7ff ffb0 	bl	8002330 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 80023d0:	2100      	movs	r1, #0
 80023d2:	20a6      	movs	r0, #166	; 0xa6
 80023d4:	f7ff ffac 	bl	8002330 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 80023d8:	2100      	movs	r1, #0
 80023da:	20a4      	movs	r0, #164	; 0xa4
 80023dc:	f7ff ffa8 	bl	8002330 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 80023e0:	2100      	movs	r1, #0
 80023e2:	20a1      	movs	r0, #161	; 0xa1
 80023e4:	f7ff ffa4 	bl	8002330 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 80023e8:	2100      	movs	r1, #0
 80023ea:	20c8      	movs	r0, #200	; 0xc8
 80023ec:	f7ff ffa0 	bl	8002330 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 80023f0:	2100      	movs	r1, #0
 80023f2:	20da      	movs	r0, #218	; 0xda
 80023f4:	f7ff ff9c 	bl	8002330 <I2C_Write_Byte>
    command(0x12);
 80023f8:	2100      	movs	r1, #0
 80023fa:	2012      	movs	r0, #18
 80023fc:	f7ff ff98 	bl	8002330 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8002400:	2100      	movs	r1, #0
 8002402:	2081      	movs	r0, #129	; 0x81
 8002404:	f7ff ff94 	bl	8002330 <I2C_Write_Byte>
    command(0xaf);
 8002408:	2100      	movs	r1, #0
 800240a:	20af      	movs	r0, #175	; 0xaf
 800240c:	f7ff ff90 	bl	8002330 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8002410:	2100      	movs	r1, #0
 8002412:	20d9      	movs	r0, #217	; 0xd9
 8002414:	f7ff ff8c 	bl	8002330 <I2C_Write_Byte>
    command(0x22);
 8002418:	2100      	movs	r1, #0
 800241a:	2022      	movs	r0, #34	; 0x22
 800241c:	f7ff ff88 	bl	8002330 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8002420:	2100      	movs	r1, #0
 8002422:	20db      	movs	r0, #219	; 0xdb
 8002424:	f7ff ff84 	bl	8002330 <I2C_Write_Byte>
    command(0x20);
 8002428:	2100      	movs	r1, #0
 800242a:	2020      	movs	r0, #32
 800242c:	f7ff ff80 	bl	8002330 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8002430:	2100      	movs	r1, #0
 8002432:	20af      	movs	r0, #175	; 0xaf
 8002434:	f7ff ff7c 	bl	8002330 <I2C_Write_Byte>

}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	e007      	b.n	800245a <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4413      	add	r3, r2
 8002450:	2200      	movs	r2, #0
 8002452:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3301      	adds	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002460:	dbf3      	blt.n	800244a <er_oled_clear+0xe>
	}
}
 8002462:	bf00      	nop
 8002464:	3714      	adds	r7, #20
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr

0800246e <er_oled_clear_bottom_third>:

void er_oled_clear_bottom_third(uint8_t* buffer)
{
 800246e:	b480      	push	{r7}
 8002470:	b085      	sub	sp, #20
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 2 * WIDTH * HEIGHT / 24 + 1;i < WIDTH * HEIGHT / 8;i++)
 8002476:	23f1      	movs	r3, #241	; 0xf1
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	e007      	b.n	800248c <er_oled_clear_bottom_third+0x1e>
	{
		buffer[i] = 0;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	4413      	add	r3, r2
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
	for(i = 2 * WIDTH * HEIGHT / 24 + 1;i < WIDTH * HEIGHT / 8;i++)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3301      	adds	r3, #1
 800248a:	60fb      	str	r3, [r7, #12]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002492:	dbf3      	blt.n	800247c <er_oled_clear_bottom_third+0xe>
	}
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <er_oled_clear_bottom_half>:

void er_oled_clear_bottom_half(uint8_t* buffer)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b085      	sub	sp, #20
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
	int i;
	for(i = WIDTH * HEIGHT / 16 + 1;i < WIDTH * HEIGHT / 8;i++)
 80024a8:	23b5      	movs	r3, #181	; 0xb5
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	e007      	b.n	80024be <er_oled_clear_bottom_half+0x1e>
	{
		buffer[i] = 0;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4413      	add	r3, r2
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]
	for(i = WIDTH * HEIGHT / 16 + 1;i < WIDTH * HEIGHT / 8;i++)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	3301      	adds	r3, #1
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80024c4:	dbf3      	blt.n	80024ae <er_oled_clear_bottom_half+0xe>
	}
}
 80024c6:	bf00      	nop
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 80024d2:	b480      	push	{r7}
 80024d4:	b085      	sub	sp, #20
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	60f8      	str	r0, [r7, #12]
 80024da:	60b9      	str	r1, [r7, #8]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	4613      	mov	r3, r2
 80024e0:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2b48      	cmp	r3, #72	; 0x48
 80024e6:	dc61      	bgt.n	80025ac <er_oled_pixel+0xda>
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b28      	cmp	r3, #40	; 0x28
 80024ec:	dc5e      	bgt.n	80025ac <er_oled_pixel+0xda>
    if(color)
 80024ee:	79fb      	ldrb	r3, [r7, #7]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02c      	beq.n	800254e <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	da00      	bge.n	80024fc <er_oled_pixel+0x2a>
 80024fa:	3307      	adds	r3, #7
 80024fc:	10db      	asrs	r3, r3, #3
 80024fe:	461a      	mov	r2, r3
 8002500:	4613      	mov	r3, r2
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	4619      	mov	r1, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	440b      	add	r3, r1
 800250e:	4619      	mov	r1, r3
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	440b      	add	r3, r1
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	b259      	sxtb	r1, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4258      	negs	r0, r3
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	f000 0007 	and.w	r0, r0, #7
 8002524:	bf58      	it	pl
 8002526:	4243      	negpl	r3, r0
 8002528:	2001      	movs	r0, #1
 800252a:	fa00 f303 	lsl.w	r3, r0, r3
 800252e:	b25b      	sxtb	r3, r3
 8002530:	430b      	orrs	r3, r1
 8002532:	b259      	sxtb	r1, r3
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	461a      	mov	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4413      	add	r3, r2
 8002542:	461a      	mov	r2, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4413      	add	r3, r2
 8002548:	b2ca      	uxtb	r2, r1
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e02f      	b.n	80025ae <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b00      	cmp	r3, #0
 8002552:	da00      	bge.n	8002556 <er_oled_pixel+0x84>
 8002554:	3307      	adds	r3, #7
 8002556:	10db      	asrs	r3, r3, #3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4619      	mov	r1, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	440b      	add	r3, r1
 8002568:	4619      	mov	r1, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	440b      	add	r3, r1
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b259      	sxtb	r1, r3
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4258      	negs	r0, r3
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	f000 0007 	and.w	r0, r0, #7
 800257e:	bf58      	it	pl
 8002580:	4243      	negpl	r3, r0
 8002582:	2001      	movs	r0, #1
 8002584:	fa00 f303 	lsl.w	r3, r0, r3
 8002588:	b25b      	sxtb	r3, r3
 800258a:	43db      	mvns	r3, r3
 800258c:	b25b      	sxtb	r3, r3
 800258e:	400b      	ands	r3, r1
 8002590:	b259      	sxtb	r1, r3
 8002592:	4613      	mov	r3, r2
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4413      	add	r3, r2
 8002598:	00db      	lsls	r3, r3, #3
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	4413      	add	r3, r2
 80025a6:	b2ca      	uxtb	r2, r1
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	e000      	b.n	80025ae <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 80025ac:	bf00      	nop
}
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 80025b8:	b590      	push	{r4, r7, lr}
 80025ba:	b087      	sub	sp, #28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4604      	mov	r4, r0
 80025c0:	4608      	mov	r0, r1
 80025c2:	4611      	mov	r1, r2
 80025c4:	461a      	mov	r2, r3
 80025c6:	4623      	mov	r3, r4
 80025c8:	71fb      	strb	r3, [r7, #7]
 80025ca:	4603      	mov	r3, r0
 80025cc:	71bb      	strb	r3, [r7, #6]
 80025ce:	460b      	mov	r3, r1
 80025d0:	717b      	strb	r3, [r7, #5]
 80025d2:	4613      	mov	r3, r2
 80025d4:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 80025de:	2308      	movs	r3, #8
 80025e0:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 80025e2:	797b      	ldrb	r3, [r7, #5]
 80025e4:	3b20      	subs	r3, #32
 80025e6:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 80025e8:	793b      	ldrb	r3, [r7, #4]
 80025ea:	2b20      	cmp	r3, #32
 80025ec:	d104      	bne.n	80025f8 <er_oled_char+0x40>
    	position = 0x8000;
 80025ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025f2:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 80025f4:	2310      	movs	r3, #16
 80025f6:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
 80025fc:	e0b1      	b.n	8002762 <er_oled_char+0x1aa>
        if(size == 12)
 80025fe:	793b      	ldrb	r3, [r7, #4]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d11d      	bne.n	8002640 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8002604:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002608:	2b00      	cmp	r3, #0
 800260a:	d00b      	beq.n	8002624 <er_oled_char+0x6c>
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	7df9      	ldrb	r1, [r7, #23]
 8002610:	4858      	ldr	r0, [pc, #352]	; (8002774 <er_oled_char+0x1bc>)
 8002612:	4613      	mov	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	4403      	add	r3, r0
 800261c:	440b      	add	r3, r1
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	82bb      	strh	r3, [r7, #20]
 8002622:	e06c      	b.n	80026fe <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8002624:	7bfa      	ldrb	r2, [r7, #15]
 8002626:	7df9      	ldrb	r1, [r7, #23]
 8002628:	4852      	ldr	r0, [pc, #328]	; (8002774 <er_oled_char+0x1bc>)
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4403      	add	r3, r0
 8002634:	440b      	add	r3, r1
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	b29b      	uxth	r3, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	82bb      	strh	r3, [r7, #20]
 800263e:	e05e      	b.n	80026fe <er_oled_char+0x146>
        }
        else if(size == 16)
 8002640:	793b      	ldrb	r3, [r7, #4]
 8002642:	2b10      	cmp	r3, #16
 8002644:	d117      	bne.n	8002676 <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 8002646:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800264a:	2b00      	cmp	r3, #0
 800264c:	d008      	beq.n	8002660 <er_oled_char+0xa8>
 800264e:	7bfa      	ldrb	r2, [r7, #15]
 8002650:	7dfb      	ldrb	r3, [r7, #23]
 8002652:	4949      	ldr	r1, [pc, #292]	; (8002778 <er_oled_char+0x1c0>)
 8002654:	0112      	lsls	r2, r2, #4
 8002656:	440a      	add	r2, r1
 8002658:	4413      	add	r3, r2
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	82bb      	strh	r3, [r7, #20]
 800265e:	e04e      	b.n	80026fe <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8002660:	7bfa      	ldrb	r2, [r7, #15]
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	4944      	ldr	r1, [pc, #272]	; (8002778 <er_oled_char+0x1c0>)
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	440a      	add	r2, r1
 800266a:	4413      	add	r3, r2
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	82bb      	strh	r3, [r7, #20]
 8002674:	e043      	b.n	80026fe <er_oled_char+0x146>
        }
        else {
            if(mode) {
 8002676:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800267a:	2b00      	cmp	r3, #0
 800267c:	d01c      	beq.n	80026b8 <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 800267e:	7bfb      	ldrb	r3, [r7, #15]
 8002680:	f1a3 0210 	sub.w	r2, r3, #16
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	493c      	ldr	r1, [pc, #240]	; (800277c <er_oled_char+0x1c4>)
 800268a:	0192      	lsls	r2, r2, #6
 800268c:	440a      	add	r2, r1
 800268e:	4413      	add	r3, r2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	021b      	lsls	r3, r3, #8
 8002696:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	f1a3 0210 	sub.w	r2, r3, #16
 800269e:	7dfb      	ldrb	r3, [r7, #23]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	3301      	adds	r3, #1
 80026a4:	4935      	ldr	r1, [pc, #212]	; (800277c <er_oled_char+0x1c4>)
 80026a6:	0192      	lsls	r2, r2, #6
 80026a8:	440a      	add	r2, r1
 80026aa:	4413      	add	r3, r2
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	8abb      	ldrh	r3, [r7, #20]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	82bb      	strh	r3, [r7, #20]
 80026b6:	e022      	b.n	80026fe <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	f1a3 0210 	sub.w	r2, r3, #16
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	492e      	ldr	r1, [pc, #184]	; (800277c <er_oled_char+0x1c4>)
 80026c4:	0192      	lsls	r2, r2, #6
 80026c6:	440a      	add	r2, r1
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	43db      	mvns	r3, r3
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	021b      	lsls	r3, r3, #8
 80026d4:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 80026d6:	7bfb      	ldrb	r3, [r7, #15]
 80026d8:	f1a3 0210 	sub.w	r2, r3, #16
 80026dc:	7dfb      	ldrb	r3, [r7, #23]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	3301      	adds	r3, #1
 80026e2:	4926      	ldr	r1, [pc, #152]	; (800277c <er_oled_char+0x1c4>)
 80026e4:	0192      	lsls	r2, r2, #6
 80026e6:	440a      	add	r2, r1
 80026e8:	4413      	add	r3, r2
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	43db      	mvns	r3, r3
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	b21a      	sxth	r2, r3
 80026f4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	b21b      	sxth	r3, r3
 80026fc:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 80026fe:	2300      	movs	r3, #0
 8002700:	75bb      	strb	r3, [r7, #22]
 8002702:	e027      	b.n	8002754 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 8002704:	8aba      	ldrh	r2, [r7, #20]
 8002706:	8a7b      	ldrh	r3, [r7, #18]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <er_oled_char+0x166>
 8002710:	79f8      	ldrb	r0, [r7, #7]
 8002712:	79b9      	ldrb	r1, [r7, #6]
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2201      	movs	r2, #1
 8002718:	f7ff fedb 	bl	80024d2 <er_oled_pixel>
 800271c:	e005      	b.n	800272a <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 800271e:	79f8      	ldrb	r0, [r7, #7]
 8002720:	79b9      	ldrb	r1, [r7, #6]
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	2200      	movs	r2, #0
 8002726:	f7ff fed4 	bl	80024d2 <er_oled_pixel>
            temp <<= 1;
 800272a:	8abb      	ldrh	r3, [r7, #20]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	82bb      	strh	r3, [r7, #20]
            y++;
 8002730:	79bb      	ldrb	r3, [r7, #6]
 8002732:	3301      	adds	r3, #1
 8002734:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 8002736:	79ba      	ldrb	r2, [r7, #6]
 8002738:	7c3b      	ldrb	r3, [r7, #16]
 800273a:	1ad2      	subs	r2, r2, r3
 800273c:	793b      	ldrb	r3, [r7, #4]
 800273e:	429a      	cmp	r2, r3
 8002740:	d105      	bne.n	800274e <er_oled_char+0x196>
            {
                y = y0;
 8002742:	7c3b      	ldrb	r3, [r7, #16]
 8002744:	71bb      	strb	r3, [r7, #6]
                x++;
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	3301      	adds	r3, #1
 800274a:	71fb      	strb	r3, [r7, #7]
                break;
 800274c:	e006      	b.n	800275c <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 800274e:	7dbb      	ldrb	r3, [r7, #22]
 8002750:	3301      	adds	r3, #1
 8002752:	75bb      	strb	r3, [r7, #22]
 8002754:	7dba      	ldrb	r2, [r7, #22]
 8002756:	7c7b      	ldrb	r3, [r7, #17]
 8002758:	429a      	cmp	r2, r3
 800275a:	d3d3      	bcc.n	8002704 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	3301      	adds	r3, #1
 8002760:	75fb      	strb	r3, [r7, #23]
 8002762:	7dfa      	ldrb	r2, [r7, #23]
 8002764:	793b      	ldrb	r3, [r7, #4]
 8002766:	429a      	cmp	r2, r3
 8002768:	f4ff af49 	bcc.w	80025fe <er_oled_char+0x46>
            }
        }
    }
}
 800276c:	bf00      	nop
 800276e:	371c      	adds	r7, #28
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}
 8002774:	0801889c 	.word	0x0801889c
 8002778:	08018d10 	.word	0x08018d10
 800277c:	08019300 	.word	0x08019300

08002780 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8002780:	b590      	push	{r4, r7, lr}
 8002782:	b085      	sub	sp, #20
 8002784:	af02      	add	r7, sp, #8
 8002786:	603a      	str	r2, [r7, #0]
 8002788:	461a      	mov	r2, r3
 800278a:	4603      	mov	r3, r0
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	460b      	mov	r3, r1
 8002790:	71bb      	strb	r3, [r7, #6]
 8002792:	4613      	mov	r3, r2
 8002794:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 8002796:	e02c      	b.n	80027f2 <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 8002798:	79fa      	ldrb	r2, [r7, #7]
 800279a:	797b      	ldrb	r3, [r7, #5]
 800279c:	085b      	lsrs	r3, r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 80027a4:	429a      	cmp	r2, r3
 80027a6:	dd0f      	ble.n	80027c8 <er_oled_string+0x48>
            x = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	71fb      	strb	r3, [r7, #7]
            y += Size;
 80027ac:	79ba      	ldrb	r2, [r7, #6]
 80027ae:	797b      	ldrb	r3, [r7, #5]
 80027b0:	4413      	add	r3, r2
 80027b2:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 80027b4:	79ba      	ldrb	r2, [r7, #6]
 80027b6:	797b      	ldrb	r3, [r7, #5]
 80027b8:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80027bc:	429a      	cmp	r2, r3
 80027be:	dd03      	ble.n	80027c8 <er_oled_string+0x48>
                y = x = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	71fb      	strb	r3, [r7, #7]
 80027c4:	79fb      	ldrb	r3, [r7, #7]
 80027c6:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	781a      	ldrb	r2, [r3, #0]
 80027cc:	797c      	ldrb	r4, [r7, #5]
 80027ce:	79b9      	ldrb	r1, [r7, #6]
 80027d0:	79f8      	ldrb	r0, [r7, #7]
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	7e3b      	ldrb	r3, [r7, #24]
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	4623      	mov	r3, r4
 80027dc:	f7ff feec 	bl	80025b8 <er_oled_char>
        x += Size / 2;
 80027e0:	797b      	ldrb	r3, [r7, #5]
 80027e2:	085b      	lsrs	r3, r3, #1
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4413      	add	r3, r2
 80027ea:	71fb      	strb	r3, [r7, #7]
        pString++;
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d1ce      	bne.n	8002798 <er_oled_string+0x18>
    }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd90      	pop	{r4, r7, pc}

08002802 <er_oled_display>:
		}
	}
}

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 8002802:	b580      	push	{r7, lr}
 8002804:	b084      	sub	sp, #16
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e029      	b.n	8002864 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 8002810:	7bfb      	ldrb	r3, [r7, #15]
 8002812:	3b50      	subs	r3, #80	; 0x50
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2100      	movs	r1, #0
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff fd89 	bl	8002330 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 800281e:	2100      	movs	r1, #0
 8002820:	200c      	movs	r0, #12
 8002822:	f7ff fd85 	bl	8002330 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 8002826:	2100      	movs	r1, #0
 8002828:	2011      	movs	r0, #17
 800282a:	f7ff fd81 	bl	8002330 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 800282e:	2300      	movs	r3, #0
 8002830:	73bb      	strb	r3, [r7, #14]
 8002832:	e011      	b.n	8002858 <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8002834:	7bb9      	ldrb	r1, [r7, #14]
 8002836:	7bfa      	ldrb	r2, [r7, #15]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4413      	add	r3, r2
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2140      	movs	r1, #64	; 0x40
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fd6f 	bl	8002330 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8002852:	7bbb      	ldrb	r3, [r7, #14]
 8002854:	3301      	adds	r3, #1
 8002856:	73bb      	strb	r3, [r7, #14]
 8002858:	7bbb      	ldrb	r3, [r7, #14]
 800285a:	2b47      	cmp	r3, #71	; 0x47
 800285c:	d9ea      	bls.n	8002834 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	3301      	adds	r3, #1
 8002862:	73fb      	strb	r3, [r7, #15]
 8002864:	7bfb      	ldrb	r3, [r7, #15]
 8002866:	2b04      	cmp	r3, #4
 8002868:	d9d2      	bls.n	8002810 <er_oled_display+0xe>
        }
    }
}
 800286a:	bf00      	nop
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <er_oled_time>:

void er_oled_time(const char *pString)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b0de      	sub	sp, #376	; 0x178
 8002876:	af02      	add	r7, sp, #8
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	6018      	str	r0, [r3, #0]
	uint8_t oled_buf[WIDTH * HEIGHT / 8];

	er_oled_clear(oled_buf);
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fddb 	bl	800243c <er_oled_clear>
    er_oled_char( 0, 4, *pString++,  32, 1, oled_buf);
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	1d3a      	adds	r2, r7, #4
 800288c:	1c59      	adds	r1, r3, #1
 800288e:	6011      	str	r1, [r2, #0]
 8002890:	781a      	ldrb	r2, [r3, #0]
 8002892:	f107 0308 	add.w	r3, r7, #8
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	2301      	movs	r3, #1
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2320      	movs	r3, #32
 800289e:	2104      	movs	r1, #4
 80028a0:	2000      	movs	r0, #0
 80028a2:	f7ff fe89 	bl	80025b8 <er_oled_char>
    er_oled_char(16, 4, *pString++ , 32, 1, oled_buf);
 80028a6:	1d3b      	adds	r3, r7, #4
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	1d3a      	adds	r2, r7, #4
 80028ac:	1c59      	adds	r1, r3, #1
 80028ae:	6011      	str	r1, [r2, #0]
 80028b0:	781a      	ldrb	r2, [r3, #0]
 80028b2:	f107 0308 	add.w	r3, r7, #8
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2301      	movs	r3, #1
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2320      	movs	r3, #32
 80028be:	2104      	movs	r1, #4
 80028c0:	2010      	movs	r0, #16
 80028c2:	f7ff fe79 	bl	80025b8 <er_oled_char>
    er_oled_char(40, 4, *pString++ , 32, 1, oled_buf);
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	1d3a      	adds	r2, r7, #4
 80028cc:	1c59      	adds	r1, r3, #1
 80028ce:	6011      	str	r1, [r2, #0]
 80028d0:	781a      	ldrb	r2, [r3, #0]
 80028d2:	f107 0308 	add.w	r3, r7, #8
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	2301      	movs	r3, #1
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	2320      	movs	r3, #32
 80028de:	2104      	movs	r1, #4
 80028e0:	2028      	movs	r0, #40	; 0x28
 80028e2:	f7ff fe69 	bl	80025b8 <er_oled_char>
    er_oled_char(56, 4, *pString   , 32, 1, oled_buf);
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	781a      	ldrb	r2, [r3, #0]
 80028ec:	f107 0308 	add.w	r3, r7, #8
 80028f0:	9301      	str	r3, [sp, #4]
 80028f2:	2301      	movs	r3, #1
 80028f4:	9300      	str	r3, [sp, #0]
 80028f6:	2320      	movs	r3, #32
 80028f8:	2104      	movs	r1, #4
 80028fa:	2038      	movs	r0, #56	; 0x38
 80028fc:	f7ff fe5c 	bl	80025b8 <er_oled_char>

    er_oled_pixel(36, 12, 1, oled_buf);
 8002900:	f107 0308 	add.w	r3, r7, #8
 8002904:	2201      	movs	r2, #1
 8002906:	210c      	movs	r1, #12
 8002908:	2024      	movs	r0, #36	; 0x24
 800290a:	f7ff fde2 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 13, 1, oled_buf);
 800290e:	f107 0308 	add.w	r3, r7, #8
 8002912:	2201      	movs	r2, #1
 8002914:	210d      	movs	r1, #13
 8002916:	2024      	movs	r0, #36	; 0x24
 8002918:	f7ff fddb 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 14, 1, oled_buf);
 800291c:	f107 0308 	add.w	r3, r7, #8
 8002920:	2201      	movs	r2, #1
 8002922:	210e      	movs	r1, #14
 8002924:	2024      	movs	r0, #36	; 0x24
 8002926:	f7ff fdd4 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 28, 1, oled_buf);
 800292a:	f107 0308 	add.w	r3, r7, #8
 800292e:	2201      	movs	r2, #1
 8002930:	211c      	movs	r1, #28
 8002932:	2024      	movs	r0, #36	; 0x24
 8002934:	f7ff fdcd 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 27, 1, oled_buf);
 8002938:	f107 0308 	add.w	r3, r7, #8
 800293c:	2201      	movs	r2, #1
 800293e:	211b      	movs	r1, #27
 8002940:	2024      	movs	r0, #36	; 0x24
 8002942:	f7ff fdc6 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 26, 1, oled_buf);
 8002946:	f107 0308 	add.w	r3, r7, #8
 800294a:	2201      	movs	r2, #1
 800294c:	211a      	movs	r1, #26
 800294e:	2024      	movs	r0, #36	; 0x24
 8002950:	f7ff fdbf 	bl	80024d2 <er_oled_pixel>

	er_oled_display(oled_buf);
 8002954:	f107 0308 	add.w	r3, r7, #8
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff52 	bl	8002802 <er_oled_display>
}
 800295e:	bf00      	nop
 8002960:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <er_oled_time_twothird>:

void er_oled_time_twothird(const char *pString, uint8_t* buffer)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af02      	add	r7, sp, #8
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]

	er_oled_clear_bottom_half(buffer);
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	f7ff fd94 	bl	80024a0 <er_oled_clear_bottom_half>

    er_oled_char(16, 20, *pString++,  16, 1, buffer);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	607a      	str	r2, [r7, #4]
 800297e:	781a      	ldrb	r2, [r3, #0]
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	9301      	str	r3, [sp, #4]
 8002984:	2301      	movs	r3, #1
 8002986:	9300      	str	r3, [sp, #0]
 8002988:	2310      	movs	r3, #16
 800298a:	2114      	movs	r1, #20
 800298c:	2010      	movs	r0, #16
 800298e:	f7ff fe13 	bl	80025b8 <er_oled_char>
    er_oled_char(26, 20, *pString++ , 16, 1, buffer);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	1c5a      	adds	r2, r3, #1
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	781a      	ldrb	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	9301      	str	r3, [sp, #4]
 800299e:	2301      	movs	r3, #1
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2310      	movs	r3, #16
 80029a4:	2114      	movs	r1, #20
 80029a6:	201a      	movs	r0, #26
 80029a8:	f7ff fe06 	bl	80025b8 <er_oled_char>
    er_oled_char(40, 20, *pString++ , 16, 1, buffer);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	781a      	ldrb	r2, [r3, #0]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	2301      	movs	r3, #1
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	2310      	movs	r3, #16
 80029be:	2114      	movs	r1, #20
 80029c0:	2028      	movs	r0, #40	; 0x28
 80029c2:	f7ff fdf9 	bl	80025b8 <er_oled_char>
    er_oled_char(50, 20, *pString   , 16, 1, buffer);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2301      	movs	r3, #1
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2310      	movs	r3, #16
 80029d4:	2114      	movs	r1, #20
 80029d6:	2032      	movs	r0, #50	; 0x32
 80029d8:	f7ff fdee 	bl	80025b8 <er_oled_char>

    //er_oled_pixel(36, 23, 1, buffer);
	er_oled_pixel(36, 24, 1, buffer);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2201      	movs	r2, #1
 80029e0:	2118      	movs	r1, #24
 80029e2:	2024      	movs	r0, #36	; 0x24
 80029e4:	f7ff fd75 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 25, 1, buffer);
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2201      	movs	r2, #1
 80029ec:	2119      	movs	r1, #25
 80029ee:	2024      	movs	r0, #36	; 0x24
 80029f0:	f7ff fd6f 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 31, 1, buffer);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	2201      	movs	r2, #1
 80029f8:	211f      	movs	r1, #31
 80029fa:	2024      	movs	r0, #36	; 0x24
 80029fc:	f7ff fd69 	bl	80024d2 <er_oled_pixel>
	er_oled_pixel(36, 30, 1, buffer);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	2201      	movs	r2, #1
 8002a04:	211e      	movs	r1, #30
 8002a06:	2024      	movs	r0, #36	; 0x24
 8002a08:	f7ff fd63 	bl	80024d2 <er_oled_pixel>
	//er_oled_pixel(36, 33, 1, buffer);

	er_oled_display(buffer);
 8002a0c:	6838      	ldr	r0, [r7, #0]
 8002a0e:	f7ff fef8 	bl	8002802 <er_oled_display>
}
 8002a12:	bf00      	nop
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <vPortSuppressTicksAndSleep>:
 *
 * @param: xExpectedIdleTime is given in number of FreeRTOS Ticks
 * @retval: None
 */
void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]

    /* Exit with interrUpts enabled. */
    __enable_irq();
  }
#endif
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
	...

08002a30 <LL_EXTI_EnableIT_0_31>:
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a3a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002a3e:	4905      	ldr	r1, [pc, #20]	; (8002a54 <LL_EXTI_EnableIT_0_31+0x24>)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	58000800 	.word	0x58000800

08002a58 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002a60:	4b05      	ldr	r3, [pc, #20]	; (8002a78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	4904      	ldr	r1, [pc, #16]	; (8002a78 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	600b      	str	r3, [r1, #0]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	58000800 	.word	0x58000800

08002a7c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <ReadRtcSsrValue+0x3c>)
 8002a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	; (8002ab8 <ReadRtcSsrValue+0x3c>)
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8002a92:	e005      	b.n	8002aa0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8002a98:	4b07      	ldr	r3, [pc, #28]	; (8002ab8 <ReadRtcSsrValue+0x3c>)
 8002a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1f5      	bne.n	8002a94 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8002aa8:	683b      	ldr	r3, [r7, #0]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	40002800 	.word	0x40002800

08002abc <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b085      	sub	sp, #20
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	71fb      	strb	r3, [r7, #7]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8002acc:	79ba      	ldrb	r2, [r7, #6]
 8002ace:	491d      	ldr	r1, [pc, #116]	; (8002b44 <LinkTimerAfter+0x88>)
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	440b      	add	r3, r1
 8002ada:	3315      	adds	r3, #21
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d009      	beq.n	8002afa <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8002ae6:	7bfa      	ldrb	r2, [r7, #15]
 8002ae8:	4916      	ldr	r1, [pc, #88]	; (8002b44 <LinkTimerAfter+0x88>)
 8002aea:	4613      	mov	r3, r2
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	440b      	add	r3, r1
 8002af4:	3314      	adds	r3, #20
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8002afa:	79fa      	ldrb	r2, [r7, #7]
 8002afc:	4911      	ldr	r1, [pc, #68]	; (8002b44 <LinkTimerAfter+0x88>)
 8002afe:	4613      	mov	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	4413      	add	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	440b      	add	r3, r1
 8002b08:	3315      	adds	r3, #21
 8002b0a:	7bfa      	ldrb	r2, [r7, #15]
 8002b0c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8002b0e:	79fa      	ldrb	r2, [r7, #7]
 8002b10:	490c      	ldr	r1, [pc, #48]	; (8002b44 <LinkTimerAfter+0x88>)
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	440b      	add	r3, r1
 8002b1c:	3314      	adds	r3, #20
 8002b1e:	79ba      	ldrb	r2, [r7, #6]
 8002b20:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8002b22:	79ba      	ldrb	r2, [r7, #6]
 8002b24:	4907      	ldr	r1, [pc, #28]	; (8002b44 <LinkTimerAfter+0x88>)
 8002b26:	4613      	mov	r3, r2
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	4413      	add	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	440b      	add	r3, r1
 8002b30:	3315      	adds	r3, #21
 8002b32:	79fa      	ldrb	r2, [r7, #7]
 8002b34:	701a      	strb	r2, [r3, #0]

  return;
 8002b36:	bf00      	nop
}
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000280 	.word	0x20000280

08002b48 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b085      	sub	sp, #20
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460a      	mov	r2, r1
 8002b52:	71fb      	strb	r3, [r7, #7]
 8002b54:	4613      	mov	r3, r2
 8002b56:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8002b58:	4b29      	ldr	r3, [pc, #164]	; (8002c00 <LinkTimerBefore+0xb8>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	79ba      	ldrb	r2, [r7, #6]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d032      	beq.n	8002bca <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8002b64:	79ba      	ldrb	r2, [r7, #6]
 8002b66:	4927      	ldr	r1, [pc, #156]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002b68:	4613      	mov	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	4413      	add	r3, r2
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	440b      	add	r3, r1
 8002b72:	3314      	adds	r3, #20
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8002b78:	7bfa      	ldrb	r2, [r7, #15]
 8002b7a:	4922      	ldr	r1, [pc, #136]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	440b      	add	r3, r1
 8002b86:	3315      	adds	r3, #21
 8002b88:	79fa      	ldrb	r2, [r7, #7]
 8002b8a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8002b8c:	79fa      	ldrb	r2, [r7, #7]
 8002b8e:	491d      	ldr	r1, [pc, #116]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	4413      	add	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	440b      	add	r3, r1
 8002b9a:	3315      	adds	r3, #21
 8002b9c:	79ba      	ldrb	r2, [r7, #6]
 8002b9e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8002ba0:	79fa      	ldrb	r2, [r7, #7]
 8002ba2:	4918      	ldr	r1, [pc, #96]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	4413      	add	r3, r2
 8002baa:	00db      	lsls	r3, r3, #3
 8002bac:	440b      	add	r3, r1
 8002bae:	3314      	adds	r3, #20
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002bb4:	79ba      	ldrb	r2, [r7, #6]
 8002bb6:	4913      	ldr	r1, [pc, #76]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002bb8:	4613      	mov	r3, r2
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	4413      	add	r3, r2
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3314      	adds	r3, #20
 8002bc4:	79fa      	ldrb	r2, [r7, #7]
 8002bc6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8002bc8:	e014      	b.n	8002bf4 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8002bca:	79fa      	ldrb	r2, [r7, #7]
 8002bcc:	490d      	ldr	r1, [pc, #52]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002bce:	4613      	mov	r3, r2
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	4413      	add	r3, r2
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	3315      	adds	r3, #21
 8002bda:	79ba      	ldrb	r2, [r7, #6]
 8002bdc:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8002bde:	79ba      	ldrb	r2, [r7, #6]
 8002be0:	4908      	ldr	r1, [pc, #32]	; (8002c04 <LinkTimerBefore+0xbc>)
 8002be2:	4613      	mov	r3, r2
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	440b      	add	r3, r1
 8002bec:	3314      	adds	r3, #20
 8002bee:	79fa      	ldrb	r2, [r7, #7]
 8002bf0:	701a      	strb	r2, [r3, #0]
  return;
 8002bf2:	bf00      	nop
}
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	20000310 	.word	0x20000310
 8002c04:	20000280 	.word	0x20000280

08002c08 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002c12:	4b4e      	ldr	r3, [pc, #312]	; (8002d4c <linkTimer+0x144>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	2b06      	cmp	r3, #6
 8002c1a:	d118      	bne.n	8002c4e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <linkTimer+0x144>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4b4b      	ldr	r3, [pc, #300]	; (8002d50 <linkTimer+0x148>)
 8002c24:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8002c26:	4a49      	ldr	r2, [pc, #292]	; (8002d4c <linkTimer+0x144>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8002c2c:	79fa      	ldrb	r2, [r7, #7]
 8002c2e:	4949      	ldr	r1, [pc, #292]	; (8002d54 <linkTimer+0x14c>)
 8002c30:	4613      	mov	r3, r2
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4413      	add	r3, r2
 8002c36:	00db      	lsls	r3, r3, #3
 8002c38:	440b      	add	r3, r1
 8002c3a:	3315      	adds	r3, #21
 8002c3c:	2206      	movs	r2, #6
 8002c3e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <linkTimer+0x150>)
 8002c42:	f04f 32ff 	mov.w	r2, #4294967295
 8002c46:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	81fb      	strh	r3, [r7, #14]
 8002c4c:	e078      	b.n	8002d40 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8002c4e:	f000 f909 	bl	8002e64 <ReturnTimeElapsed>
 8002c52:	4603      	mov	r3, r0
 8002c54:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8002c56:	79fa      	ldrb	r2, [r7, #7]
 8002c58:	493e      	ldr	r1, [pc, #248]	; (8002d54 <linkTimer+0x14c>)
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	4413      	add	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	440b      	add	r3, r1
 8002c64:	3308      	adds	r3, #8
 8002c66:	6819      	ldr	r1, [r3, #0]
 8002c68:	89fb      	ldrh	r3, [r7, #14]
 8002c6a:	79fa      	ldrb	r2, [r7, #7]
 8002c6c:	4419      	add	r1, r3
 8002c6e:	4839      	ldr	r0, [pc, #228]	; (8002d54 <linkTimer+0x14c>)
 8002c70:	4613      	mov	r3, r2
 8002c72:	005b      	lsls	r3, r3, #1
 8002c74:	4413      	add	r3, r2
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4403      	add	r3, r0
 8002c7a:	3308      	adds	r3, #8
 8002c7c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8002c7e:	79fa      	ldrb	r2, [r7, #7]
 8002c80:	4934      	ldr	r1, [pc, #208]	; (8002d54 <linkTimer+0x14c>)
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	00db      	lsls	r3, r3, #3
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <linkTimer+0x144>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <linkTimer+0x14c>)
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	005b      	lsls	r3, r3, #1
 8002ca0:	440b      	add	r3, r1
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3308      	adds	r3, #8
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d337      	bcc.n	8002d20 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8002cb0:	4b26      	ldr	r3, [pc, #152]	; (8002d4c <linkTimer+0x144>)
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8002cb6:	7b7a      	ldrb	r2, [r7, #13]
 8002cb8:	4926      	ldr	r1, [pc, #152]	; (8002d54 <linkTimer+0x14c>)
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	440b      	add	r3, r1
 8002cc4:	3315      	adds	r3, #21
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002cca:	e013      	b.n	8002cf4 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8002ccc:	7b7a      	ldrb	r2, [r7, #13]
 8002cce:	4921      	ldr	r1, [pc, #132]	; (8002d54 <linkTimer+0x14c>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	440b      	add	r3, r1
 8002cda:	3315      	adds	r3, #21
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8002ce0:	7b7a      	ldrb	r2, [r7, #13]
 8002ce2:	491c      	ldr	r1, [pc, #112]	; (8002d54 <linkTimer+0x14c>)
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	440b      	add	r3, r1
 8002cee:	3315      	adds	r3, #21
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8002cf4:	7b3b      	ldrb	r3, [r7, #12]
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d00b      	beq.n	8002d12 <linkTimer+0x10a>
 8002cfa:	7b3a      	ldrb	r2, [r7, #12]
 8002cfc:	4915      	ldr	r1, [pc, #84]	; (8002d54 <linkTimer+0x14c>)
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	440b      	add	r3, r1
 8002d08:	3308      	adds	r3, #8
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d2dc      	bcs.n	8002ccc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8002d12:	7b7a      	ldrb	r2, [r7, #13]
 8002d14:	79fb      	ldrb	r3, [r7, #7]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fecf 	bl	8002abc <LinkTimerAfter>
 8002d1e:	e00f      	b.n	8002d40 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <linkTimer+0x144>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff0c 	bl	8002b48 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8002d30:	4b06      	ldr	r3, [pc, #24]	; (8002d4c <linkTimer+0x144>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	b2da      	uxtb	r2, r3
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <linkTimer+0x148>)
 8002d38:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002d3a:	4a04      	ldr	r2, [pc, #16]	; (8002d4c <linkTimer+0x144>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8002d40:	89fb      	ldrh	r3, [r7, #14]
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	20000310 	.word	0x20000310
 8002d50:	20000311 	.word	0x20000311
 8002d54:	20000280 	.word	0x20000280
 8002d58:	20000314 	.word	0x20000314

08002d5c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	460a      	mov	r2, r1
 8002d66:	71fb      	strb	r3, [r7, #7]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002d6c:	4b39      	ldr	r3, [pc, #228]	; (8002e54 <UnlinkTimer+0xf8>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	79fa      	ldrb	r2, [r7, #7]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d111      	bne.n	8002d9c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002d78:	4b36      	ldr	r3, [pc, #216]	; (8002e54 <UnlinkTimer+0xf8>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <UnlinkTimer+0xfc>)
 8002d80:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8002d82:	79fa      	ldrb	r2, [r7, #7]
 8002d84:	4935      	ldr	r1, [pc, #212]	; (8002e5c <UnlinkTimer+0x100>)
 8002d86:	4613      	mov	r3, r2
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4413      	add	r3, r2
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	440b      	add	r3, r1
 8002d90:	3315      	adds	r3, #21
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	b2da      	uxtb	r2, r3
 8002d96:	4b2f      	ldr	r3, [pc, #188]	; (8002e54 <UnlinkTimer+0xf8>)
 8002d98:	701a      	strb	r2, [r3, #0]
 8002d9a:	e03e      	b.n	8002e1a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002d9c:	79fa      	ldrb	r2, [r7, #7]
 8002d9e:	492f      	ldr	r1, [pc, #188]	; (8002e5c <UnlinkTimer+0x100>)
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	440b      	add	r3, r1
 8002daa:	3314      	adds	r3, #20
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8002db0:	79fa      	ldrb	r2, [r7, #7]
 8002db2:	492a      	ldr	r1, [pc, #168]	; (8002e5c <UnlinkTimer+0x100>)
 8002db4:	4613      	mov	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4413      	add	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	440b      	add	r3, r1
 8002dbe:	3315      	adds	r3, #21
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8002dc4:	79f9      	ldrb	r1, [r7, #7]
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	4824      	ldr	r0, [pc, #144]	; (8002e5c <UnlinkTimer+0x100>)
 8002dca:	460b      	mov	r3, r1
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	440b      	add	r3, r1
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4403      	add	r3, r0
 8002dd4:	3315      	adds	r3, #21
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b2d8      	uxtb	r0, r3
 8002dda:	4920      	ldr	r1, [pc, #128]	; (8002e5c <UnlinkTimer+0x100>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	00db      	lsls	r3, r3, #3
 8002de4:	440b      	add	r3, r1
 8002de6:	3315      	adds	r3, #21
 8002de8:	4602      	mov	r2, r0
 8002dea:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002dec:	7bbb      	ldrb	r3, [r7, #14]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d013      	beq.n	8002e1a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8002df2:	79f9      	ldrb	r1, [r7, #7]
 8002df4:	7bba      	ldrb	r2, [r7, #14]
 8002df6:	4819      	ldr	r0, [pc, #100]	; (8002e5c <UnlinkTimer+0x100>)
 8002df8:	460b      	mov	r3, r1
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	440b      	add	r3, r1
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4403      	add	r3, r0
 8002e02:	3314      	adds	r3, #20
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	b2d8      	uxtb	r0, r3
 8002e08:	4914      	ldr	r1, [pc, #80]	; (8002e5c <UnlinkTimer+0x100>)
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	3314      	adds	r3, #20
 8002e16:	4602      	mov	r2, r0
 8002e18:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002e1a:	79fa      	ldrb	r2, [r7, #7]
 8002e1c:	490f      	ldr	r1, [pc, #60]	; (8002e5c <UnlinkTimer+0x100>)
 8002e1e:	4613      	mov	r3, r2
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	440b      	add	r3, r1
 8002e28:	330c      	adds	r3, #12
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8002e2e:	4b09      	ldr	r3, [pc, #36]	; (8002e54 <UnlinkTimer+0xf8>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b06      	cmp	r3, #6
 8002e36:	d107      	bne.n	8002e48 <UnlinkTimer+0xec>
 8002e38:	79bb      	ldrb	r3, [r7, #6]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d104      	bne.n	8002e48 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <UnlinkTimer+0x104>)
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	601a      	str	r2, [r3, #0]
  }

  return;
 8002e46:	bf00      	nop
 8002e48:	bf00      	nop
}
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	20000310 	.word	0x20000310
 8002e58:	20000311 	.word	0x20000311
 8002e5c:	20000280 	.word	0x20000280
 8002e60:	20000314 	.word	0x20000314

08002e64 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002e6a:	4b1a      	ldr	r3, [pc, #104]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e72:	d026      	beq.n	8002ec2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002e74:	f7ff fe02 	bl	8002a7c <ReadRtcSsrValue>
 8002e78:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002e7a:	4b16      	ldr	r3, [pc, #88]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d805      	bhi.n	8002e90 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	607b      	str	r3, [r7, #4]
 8002e8e:	e00a      	b.n	8002ea6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8002e90:	4b11      	ldr	r3, [pc, #68]	; (8002ed8 <ReturnTimeElapsed+0x74>)
 8002e92:	881b      	ldrh	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002e9c:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <ReturnTimeElapsed+0x70>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8002ea6:	4b0d      	ldr	r3, [pc, #52]	; (8002edc <ReturnTimeElapsed+0x78>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	fb02 f303 	mul.w	r3, r2, r3
 8002eb2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <ReturnTimeElapsed+0x7c>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	40d3      	lsrs	r3, r2
 8002ebe:	607b      	str	r3, [r7, #4]
 8002ec0:	e001      	b.n	8002ec6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	b29b      	uxth	r3, r3
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	20000314 	.word	0x20000314
 8002ed8:	2000039e 	.word	0x2000039e
 8002edc:	2000039d 	.word	0x2000039d
 8002ee0:	2000039c 	.word	0x2000039c

08002ee4 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8002eee:	88fb      	ldrh	r3, [r7, #6]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d108      	bne.n	8002f06 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002ef4:	f7ff fdc2 	bl	8002a7c <ReadRtcSsrValue>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b24      	ldr	r3, [pc, #144]	; (8002f8c <RestartWakeupCounter+0xa8>)
 8002efc:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8002efe:	2003      	movs	r0, #3
 8002f00:	f004 ff64 	bl	8007dcc <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002f04:	e03e      	b.n	8002f84 <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002f06:	88fb      	ldrh	r3, [r7, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d803      	bhi.n	8002f14 <RestartWakeupCounter+0x30>
 8002f0c:	4b20      	ldr	r3, [pc, #128]	; (8002f90 <RestartWakeupCounter+0xac>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d002      	beq.n	8002f1a <RestartWakeupCounter+0x36>
      Value -= 1;
 8002f14:	88fb      	ldrh	r3, [r7, #6]
 8002f16:	3b01      	subs	r3, #1
 8002f18:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8002f1a:	bf00      	nop
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f003 0304 	and.w	r3, r3, #4
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f7      	beq.n	8002f1c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002f2c:	4b19      	ldr	r3, [pc, #100]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	4b17      	ldr	r3, [pc, #92]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002f40:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <RestartWakeupCounter+0xb4>)
 8002f44:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f48:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002f4a:	2003      	movs	r0, #3
 8002f4c:	f004 ff4c 	bl	8007de8 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002f50:	4b12      	ldr	r3, [pc, #72]	; (8002f9c <RestartWakeupCounter+0xb8>)
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	041b      	lsls	r3, r3, #16
 8002f58:	88fa      	ldrh	r2, [r7, #6]
 8002f5a:	4910      	ldr	r1, [pc, #64]	; (8002f9c <RestartWakeupCounter+0xb8>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002f60:	f7ff fd8c 	bl	8002a7c <ReadRtcSsrValue>
 8002f64:	4602      	mov	r2, r0
 8002f66:	4b09      	ldr	r3, [pc, #36]	; (8002f8c <RestartWakeupCounter+0xa8>)
 8002f68:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8002f6a:	4b0a      	ldr	r3, [pc, #40]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689a      	ldr	r2, [r3, #8]
 8002f72:	4b08      	ldr	r3, [pc, #32]	; (8002f94 <RestartWakeupCounter+0xb0>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f7c:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002f7e:	f3af 8000 	nop.w
  return ;
 8002f82:	bf00      	nop
}
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	20000314 	.word	0x20000314
 8002f90:	2000039c 	.word	0x2000039c
 8002f94:	20000398 	.word	0x20000398
 8002f98:	58000800 	.word	0x58000800
 8002f9c:	40002800 	.word	0x40002800

08002fa0 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <RescheduleTimerList+0x124>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb2:	d108      	bne.n	8002fc6 <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8002fb4:	bf00      	nop
 8002fb6:	4b44      	ldr	r3, [pc, #272]	; (80030c8 <RescheduleTimerList+0x128>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	f003 0304 	and.w	r3, r3, #4
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f7      	bne.n	8002fb6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8002fc6:	4b40      	ldr	r3, [pc, #256]	; (80030c8 <RescheduleTimerList+0x128>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	4b3e      	ldr	r3, [pc, #248]	; (80030c8 <RescheduleTimerList+0x128>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd8:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8002fda:	4b3c      	ldr	r3, [pc, #240]	; (80030cc <RescheduleTimerList+0x12c>)
 8002fdc:	781b      	ldrb	r3, [r3, #0]
 8002fde:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8002fe0:	7bfa      	ldrb	r2, [r7, #15]
 8002fe2:	493b      	ldr	r1, [pc, #236]	; (80030d0 <RescheduleTimerList+0x130>)
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	4413      	add	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	440b      	add	r3, r1
 8002fee:	3308      	adds	r3, #8
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002ff4:	f7ff ff36 	bl	8002e64 <ReturnTimeElapsed>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8002ffc:	88fb      	ldrh	r3, [r7, #6]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	429a      	cmp	r2, r3
 8003002:	d205      	bcs.n	8003010 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8003008:	4b32      	ldr	r3, [pc, #200]	; (80030d4 <RescheduleTimerList+0x134>)
 800300a:	2201      	movs	r2, #1
 800300c:	701a      	strb	r2, [r3, #0]
 800300e:	e04d      	b.n	80030ac <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	4a31      	ldr	r2, [pc, #196]	; (80030d8 <RescheduleTimerList+0x138>)
 8003014:	8812      	ldrh	r2, [r2, #0]
 8003016:	b292      	uxth	r2, r2
 8003018:	4413      	add	r3, r2
 800301a:	461a      	mov	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	4293      	cmp	r3, r2
 8003020:	d906      	bls.n	8003030 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8003022:	4b2d      	ldr	r3, [pc, #180]	; (80030d8 <RescheduleTimerList+0x138>)
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <RescheduleTimerList+0x134>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
 800302e:	e03d      	b.n	80030ac <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	b29a      	uxth	r2, r3
 8003034:	88fb      	ldrh	r3, [r7, #6]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <RescheduleTimerList+0x134>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003040:	e034      	b.n	80030ac <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8003042:	7bfa      	ldrb	r2, [r7, #15]
 8003044:	4922      	ldr	r1, [pc, #136]	; (80030d0 <RescheduleTimerList+0x130>)
 8003046:	4613      	mov	r3, r2
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	3308      	adds	r3, #8
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	88fb      	ldrh	r3, [r7, #6]
 8003056:	429a      	cmp	r2, r3
 8003058:	d20a      	bcs.n	8003070 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 800305a:	7bfa      	ldrb	r2, [r7, #15]
 800305c:	491c      	ldr	r1, [pc, #112]	; (80030d0 <RescheduleTimerList+0x130>)
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	440b      	add	r3, r1
 8003068:	3308      	adds	r3, #8
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e013      	b.n	8003098 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8003070:	7bfa      	ldrb	r2, [r7, #15]
 8003072:	4917      	ldr	r1, [pc, #92]	; (80030d0 <RescheduleTimerList+0x130>)
 8003074:	4613      	mov	r3, r2
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	4413      	add	r3, r2
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	440b      	add	r3, r1
 800307e:	3308      	adds	r3, #8
 8003080:	6819      	ldr	r1, [r3, #0]
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	7bfa      	ldrb	r2, [r7, #15]
 8003086:	1ac9      	subs	r1, r1, r3
 8003088:	4811      	ldr	r0, [pc, #68]	; (80030d0 <RescheduleTimerList+0x130>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4403      	add	r3, r0
 8003094:	3308      	adds	r3, #8
 8003096:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8003098:	7bfa      	ldrb	r2, [r7, #15]
 800309a:	490d      	ldr	r1, [pc, #52]	; (80030d0 <RescheduleTimerList+0x130>)
 800309c:	4613      	mov	r3, r2
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	440b      	add	r3, r1
 80030a6:	3315      	adds	r3, #21
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80030ac:	7bfb      	ldrb	r3, [r7, #15]
 80030ae:	2b06      	cmp	r3, #6
 80030b0:	d1c7      	bne.n	8003042 <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80030b2:	89bb      	ldrh	r3, [r7, #12]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff ff15 	bl	8002ee4 <RestartWakeupCounter>

  return ;
 80030ba:	bf00      	nop
}
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40002800 	.word	0x40002800
 80030c8:	20000398 	.word	0x20000398
 80030cc:	20000310 	.word	0x20000310
 80030d0:	20000280 	.word	0x20000280
 80030d4:	20000318 	.word	0x20000318
 80030d8:	200003a0 	.word	0x200003a0

080030dc <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	; 0x28
 80030e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030e2:	f3ef 8310 	mrs	r3, PRIMASK
 80030e6:	617b      	str	r3, [r7, #20]
  return(result);
 80030e8:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80030ea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80030ec:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80030ee:	4b5e      	ldr	r3, [pc, #376]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	22ca      	movs	r2, #202	; 0xca
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24
 80030f8:	4b5b      	ldr	r3, [pc, #364]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2253      	movs	r2, #83	; 0x53
 8003100:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 8003102:	4b59      	ldr	r3, [pc, #356]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	4b57      	ldr	r3, [pc, #348]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8003116:	4b55      	ldr	r3, [pc, #340]	; (800326c <HW_TS_RTC_Wakeup_Handler+0x190>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 800311e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003122:	4953      	ldr	r1, [pc, #332]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003124:	4613      	mov	r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	330c      	adds	r3, #12
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b02      	cmp	r3, #2
 8003136:	d170      	bne.n	800321a <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8003138:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800313c:	494c      	ldr	r1, [pc, #304]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800314c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003150:	4947      	ldr	r1, [pc, #284]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	440b      	add	r3, r1
 800315c:	3310      	adds	r3, #16
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8003162:	4b44      	ldr	r3, [pc, #272]	; (8003274 <HW_TS_RTC_Wakeup_Handler+0x198>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d04e      	beq.n	800320a <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800316c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8003170:	493f      	ldr	r1, [pc, #252]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 8003172:	4613      	mov	r3, r2
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	4413      	add	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	440b      	add	r3, r1
 800317c:	330d      	adds	r3, #13
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d125      	bne.n	80031d2 <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8003186:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800318a:	2101      	movs	r1, #1
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fde5 	bl	8002d5c <UnlinkTimer>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 800319c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80031a0:	4933      	ldr	r1, [pc, #204]	; (8003270 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80031a2:	4613      	mov	r3, r2
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	4413      	add	r3, r2
 80031a8:	00db      	lsls	r3, r3, #3
 80031aa:	440b      	add	r3, r1
 80031ac:	3304      	adds	r3, #4
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031b4:	4611      	mov	r1, r2
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 fa46 	bl	8003648 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031bc:	4b2a      	ldr	r3, [pc, #168]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	22ca      	movs	r2, #202	; 0xca
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24
 80031c6:	4b28      	ldr	r3, [pc, #160]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2253      	movs	r2, #83	; 0x53
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
 80031d0:	e013      	b.n	80031fa <HW_TS_RTC_Wakeup_Handler+0x11e>
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80031dc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e0:	4618      	mov	r0, r3
 80031e2:	f000 f9a7 	bl	8003534 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80031e6:	4b20      	ldr	r3, [pc, #128]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	22ca      	movs	r2, #202	; 0xca
 80031ee:	625a      	str	r2, [r3, #36]	; 0x24
 80031f0:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2253      	movs	r2, #83	; 0x53
 80031f8:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80031fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	4619      	mov	r1, r3
 8003202:	69b8      	ldr	r0, [r7, #24]
 8003204:	f000 faa6 	bl	8003754 <HW_TS_RTC_Int_AppNot>
 8003208:	e024      	b.n	8003254 <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 800320a:	f7ff fec9 	bl	8002fa0 <RescheduleTimerList>
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f383 8810 	msr	PRIMASK, r3
 8003218:	e01c      	b.n	8003254 <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800321a:	bf00      	nop
 800321c:	4b12      	ldr	r3, [pc, #72]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f7      	beq.n	800321c <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800322c:	4b0e      	ldr	r3, [pc, #56]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	b2da      	uxtb	r2, r3
 8003236:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8003240:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8003242:	4b0d      	ldr	r3, [pc, #52]	; (8003278 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 8003244:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	22ff      	movs	r2, #255	; 0xff
 800325c:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800325e:	bf00      	nop
}
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	20000398 	.word	0x20000398
 800326c:	20000310 	.word	0x20000310
 8003270:	20000280 	.word	0x20000280
 8003274:	20000318 	.word	0x20000318
 8003278:	58000800 	.word	0x58000800

0800327c <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8003288:	4a64      	ldr	r2, [pc, #400]	; (800341c <HW_TS_Init+0x1a0>)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HW_TS_Init+0x1a0>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	22ca      	movs	r2, #202	; 0xca
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
 8003298:	4b60      	ldr	r3, [pc, #384]	; (800341c <HW_TS_Init+0x1a0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2253      	movs	r2, #83	; 0x53
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032a2:	4b5f      	ldr	r3, [pc, #380]	; (8003420 <HW_TS_Init+0x1a4>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	4a5e      	ldr	r2, [pc, #376]	; (8003420 <HW_TS_Init+0x1a4>)
 80032a8:	f043 0320 	orr.w	r3, r3, #32
 80032ac:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80032ae:	4b5c      	ldr	r3, [pc, #368]	; (8003420 <HW_TS_Init+0x1a4>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	f1c3 0304 	rsb	r3, r3, #4
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	4b58      	ldr	r3, [pc, #352]	; (8003424 <HW_TS_Init+0x1a8>)
 80032c2:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80032c4:	4b56      	ldr	r3, [pc, #344]	; (8003420 <HW_TS_Init+0x1a4>)
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80032cc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80032d0:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	fa92 f2a2 	rbit	r2, r2
 80032d8:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032de:	697a      	ldr	r2, [r7, #20]
 80032e0:	2a00      	cmp	r2, #0
 80032e2:	d101      	bne.n	80032e8 <HW_TS_Init+0x6c>
  {
    return 32U;
 80032e4:	2220      	movs	r2, #32
 80032e6:	e003      	b.n	80032f0 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	fab2 f282 	clz	r2, r2
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	40d3      	lsrs	r3, r2
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	b2da      	uxtb	r2, r3
 80032f8:	4b4b      	ldr	r3, [pc, #300]	; (8003428 <HW_TS_Init+0x1ac>)
 80032fa:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80032fc:	4b48      	ldr	r3, [pc, #288]	; (8003420 <HW_TS_Init+0x1a4>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	b29b      	uxth	r3, r3
 8003302:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003306:	b29b      	uxth	r3, r3
 8003308:	3301      	adds	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	4b47      	ldr	r3, [pc, #284]	; (800342c <HW_TS_Init+0x1b0>)
 800330e:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8003310:	4b46      	ldr	r3, [pc, #280]	; (800342c <HW_TS_Init+0x1b0>)
 8003312:	881b      	ldrh	r3, [r3, #0]
 8003314:	3b01      	subs	r3, #1
 8003316:	4a44      	ldr	r2, [pc, #272]	; (8003428 <HW_TS_Init+0x1ac>)
 8003318:	7812      	ldrb	r2, [r2, #0]
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003322:	4a40      	ldr	r2, [pc, #256]	; (8003424 <HW_TS_Init+0x1a8>)
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	40d3      	lsrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003330:	4293      	cmp	r3, r2
 8003332:	d904      	bls.n	800333e <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8003334:	4b3e      	ldr	r3, [pc, #248]	; (8003430 <HW_TS_Init+0x1b4>)
 8003336:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800333a:	801a      	strh	r2, [r3, #0]
 800333c:	e003      	b.n	8003346 <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	b29a      	uxth	r2, r3
 8003342:	4b3b      	ldr	r3, [pc, #236]	; (8003430 <HW_TS_Init+0x1b4>)
 8003344:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8003346:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800334a:	f7ff fb85 	bl	8002a58 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800334e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003352:	f7ff fb6d 	bl	8002a30 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d143      	bne.n	80033e4 <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800335c:	4b35      	ldr	r3, [pc, #212]	; (8003434 <HW_TS_Init+0x1b8>)
 800335e:	2201      	movs	r2, #1
 8003360:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8003362:	4b35      	ldr	r3, [pc, #212]	; (8003438 <HW_TS_Init+0x1bc>)
 8003364:	f04f 32ff 	mov.w	r2, #4294967295
 8003368:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800336a:	2300      	movs	r3, #0
 800336c:	77fb      	strb	r3, [r7, #31]
 800336e:	e00c      	b.n	800338a <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8003370:	7ffa      	ldrb	r2, [r7, #31]
 8003372:	4932      	ldr	r1, [pc, #200]	; (800343c <HW_TS_Init+0x1c0>)
 8003374:	4613      	mov	r3, r2
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	4413      	add	r3, r2
 800337a:	00db      	lsls	r3, r3, #3
 800337c:	440b      	add	r3, r1
 800337e:	330c      	adds	r3, #12
 8003380:	2200      	movs	r2, #0
 8003382:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8003384:	7ffb      	ldrb	r3, [r7, #31]
 8003386:	3301      	adds	r3, #1
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d9ef      	bls.n	8003370 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8003390:	4b2b      	ldr	r3, [pc, #172]	; (8003440 <HW_TS_Init+0x1c4>)
 8003392:	2206      	movs	r2, #6
 8003394:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 8003396:	4b21      	ldr	r3, [pc, #132]	; (800341c <HW_TS_Init+0x1a0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	4b1f      	ldr	r3, [pc, #124]	; (800341c <HW_TS_Init+0x1a0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033a8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80033aa:	4b1c      	ldr	r3, [pc, #112]	; (800341c <HW_TS_Init+0x1a0>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <HW_TS_Init+0x1a0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80033be:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80033c0:	4b20      	ldr	r3, [pc, #128]	; (8003444 <HW_TS_Init+0x1c8>)
 80033c2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033c6:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80033c8:	2003      	movs	r0, #3
 80033ca:	f004 fd0d 	bl	8007de8 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80033ce:	4b13      	ldr	r3, [pc, #76]	; (800341c <HW_TS_Init+0x1a0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	4b11      	ldr	r3, [pc, #68]	; (800341c <HW_TS_Init+0x1a0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e0:	609a      	str	r2, [r3, #8]
 80033e2:	e00a      	b.n	80033fa <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 80033e4:	4b0d      	ldr	r3, [pc, #52]	; (800341c <HW_TS_Init+0x1a0>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80033f4:	2003      	movs	r0, #3
 80033f6:	f004 fce9 	bl	8007dcc <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80033fa:	4b08      	ldr	r3, [pc, #32]	; (800341c <HW_TS_Init+0x1a0>)
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8003404:	2200      	movs	r2, #0
 8003406:	2106      	movs	r1, #6
 8003408:	2003      	movs	r0, #3
 800340a:	f004 fca9 	bl	8007d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800340e:	2003      	movs	r0, #3
 8003410:	f004 fcc0 	bl	8007d94 <HAL_NVIC_EnableIRQ>

  return;
 8003414:	bf00      	nop
}
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000398 	.word	0x20000398
 8003420:	40002800 	.word	0x40002800
 8003424:	2000039c 	.word	0x2000039c
 8003428:	2000039d 	.word	0x2000039d
 800342c:	2000039e 	.word	0x2000039e
 8003430:	200003a0 	.word	0x200003a0
 8003434:	20000318 	.word	0x20000318
 8003438:	20000314 	.word	0x20000314
 800343c:	20000280 	.word	0x20000280
 8003440:	20000310 	.word	0x20000310
 8003444:	58000800 	.word	0x58000800

08003448 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8003448:	b480      	push	{r7}
 800344a:	b08b      	sub	sp, #44	; 0x2c
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8003458:	2300      	movs	r3, #0
 800345a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	61fb      	str	r3, [r7, #28]
  return(result);
 8003464:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003466:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8003468:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800346a:	e004      	b.n	8003476 <HW_TS_Create+0x2e>
  {
    loop++;
 800346c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003470:	3301      	adds	r3, #1
 8003472:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8003476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800347a:	2b05      	cmp	r3, #5
 800347c:	d80c      	bhi.n	8003498 <HW_TS_Create+0x50>
 800347e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003482:	492b      	ldr	r1, [pc, #172]	; (8003530 <HW_TS_Create+0xe8>)
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	440b      	add	r3, r1
 800348e:	330c      	adds	r3, #12
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1e9      	bne.n	800346c <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8003498:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800349c:	2b06      	cmp	r3, #6
 800349e:	d037      	beq.n	8003510 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 80034a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034a4:	4922      	ldr	r1, [pc, #136]	; (8003530 <HW_TS_Create+0xe8>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	440b      	add	r3, r1
 80034b0:	330c      	adds	r3, #12
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80034c0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034c4:	491a      	ldr	r1, [pc, #104]	; (8003530 <HW_TS_Create+0xe8>)
 80034c6:	4613      	mov	r3, r2
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4413      	add	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	440b      	add	r3, r1
 80034d0:	3310      	adds	r3, #16
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80034d6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034da:	4915      	ldr	r1, [pc, #84]	; (8003530 <HW_TS_Create+0xe8>)
 80034dc:	4613      	mov	r3, r2
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4413      	add	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	440b      	add	r3, r1
 80034e6:	330d      	adds	r3, #13
 80034e8:	79fa      	ldrb	r2, [r7, #7]
 80034ea:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80034ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80034f0:	490f      	ldr	r1, [pc, #60]	; (8003530 <HW_TS_Create+0xe8>)
 80034f2:	4613      	mov	r3, r2
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8003506:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8003508:	2300      	movs	r3, #0
 800350a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800350e:	e007      	b.n	8003520 <HW_TS_Create+0xd8>
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 800351a:	2301      	movs	r3, #1
 800351c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 8003520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003524:	4618      	mov	r0, r3
 8003526:	372c      	adds	r7, #44	; 0x2c
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr
 8003530:	20000280 	.word	0x20000280

08003534 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800353e:	f3ef 8310 	mrs	r3, PRIMASK
 8003542:	60fb      	str	r3, [r7, #12]
  return(result);
 8003544:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8003546:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800354a:	2003      	movs	r0, #3
 800354c:	f004 fc30 	bl	8007db0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003550:	4b37      	ldr	r3, [pc, #220]	; (8003630 <HW_TS_Stop+0xfc>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	22ca      	movs	r2, #202	; 0xca
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
 800355a:	4b35      	ldr	r3, [pc, #212]	; (8003630 <HW_TS_Stop+0xfc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2253      	movs	r2, #83	; 0x53
 8003562:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003564:	79fa      	ldrb	r2, [r7, #7]
 8003566:	4933      	ldr	r1, [pc, #204]	; (8003634 <HW_TS_Stop+0x100>)
 8003568:	4613      	mov	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	4413      	add	r3, r2
 800356e:	00db      	lsls	r3, r3, #3
 8003570:	440b      	add	r3, r1
 8003572:	330c      	adds	r3, #12
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d148      	bne.n	800360e <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 800357c:	79fb      	ldrb	r3, [r7, #7]
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff fbeb 	bl	8002d5c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8003586:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HW_TS_Stop+0x104>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800358c:	7cfb      	ldrb	r3, [r7, #19]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d135      	bne.n	80035fe <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8003592:	4b2a      	ldr	r3, [pc, #168]	; (800363c <HW_TS_Stop+0x108>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d108      	bne.n	80035b2 <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 80035a0:	bf00      	nop
 80035a2:	4b23      	ldr	r3, [pc, #140]	; (8003630 <HW_TS_Stop+0xfc>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 0304 	and.w	r3, r3, #4
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f7      	bne.n	80035a2 <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 80035b2:	4b1f      	ldr	r3, [pc, #124]	; (8003630 <HW_TS_Stop+0xfc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HW_TS_Stop+0xfc>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035c4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80035c6:	bf00      	nop
 80035c8:	4b19      	ldr	r3, [pc, #100]	; (8003630 <HW_TS_Stop+0xfc>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0f7      	beq.n	80035c8 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80035d8:	4b15      	ldr	r3, [pc, #84]	; (8003630 <HW_TS_Stop+0xfc>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	4b13      	ldr	r3, [pc, #76]	; (8003630 <HW_TS_Stop+0xfc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80035ec:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80035ee:	4b14      	ldr	r3, [pc, #80]	; (8003640 <HW_TS_Stop+0x10c>)
 80035f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80035f4:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80035f6:	2003      	movs	r0, #3
 80035f8:	f004 fbf6 	bl	8007de8 <HAL_NVIC_ClearPendingIRQ>
 80035fc:	e007      	b.n	800360e <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80035fe:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HW_TS_Stop+0x110>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	b2db      	uxtb	r3, r3
 8003604:	7cfa      	ldrb	r2, [r7, #19]
 8003606:	429a      	cmp	r2, r3
 8003608:	d001      	beq.n	800360e <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 800360a:	f7ff fcc9 	bl	8002fa0 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <HW_TS_Stop+0xfc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8003618:	2003      	movs	r0, #3
 800361a:	f004 fbbb 	bl	8007d94 <HAL_NVIC_EnableIRQ>
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8003628:	bf00      	nop
}
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	20000398 	.word	0x20000398
 8003634:	20000280 	.word	0x20000280
 8003638:	20000310 	.word	0x20000310
 800363c:	40002800 	.word	0x40002800
 8003640:	58000800 	.word	0x58000800
 8003644:	20000311 	.word	0x20000311

08003648 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	4603      	mov	r3, r0
 8003650:	6039      	str	r1, [r7, #0]
 8003652:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8003654:	79fa      	ldrb	r2, [r7, #7]
 8003656:	493b      	ldr	r1, [pc, #236]	; (8003744 <HW_TS_Start+0xfc>)
 8003658:	4613      	mov	r3, r2
 800365a:	005b      	lsls	r3, r3, #1
 800365c:	4413      	add	r3, r2
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	440b      	add	r3, r1
 8003662:	330c      	adds	r3, #12
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d103      	bne.n	8003674 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff ff60 	bl	8003534 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	60fb      	str	r3, [r7, #12]
  return(result);
 800367a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800367c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800367e:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8003680:	2003      	movs	r0, #3
 8003682:	f004 fb95 	bl	8007db0 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8003686:	4b30      	ldr	r3, [pc, #192]	; (8003748 <HW_TS_Start+0x100>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	22ca      	movs	r2, #202	; 0xca
 800368e:	625a      	str	r2, [r3, #36]	; 0x24
 8003690:	4b2d      	ldr	r3, [pc, #180]	; (8003748 <HW_TS_Start+0x100>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2253      	movs	r2, #83	; 0x53
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 800369a:	79fa      	ldrb	r2, [r7, #7]
 800369c:	4929      	ldr	r1, [pc, #164]	; (8003744 <HW_TS_Start+0xfc>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	440b      	add	r3, r1
 80036a8:	330c      	adds	r3, #12
 80036aa:	2202      	movs	r2, #2
 80036ac:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 80036ae:	79fa      	ldrb	r2, [r7, #7]
 80036b0:	4924      	ldr	r1, [pc, #144]	; (8003744 <HW_TS_Start+0xfc>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	3308      	adds	r3, #8
 80036be:	683a      	ldr	r2, [r7, #0]
 80036c0:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80036c2:	79fa      	ldrb	r2, [r7, #7]
 80036c4:	491f      	ldr	r1, [pc, #124]	; (8003744 <HW_TS_Start+0xfc>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	4413      	add	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	440b      	add	r3, r1
 80036d0:	3304      	adds	r3, #4
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80036d6:	79fb      	ldrb	r3, [r7, #7]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fa95 	bl	8002c08 <linkTimer>
 80036de:	4603      	mov	r3, r0
 80036e0:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80036e2:	4b1a      	ldr	r3, [pc, #104]	; (800374c <HW_TS_Start+0x104>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80036e8:	4b19      	ldr	r3, [pc, #100]	; (8003750 <HW_TS_Start+0x108>)
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	7c7a      	ldrb	r2, [r7, #17]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d002      	beq.n	80036fa <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 80036f4:	f7ff fc54 	bl	8002fa0 <RescheduleTimerList>
 80036f8:	e013      	b.n	8003722 <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80036fa:	79fa      	ldrb	r2, [r7, #7]
 80036fc:	4911      	ldr	r1, [pc, #68]	; (8003744 <HW_TS_Start+0xfc>)
 80036fe:	4613      	mov	r3, r2
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	4413      	add	r3, r2
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	440b      	add	r3, r1
 8003708:	3308      	adds	r3, #8
 800370a:	6819      	ldr	r1, [r3, #0]
 800370c:	8a7b      	ldrh	r3, [r7, #18]
 800370e:	79fa      	ldrb	r2, [r7, #7]
 8003710:	1ac9      	subs	r1, r1, r3
 8003712:	480c      	ldr	r0, [pc, #48]	; (8003744 <HW_TS_Start+0xfc>)
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4403      	add	r3, r0
 800371e:	3308      	adds	r3, #8
 8003720:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8003722:	4b09      	ldr	r3, [pc, #36]	; (8003748 <HW_TS_Start+0x100>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	22ff      	movs	r2, #255	; 0xff
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 800372c:	2003      	movs	r0, #3
 800372e:	f004 fb31 	bl	8007d94 <HAL_NVIC_EnableIRQ>
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800373c:	bf00      	nop
}
 800373e:	3718      	adds	r7, #24
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	20000280 	.word	0x20000280
 8003748:	20000398 	.word	0x20000398
 800374c:	20000310 	.word	0x20000310
 8003750:	20000311 	.word	0x20000311

08003754 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	460b      	mov	r3, r1
 800375e:	607a      	str	r2, [r7, #4]
 8003760:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4798      	blx	r3

  return;
 8003766:	bf00      	nop
}
 8003768:	3710      	adds	r7, #16
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
	...

08003770 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	4603      	mov	r3, r0
 800377c:	73fb      	strb	r3, [r7, #15]
 800377e:	4613      	mov	r3, r2
 8003780:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8003782:	2300      	movs	r3, #0
 8003784:	75bb      	strb	r3, [r7, #22]
    hw_status_t hw_status = hw_uart_ok;
 8003786:	2300      	movs	r3, #0
 8003788:	75fb      	strb	r3, [r7, #23]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800378a:	bf00      	nop
    }

    switch (hal_status)
 800378c:	7dbb      	ldrb	r3, [r7, #22]
 800378e:	2b03      	cmp	r3, #3
 8003790:	d816      	bhi.n	80037c0 <HW_UART_Transmit_DMA+0x50>
 8003792:	a201      	add	r2, pc, #4	; (adr r2, 8003798 <HW_UART_Transmit_DMA+0x28>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037a9 	.word	0x080037a9
 800379c:	080037af 	.word	0x080037af
 80037a0:	080037b5 	.word	0x080037b5
 80037a4:	080037bb 	.word	0x080037bb
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 80037a8:	2300      	movs	r3, #0
 80037aa:	75fb      	strb	r3, [r7, #23]
            break;
 80037ac:	e009      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 80037ae:	2301      	movs	r3, #1
 80037b0:	75fb      	strb	r3, [r7, #23]
            break;
 80037b2:	e006      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 80037b4:	2302      	movs	r3, #2
 80037b6:	75fb      	strb	r3, [r7, #23]
            break;
 80037b8:	e003      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 80037ba:	2303      	movs	r3, #3
 80037bc:	75fb      	strb	r3, [r7, #23]
            break;
 80037be:	e000      	b.n	80037c2 <HW_UART_Transmit_DMA+0x52>

        default:
            break;
 80037c0:	bf00      	nop
    }

    return hw_status;
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	371c      	adds	r7, #28
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <_angle_correction>:





int _angle_correction(int measured_angle){
 80037d0:	b480      	push	{r7}
 80037d2:	b089      	sub	sp, #36	; 0x24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  //given a measured angle, get back a warped angle interpolated from measured corrections
  int i=0;
 80037d8:	2300      	movs	r3, #0
 80037da:	61fb      	str	r3, [r7, #28]
  while(measured_angle > MAP_ANGLE_MEASURED[i+1]) i++;
 80037dc:	e002      	b.n	80037e4 <_angle_correction+0x14>
 80037de:	69fb      	ldr	r3, [r7, #28]
 80037e0:	3301      	adds	r3, #1
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	3301      	adds	r3, #1
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <_angle_correction+0x98>)
 80037ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	dcf4      	bgt.n	80037de <_angle_correction+0xe>

  int low_m = MAP_ANGLE_MEASURED[i];
 80037f4:	4a1c      	ldr	r2, [pc, #112]	; (8003868 <_angle_correction+0x98>)
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037fc:	61bb      	str	r3, [r7, #24]
  int high_m = MAP_ANGLE_MEASURED[i+1];
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	3301      	adds	r3, #1
 8003802:	4a19      	ldr	r2, [pc, #100]	; (8003868 <_angle_correction+0x98>)
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	617b      	str	r3, [r7, #20]
  int low_r = MAP_ANGLE_REAL[i];
 800380a:	4a18      	ldr	r2, [pc, #96]	; (800386c <_angle_correction+0x9c>)
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003812:	613b      	str	r3, [r7, #16]
  int high_r = MAP_ANGLE_REAL[i+1];
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	3301      	adds	r3, #1
 8003818:	4a14      	ldr	r2, [pc, #80]	; (800386c <_angle_correction+0x9c>)
 800381a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381e:	60fb      	str	r3, [r7, #12]

  int scaled = (int)((high_r-low_r)*(measured_angle-low_m)/(float)(high_m-low_m));
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	1ad3      	subs	r3, r2, r3
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	1a8a      	subs	r2, r1, r2
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	ee07 3a90 	vmov	s15, r3
 8003834:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	ee07 3a90 	vmov	s15, r3
 8003842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800384a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800384e:	ee17 3a90 	vmov	r3, s15
 8003852:	60bb      	str	r3, [r7, #8]
  return (low_r + scaled);
 8003854:	693a      	ldr	r2, [r7, #16]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	4413      	add	r3, r2
}
 800385a:	4618      	mov	r0, r3
 800385c:	3724      	adds	r7, #36	; 0x24
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	080195e4 	.word	0x080195e4
 800386c:	080195c0 	.word	0x080195c0

08003870 <_get_pad_angle>:


int _get_pad_angle(int p1, int p2){
 8003870:	b590      	push	{r4, r7, lr}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
    //return angle from 0 to 120 degrees between two pads given their two values
    if (p1 == 0) return 120;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d101      	bne.n	8003884 <_get_pad_angle+0x14>
 8003880:	2378      	movs	r3, #120	; 0x78
 8003882:	e02c      	b.n	80038de <_get_pad_angle+0x6e>
    if (p2 == 0) return 0;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <_get_pad_angle+0x1e>
 800388a:	2300      	movs	r3, #0
 800388c:	e027      	b.n	80038de <_get_pad_angle+0x6e>
    return round(((float)(p2)/(float)(p1+p2))*120.0);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	ee07 3a90 	vmov	s15, r3
 8003894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	4413      	add	r3, r2
 800389e:	ee07 3a90 	vmov	s15, r3
 80038a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038aa:	ee16 0a90 	vmov	r0, s13
 80038ae:	f7fc fe23 	bl	80004f8 <__aeabi_f2d>
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <_get_pad_angle+0x78>)
 80038b8:	f7fc fe76 	bl	80005a8 <__aeabi_dmul>
 80038bc:	4603      	mov	r3, r0
 80038be:	460c      	mov	r4, r1
 80038c0:	ec44 3b17 	vmov	d7, r3, r4
 80038c4:	eeb0 0a47 	vmov.f32	s0, s14
 80038c8:	eef0 0a67 	vmov.f32	s1, s15
 80038cc:	f013 f812 	bl	80168f4 <round>
 80038d0:	ec54 3b10 	vmov	r3, r4, d0
 80038d4:	4618      	mov	r0, r3
 80038d6:	4621      	mov	r1, r4
 80038d8:	f7fd f916 	bl	8000b08 <__aeabi_d2iz>
 80038dc:	4603      	mov	r3, r0
}
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd90      	pop	{r4, r7, pc}
 80038e6:	bf00      	nop
 80038e8:	405e0000 	.word	0x405e0000

080038ec <_get_angle>:


int _get_angle(int* c) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b08a      	sub	sp, #40	; 0x28
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  //c[0] is proximity
  //60 min on clock, so 6 deg resolution
  //3 pads.  take top 2 values, map linearly to 120 degree slice.
  int angle = ANGLE_OFFSET;
 80038f4:	f240 1361 	movw	r3, #353	; 0x161
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
  int warped_angle;

  if ( ((c[1]==0) + (c[2]==0) + (c[3]==0)) > 1){//if more than one value is zero
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	3304      	adds	r3, #4
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	461a      	mov	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3308      	adds	r3, #8
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf0c      	ite	eq
 8003916:	2301      	moveq	r3, #1
 8003918:	2300      	movne	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	4413      	add	r3, r2
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	320c      	adds	r2, #12
 8003922:	6812      	ldr	r2, [r2, #0]
 8003924:	2a00      	cmp	r2, #0
 8003926:	bf0c      	ite	eq
 8003928:	2201      	moveq	r2, #1
 800392a:	2200      	movne	r2, #0
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	4413      	add	r3, r2
 8003930:	2b01      	cmp	r3, #1
 8003932:	dd1a      	ble.n	800396a <_get_angle+0x7e>
	  if (c[1]) angle += 0;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	f040 8081 	bne.w	8003a42 <_get_angle+0x156>
	  else if (c[2]) angle += 120;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3308      	adds	r3, #8
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <_get_angle+0x66>
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	3378      	adds	r3, #120	; 0x78
 800394e:	627b      	str	r3, [r7, #36]	; 0x24
 8003950:	e077      	b.n	8003a42 <_get_angle+0x156>
	  else if (c[3]) angle += 240;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	330c      	adds	r3, #12
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <_get_angle+0x78>
 800395c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395e:	33f0      	adds	r3, #240	; 0xf0
 8003960:	627b      	str	r3, [r7, #36]	; 0x24
 8003962:	e06e      	b.n	8003a42 <_get_angle+0x156>
	  else return -1;
 8003964:	f04f 33ff 	mov.w	r3, #4294967295
 8003968:	e07e      	b.n	8003a68 <_get_angle+0x17c>
  }

  else if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	330c      	adds	r3, #12
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	dd20      	ble.n	80039bc <_get_angle+0xd0>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3308      	adds	r3, #8
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	330c      	adds	r3, #12
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	429a      	cmp	r2, r3
 8003988:	dd18      	ble.n	80039bc <_get_angle+0xd0>
    int pos1 = c[1]-c[3];
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	330c      	adds	r3, #12
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	623b      	str	r3, [r7, #32]
    int pos2 = c[2]-c[3];
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	3308      	adds	r3, #8
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	330c      	adds	r3, #12
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	61fb      	str	r3, [r7, #28]
    angle += _get_pad_angle(pos1, pos2);
 80039aa:	69f9      	ldr	r1, [r7, #28]
 80039ac:	6a38      	ldr	r0, [r7, #32]
 80039ae:	f7ff ff5f 	bl	8003870 <_get_pad_angle>
 80039b2:	4602      	mov	r2, r0
 80039b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b6:	4413      	add	r3, r2
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[1] > c[3] && c[2] > c[3]) { //first third, between 1 and 2
 80039ba:	e042      	b.n	8003a42 <_get_angle+0x156>
  }

  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	3308      	adds	r3, #8
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3304      	adds	r3, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	dd21      	ble.n	8003a10 <_get_angle+0x124>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	330c      	adds	r3, #12
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	429a      	cmp	r2, r3
 80039da:	dd19      	ble.n	8003a10 <_get_angle+0x124>
    int pos1 = c[2]-c[1];
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3308      	adds	r3, #8
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	3304      	adds	r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	61bb      	str	r3, [r7, #24]
    int pos2 = c[3]-c[1];
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	330c      	adds	r3, #12
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3304      	adds	r3, #4
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	617b      	str	r3, [r7, #20]
    angle += _get_pad_angle(pos1, pos2) + 120;
 80039fc:	6979      	ldr	r1, [r7, #20]
 80039fe:	69b8      	ldr	r0, [r7, #24]
 8003a00:	f7ff ff36 	bl	8003870 <_get_pad_angle>
 8003a04:	4603      	mov	r3, r0
 8003a06:	3378      	adds	r3, #120	; 0x78
 8003a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0a:	4413      	add	r3, r2
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
  else if (c[2] > c[1] && c[3] > c[1]) { //second third, between 2 and 3
 8003a0e:	e018      	b.n	8003a42 <_get_angle+0x156>
  }

  else { //third third, between 3 and 1
    int pos1 = c[3]-c[2];
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	330c      	adds	r3, #12
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3308      	adds	r3, #8
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	613b      	str	r3, [r7, #16]
    int pos2 = c[1]-c[2];
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	60fb      	str	r3, [r7, #12]
    angle += _get_pad_angle(pos1, pos2) + 240;
 8003a30:	68f9      	ldr	r1, [r7, #12]
 8003a32:	6938      	ldr	r0, [r7, #16]
 8003a34:	f7ff ff1c 	bl	8003870 <_get_pad_angle>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	33f0      	adds	r3, #240	; 0xf0
 8003a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a3e:	4413      	add	r3, r2
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
  }

  angle %= 360;
 8003a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a44:	4a0a      	ldr	r2, [pc, #40]	; (8003a70 <_get_angle+0x184>)
 8003a46:	fb82 1203 	smull	r1, r2, r2, r3
 8003a4a:	441a      	add	r2, r3
 8003a4c:	1211      	asrs	r1, r2, #8
 8003a4e:	17da      	asrs	r2, r3, #31
 8003a50:	1a8a      	subs	r2, r1, r2
 8003a52:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8003a56:	fb01 f202 	mul.w	r2, r1, r2
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  warped_angle = _angle_correction(angle);
 8003a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003a60:	f7ff feb6 	bl	80037d0 <_angle_correction>
 8003a64:	60b8      	str	r0, [r7, #8]

  return warped_angle;
 8003a66:	68bb      	ldr	r3, [r7, #8]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3728      	adds	r7, #40	; 0x28
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	b60b60b7 	.word	0xb60b60b7

08003a74 <_get_min>:


int _get_min(int* c) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
	int angle = _get_angle(c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff35 	bl	80038ec <_get_angle>
 8003a82:	60f8      	str	r0, [r7, #12]
	if (angle == -1) return -1;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d102      	bne.n	8003a92 <_get_min+0x1e>
 8003a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a90:	e005      	b.n	8003a9e <_get_min+0x2a>
	return angle/6;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <_get_min+0x34>)
 8003a96:	fb82 1203 	smull	r1, r2, r2, r3
 8003a9a:	17db      	asrs	r3, r3, #31
 8003a9c:	1ad3      	subs	r3, r2, r3
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2aaaaaab 	.word	0x2aaaaaab

08003aac <_get_min_if_pressed>:


int _get_min_if_pressed(int* c){
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	//return -1 if not pressed, otherwise return a logical minute value
	if (c[0] <= IQS_TOUCH_THRESH) return -1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	dc02      	bgt.n	8003ac2 <_get_min_if_pressed+0x16>
 8003abc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ac0:	e003      	b.n	8003aca <_get_min_if_pressed+0x1e>
	else return _get_min(c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7ff ffd6 	bl	8003a74 <_get_min>
 8003ac8:	4603      	mov	r3, r0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <iqs263_poll_raw>:


void iqs263_poll_raw(int* coords){
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]

  //uint16_t coords[4];

  uint8_t coords_raw[8];

  iqs263_read(0x06, coords_raw, 8);
 8003ada:	f107 030c 	add.w	r3, r7, #12
 8003ade:	2208      	movs	r2, #8
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	2006      	movs	r0, #6
 8003ae4:	f000 f888 	bl	8003bf8 <iqs263_read>

  for (int i=0; i<4; i++){
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e019      	b.n	8003b22 <iqs263_poll_raw+0x50>
	  coords[i] = (coords_raw[2*i+1] << 8) | (coords_raw[2*i] & 0xFF);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	3301      	adds	r3, #1
 8003af4:	f107 0218 	add.w	r2, r7, #24
 8003af8:	4413      	add	r3, r2
 8003afa:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003afe:	021a      	lsls	r2, r3, #8
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	005b      	lsls	r3, r3, #1
 8003b04:	f107 0118 	add.w	r1, r7, #24
 8003b08:	440b      	add	r3, r1
 8003b0a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	440b      	add	r3, r1
 8003b18:	4302      	orrs	r2, r0
 8003b1a:	601a      	str	r2, [r3, #0]
  for (int i=0; i<4; i++){
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b03      	cmp	r3, #3
 8003b26:	dde2      	ble.n	8003aee <iqs263_poll_raw+0x1c>
  }
  //c[0] is proximity

}
 8003b28:	bf00      	nop
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <setup_iqs263>:


HAL_StatusTypeDef setup_iqs263() {
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af04      	add	r7, sp, #16

	uint8_t c;
	HAL_StatusTypeDef resp = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[5] = {0x00, 0x00, 0x00, 0x00, 0x00};
 8003b3a:	463b      	mov	r3, r7
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	711a      	strb	r2, [r3, #4]

	//check product num
	while (resp == HAL_ERROR){
 8003b42:	e00e      	b.n	8003b62 <setup_iqs263+0x32>
		resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x00, sizeof(uint8_t), &c, sizeof(uint8_t), HAL_MAX_DELAY);
 8003b44:	f04f 33ff 	mov.w	r3, #4294967295
 8003b48:	9302      	str	r3, [sp, #8]
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	9301      	str	r3, [sp, #4]
 8003b4e:	1dbb      	adds	r3, r7, #6
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	2301      	movs	r3, #1
 8003b54:	2200      	movs	r2, #0
 8003b56:	2188      	movs	r1, #136	; 0x88
 8003b58:	4826      	ldr	r0, [pc, #152]	; (8003bf4 <setup_iqs263+0xc4>)
 8003b5a:	f004 febd 	bl	80088d8 <HAL_I2C_Mem_Read>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b62:	79fb      	ldrb	r3, [r7, #7]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d0ed      	beq.n	8003b44 <setup_iqs263+0x14>
	}

	if (c != 0x3C) {
 8003b68:	79bb      	ldrb	r3, [r7, #6]
 8003b6a:	2b3c      	cmp	r3, #60	; 0x3c
 8003b6c:	d001      	beq.n	8003b72 <setup_iqs263+0x42>
	  //ERROR - should read product code 0x3C
	  return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e03c      	b.n	8003bec <setup_iqs263+0xbc>
	}

	HAL_Delay(100);
 8003b72:	2064      	movs	r0, #100	; 0x64
 8003b74:	f002 ff65 	bl	8006a42 <HAL_Delay>


	//now write and read 0x0E to address 0x0D
	out_data[0] = 0x0E;
 8003b78:	230e      	movs	r3, #14
 8003b7a:	703b      	strb	r3, [r7, #0]

	resp = HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003b80:	e00e      	b.n	8003ba0 <setup_iqs263+0x70>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x0D, 1, out_data, 1, HAL_MAX_DELAY);
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	9302      	str	r3, [sp, #8]
 8003b88:	2301      	movs	r3, #1
 8003b8a:	9301      	str	r3, [sp, #4]
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	2301      	movs	r3, #1
 8003b92:	220d      	movs	r2, #13
 8003b94:	2188      	movs	r1, #136	; 0x88
 8003b96:	4817      	ldr	r0, [pc, #92]	; (8003bf4 <setup_iqs263+0xc4>)
 8003b98:	f004 fd8a 	bl	80086b0 <HAL_I2C_Mem_Write>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003ba0:	79fb      	ldrb	r3, [r7, #7]
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d0ed      	beq.n	8003b82 <setup_iqs263+0x52>
	}
	HAL_Delay(100);
 8003ba6:	2064      	movs	r0, #100	; 0x64
 8003ba8:	f002 ff4b 	bl	8006a42 <HAL_Delay>
	}

	HAL_Delay(50);
	*/

	out_data[0]=0x00;
 8003bac:	2300      	movs	r3, #0
 8003bae:	703b      	strb	r3, [r7, #0]
	//time average filter coef in bits 5:4 (00 is slowest, 11 is fastest), counts filtering for noise in bits 1:0 (00 is no filter, 11 is slowest).
	out_data[1]=0b00001001;
 8003bb0:	2309      	movs	r3, #9
 8003bb2:	707b      	strb	r3, [r7, #1]
	//lets go into Low Power mode if we have a prolonged state.	Wake on  movement on CH3
	out_data[2]=0x00;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	70bb      	strb	r3, [r7, #2]
	//out_data[2]=0b10001000;
	//lets disable turbo and only sample at fixed period 40Hz (given 2MHz clock)
	//out_data[3]=0x00;
	out_data[3]=0b00000110;
 8003bb8:	2306      	movs	r3, #6
 8003bba:	70fb      	strb	r3, [r7, #3]
	out_data[4]=0x00;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	713b      	strb	r3, [r7, #4]

	resp = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003bc4:	e00e      	b.n	8003be4 <setup_iqs263+0xb4>
		  resp = HAL_I2C_Mem_Write(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, out_data, 5, HAL_MAX_DELAY);
 8003bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8003bca:	9302      	str	r3, [sp, #8]
 8003bcc:	2305      	movs	r3, #5
 8003bce:	9301      	str	r3, [sp, #4]
 8003bd0:	463b      	mov	r3, r7
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	2209      	movs	r2, #9
 8003bd8:	2188      	movs	r1, #136	; 0x88
 8003bda:	4806      	ldr	r0, [pc, #24]	; (8003bf4 <setup_iqs263+0xc4>)
 8003bdc:	f004 fd68 	bl	80086b0 <HAL_I2C_Mem_Write>
 8003be0:	4603      	mov	r3, r0
 8003be2:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8003be4:	79fb      	ldrb	r3, [r7, #7]
 8003be6:	2b01      	cmp	r3, #1
 8003be8:	d0ed      	beq.n	8003bc6 <setup_iqs263+0x96>
	while (resp == HAL_ERROR){
	    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, 0x09, 1, readback, 5, HAL_MAX_DELAY);
	}
	*/

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}
 8003bf4:	2002e1e0 	.word	0x2002e1e0

08003bf8 <iqs263_read>:

  return HAL_OK;

}

HAL_StatusTypeDef iqs263_read(uint8_t addr, uint8_t* buf, uint8_t size) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b088      	sub	sp, #32
 8003bfc:	af04      	add	r7, sp, #16
 8003bfe:	4603      	mov	r3, r0
 8003c00:	6039      	str	r1, [r7, #0]
 8003c02:	71fb      	strb	r3, [r7, #7]
 8003c04:	4613      	mov	r3, r2
 8003c06:	71bb      	strb	r3, [r7, #6]


  const uint16_t max_tries = 300;
 8003c08:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8003c0c:	817b      	strh	r3, [r7, #10]
  uint16_t current_tries = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	81fb      	strh	r3, [r7, #14]

  HAL_StatusTypeDef resp = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	737b      	strb	r3, [r7, #13]

  while (resp == HAL_ERROR && current_tries < max_tries){
 8003c16:	e014      	b.n	8003c42 <iqs263_read+0x4a>
    resp = HAL_I2C_Mem_Read(&IQS_I2C_PORT, IQS_ADDR, addr, 1, buf, size, HAL_MAX_DELAY);
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	b299      	uxth	r1, r3
 8003c1c:	79bb      	ldrb	r3, [r7, #6]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f04f 32ff 	mov.w	r2, #4294967295
 8003c24:	9202      	str	r2, [sp, #8]
 8003c26:	9301      	str	r3, [sp, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	9300      	str	r3, [sp, #0]
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	460a      	mov	r2, r1
 8003c30:	2188      	movs	r1, #136	; 0x88
 8003c32:	480d      	ldr	r0, [pc, #52]	; (8003c68 <iqs263_read+0x70>)
 8003c34:	f004 fe50 	bl	80088d8 <HAL_I2C_Mem_Read>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	737b      	strb	r3, [r7, #13]
    current_tries++;
 8003c3c:	89fb      	ldrh	r3, [r7, #14]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	81fb      	strh	r3, [r7, #14]
  while (resp == HAL_ERROR && current_tries < max_tries){
 8003c42:	7b7b      	ldrb	r3, [r7, #13]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d103      	bne.n	8003c50 <iqs263_read+0x58>
 8003c48:	89fa      	ldrh	r2, [r7, #14]
 8003c4a:	897b      	ldrh	r3, [r7, #10]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3e3      	bcc.n	8003c18 <iqs263_read+0x20>
  }

  if (current_tries >= max_tries) {
 8003c50:	89fa      	ldrh	r2, [r7, #14]
 8003c52:	897b      	ldrh	r3, [r7, #10]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d301      	bcc.n	8003c5c <iqs263_read+0x64>
	  return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <iqs263_read+0x66>
  }

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0

}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	2002e1e0 	.word	0x2002e1e0

08003c6c <iqs263_get_min_if_pressed>:
	iqs263_poll_raw(coords);
	return _get_min(coords);
}


int iqs263_get_min_if_pressed(){
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
	int* coords[4] = {0x0000, 0x0000, 0x0000, 0x0000};
 8003c72:	463b      	mov	r3, r7
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
 8003c78:	605a      	str	r2, [r3, #4]
 8003c7a:	609a      	str	r2, [r3, #8]
 8003c7c:	60da      	str	r2, [r3, #12]
	iqs263_poll_raw(coords);
 8003c7e:	463b      	mov	r3, r7
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7ff ff26 	bl	8003ad2 <iqs263_poll_raw>
	return _get_min_if_pressed(coords);
 8003c86:	463b      	mov	r3, r7
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff0f 	bl	8003aac <_get_min_if_pressed>
 8003c8e:	4603      	mov	r3, r0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <LL_EXTI_DisableIT_0_31>:
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003ca0:	4b07      	ldr	r3, [pc, #28]	; (8003cc0 <LL_EXTI_DisableIT_0_31+0x28>)
 8003ca2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	4905      	ldr	r1, [pc, #20]	; (8003cc0 <LL_EXTI_DisableIT_0_31+0x28>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	58000800 	.word	0x58000800

08003cc4 <LL_EXTI_DisableIT_32_63>:
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003ccc:	4b07      	ldr	r3, [pc, #28]	; (8003cec <LL_EXTI_DisableIT_32_63+0x28>)
 8003cce:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	4905      	ldr	r1, [pc, #20]	; (8003cec <LL_EXTI_DisableIT_32_63+0x28>)
 8003cd8:	4013      	ands	r3, r2
 8003cda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	58000800 	.word	0x58000800

08003cf0 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8003cf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cfc:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8003cfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8003d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0a:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	cafecafe 	.word	0xcafecafe

08003d2c <LL_RCC_LSE_SetDriveCapability>:
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8003d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f023 0218 	bic.w	r2, r3, #24
 8003d40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d92:	bf00      	nop
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8003da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003da4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003da8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003db0:	d101      	bne.n	8003db6 <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e000      	b.n	8003db8 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8003dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dd6:	d101      	bne.n	8003ddc <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_AHB2_GRP1_EnableClock>:
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003df0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003df6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003e00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	bf00      	nop
 8003e10:	3714      	adds	r7, #20
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <LL_AHB3_GRP1_EnableClock>:
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b085      	sub	sp, #20
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003e22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
}
 8003e40:	bf00      	nop
 8003e42:	3714      	adds	r7, #20
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685a      	ldr	r2, [r3, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	041b      	lsls	r3, r3, #16
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	605a      	str	r2, [r3, #4]
}
 8003e64:	bf00      	nop
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685a      	ldr	r2, [r3, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	605a      	str	r2, [r3, #4]
}
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <LL_C2_IPCC_DisableTransmitChannel>:
{
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
 8003e9a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	695a      	ldr	r2, [r3, #20]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	041b      	lsls	r3, r3, #16
 8003ea4:	431a      	orrs	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	615a      	str	r2, [r3, #20]
}
 8003eaa:	bf00      	nop
 8003eac:	370c      	adds	r7, #12
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <LL_C2_IPCC_DisableReceiveChannel>:
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b083      	sub	sp, #12
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	695a      	ldr	r2, [r3, #20]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	615a      	str	r2, [r3, #20]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr

08003ef4 <LL_C2_IPCC_ClearFlag_CHx>:
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	619a      	str	r2, [r3, #24]
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003f14:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <LL_LPM_EnableSleep+0x1c>)
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	4a04      	ldr	r2, [pc, #16]	; (8003f2c <LL_LPM_EnableSleep+0x1c>)
 8003f1a:	f023 0304 	bic.w	r3, r3, #4
 8003f1e:	6113      	str	r3, [r2, #16]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	e000ed00 	.word	0xe000ed00

08003f30 <main>:
static void Reset_BackupDomain( void );
static void Init_Exti( void );
static void Config_HSE(void);

int main(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8003f34:	4b49      	ldr	r3, [pc, #292]	; (800405c <main+0x12c>)
 8003f36:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f3a:	611a      	str	r2, [r3, #16]


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f3c:	f003 fd96 	bl	8007a6c <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8003f40:	f002 fd31 	bl	80069a6 <Reset_Device>
  Config_HSE();
 8003f44:	f002 fd1b 	bl	800697e <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f48:	f000 f8d6 	bl	80040f8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8003f4c:	f002 fd10 	bl	8006970 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8003f50:	f002 fd6b 	bl	8006a2a <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f54:	f000 fae4 	bl	8004520 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003f58:	f000 f94e 	bl	80041f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8003f5c:	f000 f9f2 	bl	8004344 <MX_SPI1_Init>
  MX_RF_Init();
 8003f60:	f000 f98a 	bl	8004278 <MX_RF_Init>
  MX_RTC_Init();
 8003f64:	f000 f990 	bl	8004288 <MX_RTC_Init>
  MX_TIM1_Init();
 8003f68:	f000 fa2a 	bl	80043c0 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  GlobalState_Init();
 8003f6c:	f000 fb3a 	bl	80045e4 <GlobalState_Init>

  //Init Pseudo-Random Number Generation Seed
  srand(0xFA1863A7);
 8003f70:	483b      	ldr	r0, [pc, #236]	; (8004060 <main+0x130>)
 8003f72:	f010 fbef 	bl	8014754 <srand>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003f76:	f00b fcbf 	bl	800f8f8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
    /* creation of rtcMutex */
    rtcMutexHandle = osMutexNew(&rtcMutex_attributes);
 8003f7a:	483a      	ldr	r0, [pc, #232]	; (8004064 <main+0x134>)
 8003f7c:	f00b fef0 	bl	800fd60 <osMutexNew>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b39      	ldr	r3, [pc, #228]	; (8004068 <main+0x138>)
 8003f84:	601a      	str	r2, [r3, #0]

    /* creation of timeBoundMutex */
    timeBoundMutexHandle = osMutexNew(&timeBoundMutex_attributes);
 8003f86:	4839      	ldr	r0, [pc, #228]	; (800406c <main+0x13c>)
 8003f88:	f00b feea 	bl	800fd60 <osMutexNew>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b38      	ldr	r3, [pc, #224]	; (8004070 <main+0x140>)
 8003f90:	601a      	str	r2, [r3, #0]

    /* creation of lastSeenMutex */
    lastSeenMutexHandle = osMutexNew(&lastSeenMutex_attributes);
 8003f92:	4838      	ldr	r0, [pc, #224]	; (8004074 <main+0x144>)
 8003f94:	f00b fee4 	bl	800fd60 <osMutexNew>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	4b37      	ldr	r3, [pc, #220]	; (8004078 <main+0x148>)
 8003f9c:	601a      	str	r2, [r3, #0]

    /* creation of timeEstimateMutex */
    //timeEstimateMutexHandle = osMutexNew(&timeEstimateMutex_attributes);

    /* creation of conditionMutex */
    conditionMutexHandle = osMutexNew(&conditionMutex_attributes);
 8003f9e:	4837      	ldr	r0, [pc, #220]	; (800407c <main+0x14c>)
 8003fa0:	f00b fede 	bl	800fd60 <osMutexNew>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b36      	ldr	r3, [pc, #216]	; (8004080 <main+0x150>)
 8003fa8:	601a      	str	r2, [r3, #0]

    /* creation of modeMutex */
    modeMutexHandle = osMutexNew(&modeMutex_attributes);
 8003faa:	4836      	ldr	r0, [pc, #216]	; (8004084 <main+0x154>)
 8003fac:	f00b fed8 	bl	800fd60 <osMutexNew>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b35      	ldr	r3, [pc, #212]	; (8004088 <main+0x158>)
 8003fb4:	601a      	str	r2, [r3, #0]

    /* creation of surveyMutex */
    surveyMutexHandle = osMutexNew(&surveyMutex_attributes);
 8003fb6:	4835      	ldr	r0, [pc, #212]	; (800408c <main+0x15c>)
 8003fb8:	f00b fed2 	bl	800fd60 <osMutexNew>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b34      	ldr	r3, [pc, #208]	; (8004090 <main+0x160>)
 8003fc0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_QUEUES */
      /* creation of bleTXqueue */
      bleTXqueueHandle = osMessageQueueNew (16, sizeof(BLETX_Queue_t), &bleTXqueue_attributes);
 8003fc2:	4a34      	ldr	r2, [pc, #208]	; (8004094 <main+0x164>)
 8003fc4:	2104      	movs	r1, #4
 8003fc6:	2010      	movs	r0, #16
 8003fc8:	f00c f96e 	bl	80102a8 <osMessageQueueNew>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b32      	ldr	r3, [pc, #200]	; (8004098 <main+0x168>)
 8003fd0:	601a      	str	r2, [r3, #0]

      /* creation of bleRXqueue */
      bleRXqueueHandle = osMessageQueueNew (16, sizeof(P2PS_STM_Data_t *), &bleRXqueue_attributes);
 8003fd2:	4a32      	ldr	r2, [pc, #200]	; (800409c <main+0x16c>)
 8003fd4:	2104      	movs	r1, #4
 8003fd6:	2010      	movs	r0, #16
 8003fd8:	f00c f966 	bl	80102a8 <osMessageQueueNew>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b30      	ldr	r3, [pc, #192]	; (80040a0 <main+0x170>)
 8003fe0:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
        /* creation of uiControl */
        uiControlHandle = osThreadNew(startUIControl, NULL, &uiControl_attributes);
 8003fe2:	4a30      	ldr	r2, [pc, #192]	; (80040a4 <main+0x174>)
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4830      	ldr	r0, [pc, #192]	; (80040a8 <main+0x178>)
 8003fe8:	f00b fcf0 	bl	800f9cc <osThreadNew>
 8003fec:	4602      	mov	r2, r0
 8003fee:	4b2f      	ldr	r3, [pc, #188]	; (80040ac <main+0x17c>)
 8003ff0:	601a      	str	r2, [r3, #0]

        /* creation of ESMMain */
        esmMainHandle = osThreadNew(startESMMain, NULL, &esmMain_attributes);
 8003ff2:	4a2f      	ldr	r2, [pc, #188]	; (80040b0 <main+0x180>)
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	482f      	ldr	r0, [pc, #188]	; (80040b4 <main+0x184>)
 8003ff8:	f00b fce8 	bl	800f9cc <osThreadNew>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	4b2e      	ldr	r3, [pc, #184]	; (80040b8 <main+0x188>)
 8004000:	601a      	str	r2, [r3, #0]

        /* creation of buttonPress */
        buttonPressHandle = osThreadNew(startButtonPress, NULL, &buttonPress_attributes);
 8004002:	4a2e      	ldr	r2, [pc, #184]	; (80040bc <main+0x18c>)
 8004004:	2100      	movs	r1, #0
 8004006:	482e      	ldr	r0, [pc, #184]	; (80040c0 <main+0x190>)
 8004008:	f00b fce0 	bl	800f9cc <osThreadNew>
 800400c:	4602      	mov	r2, r0
 800400e:	4b2d      	ldr	r3, [pc, #180]	; (80040c4 <main+0x194>)
 8004010:	601a      	str	r2, [r3, #0]

        /* creation of alert */
        alertHandle = osThreadNew(startAlert, NULL, &alert_attributes);
 8004012:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <main+0x198>)
 8004014:	2100      	movs	r1, #0
 8004016:	482d      	ldr	r0, [pc, #180]	; (80040cc <main+0x19c>)
 8004018:	f00b fcd8 	bl	800f9cc <osThreadNew>
 800401c:	4602      	mov	r2, r0
 800401e:	4b2c      	ldr	r3, [pc, #176]	; (80040d0 <main+0x1a0>)
 8004020:	601a      	str	r2, [r3, #0]

        /* creation of conditionsPoll */
        conditionsPollHandle = osThreadNew(startConditionsPoll, NULL, &conditionsPoll_attributes);
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <main+0x1a4>)
 8004024:	2100      	movs	r1, #0
 8004026:	482c      	ldr	r0, [pc, #176]	; (80040d8 <main+0x1a8>)
 8004028:	f00b fcd0 	bl	800f9cc <osThreadNew>
 800402c:	4602      	mov	r2, r0
 800402e:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <main+0x1ac>)
 8004030:	601a      	str	r2, [r3, #0]

        /* creation of bleTX */
        bleTXHandle = osThreadNew(startBLETX, NULL, &bleTX_attributes);
 8004032:	4a2b      	ldr	r2, [pc, #172]	; (80040e0 <main+0x1b0>)
 8004034:	2100      	movs	r1, #0
 8004036:	482b      	ldr	r0, [pc, #172]	; (80040e4 <main+0x1b4>)
 8004038:	f00b fcc8 	bl	800f9cc <osThreadNew>
 800403c:	4602      	mov	r2, r0
 800403e:	4b2a      	ldr	r3, [pc, #168]	; (80040e8 <main+0x1b8>)
 8004040:	601a      	str	r2, [r3, #0]

        /* creation of bleRX */
        bleRXHandle = osThreadNew(startBLERX, NULL, &bleRX_attributes);
 8004042:	4a2a      	ldr	r2, [pc, #168]	; (80040ec <main+0x1bc>)
 8004044:	2100      	movs	r1, #0
 8004046:	482a      	ldr	r0, [pc, #168]	; (80040f0 <main+0x1c0>)
 8004048:	f00b fcc0 	bl	800f9cc <osThreadNew>
 800404c:	4602      	mov	r2, r0
 800404e:	4b29      	ldr	r3, [pc, #164]	; (80040f4 <main+0x1c4>)
 8004050:	601a      	str	r2, [r3, #0]


  /* Init code for STM32_WPAN */
  APPE_Init();
 8004052:	f7fd feed 	bl	8001e30 <APPE_Init>
  /* Start scheduler */
  osKernelStart();
 8004056:	f00b fc83 	bl	800f960 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1){}
 800405a:	e7fe      	b.n	800405a <main+0x12a>
 800405c:	58004000 	.word	0x58004000
 8004060:	fa1863a7 	.word	0xfa1863a7
 8004064:	080197b8 	.word	0x080197b8
 8004068:	2002e0c8 	.word	0x2002e0c8
 800406c:	080197c8 	.word	0x080197c8
 8004070:	2002e1dc 	.word	0x2002e1dc
 8004074:	080197d8 	.word	0x080197d8
 8004078:	2002e308 	.word	0x2002e308
 800407c:	080197e8 	.word	0x080197e8
 8004080:	2002e22c 	.word	0x2002e22c
 8004084:	080197f8 	.word	0x080197f8
 8004088:	2002e238 	.word	0x2002e238
 800408c:	08019808 	.word	0x08019808
 8004090:	2002e230 	.word	0x2002e230
 8004094:	08019788 	.word	0x08019788
 8004098:	2002e298 	.word	0x2002e298
 800409c:	080197a0 	.word	0x080197a0
 80040a0:	2002e07c 	.word	0x2002e07c
 80040a4:	0801968c 	.word	0x0801968c
 80040a8:	08004769 	.word	0x08004769
 80040ac:	2002e29c 	.word	0x2002e29c
 80040b0:	080196b0 	.word	0x080196b0
 80040b4:	08005255 	.word	0x08005255
 80040b8:	2002e2a0 	.word	0x2002e2a0
 80040bc:	080196d4 	.word	0x080196d4
 80040c0:	08005bc5 	.word	0x08005bc5
 80040c4:	2002e1d4 	.word	0x2002e1d4
 80040c8:	080196f8 	.word	0x080196f8
 80040cc:	08005d69 	.word	0x08005d69
 80040d0:	2002e1d8 	.word	0x2002e1d8
 80040d4:	0801971c 	.word	0x0801971c
 80040d8:	0800601d 	.word	0x0800601d
 80040dc:	2002e248 	.word	0x2002e248
 80040e0:	08019740 	.word	0x08019740
 80040e4:	08006169 	.word	0x08006169
 80040e8:	2002e234 	.word	0x2002e234
 80040ec:	08019764 	.word	0x08019764
 80040f0:	08006661 	.word	0x08006661
 80040f4:	2002e244 	.word	0x2002e244

080040f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b0ae      	sub	sp, #184	; 0xb8
 80040fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80040fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004102:	2248      	movs	r2, #72	; 0x48
 8004104:	2100      	movs	r1, #0
 8004106:	4618      	mov	r0, r3
 8004108:	f00f fe43 	bl	8013d92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800410c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
 8004116:	609a      	str	r2, [r3, #8]
 8004118:	60da      	str	r2, [r3, #12]
 800411a:	611a      	str	r2, [r3, #16]
 800411c:	615a      	str	r2, [r3, #20]
 800411e:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004120:	1d3b      	adds	r3, r7, #4
 8004122:	2250      	movs	r2, #80	; 0x50
 8004124:	2100      	movs	r1, #0
 8004126:	4618      	mov	r0, r3
 8004128:	f00f fe33 	bl	8013d92 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800412c:	f005 f80e 	bl	800914c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004130:	2000      	movs	r0, #0
 8004132:	f7ff fdfb 	bl	8003d2c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004136:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <SystemClock_Config+0xfc>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800413e:	4a2d      	ldr	r2, [pc, #180]	; (80041f4 <SystemClock_Config+0xfc>)
 8004140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004144:	6013      	str	r3, [r2, #0]
 8004146:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <SystemClock_Config+0xfc>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800414e:	603b      	str	r3, [r7, #0]
 8004150:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8004152:	2307      	movs	r3, #7
 8004154:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004156:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800415a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800415c:	2301      	movs	r3, #1
 800415e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004160:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004164:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004166:	2340      	movs	r3, #64	; 0x40
 8004168:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004172:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004176:	4618      	mov	r0, r3
 8004178:	f005 fb88 	bl	800988c <HAL_RCC_OscConfig>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8004182:	f002 fc95 	bl	8006ab0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8004186:	236f      	movs	r3, #111	; 0x6f
 8004188:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800418a:	2302      	movs	r3, #2
 800418c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800418e:	2300      	movs	r3, #0
 8004190:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004192:	2300      	movs	r3, #0
 8004194:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004196:	2300      	movs	r3, #0
 8004198:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 800419a:	2300      	movs	r3, #0
 800419c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800419e:	2300      	movs	r3, #0
 80041a0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80041a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80041a6:	2101      	movs	r1, #1
 80041a8:	4618      	mov	r0, r3
 80041aa:	f005 fefb 	bl	8009fa4 <HAL_RCC_ClockConfig>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80041b4:	f002 fc7c 	bl	8006ab0 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 80041b8:	f643 0303 	movw	r3, #14339	; 0x3803
 80041bc:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80041c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041ca:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80041cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80041d0:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 80041d2:	2302      	movs	r3, #2
 80041d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80041d6:	2310      	movs	r3, #16
 80041d8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80041da:	1d3b      	adds	r3, r7, #4
 80041dc:	4618      	mov	r0, r3
 80041de:	f006 fb3c 	bl	800a85a <HAL_RCCEx_PeriphCLKConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80041e8:	f002 fc62 	bl	8006ab0 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 80041ec:	bf00      	nop
 80041ee:	37b8      	adds	r7, #184	; 0xb8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	58000400 	.word	0x58000400

080041f8 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80041fc:	4b1b      	ldr	r3, [pc, #108]	; (800426c <MX_I2C1_Init+0x74>)
 80041fe:	4a1c      	ldr	r2, [pc, #112]	; (8004270 <MX_I2C1_Init+0x78>)
 8004200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 8004202:	4b1a      	ldr	r3, [pc, #104]	; (800426c <MX_I2C1_Init+0x74>)
 8004204:	4a1b      	ldr	r2, [pc, #108]	; (8004274 <MX_I2C1_Init+0x7c>)
 8004206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004208:	4b18      	ldr	r3, [pc, #96]	; (800426c <MX_I2C1_Init+0x74>)
 800420a:	2200      	movs	r2, #0
 800420c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800420e:	4b17      	ldr	r3, [pc, #92]	; (800426c <MX_I2C1_Init+0x74>)
 8004210:	2201      	movs	r2, #1
 8004212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004214:	4b15      	ldr	r3, [pc, #84]	; (800426c <MX_I2C1_Init+0x74>)
 8004216:	2200      	movs	r2, #0
 8004218:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800421a:	4b14      	ldr	r3, [pc, #80]	; (800426c <MX_I2C1_Init+0x74>)
 800421c:	2200      	movs	r2, #0
 800421e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004220:	4b12      	ldr	r3, [pc, #72]	; (800426c <MX_I2C1_Init+0x74>)
 8004222:	2200      	movs	r2, #0
 8004224:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004226:	4b11      	ldr	r3, [pc, #68]	; (800426c <MX_I2C1_Init+0x74>)
 8004228:	2200      	movs	r2, #0
 800422a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800422c:	4b0f      	ldr	r3, [pc, #60]	; (800426c <MX_I2C1_Init+0x74>)
 800422e:	2200      	movs	r2, #0
 8004230:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004232:	480e      	ldr	r0, [pc, #56]	; (800426c <MX_I2C1_Init+0x74>)
 8004234:	f003 ffc2 	bl	80081bc <HAL_I2C_Init>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800423e:	f002 fc37 	bl	8006ab0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004242:	2100      	movs	r1, #0
 8004244:	4809      	ldr	r0, [pc, #36]	; (800426c <MX_I2C1_Init+0x74>)
 8004246:	f004 fee9 	bl	800901c <HAL_I2CEx_ConfigAnalogFilter>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d001      	beq.n	8004254 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004250:	f002 fc2e 	bl	8006ab0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004254:	2100      	movs	r1, #0
 8004256:	4805      	ldr	r0, [pc, #20]	; (800426c <MX_I2C1_Init+0x74>)
 8004258:	f004 ff2b 	bl	80090b2 <HAL_I2CEx_ConfigDigitalFilter>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004262:	f002 fc25 	bl	8006ab0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	2002e1e0 	.word	0x2002e1e0
 8004270:	40005400 	.word	0x40005400
 8004274:	00300f38 	.word	0x00300f38

08004278 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 800427c:	bf00      	nop
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b086      	sub	sp, #24
 800428c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800428e:	4b2b      	ldr	r3, [pc, #172]	; (800433c <MX_RTC_Init+0xb4>)
 8004290:	4a2b      	ldr	r2, [pc, #172]	; (8004340 <MX_RTC_Init+0xb8>)
 8004292:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004294:	4b29      	ldr	r3, [pc, #164]	; (800433c <MX_RTC_Init+0xb4>)
 8004296:	2200      	movs	r2, #0
 8004298:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800429a:	4b28      	ldr	r3, [pc, #160]	; (800433c <MX_RTC_Init+0xb4>)
 800429c:	227f      	movs	r2, #127	; 0x7f
 800429e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80042a0:	4b26      	ldr	r3, [pc, #152]	; (800433c <MX_RTC_Init+0xb4>)
 80042a2:	22ff      	movs	r2, #255	; 0xff
 80042a4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80042a6:	4b25      	ldr	r3, [pc, #148]	; (800433c <MX_RTC_Init+0xb4>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80042ac:	4b23      	ldr	r3, [pc, #140]	; (800433c <MX_RTC_Init+0xb4>)
 80042ae:	2200      	movs	r2, #0
 80042b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80042b2:	4b22      	ldr	r3, [pc, #136]	; (800433c <MX_RTC_Init+0xb4>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80042b8:	4b20      	ldr	r3, [pc, #128]	; (800433c <MX_RTC_Init+0xb4>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80042be:	481f      	ldr	r0, [pc, #124]	; (800433c <MX_RTC_Init+0xb4>)
 80042c0:	f006 fd51 	bl	800ad66 <HAL_RTC_Init>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MX_RTC_Init+0x46>
  {
    Error_Handler();
 80042ca:	f002 fbf1 	bl	8006ab0 <Error_Handler>
  /* Enable RTC registers write protection */
  //LL_RTC_EnableWriteProtection(RTC);

  /** Initialize RTC and set the Time and Date
    */
    RTC_TimeTypeDef sTime = {0};
 80042ce:	1d3b      	adds	r3, r7, #4
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	609a      	str	r2, [r3, #8]
 80042d8:	60da      	str	r2, [r3, #12]
 80042da:	611a      	str	r2, [r3, #16]
    RTC_DateTypeDef sDate = {0};
 80042dc:	2300      	movs	r3, #0
 80042de:	603b      	str	r3, [r7, #0]

    sTime.Hours = 0x11;
 80042e0:	2311      	movs	r3, #17
 80042e2:	713b      	strb	r3, [r7, #4]
    sTime.Minutes = 0x59;
 80042e4:	2359      	movs	r3, #89	; 0x59
 80042e6:	717b      	strb	r3, [r7, #5]
    sTime.Seconds = 0x29;
 80042e8:	2329      	movs	r3, #41	; 0x29
 80042ea:	71bb      	strb	r3, [r7, #6]
    sTime.SubSeconds = 0x0;
 80042ec:	2300      	movs	r3, #0
 80042ee:	60bb      	str	r3, [r7, #8]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	613b      	str	r3, [r7, #16]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80042f8:	1d3b      	adds	r3, r7, #4
 80042fa:	2201      	movs	r2, #1
 80042fc:	4619      	mov	r1, r3
 80042fe:	480f      	ldr	r0, [pc, #60]	; (800433c <MX_RTC_Init+0xb4>)
 8004300:	f006 fdcf 	bl	800aea2 <HAL_RTC_SetTime>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <MX_RTC_Init+0x86>
    {
      Error_Handler();
 800430a:	f002 fbd1 	bl	8006ab0 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800430e:	2302      	movs	r3, #2
 8004310:	703b      	strb	r3, [r7, #0]
    sDate.Month = RTC_MONTH_MARCH;
 8004312:	2303      	movs	r3, #3
 8004314:	707b      	strb	r3, [r7, #1]
    sDate.Date = 0x29;
 8004316:	2329      	movs	r3, #41	; 0x29
 8004318:	70bb      	strb	r3, [r7, #2]
    sDate.Year = 0x20;
 800431a:	2320      	movs	r3, #32
 800431c:	70fb      	strb	r3, [r7, #3]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800431e:	463b      	mov	r3, r7
 8004320:	2201      	movs	r2, #1
 8004322:	4619      	mov	r1, r3
 8004324:	4805      	ldr	r0, [pc, #20]	; (800433c <MX_RTC_Init+0xb4>)
 8004326:	f006 fedc 	bl	800b0e2 <HAL_RTC_SetDate>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_RTC_Init+0xac>
    {
      Error_Handler();
 8004330:	f002 fbbe 	bl	8006ab0 <Error_Handler>
    }


  /* USER CODE END RTC_Init 2 */

}
 8004334:	bf00      	nop
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	2002e0a4 	.word	0x2002e0a4
 8004340:	40002800 	.word	0x40002800

08004344 <MX_SPI1_Init>:

/* USER CODE BEGIN 4 */
static void MX_SPI1_Init(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <MX_SPI1_Init+0x74>)
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <MX_SPI1_Init+0x78>)
 800434c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004350:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8004356:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004358:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800435c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800435e:	4b16      	ldr	r3, [pc, #88]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004360:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004364:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004366:	4b14      	ldr	r3, [pc, #80]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004368:	2200      	movs	r2, #0
 800436a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800436c:	4b12      	ldr	r3, [pc, #72]	; (80043b8 <MX_SPI1_Init+0x74>)
 800436e:	2200      	movs	r2, #0
 8004370:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004372:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004374:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004378:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800437a:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <MX_SPI1_Init+0x74>)
 800437c:	2200      	movs	r2, #0
 800437e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004382:	2200      	movs	r2, #0
 8004384:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004386:	4b0c      	ldr	r3, [pc, #48]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004388:	2200      	movs	r2, #0
 800438a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <MX_SPI1_Init+0x74>)
 800438e:	2200      	movs	r2, #0
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004392:	4b09      	ldr	r3, [pc, #36]	; (80043b8 <MX_SPI1_Init+0x74>)
 8004394:	2207      	movs	r2, #7
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004398:	4b07      	ldr	r3, [pc, #28]	; (80043b8 <MX_SPI1_Init+0x74>)
 800439a:	2200      	movs	r2, #0
 800439c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <MX_SPI1_Init+0x74>)
 80043a0:	2208      	movs	r2, #8
 80043a2:	635a      	str	r2, [r3, #52]	; 0x34

  //hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  //hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;

  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80043a4:	4804      	ldr	r0, [pc, #16]	; (80043b8 <MX_SPI1_Init+0x74>)
 80043a6:	f007 f859 	bl	800b45c <HAL_SPI_Init>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d001      	beq.n	80043b4 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 80043b0:	f002 fb7e 	bl	8006ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80043b4:	bf00      	nop
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	2002e2a4 	.word	0x2002e2a4
 80043bc:	40013000 	.word	0x40013000

080043c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b09c      	sub	sp, #112	; 0x70
 80043c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80043c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]
 80043ce:	605a      	str	r2, [r3, #4]
 80043d0:	609a      	str	r2, [r3, #8]
 80043d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80043d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80043e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
 80043e8:	605a      	str	r2, [r3, #4]
 80043ea:	609a      	str	r2, [r3, #8]
 80043ec:	60da      	str	r2, [r3, #12]
 80043ee:	611a      	str	r2, [r3, #16]
 80043f0:	615a      	str	r2, [r3, #20]
 80043f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80043f4:	1d3b      	adds	r3, r7, #4
 80043f6:	2234      	movs	r2, #52	; 0x34
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f00f fcc9 	bl	8013d92 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004400:	4b45      	ldr	r3, [pc, #276]	; (8004518 <MX_TIM1_Init+0x158>)
 8004402:	4a46      	ldr	r2, [pc, #280]	; (800451c <MX_TIM1_Init+0x15c>)
 8004404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8004406:	4b44      	ldr	r3, [pc, #272]	; (8004518 <MX_TIM1_Init+0x158>)
 8004408:	2200      	movs	r2, #0
 800440a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800440c:	4b42      	ldr	r3, [pc, #264]	; (8004518 <MX_TIM1_Init+0x158>)
 800440e:	2200      	movs	r2, #0
 8004410:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8004412:	4b41      	ldr	r3, [pc, #260]	; (8004518 <MX_TIM1_Init+0x158>)
 8004414:	2264      	movs	r2, #100	; 0x64
 8004416:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004418:	4b3f      	ldr	r3, [pc, #252]	; (8004518 <MX_TIM1_Init+0x158>)
 800441a:	2200      	movs	r2, #0
 800441c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800441e:	4b3e      	ldr	r3, [pc, #248]	; (8004518 <MX_TIM1_Init+0x158>)
 8004420:	2200      	movs	r2, #0
 8004422:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004424:	4b3c      	ldr	r3, [pc, #240]	; (8004518 <MX_TIM1_Init+0x158>)
 8004426:	2200      	movs	r2, #0
 8004428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800442a:	483b      	ldr	r0, [pc, #236]	; (8004518 <MX_TIM1_Init+0x158>)
 800442c:	f007 fb84 	bl	800bb38 <HAL_TIM_Base_Init>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8004436:	f002 fb3b 	bl	8006ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800443a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800443e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004440:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004444:	4619      	mov	r1, r3
 8004446:	4834      	ldr	r0, [pc, #208]	; (8004518 <MX_TIM1_Init+0x158>)
 8004448:	f008 f810 	bl	800c46c <HAL_TIM_ConfigClockSource>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8004452:	f002 fb2d 	bl	8006ab0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004456:	4830      	ldr	r0, [pc, #192]	; (8004518 <MX_TIM1_Init+0x158>)
 8004458:	f007 fc14 	bl	800bc84 <HAL_TIM_PWM_Init>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8004462:	f002 fb25 	bl	8006ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004466:	2300      	movs	r3, #0
 8004468:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800446a:	2300      	movs	r3, #0
 800446c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800446e:	2300      	movs	r3, #0
 8004470:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004472:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004476:	4619      	mov	r1, r3
 8004478:	4827      	ldr	r0, [pc, #156]	; (8004518 <MX_TIM1_Init+0x158>)
 800447a:	f008 fc7d 	bl	800cd78 <HAL_TIMEx_MasterConfigSynchronization>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d001      	beq.n	8004488 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8004484:	f002 fb14 	bl	8006ab0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004488:	2360      	movs	r3, #96	; 0x60
 800448a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 100;
 800448c:	2364      	movs	r3, #100	; 0x64
 800448e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004490:	2300      	movs	r3, #0
 8004492:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004494:	2300      	movs	r3, #0
 8004496:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8004498:	2304      	movs	r3, #4
 800449a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800449c:	2300      	movs	r3, #0
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80044a0:	2300      	movs	r3, #0
 80044a2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80044a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80044a8:	2200      	movs	r2, #0
 80044aa:	4619      	mov	r1, r3
 80044ac:	481a      	ldr	r0, [pc, #104]	; (8004518 <MX_TIM1_Init+0x158>)
 80044ae:	f007 fecd 	bl	800c24c <HAL_TIM_PWM_ConfigChannel>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d001      	beq.n	80044bc <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80044b8:	f002 fafa 	bl	8006ab0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80044bc:	2300      	movs	r3, #0
 80044be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80044d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80044d6:	2300      	movs	r3, #0
 80044d8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80044da:	2300      	movs	r3, #0
 80044dc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80044de:	2300      	movs	r3, #0
 80044e0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80044e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80044ec:	2300      	movs	r3, #0
 80044ee:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80044f0:	2300      	movs	r3, #0
 80044f2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80044f4:	1d3b      	adds	r3, r7, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4807      	ldr	r0, [pc, #28]	; (8004518 <MX_TIM1_Init+0x158>)
 80044fa:	f008 fc9d 	bl	800ce38 <HAL_TIMEx_ConfigBreakDeadTime>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d001      	beq.n	8004508 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8004504:	f002 fad4 	bl	8006ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8004508:	4803      	ldr	r0, [pc, #12]	; (8004518 <MX_TIM1_Init+0x158>)
 800450a:	f002 fd4b 	bl	8006fa4 <HAL_TIM_MspPostInit>

}
 800450e:	bf00      	nop
 8004510:	3770      	adds	r7, #112	; 0x70
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	2002e24c 	.word	0x2002e24c
 800451c:	40012c00 	.word	0x40012c00

08004520 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004526:	1d3b      	adds	r3, r7, #4
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]
 800452c:	605a      	str	r2, [r3, #4]
 800452e:	609a      	str	r2, [r3, #8]
 8004530:	60da      	str	r2, [r3, #12]
 8004532:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004534:	2004      	movs	r0, #4
 8004536:	f7ff fc57 	bl	8003de8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800453a:	2002      	movs	r0, #2
 800453c:	f7ff fc54 	bl	8003de8 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004540:	2001      	movs	r0, #1
 8004542:	f7ff fc51 	bl	8003de8 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8004546:	2200      	movs	r2, #0
 8004548:	2101      	movs	r1, #1
 800454a:	4824      	ldr	r0, [pc, #144]	; (80045dc <MX_GPIO_Init+0xbc>)
 800454c:	f003 fde2 	bl	8008114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_RESET_Pin */
  GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8004550:	2301      	movs	r3, #1
 8004552:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004554:	2301      	movs	r3, #1
 8004556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 8004560:	1d3b      	adds	r3, r7, #4
 8004562:	4619      	mov	r1, r3
 8004564:	481d      	ldr	r0, [pc, #116]	; (80045dc <MX_GPIO_Init+0xbc>)
 8004566:	f003 fc4d 	bl	8007e04 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 800456a:	2338      	movs	r3, #56	; 0x38
 800456c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800456e:	4b1c      	ldr	r3, [pc, #112]	; (80045e0 <MX_GPIO_Init+0xc0>)
 8004570:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004572:	2301      	movs	r3, #1
 8004574:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004576:	1d3b      	adds	r3, r7, #4
 8004578:	4619      	mov	r1, r3
 800457a:	4818      	ldr	r0, [pc, #96]	; (80045dc <MX_GPIO_Init+0xbc>)
 800457c:	f003 fc42 	bl	8007e04 <HAL_GPIO_Init>

  /*Configure SPI_NSS pin to be GPIO, pulled up*/
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004580:	2310      	movs	r3, #16
 8004582:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004584:	2301      	movs	r3, #1
 8004586:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004588:	2301      	movs	r3, #1
 800458a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800458c:	1d3b      	adds	r3, r7, #4
 800458e:	4619      	mov	r1, r3
 8004590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004594:	f003 fc36 	bl	8007e04 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8004598:	2201      	movs	r2, #1
 800459a:	2110      	movs	r1, #16
 800459c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045a0:	f003 fdb8 	bl	8008114 <HAL_GPIO_WritePin>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 15, 0);
 80045a4:	2200      	movs	r2, #0
 80045a6:	210f      	movs	r1, #15
 80045a8:	2009      	movs	r0, #9
 80045aa:	f003 fbd9 	bl	8007d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80045ae:	2009      	movs	r0, #9
 80045b0:	f003 fbf0 	bl	8007d94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 15, 0);
 80045b4:	2200      	movs	r2, #0
 80045b6:	210f      	movs	r1, #15
 80045b8:	200a      	movs	r0, #10
 80045ba:	f003 fbd1 	bl	8007d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80045be:	200a      	movs	r0, #10
 80045c0:	f003 fbe8 	bl	8007d94 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 15, 0);
 80045c4:	2200      	movs	r2, #0
 80045c6:	210f      	movs	r1, #15
 80045c8:	2017      	movs	r0, #23
 80045ca:	f003 fbc9 	bl	8007d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80045ce:	2017      	movs	r0, #23
 80045d0:	f003 fbe0 	bl	8007d94 <HAL_NVIC_EnableIRQ>

}
 80045d4:	bf00      	nop
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	48000400 	.word	0x48000400
 80045e0:	10310000 	.word	0x10310000

080045e4 <GlobalState_Init>:

/* USER CODE BEGIN 4 */


static void GlobalState_Init(){
 80045e4:	b5b0      	push	{r4, r5, r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af00      	add	r7, sp, #0
	GlobalState.timeBound.startHR_BCD = 0x10; //10AM, BCD
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <GlobalState_Init+0xe4>)
 80045ec:	2210      	movs	r2, #16
 80045ee:	701a      	strb	r2, [r3, #0]
	GlobalState.timeBound.endHR_BCD = 0x22;   //10PM, BCD
 80045f0:	4b35      	ldr	r3, [pc, #212]	; (80046c8 <GlobalState_Init+0xe4>)
 80045f2:	2222      	movs	r2, #34	; 0x22
 80045f4:	705a      	strb	r2, [r3, #1]
	GlobalState.timeBound.minInterval = 5;   //15min min interval
 80045f6:	4b34      	ldr	r3, [pc, #208]	; (80046c8 <GlobalState_Init+0xe4>)
 80045f8:	2205      	movs	r2, #5
 80045fa:	709a      	strb	r2, [r3, #2]
	GlobalState.timeBound.maxInterval = 10;   //90min max interval
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <GlobalState_Init+0xe4>)
 80045fe:	220a      	movs	r2, #10
 8004600:	70da      	strb	r2, [r3, #3]

	RTC_TimeTypeDef tempTime;
	RTC_DateTypeDef tempDate;
	HAL_RTC_GetTime(&hrtc, &tempTime, RTC_FORMAT_BCD);
 8004602:	f107 0314 	add.w	r3, r7, #20
 8004606:	2201      	movs	r2, #1
 8004608:	4619      	mov	r1, r3
 800460a:	4830      	ldr	r0, [pc, #192]	; (80046cc <GlobalState_Init+0xe8>)
 800460c:	f006 fd0d 	bl	800b02a <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &tempDate, RTC_FORMAT_BCD);
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	2201      	movs	r2, #1
 8004616:	4619      	mov	r1, r3
 8004618:	482c      	ldr	r0, [pc, #176]	; (80046cc <GlobalState_Init+0xe8>)
 800461a:	f006 fe10 	bl	800b23e <HAL_RTC_GetDate>

	//shallow structs so no issues with assignment
	GlobalState.lastSeenTime.time = tempTime;
 800461e:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <GlobalState_Init+0xe4>)
 8004620:	1d1c      	adds	r4, r3, #4
 8004622:	f107 0514 	add.w	r5, r7, #20
 8004626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800462a:	682b      	ldr	r3, [r5, #0]
 800462c:	6023      	str	r3, [r4, #0]
	GlobalState.lastSeenTime.date = tempDate;
 800462e:	4a26      	ldr	r2, [pc, #152]	; (80046c8 <GlobalState_Init+0xe4>)
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	6193      	str	r3, [r2, #24]

	//GlobalState.timeEstimateSample.time = tempTime;
	//GlobalState.timeEstimateSample.date = tempDate;

	GlobalState.lastConditions.lux = 0.0;
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <GlobalState_Init+0xe4>)
 8004636:	f04f 0200 	mov.w	r2, #0
 800463a:	61da      	str	r2, [r3, #28]
	GlobalState.lastConditions.whiteLux = 0.0;
 800463c:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <GlobalState_Init+0xe4>)
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	621a      	str	r2, [r3, #32]
	GlobalState.lastConditions.temp = 0.0;
 8004644:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <GlobalState_Init+0xe4>)
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	625a      	str	r2, [r3, #36]	; 0x24
	GlobalState.lastConditions.humd = 0.0;
 800464c:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <GlobalState_Init+0xe4>)
 800464e:	f04f 0200 	mov.w	r2, #0
 8004652:	629a      	str	r2, [r3, #40]	; 0x28

	GlobalState.programMode = MODE_RESTING;
 8004654:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <GlobalState_Init+0xe4>)
 8004656:	2200      	movs	r2, #0
 8004658:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

	GlobalState.surveyState.surveyID = SURVEY_NONE;
 800465c:	4b1a      	ldr	r3, [pc, #104]	; (80046c8 <GlobalState_Init+0xe4>)
 800465e:	2200      	movs	r2, #0
 8004660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	char temp_string[10] = "  DRAMSAY.";
 8004664:	4a1a      	ldr	r2, [pc, #104]	; (80046d0 <GlobalState_Init+0xec>)
 8004666:	1d3b      	adds	r3, r7, #4
 8004668:	ca07      	ldmia	r2, {r0, r1, r2}
 800466a:	c303      	stmia	r3!, {r0, r1}
 800466c:	801a      	strh	r2, [r3, #0]
	strncpy(GlobalState.surveyState.screenText, temp_string, strlen(temp_string)+1);
 800466e:	1d3b      	adds	r3, r7, #4
 8004670:	4618      	mov	r0, r3
 8004672:	f7fb fd85 	bl	8000180 <strlen>
 8004676:	4603      	mov	r3, r0
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	4619      	mov	r1, r3
 800467e:	4815      	ldr	r0, [pc, #84]	; (80046d4 <GlobalState_Init+0xf0>)
 8004680:	f010 f8e0 	bl	8014844 <strncpy>
	GlobalState.surveyState.screenTextLength = strlen(temp_string);
 8004684:	1d3b      	adds	r3, r7, #4
 8004686:	4618      	mov	r0, r3
 8004688:	f7fb fd7a 	bl	8000180 <strlen>
 800468c:	4603      	mov	r3, r0
 800468e:	b2da      	uxtb	r2, r3
 8004690:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <GlobalState_Init+0xe4>)
 8004692:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	memset(GlobalState.surveyState.optionArray, 0, sizeof(GlobalState.surveyState.optionArray));
 8004696:	221c      	movs	r2, #28
 8004698:	2100      	movs	r1, #0
 800469a:	480f      	ldr	r0, [pc, #60]	; (80046d8 <GlobalState_Init+0xf4>)
 800469c:	f00f fb79 	bl	8013d92 <memset>
	GlobalState.surveyState.optionArrayLength = 0;
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <GlobalState_Init+0xe4>)
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0

	GlobalState.currentInterval = 0;
 80046a8:	4b07      	ldr	r3, [pc, #28]	; (80046c8 <GlobalState_Init+0xe4>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
	GlobalState.paused = 0;
 80046b0:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <GlobalState_Init+0xe4>)
 80046b2:	2200      	movs	r2, #0
 80046b4:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	GlobalState.demo = 0;
 80046b8:	4b03      	ldr	r3, [pc, #12]	; (80046c8 <GlobalState_Init+0xe4>)
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
}
 80046c0:	bf00      	nop
 80046c2:	3728      	adds	r7, #40	; 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bdb0      	pop	{r4, r5, r7, pc}
 80046c8:	2002e0cc 	.word	0x2002e0cc
 80046cc:	2002e0a4 	.word	0x2002e0a4
 80046d0:	08018570 	.word	0x08018570
 80046d4:	2002e0fd 	.word	0x2002e0fd
 80046d8:	2002e180 	.word	0x2002e180

080046dc <updateInterval>:

static void updateInterval(){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
	uint32_t updateVal = rand() % (GlobalState.timeBound.maxInterval - GlobalState.timeBound.minInterval);
 80046e2:	f010 f85b 	bl	801479c <rand>
 80046e6:	4602      	mov	r2, r0
 80046e8:	4b0c      	ldr	r3, [pc, #48]	; (800471c <updateInterval+0x40>)
 80046ea:	78db      	ldrb	r3, [r3, #3]
 80046ec:	4619      	mov	r1, r3
 80046ee:	4b0b      	ldr	r3, [pc, #44]	; (800471c <updateInterval+0x40>)
 80046f0:	789b      	ldrb	r3, [r3, #2]
 80046f2:	1acb      	subs	r3, r1, r3
 80046f4:	fb92 f1f3 	sdiv	r1, r2, r3
 80046f8:	fb03 f301 	mul.w	r3, r3, r1
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	607b      	str	r3, [r7, #4]
	GlobalState.currentInterval = GlobalState.timeBound.minInterval + updateVal;
 8004700:	4b06      	ldr	r3, [pc, #24]	; (800471c <updateInterval+0x40>)
 8004702:	789a      	ldrb	r2, [r3, #2]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	b2db      	uxtb	r3, r3
 8004708:	4413      	add	r3, r2
 800470a:	b2da      	uxtb	r2, r3
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <updateInterval+0x40>)
 800470e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
}
 8004712:	bf00      	nop
 8004714:	3708      	adds	r7, #8
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	2002e0cc 	.word	0x2002e0cc

08004720 <HAL_GPIO_EXTI_Callback>:

static inline void clear_bit(long *x, int bitNum) {
    *x &= (~(1L << bitNum));
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b086      	sub	sp, #24
 8004724:	af02      	add	r7, sp, #8
 8004726:	4603      	mov	r3, r0
 8004728:	80fb      	strh	r3, [r7, #6]

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
	xTaskNotifyFromISR(buttonPressHandle, GPIO_Pin, eSetValueWithOverwrite, &xHigherPriorityTaskWoken);
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <HAL_GPIO_EXTI_Callback+0x40>)
 8004730:	6818      	ldr	r0, [r3, #0]
 8004732:	88f9      	ldrh	r1, [r7, #6]
 8004734:	f107 030c 	add.w	r3, r7, #12
 8004738:	9300      	str	r3, [sp, #0]
 800473a:	2300      	movs	r3, #0
 800473c:	2203      	movs	r2, #3
 800473e:	f00e fe1b 	bl	8013378 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d007      	beq.n	8004758 <HAL_GPIO_EXTI_Callback+0x38>
 8004748:	4b06      	ldr	r3, [pc, #24]	; (8004764 <HAL_GPIO_EXTI_Callback+0x44>)
 800474a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474e:	601a      	str	r2, [r3, #0]
 8004750:	f3bf 8f4f 	dsb	sy
 8004754:	f3bf 8f6f 	isb	sy

}
 8004758:	bf00      	nop
 800475a:	3710      	adds	r7, #16
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	2002e1d4 	.word	0x2002e1d4
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <startUIControl>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header startUIControl */
void startUIControl(void *argument)
{
 8004768:	b5b0      	push	{r4, r5, r7, lr}
 800476a:	b0f2      	sub	sp, #456	; 0x1c8
 800476c:	af02      	add	r7, sp, #8
 800476e:	1d3b      	adds	r3, r7, #4
 8004770:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 8004772:	2201      	movs	r2, #1
 8004774:	2101      	movs	r1, #1
 8004776:	48ce      	ldr	r0, [pc, #824]	; (8004ab0 <startUIControl+0x348>)
 8004778:	f003 fccc 	bl	8008114 <HAL_GPIO_WritePin>

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 800477c:	f7fd fdf6 	bl	800236c <er_oled_begin>
  er_oled_clear(oled_buf);
 8004780:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004784:	4618      	mov	r0, r3
 8004786:	f7fd fe59 	bl	800243c <er_oled_clear>
  er_oled_string(0, 10, "  DRAMSAY.", 12, 1, oled_buf);
 800478a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	2301      	movs	r3, #1
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	230c      	movs	r3, #12
 8004796:	4ac7      	ldr	r2, [pc, #796]	; (8004ab4 <startUIControl+0x34c>)
 8004798:	210a      	movs	r1, #10
 800479a:	2000      	movs	r0, #0
 800479c:	f7fd fff0 	bl	8002780 <er_oled_string>
  er_oled_string(0, 28, "resenv | mit", 12, 1, oled_buf);
 80047a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	2301      	movs	r3, #1
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	230c      	movs	r3, #12
 80047ac:	4ac2      	ldr	r2, [pc, #776]	; (8004ab8 <startUIControl+0x350>)
 80047ae:	211c      	movs	r1, #28
 80047b0:	2000      	movs	r0, #0
 80047b2:	f7fd ffe5 	bl	8002780 <er_oled_string>
  er_oled_display(oled_buf);
 80047b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe f821 	bl	8002802 <er_oled_display>

  osDelay(3000);
 80047c0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80047c4:	f00b fa9e 	bl	800fd04 <osDelay>

  er_oled_clear(oled_buf);
 80047c8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7fd fe35 	bl	800243c <er_oled_clear>
  er_oled_display(oled_buf);
 80047d2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7fe f813 	bl	8002802 <er_oled_display>

  int16_t current_minute = -1;
 80047dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047e0:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
  int16_t display_minute = -1;
 80047e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047e8:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
  int16_t last_display_minute = -1;
 80047ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047f0:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
  int16_t minute_history[TOUCH_HISTORY_SIZE] = {0};
 80047f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80047f8:	461a      	mov	r2, r3
 80047fa:	2300      	movs	r3, #0
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	6053      	str	r3, [r2, #4]
 8004800:	6093      	str	r3, [r2, #8]
 8004802:	60d3      	str	r3, [r2, #12]
 8004804:	6113      	str	r3, [r2, #16]
  uint8_t history_ind = 0;
 8004806:	2300      	movs	r3, #0
 8004808:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
  int16_t min_minute, max_minute;
  uint8_t hrs, mins, step, i;
  char time[5];

  uint8_t touch_end_count = 0;
 800480c:	2300      	movs	r3, #0
 800480e:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
  RTC_DateTypeDef cDate;

  BLETX_Queue_t bleSendData;

  //init peripheral (not turbo mode, poll every 250ms, if touch sample at 40Hz until no touch)
  if (setup_iqs263() == HAL_ERROR) {
 8004812:	f7ff f98d 	bl	8003b30 <setup_iqs263>
 8004816:	4603      	mov	r3, r0
 8004818:	2b01      	cmp	r3, #1
 800481a:	d10c      	bne.n	8004836 <startUIControl+0xce>
	  strncpy(errorCondition, "ERR:IQS263ST", sizeof(errorCondition));
 800481c:	4aa7      	ldr	r2, [pc, #668]	; (8004abc <startUIControl+0x354>)
 800481e:	4ba8      	ldr	r3, [pc, #672]	; (8004ac0 <startUIControl+0x358>)
 8004820:	4614      	mov	r4, r2
 8004822:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004824:	6020      	str	r0, [r4, #0]
 8004826:	6061      	str	r1, [r4, #4]
 8004828:	60a2      	str	r2, [r4, #8]
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	7323      	strb	r3, [r4, #12]
	  GlobalState.programMode = MODE_ERROR;
 800482e:	4ba5      	ldr	r3, [pc, #660]	; (8004ac4 <startUIControl+0x35c>)
 8004830:	2206      	movs	r2, #6
 8004832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
     //sprintf (time, "%d", current_angle);
     //er_oled_string(0, 0, time, 12, 1, oled_buf);
     //er_oled_display(oled_buf);
     // /* comment out when doing angle adjustments

	 current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 8004836:	f7ff fa19 	bl	8003c6c <iqs263_get_min_if_pressed>
 800483a:	4603      	mov	r3, r0
 800483c:	f8a7 31ae 	strh.w	r3, [r7, #430]	; 0x1ae
     if (current_minute != -1) { //touch!
 8004840:	f9b7 31ae 	ldrsh.w	r3, [r7, #430]	; 0x1ae
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	f000 81d6 	beq.w	8004bf8 <startUIControl+0x490>

       if (!touch_end_count){ //START TOUCH EVENT!
 800484c:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 8004850:	2b00      	cmp	r3, #0
 8004852:	f040 8090 	bne.w	8004976 <startUIControl+0x20e>

    	   er_oled_clear(oled_buf);
 8004856:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800485a:	4618      	mov	r0, r3
 800485c:	f7fd fdee 	bl	800243c <er_oled_clear>

    	   switch (GlobalState.programMode) {
 8004860:	4b98      	ldr	r3, [pc, #608]	; (8004ac4 <startUIControl+0x35c>)
 8004862:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004866:	2b03      	cmp	r3, #3
 8004868:	d845      	bhi.n	80048f6 <startUIControl+0x18e>
 800486a:	a201      	add	r2, pc, #4	; (adr r2, 8004870 <startUIControl+0x108>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	080048bf 	.word	0x080048bf
 8004874:	080048df 	.word	0x080048df
 8004878:	08004881 	.word	0x08004881
 800487c:	080048a7 	.word	0x080048a7
    	   	   case MODE_ESM_TIME_ESTIMATE:
    	   	       xTaskNotifyGive(esmMainHandle);
 8004880:	4b91      	ldr	r3, [pc, #580]	; (8004ac8 <startUIControl+0x360>)
 8004882:	6818      	ldr	r0, [r3, #0]
 8004884:	2300      	movs	r3, #0
 8004886:	2202      	movs	r2, #2
 8004888:	2100      	movs	r1, #0
 800488a:	f00e fcbf 	bl	801320c <xTaskGenericNotify>
           		   er_oled_string(0, 0, " GUESS TIME:", 12, 1, oled_buf);
 800488e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004892:	9301      	str	r3, [sp, #4]
 8004894:	2301      	movs	r3, #1
 8004896:	9300      	str	r3, [sp, #0]
 8004898:	230c      	movs	r3, #12
 800489a:	4a8c      	ldr	r2, [pc, #560]	; (8004acc <startUIControl+0x364>)
 800489c:	2100      	movs	r1, #0
 800489e:	2000      	movs	r0, #0
 80048a0:	f7fd ff6e 	bl	8002780 <er_oled_string>
           		   break;
 80048a4:	e027      	b.n	80048f6 <startUIControl+0x18e>
    	   	   case MODE_ESM_SURVEY:
    	   	       er_oled_string(0, 0, GlobalState.surveyState.screenText, 12, 1, oled_buf);
 80048a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048aa:	9301      	str	r3, [sp, #4]
 80048ac:	2301      	movs	r3, #1
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	230c      	movs	r3, #12
 80048b2:	4a87      	ldr	r2, [pc, #540]	; (8004ad0 <startUIControl+0x368>)
 80048b4:	2100      	movs	r1, #0
 80048b6:	2000      	movs	r0, #0
 80048b8:	f7fd ff62 	bl	8002780 <er_oled_string>
    	   	       break;
 80048bc:	e01b      	b.n	80048f6 <startUIControl+0x18e>
    	   	   case MODE_RESTING:
    			   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80048be:	4b85      	ldr	r3, [pc, #532]	; (8004ad4 <startUIControl+0x36c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f04f 31ff 	mov.w	r1, #4294967295
 80048c6:	4618      	mov	r0, r3
 80048c8:	f00b fae4 	bl	800fe94 <osMutexAcquire>
    			   GlobalState.programMode = MODE_TIME_ESTIMATE;
 80048cc:	4b7d      	ldr	r3, [pc, #500]	; (8004ac4 <startUIControl+0x35c>)
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    			   osMutexRelease(modeMutexHandle);
 80048d4:	4b7f      	ldr	r3, [pc, #508]	; (8004ad4 <startUIControl+0x36c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f00b fb39 	bl	800ff50 <osMutexRelease>
    			   //fall through to next case
    	   	   case MODE_TIME_ESTIMATE:
    	   		   er_oled_string(0, 0, " GUESS TIME:", 12, 1, oled_buf);
 80048de:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	2301      	movs	r3, #1
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	230c      	movs	r3, #12
 80048ea:	4a78      	ldr	r2, [pc, #480]	; (8004acc <startUIControl+0x364>)
 80048ec:	2100      	movs	r1, #0
 80048ee:	2000      	movs	r0, #0
 80048f0:	f7fd ff46 	bl	8002780 <er_oled_string>
          		   break;
 80048f4:	bf00      	nop
    	   }

           //if we're guessing the time, on start of touch we need to grab
           //the hour of the last seen time as a starting point.
           if (GlobalState.programMode == MODE_TIME_ESTIMATE ||
 80048f6:	4b73      	ldr	r3, [pc, #460]	; (8004ac4 <startUIControl+0x35c>)
 80048f8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d004      	beq.n	800490a <startUIControl+0x1a2>
               GlobalState.programMode == MODE_ESM_TIME_ESTIMATE){
 8004900:	4b70      	ldr	r3, [pc, #448]	; (8004ac4 <startUIControl+0x35c>)
 8004902:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
           if (GlobalState.programMode == MODE_TIME_ESTIMATE ||
 8004906:	2b02      	cmp	r3, #2
 8004908:	d120      	bne.n	800494c <startUIControl+0x1e4>

                osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 800490a:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <startUIControl+0x370>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f04f 31ff 	mov.w	r1, #4294967295
 8004912:	4618      	mov	r0, r3
 8004914:	f00b fabe 	bl	800fe94 <osMutexAcquire>
                cTime = GlobalState.lastSeenTime.time;
 8004918:	f107 0214 	add.w	r2, r7, #20
 800491c:	4b69      	ldr	r3, [pc, #420]	; (8004ac4 <startUIControl+0x35c>)
 800491e:	4615      	mov	r5, r2
 8004920:	1d1c      	adds	r4, r3, #4
 8004922:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004924:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004926:	6823      	ldr	r3, [r4, #0]
 8004928:	602b      	str	r3, [r5, #0]
                osMutexRelease(lastSeenMutexHandle);
 800492a:	4b6b      	ldr	r3, [pc, #428]	; (8004ad8 <startUIControl+0x370>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4618      	mov	r0, r3
 8004930:	f00b fb0e 	bl	800ff50 <osMutexRelease>

                hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004934:	f107 0314 	add.w	r3, r7, #20
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f006 fd3c 	bl	800b3b8 <RTC_Bcd2ToByte>
 8004940:	4603      	mov	r3, r0
 8004942:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
                mins = 0x00;
 8004946:	2300      	movs	r3, #0
 8004948:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
           }

           //on immediate touch set history to current minute
           for (i=0; i < TOUCH_HISTORY_SIZE; i++){
 800494c:	2300      	movs	r3, #0
 800494e:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 8004952:	e00c      	b.n	800496e <startUIControl+0x206>
        	   minute_history[i] = current_minute;
 8004954:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 8004958:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800495c:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 8004960:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
           for (i=0; i < TOUCH_HISTORY_SIZE; i++){
 8004964:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004968:	3301      	adds	r3, #1
 800496a:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 800496e:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004972:	2b09      	cmp	r3, #9
 8004974:	d9ee      	bls.n	8004954 <startUIControl+0x1ec>
           }
       }

       touch_end_count = 1;
 8004976:	2301      	movs	r3, #1
 8004978:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2

       //put current minute in history buffer and advance circular index
       minute_history[history_ind] = current_minute;
 800497c:	f897 21bb 	ldrb.w	r2, [r7, #443]	; 0x1bb
 8004980:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004984:	f8b7 11ae 	ldrh.w	r1, [r7, #430]	; 0x1ae
 8004988:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
       history_ind = (history_ind + 1) % TOUCH_HISTORY_SIZE;
 800498c:	f897 31bb 	ldrb.w	r3, [r7, #443]	; 0x1bb
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	4b52      	ldr	r3, [pc, #328]	; (8004adc <startUIControl+0x374>)
 8004994:	fb83 1302 	smull	r1, r3, r3, r2
 8004998:	1099      	asrs	r1, r3, #2
 800499a:	17d3      	asrs	r3, r2, #31
 800499c:	1ac9      	subs	r1, r1, r3
 800499e:	460b      	mov	r3, r1
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	1ad1      	subs	r1, r2, r3
 80049a8:	460b      	mov	r3, r1
 80049aa:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb

       //TWO MODES - fast and slow
       // if large variation (min and max in buffer > 3 min) set display_time to current_time, else average

       //take average of buffer, get min and max; that's what should be displayed
       display_minute = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
       min_minute = 60;
 80049b4:	233c      	movs	r3, #60	; 0x3c
 80049b6:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
       max_minute = 0;
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
       for (i=0; i< TOUCH_HISTORY_SIZE; i++){
 80049c0:	2300      	movs	r3, #0
 80049c2:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 80049c6:	e035      	b.n	8004a34 <startUIControl+0x2cc>
    	   display_minute += minute_history[i];
 80049c8:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 80049cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049d0:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 80049da:	4413      	add	r3, r2
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
    	   if (minute_history[i] < min_minute) min_minute = minute_history[i];
 80049e2:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 80049e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049ea:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80049ee:	f9b7 21b8 	ldrsh.w	r2, [r7, #440]	; 0x1b8
 80049f2:	429a      	cmp	r2, r3
 80049f4:	dd07      	ble.n	8004a06 <startUIControl+0x29e>
 80049f6:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 80049fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80049fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a02:	f8a7 31b8 	strh.w	r3, [r7, #440]	; 0x1b8
    	   if (minute_history[i] > max_minute) max_minute = minute_history[i];
 8004a06:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 8004a0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a0e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004a12:	f9b7 21b6 	ldrsh.w	r2, [r7, #438]	; 0x1b6
 8004a16:	429a      	cmp	r2, r3
 8004a18:	da07      	bge.n	8004a2a <startUIControl+0x2c2>
 8004a1a:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 8004a1e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004a22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8004a26:	f8a7 31b6 	strh.w	r3, [r7, #438]	; 0x1b6
       for (i=0; i< TOUCH_HISTORY_SIZE; i++){
 8004a2a:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004a2e:	3301      	adds	r3, #1
 8004a30:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 8004a34:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004a38:	2b09      	cmp	r3, #9
 8004a3a:	d9c5      	bls.n	80049c8 <startUIControl+0x260>
       }

       if (max_minute-min_minute > 4) {
 8004a3c:	f9b7 21b6 	ldrsh.w	r2, [r7, #438]	; 0x1b6
 8004a40:	f9b7 31b8 	ldrsh.w	r3, [r7, #440]	; 0x1b8
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b04      	cmp	r3, #4
 8004a48:	dd04      	ble.n	8004a54 <startUIControl+0x2ec>
    	   display_minute = current_minute;
 8004a4a:	f8b7 31ae 	ldrh.w	r3, [r7, #430]	; 0x1ae
 8004a4e:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
 8004a52:	e009      	b.n	8004a68 <startUIControl+0x300>
       } else {
    	   display_minute /= TOUCH_HISTORY_SIZE;
 8004a54:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	; 0x1be
 8004a58:	4a20      	ldr	r2, [pc, #128]	; (8004adc <startUIControl+0x374>)
 8004a5a:	fb82 1203 	smull	r1, r2, r2, r3
 8004a5e:	1092      	asrs	r2, r2, #2
 8004a60:	17db      	asrs	r3, r3, #31
 8004a62:	1ad3      	subs	r3, r2, r3
 8004a64:	f8a7 31be 	strh.w	r3, [r7, #446]	; 0x1be
       }

       //if last displayed is not what should be displayed, display
  	   if (last_display_minute != display_minute) { //UPDATE TOUCH VALUE!
 8004a68:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	; 0x1bc
 8004a6c:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	; 0x1be
 8004a70:	429a      	cmp	r2, r3
 8004a72:	f000 80bd 	beq.w	8004bf0 <startUIControl+0x488>

           switch (GlobalState.programMode){
 8004a76:	4b13      	ldr	r3, [pc, #76]	; (8004ac4 <startUIControl+0x35c>)
 8004a78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	f2c0 80b3 	blt.w	8004be8 <startUIControl+0x480>
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	dd6b      	ble.n	8004b5e <startUIControl+0x3f6>
 8004a86:	2b03      	cmp	r3, #3
 8004a88:	f040 80ae 	bne.w	8004be8 <startUIControl+0x480>
                case MODE_ESM_SURVEY:
                    //clear bottom
                    er_oled_clear_bottom_third(oled_buf);
 8004a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fd fcec 	bl	800246e <er_oled_clear_bottom_third>

                    //divide 10-50 min into option steps roughly
                    step = 45 / (GlobalState.surveyState.optionArrayLength+1);
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <startUIControl+0x35c>)
 8004a98:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	222d      	movs	r2, #45	; 0x2d
 8004aa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8004aa4:	f887 31b4 	strb.w	r3, [r7, #436]	; 0x1b4
                    for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 8004aae:	e049      	b.n	8004b44 <startUIControl+0x3dc>
 8004ab0:	48000400 	.word	0x48000400
 8004ab4:	08018570 	.word	0x08018570
 8004ab8:	08018598 	.word	0x08018598
 8004abc:	2002e1a8 	.word	0x2002e1a8
 8004ac0:	080185a8 	.word	0x080185a8
 8004ac4:	2002e0cc 	.word	0x2002e0cc
 8004ac8:	2002e2a0 	.word	0x2002e2a0
 8004acc:	080185b8 	.word	0x080185b8
 8004ad0:	2002e0fd 	.word	0x2002e0fd
 8004ad4:	2002e238 	.word	0x2002e238
 8004ad8:	2002e308 	.word	0x2002e308
 8004adc:	66666667 	.word	0x66666667
                        //map minute to option
                        if(display_minute >= (15 + i*step) &&
 8004ae0:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 8004ae4:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004ae8:	f897 11b4 	ldrb.w	r1, [r7, #436]	; 0x1b4
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	330f      	adds	r3, #15
 8004af2:	429a      	cmp	r2, r3
 8004af4:	db21      	blt.n	8004b3a <startUIControl+0x3d2>
                           display_minute < (15 + (i+1)*step)){
 8004af6:	f9b7 21be 	ldrsh.w	r2, [r7, #446]	; 0x1be
 8004afa:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004afe:	3301      	adds	r3, #1
 8004b00:	f897 11b4 	ldrb.w	r1, [r7, #436]	; 0x1b4
 8004b04:	fb01 f303 	mul.w	r3, r1, r3
 8004b08:	330f      	adds	r3, #15
                        if(display_minute >= (15 + i*step) &&
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	da15      	bge.n	8004b3a <startUIControl+0x3d2>
                            er_oled_string(0, 28, GlobalState.surveyState.optionArray[GlobalState.surveyState.optionArrayLength-1-i], 12, 1, oled_buf);
 8004b0e:	4bad      	ldr	r3, [pc, #692]	; (8004dc4 <startUIControl+0x65c>)
 8004b10:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8004b14:	1e5a      	subs	r2, r3, #1
 8004b16:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	4aa9      	ldr	r2, [pc, #676]	; (8004dc4 <startUIControl+0x65c>)
 8004b1e:	332c      	adds	r3, #44	; 0x2c
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	4413      	add	r3, r2
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b2a:	9301      	str	r3, [sp, #4]
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	9300      	str	r3, [sp, #0]
 8004b30:	230c      	movs	r3, #12
 8004b32:	211c      	movs	r1, #28
 8004b34:	2000      	movs	r0, #0
 8004b36:	f7fd fe23 	bl	8002780 <er_oled_string>
                    for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004b3a:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004b3e:	3301      	adds	r3, #1
 8004b40:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 8004b44:	4b9f      	ldr	r3, [pc, #636]	; (8004dc4 <startUIControl+0x65c>)
 8004b46:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8004b4a:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d3c6      	bcc.n	8004ae0 <startUIControl+0x378>
                        }
                    }
                    er_oled_display(oled_buf);
 8004b52:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fd fe53 	bl	8002802 <er_oled_display>

                    break;
 8004b5c:	e044      	b.n	8004be8 <startUIControl+0x480>
                case MODE_TIME_ESTIMATE:
                case MODE_ESM_TIME_ESTIMATE:

                    //hours wrap
                    if (display_minute < 15 &&
 8004b5e:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	; 0x1be
 8004b62:	2b0e      	cmp	r3, #14
 8004b64:	dc19      	bgt.n	8004b9a <startUIControl+0x432>
 8004b66:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	; 0x1be
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	db15      	blt.n	8004b9a <startUIControl+0x432>
                        display_minute >= 0 &&
 8004b6e:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	; 0x1bc
 8004b72:	2b2d      	cmp	r3, #45	; 0x2d
 8004b74:	dd11      	ble.n	8004b9a <startUIControl+0x432>
                        last_display_minute > 45){
                        hrs = (hrs+1)%24;
 8004b76:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	4b92      	ldr	r3, [pc, #584]	; (8004dc8 <startUIControl+0x660>)
 8004b7e:	fb83 1302 	smull	r1, r3, r3, r2
 8004b82:	1099      	asrs	r1, r3, #2
 8004b84:	17d3      	asrs	r3, r2, #31
 8004b86:	1ac9      	subs	r1, r1, r3
 8004b88:	460b      	mov	r3, r1
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	440b      	add	r3, r1
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	1ad1      	subs	r1, r2, r3
 8004b92:	460b      	mov	r3, r1
 8004b94:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 8004b98:	e014      	b.n	8004bc4 <startUIControl+0x45c>

                    } else if (display_minute > 45 &&
 8004b9a:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	; 0x1be
 8004b9e:	2b2d      	cmp	r3, #45	; 0x2d
 8004ba0:	dd10      	ble.n	8004bc4 <startUIControl+0x45c>
 8004ba2:	f9b7 31bc 	ldrsh.w	r3, [r7, #444]	; 0x1bc
 8004ba6:	2b0e      	cmp	r3, #14
 8004ba8:	dc0c      	bgt.n	8004bc4 <startUIControl+0x45c>
                               last_display_minute < 15){
                        if (hrs==0) {hrs = 23;}
 8004baa:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <startUIControl+0x452>
 8004bb2:	2317      	movs	r3, #23
 8004bb4:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
 8004bb8:	e004      	b.n	8004bc4 <startUIControl+0x45c>
                        else {hrs -= 1;}
 8004bba:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
                    }

                    //display time on bottom two thirds
                    sprintf (time, "%02d%02d", hrs, display_minute);
 8004bc4:	f897 21b5 	ldrb.w	r2, [r7, #437]	; 0x1b5
 8004bc8:	f9b7 31be 	ldrsh.w	r3, [r7, #446]	; 0x1be
 8004bcc:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004bd0:	497e      	ldr	r1, [pc, #504]	; (8004dcc <startUIControl+0x664>)
 8004bd2:	f00f fe17 	bl	8014804 <siprintf>
                    er_oled_time_twothird(time, oled_buf);
 8004bd6:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004bda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004bde:	4611      	mov	r1, r2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f7fd fec1 	bl	8002968 <er_oled_time_twothird>

                    break;
 8004be6:	bf00      	nop
           }

           last_display_minute = display_minute;
 8004be8:	f8b7 31be 	ldrh.w	r3, [r7, #446]	; 0x1be
 8004bec:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc

  	   }


  	   //optional
  	   osDelay(25);
 8004bf0:	2019      	movs	r0, #25
 8004bf2:	f00b f887 	bl	800fd04 <osDelay>
 8004bf6:	e61e      	b.n	8004836 <startUIControl+0xce>


     } else if (touch_end_count > 0){
 8004bf8:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f000 80c8 	beq.w	8004d92 <startUIControl+0x62a>

  	   touch_end_count += 1;//increment touching_end_count
 8004c02:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 8004c06:	3301      	adds	r3, #1
 8004c08:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2

  	   if (touch_end_count >= TOUCH_END_TIMEOUT){  //FINISHED/CONFIRMED TOUCH VALUE!
 8004c0c:	f897 31b2 	ldrb.w	r3, [r7, #434]	; 0x1b2
 8004c10:	2b4a      	cmp	r3, #74	; 0x4a
 8004c12:	f240 80ba 	bls.w	8004d8a <startUIControl+0x622>
  		   uint8_t option = 0xFF;
 8004c16:	23ff      	movs	r3, #255	; 0xff
 8004c18:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1

  		   switch (GlobalState.programMode){
 8004c1c:	4b69      	ldr	r3, [pc, #420]	; (8004dc4 <startUIControl+0x65c>)
 8004c1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004c22:	2b02      	cmp	r3, #2
 8004c24:	d057      	beq.n	8004cd6 <startUIControl+0x56e>
 8004c26:	2b03      	cmp	r3, #3
 8004c28:	d002      	beq.n	8004c30 <startUIControl+0x4c8>
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d073      	beq.n	8004d16 <startUIControl+0x5ae>
 8004c2e:	e09b      	b.n	8004d68 <startUIControl+0x600>
  		   	   case MODE_ESM_SURVEY:
  		   		   //grab current option
  		   		   for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 8004c36:	e025      	b.n	8004c84 <startUIControl+0x51c>
  		   		     //map minute to option
  		   		     if(last_display_minute >= (15 + i*step) &&
 8004c38:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	; 0x1bc
 8004c3c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004c40:	f897 11b4 	ldrb.w	r1, [r7, #436]	; 0x1b4
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	330f      	adds	r3, #15
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	db15      	blt.n	8004c7a <startUIControl+0x512>
  		   		        last_display_minute < (15 + (i+1)*step)){
 8004c4e:	f9b7 21bc 	ldrsh.w	r2, [r7, #444]	; 0x1bc
 8004c52:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004c56:	3301      	adds	r3, #1
 8004c58:	f897 11b4 	ldrb.w	r1, [r7, #436]	; 0x1b4
 8004c5c:	fb01 f303 	mul.w	r3, r1, r3
 8004c60:	330f      	adds	r3, #15
  		   		     if(last_display_minute >= (15 + i*step) &&
 8004c62:	429a      	cmp	r2, r3
 8004c64:	da09      	bge.n	8004c7a <startUIControl+0x512>
  		   		         option = GlobalState.surveyState.optionArrayLength-1-i;
 8004c66:	4b57      	ldr	r3, [pc, #348]	; (8004dc4 <startUIControl+0x65c>)
 8004c68:	f893 20d0 	ldrb.w	r2, [r3, #208]	; 0xd0
 8004c6c:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	3b01      	subs	r3, #1
 8004c76:	f887 31b1 	strb.w	r3, [r7, #433]	; 0x1b1
  		   		   for (i=0; i<GlobalState.surveyState.optionArrayLength; i++){
 8004c7a:	f897 31b3 	ldrb.w	r3, [r7, #435]	; 0x1b3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	f887 31b3 	strb.w	r3, [r7, #435]	; 0x1b3
 8004c84:	4b4f      	ldr	r3, [pc, #316]	; (8004dc4 <startUIControl+0x65c>)
 8004c86:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
 8004c8a:	f897 21b3 	ldrb.w	r2, [r7, #435]	; 0x1b3
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d3d2      	bcc.n	8004c38 <startUIControl+0x4d0>
  		   		     }
  		   		   }

  		   		   //send to ble
  		   		   bleSendData.sendType = TX_SURVEY_RESULT;
 8004c92:	f107 030c 	add.w	r3, r7, #12
 8004c96:	2205      	movs	r2, #5
 8004c98:	701a      	strb	r2, [r3, #0]
  		   		   bleSendData.data = (GlobalState.surveyState.surveyID << 8) | option;
 8004c9a:	4b4a      	ldr	r3, [pc, #296]	; (8004dc4 <startUIControl+0x65c>)
 8004c9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	b21a      	sxth	r2, r3
 8004ca4:	f897 31b1 	ldrb.w	r3, [r7, #433]	; 0x1b1
 8004ca8:	b21b      	sxth	r3, r3
 8004caa:	4313      	orrs	r3, r2
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	f107 030c 	add.w	r3, r7, #12
 8004cb4:	805a      	strh	r2, [r3, #2]
  		   		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004cb6:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <startUIControl+0x668>)
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	f107 010c 	add.w	r1, r7, #12
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f00b fb77 	bl	80103b4 <osMessageQueuePut>

  		   		   //notify main thread
  		   		   xTaskNotifyGive(esmMainHandle);
 8004cc6:	4b43      	ldr	r3, [pc, #268]	; (8004dd4 <startUIControl+0x66c>)
 8004cc8:	6818      	ldr	r0, [r3, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	2202      	movs	r2, #2
 8004cce:	2100      	movs	r1, #0
 8004cd0:	f00e fa9c 	bl	801320c <xTaskGenericNotify>
  		   		   break;
 8004cd4:	e048      	b.n	8004d68 <startUIControl+0x600>

  		   	   case MODE_ESM_TIME_ESTIMATE:
  		   		   //send to ble
  		   		   bleSendData.sendType = TX_TIME_EST;
 8004cd6:	f107 030c 	add.w	r3, r7, #12
 8004cda:	2203      	movs	r2, #3
 8004cdc:	701a      	strb	r2, [r3, #0]
  		   		   bleSendData.data = (hrs << 8) | last_display_minute;
 8004cde:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	b21a      	sxth	r2, r3
 8004ce6:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8004cea:	4313      	orrs	r3, r2
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	f107 030c 	add.w	r3, r7, #12
 8004cf4:	805a      	strh	r2, [r3, #2]
   		   		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <startUIControl+0x668>)
 8004cf8:	6818      	ldr	r0, [r3, #0]
 8004cfa:	f107 010c 	add.w	r1, r7, #12
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2200      	movs	r2, #0
 8004d02:	f00b fb57 	bl	80103b4 <osMessageQueuePut>

   		   		   //notify main thread
   		   		   xTaskNotifyGive(esmMainHandle);
 8004d06:	4b33      	ldr	r3, [pc, #204]	; (8004dd4 <startUIControl+0x66c>)
 8004d08:	6818      	ldr	r0, [r3, #0]
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	2100      	movs	r1, #0
 8004d10:	f00e fa7c 	bl	801320c <xTaskGenericNotify>
  		   		   break;
 8004d14:	e028      	b.n	8004d68 <startUIControl+0x600>

  		   	   case MODE_TIME_ESTIMATE:
  		   		   //send to ble
  		   		   bleSendData.sendType = TX_TIME_EST;
 8004d16:	f107 030c 	add.w	r3, r7, #12
 8004d1a:	2203      	movs	r2, #3
 8004d1c:	701a      	strb	r2, [r3, #0]
  		   		   bleSendData.data = (hrs << 8) | last_display_minute;
 8004d1e:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	b21a      	sxth	r2, r3
 8004d26:	f8b7 31bc 	ldrh.w	r3, [r7, #444]	; 0x1bc
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	b21b      	sxth	r3, r3
 8004d2e:	b29a      	uxth	r2, r3
 8004d30:	f107 030c 	add.w	r3, r7, #12
 8004d34:	805a      	strh	r2, [r3, #2]
   		   		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <startUIControl+0x668>)
 8004d38:	6818      	ldr	r0, [r3, #0]
 8004d3a:	f107 010c 	add.w	r1, r7, #12
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2200      	movs	r2, #0
 8004d42:	f00b fb37 	bl	80103b4 <osMessageQueuePut>

   		   		   //not from main thread, show time (which updates seen time, new interval, back to rest)
  		   		   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004d46:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <startUIControl+0x670>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f04f 31ff 	mov.w	r1, #4294967295
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f00b f8a0 	bl	800fe94 <osMutexAcquire>
				   GlobalState.programMode = MODE_SHOW_TIME;
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <startUIControl+0x65c>)
 8004d56:	2205      	movs	r2, #5
 8004d58:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				   osMutexRelease(modeMutexHandle);
 8004d5c:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <startUIControl+0x670>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4618      	mov	r0, r3
 8004d62:	f00b f8f5 	bl	800ff50 <osMutexRelease>
				   break;
 8004d66:	bf00      	nop
  		   }

  		   touch_end_count = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	f887 31b2 	strb.w	r3, [r7, #434]	; 0x1b2
  		   last_display_minute = -1;
 8004d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d72:	f8a7 31bc 	strh.w	r3, [r7, #444]	; 0x1bc
  		   er_oled_clear(oled_buf);
 8004d76:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f7fd fb5e 	bl	800243c <er_oled_clear>
  		   er_oled_display(oled_buf);
 8004d80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fd fd3c 	bl	8002802 <er_oled_display>

  	   }

  	   osDelay(25);
 8004d8a:	2019      	movs	r0, #25
 8004d8c:	f00a ffba 	bl	800fd04 <osDelay>
 8004d90:	e551      	b.n	8004836 <startUIControl+0xce>


     }else { //no touch, wait for a touch

       switch (GlobalState.programMode){
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <startUIControl+0x65c>)
 8004d94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d98:	2b07      	cmp	r3, #7
 8004d9a:	f200 8218 	bhi.w	80051ce <startUIControl+0xa66>
 8004d9e:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <startUIControl+0x63c>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08005193 	.word	0x08005193
 8004da8:	080051cf 	.word	0x080051cf
 8004dac:	080050f7 	.word	0x080050f7
 8004db0:	08005161 	.word	0x08005161
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004f2f 	.word	0x08004f2f
 8004dbc:	08005081 	.word	0x08005081
 8004dc0:	080050ad 	.word	0x080050ad
 8004dc4:	2002e0cc 	.word	0x2002e0cc
 8004dc8:	2aaaaaab 	.word	0x2aaaaaab
 8004dcc:	0801857c 	.word	0x0801857c
 8004dd0:	2002e298 	.word	0x2002e298
 8004dd4:	2002e2a0 	.word	0x2002e2a0
 8004dd8:	2002e238 	.word	0x2002e238
        case MODE_CANCEL:
    	   //had a 'cancel' button event

    	   er_oled_clear(oled_buf);
 8004ddc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fd fb2b 	bl	800243c <er_oled_clear>
   	   	   er_oled_string(0, 0, "  dismiss!", 12, 1, oled_buf);
 8004de6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	2301      	movs	r3, #1
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	230c      	movs	r3, #12
 8004df2:	4acd      	ldr	r2, [pc, #820]	; (8005128 <startUIControl+0x9c0>)
 8004df4:	2100      	movs	r1, #0
 8004df6:	2000      	movs	r0, #0
 8004df8:	f7fd fcc2 	bl	8002780 <er_oled_string>
   	   	   er_oled_string(0, 20, "TIME NOW IS:", 12, 1, oled_buf);
 8004dfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e00:	9301      	str	r3, [sp, #4]
 8004e02:	2301      	movs	r3, #1
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	230c      	movs	r3, #12
 8004e08:	4ac8      	ldr	r2, [pc, #800]	; (800512c <startUIControl+0x9c4>)
 8004e0a:	2114      	movs	r1, #20
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	f7fd fcb7 	bl	8002780 <er_oled_string>
   	   	   er_oled_display(oled_buf);
 8004e12:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7fd fcf3 	bl	8002802 <er_oled_display>

   	   	   osDelay(1000);
 8004e1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e20:	f00a ff70 	bl	800fd04 <osDelay>

   	   	   osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004e24:	4bc2      	ldr	r3, [pc, #776]	; (8005130 <startUIControl+0x9c8>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f04f 31ff 	mov.w	r1, #4294967295
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f00b f831 	bl	800fe94 <osMutexAcquire>
   	   	   HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004e32:	f107 0314 	add.w	r3, r7, #20
 8004e36:	2201      	movs	r2, #1
 8004e38:	4619      	mov	r1, r3
 8004e3a:	48be      	ldr	r0, [pc, #760]	; (8005134 <startUIControl+0x9cc>)
 8004e3c:	f006 f8f5 	bl	800b02a <HAL_RTC_GetTime>
   	   	   HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004e40:	f107 0310 	add.w	r3, r7, #16
 8004e44:	2201      	movs	r2, #1
 8004e46:	4619      	mov	r1, r3
 8004e48:	48ba      	ldr	r0, [pc, #744]	; (8005134 <startUIControl+0x9cc>)
 8004e4a:	f006 f9f8 	bl	800b23e <HAL_RTC_GetDate>
   	   	   osMutexRelease(rtcMutexHandle);
 8004e4e:	4bb8      	ldr	r3, [pc, #736]	; (8005130 <startUIControl+0x9c8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4618      	mov	r0, r3
 8004e54:	f00b f87c 	bl	800ff50 <osMutexRelease>

   	   	   hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f006 faaa 	bl	800b3b8 <RTC_Bcd2ToByte>
 8004e64:	4603      	mov	r3, r0
 8004e66:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
   	   	   mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004e6a:	f107 0314 	add.w	r3, r7, #20
 8004e6e:	785b      	ldrb	r3, [r3, #1]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f006 faa1 	bl	800b3b8 <RTC_Bcd2ToByte>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
   	   	   sprintf (time, "%02d%02d", hrs, mins);
 8004e7c:	f897 21b5 	ldrb.w	r2, [r7, #437]	; 0x1b5
 8004e80:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004e84:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004e88:	49ab      	ldr	r1, [pc, #684]	; (8005138 <startUIControl+0x9d0>)
 8004e8a:	f00f fcbb 	bl	8014804 <siprintf>
   	   	   er_oled_time(time);
 8004e8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fced 	bl	8002872 <er_oled_time>

	       osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8004e98:	4ba8      	ldr	r3, [pc, #672]	; (800513c <startUIControl+0x9d4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f00a fff7 	bl	800fe94 <osMutexAcquire>
	       GlobalState.lastSeenTime.time = cTime;
 8004ea6:	4ba6      	ldr	r3, [pc, #664]	; (8005140 <startUIControl+0x9d8>)
 8004ea8:	f107 0214 	add.w	r2, r7, #20
 8004eac:	1d1c      	adds	r4, r3, #4
 8004eae:	4615      	mov	r5, r2
 8004eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004eb4:	682b      	ldr	r3, [r5, #0]
 8004eb6:	6023      	str	r3, [r4, #0]
	       GlobalState.lastSeenTime.date = cDate;
 8004eb8:	4aa1      	ldr	r2, [pc, #644]	; (8005140 <startUIControl+0x9d8>)
 8004eba:	f107 0310 	add.w	r3, r7, #16
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	6193      	str	r3, [r2, #24]
	       osMutexRelease(lastSeenMutexHandle);
 8004ec2:	4b9e      	ldr	r3, [pc, #632]	; (800513c <startUIControl+0x9d4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f00b f842 	bl	800ff50 <osMutexRelease>

	       bleSendData.sendType = TX_TIME_SEEN;
 8004ecc:	f107 030c 	add.w	r3, r7, #12
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	701a      	strb	r2, [r3, #0]
	       bleSendData.data = 0x0000;
 8004ed4:	f107 030c 	add.w	r3, r7, #12
 8004ed8:	2200      	movs	r2, #0
 8004eda:	805a      	strh	r2, [r3, #2]
	       osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8004edc:	4b99      	ldr	r3, [pc, #612]	; (8005144 <startUIControl+0x9dc>)
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	f107 010c 	add.w	r1, r7, #12
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f00b fa64 	bl	80103b4 <osMessageQueuePut>

	       updateInterval();
 8004eec:	f7ff fbf6 	bl	80046dc <updateInterval>

	       osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8004ef0:	4b95      	ldr	r3, [pc, #596]	; (8005148 <startUIControl+0x9e0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f00a ffcb 	bl	800fe94 <osMutexAcquire>
	       GlobalState.programMode = MODE_RESTING;
 8004efe:	4b90      	ldr	r3, [pc, #576]	; (8005140 <startUIControl+0x9d8>)
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	       osMutexRelease(modeMutexHandle);
 8004f06:	4b90      	ldr	r3, [pc, #576]	; (8005148 <startUIControl+0x9e0>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f00b f820 	bl	800ff50 <osMutexRelease>

	       osDelay(3000);
 8004f10:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004f14:	f00a fef6 	bl	800fd04 <osDelay>
	       er_oled_clear(oled_buf);
 8004f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7fd fa8d 	bl	800243c <er_oled_clear>
	       er_oled_display(oled_buf);
 8004f22:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fd fc6b 	bl	8002802 <er_oled_display>
	       break;
 8004f2c:	e154      	b.n	80051d8 <startUIControl+0xa70>

        case MODE_SHOW_TIME:
		   //show time, no cancel, but does the same thing

		   er_oled_clear(oled_buf);
 8004f2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fd fa82 	bl	800243c <er_oled_clear>
		   er_oled_string(0, 0, " completed", 12, 1, oled_buf);
 8004f38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f3c:	9301      	str	r3, [sp, #4]
 8004f3e:	2301      	movs	r3, #1
 8004f40:	9300      	str	r3, [sp, #0]
 8004f42:	230c      	movs	r3, #12
 8004f44:	4a81      	ldr	r2, [pc, #516]	; (800514c <startUIControl+0x9e4>)
 8004f46:	2100      	movs	r1, #0
 8004f48:	2000      	movs	r0, #0
 8004f4a:	f7fd fc19 	bl	8002780 <er_oled_string>
		   er_oled_string(0, 20, "TIME NOW IS:", 12, 1, oled_buf);
 8004f4e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	2301      	movs	r3, #1
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	230c      	movs	r3, #12
 8004f5a:	4a74      	ldr	r2, [pc, #464]	; (800512c <startUIControl+0x9c4>)
 8004f5c:	2114      	movs	r1, #20
 8004f5e:	2000      	movs	r0, #0
 8004f60:	f7fd fc0e 	bl	8002780 <er_oled_string>
		   er_oled_display(oled_buf);
 8004f64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd fc4a 	bl	8002802 <er_oled_display>

		   osDelay(1000);
 8004f6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004f72:	f00a fec7 	bl	800fd04 <osDelay>

		   osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8004f76:	4b6e      	ldr	r3, [pc, #440]	; (8005130 <startUIControl+0x9c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f04f 31ff 	mov.w	r1, #4294967295
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f00a ff88 	bl	800fe94 <osMutexAcquire>
		   HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8004f84:	f107 0314 	add.w	r3, r7, #20
 8004f88:	2201      	movs	r2, #1
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4869      	ldr	r0, [pc, #420]	; (8005134 <startUIControl+0x9cc>)
 8004f8e:	f006 f84c 	bl	800b02a <HAL_RTC_GetTime>
		   HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8004f92:	f107 0310 	add.w	r3, r7, #16
 8004f96:	2201      	movs	r2, #1
 8004f98:	4619      	mov	r1, r3
 8004f9a:	4866      	ldr	r0, [pc, #408]	; (8005134 <startUIControl+0x9cc>)
 8004f9c:	f006 f94f 	bl	800b23e <HAL_RTC_GetDate>
		   osMutexRelease(rtcMutexHandle);
 8004fa0:	4b63      	ldr	r3, [pc, #396]	; (8005130 <startUIControl+0x9c8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f00a ffd3 	bl	800ff50 <osMutexRelease>

		   hrs = RTC_Bcd2ToByte(cTime.Hours);
 8004faa:	f107 0314 	add.w	r3, r7, #20
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f006 fa01 	bl	800b3b8 <RTC_Bcd2ToByte>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
		   mins = RTC_Bcd2ToByte(cTime.Minutes);
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	785b      	ldrb	r3, [r3, #1]
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f006 f9f8 	bl	800b3b8 <RTC_Bcd2ToByte>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	f887 31ad 	strb.w	r3, [r7, #429]	; 0x1ad
		   sprintf (time, "%02d%02d", hrs, mins);
 8004fce:	f897 21b5 	ldrb.w	r2, [r7, #437]	; 0x1b5
 8004fd2:	f897 31ad 	ldrb.w	r3, [r7, #429]	; 0x1ad
 8004fd6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004fda:	4957      	ldr	r1, [pc, #348]	; (8005138 <startUIControl+0x9d0>)
 8004fdc:	f00f fc12 	bl	8014804 <siprintf>
		   er_oled_time(time);
 8004fe0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fd fc44 	bl	8002872 <er_oled_time>

		   osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8004fea:	4b54      	ldr	r3, [pc, #336]	; (800513c <startUIControl+0x9d4>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f04f 31ff 	mov.w	r1, #4294967295
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f00a ff4e 	bl	800fe94 <osMutexAcquire>
		   GlobalState.lastSeenTime.time = cTime;
 8004ff8:	4b51      	ldr	r3, [pc, #324]	; (8005140 <startUIControl+0x9d8>)
 8004ffa:	f107 0214 	add.w	r2, r7, #20
 8004ffe:	1d1c      	adds	r4, r3, #4
 8005000:	4615      	mov	r5, r2
 8005002:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005004:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005006:	682b      	ldr	r3, [r5, #0]
 8005008:	6023      	str	r3, [r4, #0]
		   GlobalState.lastSeenTime.date = cDate;
 800500a:	4a4d      	ldr	r2, [pc, #308]	; (8005140 <startUIControl+0x9d8>)
 800500c:	f107 0310 	add.w	r3, r7, #16
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6193      	str	r3, [r2, #24]
		   osMutexRelease(lastSeenMutexHandle);
 8005014:	4b49      	ldr	r3, [pc, #292]	; (800513c <startUIControl+0x9d4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4618      	mov	r0, r3
 800501a:	f00a ff99 	bl	800ff50 <osMutexRelease>

		   bleSendData.sendType = TX_TIME_SEEN;
 800501e:	f107 030c 	add.w	r3, r7, #12
 8005022:	2204      	movs	r2, #4
 8005024:	701a      	strb	r2, [r3, #0]
		   bleSendData.data = 0x0000;
 8005026:	f107 030c 	add.w	r3, r7, #12
 800502a:	2200      	movs	r2, #0
 800502c:	805a      	strh	r2, [r3, #2]
		   osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 800502e:	4b45      	ldr	r3, [pc, #276]	; (8005144 <startUIControl+0x9dc>)
 8005030:	6818      	ldr	r0, [r3, #0]
 8005032:	f107 010c 	add.w	r1, r7, #12
 8005036:	2300      	movs	r3, #0
 8005038:	2200      	movs	r2, #0
 800503a:	f00b f9bb 	bl	80103b4 <osMessageQueuePut>

		   updateInterval();
 800503e:	f7ff fb4d 	bl	80046dc <updateInterval>

		   osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005042:	4b41      	ldr	r3, [pc, #260]	; (8005148 <startUIControl+0x9e0>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f04f 31ff 	mov.w	r1, #4294967295
 800504a:	4618      	mov	r0, r3
 800504c:	f00a ff22 	bl	800fe94 <osMutexAcquire>
		   GlobalState.programMode = MODE_RESTING;
 8005050:	4b3b      	ldr	r3, [pc, #236]	; (8005140 <startUIControl+0x9d8>)
 8005052:	2200      	movs	r2, #0
 8005054:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		   osMutexRelease(modeMutexHandle);
 8005058:	4b3b      	ldr	r3, [pc, #236]	; (8005148 <startUIControl+0x9e0>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f00a ff77 	bl	800ff50 <osMutexRelease>

		   osDelay(3000);
 8005062:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005066:	f00a fe4d 	bl	800fd04 <osDelay>
		   er_oled_clear(oled_buf);
 800506a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800506e:	4618      	mov	r0, r3
 8005070:	f7fd f9e4 	bl	800243c <er_oled_clear>
		   er_oled_display(oled_buf);
 8005074:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005078:	4618      	mov	r0, r3
 800507a:	f7fd fbc2 	bl	8002802 <er_oled_display>
		   break;
 800507e:	e0ab      	b.n	80051d8 <startUIControl+0xa70>

       case MODE_ERROR:
    	   //ERROR condition: print condition and loop forever

    	   er_oled_clear(oled_buf);
 8005080:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005084:	4618      	mov	r0, r3
 8005086:	f7fd f9d9 	bl	800243c <er_oled_clear>
    	   er_oled_string(0, 12, errorCondition, 12, 1, oled_buf);
 800508a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800508e:	9301      	str	r3, [sp, #4]
 8005090:	2301      	movs	r3, #1
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	230c      	movs	r3, #12
 8005096:	4a2e      	ldr	r2, [pc, #184]	; (8005150 <startUIControl+0x9e8>)
 8005098:	210c      	movs	r1, #12
 800509a:	2000      	movs	r0, #0
 800509c:	f7fd fb70 	bl	8002780 <er_oled_string>
    	   er_oled_display(oled_buf);
 80050a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fd fbac 	bl	8002802 <er_oled_display>
    	   for (;;){}
 80050aa:	e7fe      	b.n	80050aa <startUIControl+0x942>

       case MODE_CLEAR:
    	   //Timeout, notify and wait until clear
    	   //show time and restart

		   er_oled_clear(oled_buf);
 80050ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fd f9c3 	bl	800243c <er_oled_clear>
		   er_oled_string(0, 10, "  TIMEOUT!", 12, 1, oled_buf);
 80050b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050ba:	9301      	str	r3, [sp, #4]
 80050bc:	2301      	movs	r3, #1
 80050be:	9300      	str	r3, [sp, #0]
 80050c0:	230c      	movs	r3, #12
 80050c2:	4a24      	ldr	r2, [pc, #144]	; (8005154 <startUIControl+0x9ec>)
 80050c4:	210a      	movs	r1, #10
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7fd fb5a 	bl	8002780 <er_oled_string>
		   er_oled_string(0, 28, " hit button", 12, 1, oled_buf);
 80050cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050d0:	9301      	str	r3, [sp, #4]
 80050d2:	2301      	movs	r3, #1
 80050d4:	9300      	str	r3, [sp, #0]
 80050d6:	230c      	movs	r3, #12
 80050d8:	4a1f      	ldr	r2, [pc, #124]	; (8005158 <startUIControl+0x9f0>)
 80050da:	211c      	movs	r1, #28
 80050dc:	2000      	movs	r0, #0
 80050de:	f7fd fb4f 	bl	8002780 <er_oled_string>
		   er_oled_display(oled_buf);
 80050e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fd fb8b 	bl	8002802 <er_oled_display>

		   osDelay(500);
 80050ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050f0:	f00a fe08 	bl	800fd04 <osDelay>
    	   break;
 80050f4:	e070      	b.n	80051d8 <startUIControl+0xa70>

       case MODE_ESM_TIME_ESTIMATE:
    	  er_oled_clear(oled_buf);
 80050f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fd f99e 	bl	800243c <er_oled_clear>
    	  er_oled_string(0, 0, " GUESS TIME:", 12, 1, oled_buf);
 8005100:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	2301      	movs	r3, #1
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	230c      	movs	r3, #12
 800510c:	4a13      	ldr	r2, [pc, #76]	; (800515c <startUIControl+0x9f4>)
 800510e:	2100      	movs	r1, #0
 8005110:	2000      	movs	r0, #0
 8005112:	f7fd fb35 	bl	8002780 <er_oled_string>
    	  er_oled_display(oled_buf);
 8005116:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fb71 	bl	8002802 <er_oled_display>
    	  osDelay(100);
 8005120:	2064      	movs	r0, #100	; 0x64
 8005122:	f00a fdef 	bl	800fd04 <osDelay>
    	  break;
 8005126:	e057      	b.n	80051d8 <startUIControl+0xa70>
 8005128:	080185c8 	.word	0x080185c8
 800512c:	080185d4 	.word	0x080185d4
 8005130:	2002e0c8 	.word	0x2002e0c8
 8005134:	2002e0a4 	.word	0x2002e0a4
 8005138:	0801857c 	.word	0x0801857c
 800513c:	2002e308 	.word	0x2002e308
 8005140:	2002e0cc 	.word	0x2002e0cc
 8005144:	2002e298 	.word	0x2002e298
 8005148:	2002e238 	.word	0x2002e238
 800514c:	080185e4 	.word	0x080185e4
 8005150:	2002e1a8 	.word	0x2002e1a8
 8005154:	080185f0 	.word	0x080185f0
 8005158:	080185fc 	.word	0x080185fc
 800515c:	080185b8 	.word	0x080185b8

       case MODE_ESM_SURVEY:
    	  er_oled_clear(oled_buf);
 8005160:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005164:	4618      	mov	r0, r3
 8005166:	f7fd f969 	bl	800243c <er_oled_clear>
    	  er_oled_string(0, 0, GlobalState.surveyState.screenText, 12, 1, oled_buf);
 800516a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800516e:	9301      	str	r3, [sp, #4]
 8005170:	2301      	movs	r3, #1
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	230c      	movs	r3, #12
 8005176:	4a19      	ldr	r2, [pc, #100]	; (80051dc <startUIControl+0xa74>)
 8005178:	2100      	movs	r1, #0
 800517a:	2000      	movs	r0, #0
 800517c:	f7fd fb00 	bl	8002780 <er_oled_string>
    	  er_oled_display(oled_buf);
 8005180:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005184:	4618      	mov	r0, r3
 8005186:	f7fd fb3c 	bl	8002802 <er_oled_display>
    	  osDelay(100);
 800518a:	2064      	movs	r0, #100	; 0x64
 800518c:	f00a fdba 	bl	800fd04 <osDelay>
    	  break;
 8005190:	e022      	b.n	80051d8 <startUIControl+0xa70>

       case MODE_RESTING:
		   osDelay(250);
 8005192:	20fa      	movs	r0, #250	; 0xfa
 8005194:	f00a fdb6 	bl	800fd04 <osDelay>
		   if (GlobalState.paused){
 8005198:	4b11      	ldr	r3, [pc, #68]	; (80051e0 <startUIControl+0xa78>)
 800519a:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d019      	beq.n	80051d6 <startUIControl+0xa6e>
			   er_oled_clear(oled_buf);
 80051a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fd f948 	bl	800243c <er_oled_clear>
			   er_oled_string(0, 14, "   paused", 12, 1, oled_buf);
 80051ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051b0:	9301      	str	r3, [sp, #4]
 80051b2:	2301      	movs	r3, #1
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	230c      	movs	r3, #12
 80051b8:	4a0a      	ldr	r2, [pc, #40]	; (80051e4 <startUIControl+0xa7c>)
 80051ba:	210e      	movs	r1, #14
 80051bc:	2000      	movs	r0, #0
 80051be:	f7fd fadf 	bl	8002780 <er_oled_string>
			   er_oled_display(oled_buf);
 80051c2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7fd fb1b 	bl	8002802 <er_oled_display>
		   }
		   break;
 80051cc:	e003      	b.n	80051d6 <startUIControl+0xa6e>

       default:
    	   osDelay(20);
 80051ce:	2014      	movs	r0, #20
 80051d0:	f00a fd98 	bl	800fd04 <osDelay>
    	   break;
 80051d4:	e000      	b.n	80051d8 <startUIControl+0xa70>
		   break;
 80051d6:	bf00      	nop
	 current_minute = iqs263_get_min_if_pressed(); //returns -1 if no press
 80051d8:	f7ff bb2d 	b.w	8004836 <startUIControl+0xce>
 80051dc:	2002e0fd 	.word	0x2002e0fd
 80051e0:	2002e0cc 	.word	0x2002e0cc
 80051e4:	08018608 	.word	0x08018608

080051e8 <check_time_bounds>:

  /* USER CODE END startUIControl */
}


uint8_t check_time_bounds(uint8_t curr_hrs){
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
	//check time bounds, account for wrap (i.e. give time bounds of 10a-3a)

	uint8_t starthr = RTC_Bcd2ToByte(GlobalState.timeBound.startHR_BCD);
 80051f2:	4b17      	ldr	r3, [pc, #92]	; (8005250 <check_time_bounds+0x68>)
 80051f4:	781b      	ldrb	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f006 f8de 	bl	800b3b8 <RTC_Bcd2ToByte>
 80051fc:	4603      	mov	r3, r0
 80051fe:	73fb      	strb	r3, [r7, #15]
	uint8_t endhr = RTC_Bcd2ToByte(GlobalState.timeBound.endHR_BCD);
 8005200:	4b13      	ldr	r3, [pc, #76]	; (8005250 <check_time_bounds+0x68>)
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	4618      	mov	r0, r3
 8005206:	f006 f8d7 	bl	800b3b8 <RTC_Bcd2ToByte>
 800520a:	4603      	mov	r3, r0
 800520c:	73bb      	strb	r3, [r7, #14]

	if (starthr < endhr){
 800520e:	7bfa      	ldrb	r2, [r7, #15]
 8005210:	7bbb      	ldrb	r3, [r7, #14]
 8005212:	429a      	cmp	r2, r3
 8005214:	d20c      	bcs.n	8005230 <check_time_bounds+0x48>
		return (curr_hrs >= starthr && curr_hrs < endhr);
 8005216:	79fa      	ldrb	r2, [r7, #7]
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	429a      	cmp	r2, r3
 800521c:	d305      	bcc.n	800522a <check_time_bounds+0x42>
 800521e:	79fa      	ldrb	r2, [r7, #7]
 8005220:	7bbb      	ldrb	r3, [r7, #14]
 8005222:	429a      	cmp	r2, r3
 8005224:	d201      	bcs.n	800522a <check_time_bounds+0x42>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <check_time_bounds+0x44>
 800522a:	2300      	movs	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e00b      	b.n	8005248 <check_time_bounds+0x60>
	} else {
		return (curr_hrs >= starthr || curr_hrs < endhr);
 8005230:	79fa      	ldrb	r2, [r7, #7]
 8005232:	7bfb      	ldrb	r3, [r7, #15]
 8005234:	429a      	cmp	r2, r3
 8005236:	d203      	bcs.n	8005240 <check_time_bounds+0x58>
 8005238:	79fa      	ldrb	r2, [r7, #7]
 800523a:	7bbb      	ldrb	r3, [r7, #14]
 800523c:	429a      	cmp	r2, r3
 800523e:	d201      	bcs.n	8005244 <check_time_bounds+0x5c>
 8005240:	2301      	movs	r3, #1
 8005242:	e000      	b.n	8005246 <check_time_bounds+0x5e>
 8005244:	2300      	movs	r3, #0
 8005246:	b2db      	uxtb	r3, r3
	}

}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	2002e0cc 	.word	0x2002e0cc

08005254 <startESMMain>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startESMMain */
void startESMMain(void *argument)
{
 8005254:	b5b0      	push	{r4, r5, r7, lr}
 8005256:	b092      	sub	sp, #72	; 0x48
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startESMMain */


  const BLETX_Queue_t bleSendInit = {TX_SURVEY_INITIALIZED, 0x0000};
 800525c:	2302      	movs	r3, #2
 800525e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 8005262:	2300      	movs	r3, #0
 8005264:	857b      	strh	r3, [r7, #42]	; 0x2a
  /* Infinite loop */
  for(;;)
  {

	//only check time 3 times a min to see if we need a survey
    osDelay(20000); //20 sec delay
 8005266:	f644 6020 	movw	r0, #20000	; 0x4e20
 800526a:	f00a fd4b 	bl	800fd04 <osDelay>

    //Grab current time
    osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 800526e:	4ba5      	ldr	r3, [pc, #660]	; (8005504 <startESMMain+0x2b0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f04f 31ff 	mov.w	r1, #4294967295
 8005276:	4618      	mov	r0, r3
 8005278:	f00a fe0c 	bl	800fe94 <osMutexAcquire>
    HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	2201      	movs	r2, #1
 8005282:	4619      	mov	r1, r3
 8005284:	48a0      	ldr	r0, [pc, #640]	; (8005508 <startESMMain+0x2b4>)
 8005286:	f005 fed0 	bl	800b02a <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 800528a:	f107 0310 	add.w	r3, r7, #16
 800528e:	2201      	movs	r2, #1
 8005290:	4619      	mov	r1, r3
 8005292:	489d      	ldr	r0, [pc, #628]	; (8005508 <startESMMain+0x2b4>)
 8005294:	f005 ffd3 	bl	800b23e <HAL_RTC_GetDate>
    osMutexRelease(rtcMutexHandle);
 8005298:	4b9a      	ldr	r3, [pc, #616]	; (8005504 <startESMMain+0x2b0>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4618      	mov	r0, r3
 800529e:	f00a fe57 	bl	800ff50 <osMutexRelease>

    uint8_t curr_hrs = RTC_Bcd2ToByte(cTime.Hours);
 80052a2:	7d3b      	ldrb	r3, [r7, #20]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f006 f887 	bl	800b3b8 <RTC_Bcd2ToByte>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
    uint8_t curr_min = RTC_Bcd2ToByte(cTime.Minutes);
 80052b0:	7d7b      	ldrb	r3, [r7, #21]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f006 f880 	bl	800b3b8 <RTC_Bcd2ToByte>
 80052b8:	4603      	mov	r3, r0
 80052ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c

    //Get a date in YYMMDD format so we can easily compare relative values
    uint32_t curr_date = (cDate.Year << 16) | (cDate.Month << 8) | cDate.Date;
 80052be:	7cfb      	ldrb	r3, [r7, #19]
 80052c0:	041a      	lsls	r2, r3, #16
 80052c2:	7c7b      	ldrb	r3, [r7, #17]
 80052c4:	021b      	lsls	r3, r3, #8
 80052c6:	4313      	orrs	r3, r2
 80052c8:	7cba      	ldrb	r2, [r7, #18]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	63bb      	str	r3, [r7, #56]	; 0x38

    //Grab last seen time hrs/min and date
    uint8_t last_hrs = RTC_Bcd2ToByte(GlobalState.lastSeenTime.time.Hours);
 80052ce:	4b8f      	ldr	r3, [pc, #572]	; (800550c <startESMMain+0x2b8>)
 80052d0:	791b      	ldrb	r3, [r3, #4]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f006 f870 	bl	800b3b8 <RTC_Bcd2ToByte>
 80052d8:	4603      	mov	r3, r0
 80052da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    uint8_t last_min = RTC_Bcd2ToByte(GlobalState.lastSeenTime.time.Minutes);
 80052de:	4b8b      	ldr	r3, [pc, #556]	; (800550c <startESMMain+0x2b8>)
 80052e0:	795b      	ldrb	r3, [r3, #5]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f006 f868 	bl	800b3b8 <RTC_Bcd2ToByte>
 80052e8:	4603      	mov	r3, r0
 80052ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    uint32_t last_date = (GlobalState.lastSeenTime.date.Year << 16) |
 80052ee:	4b87      	ldr	r3, [pc, #540]	; (800550c <startESMMain+0x2b8>)
 80052f0:	7edb      	ldrb	r3, [r3, #27]
 80052f2:	041a      	lsls	r2, r3, #16
    					 (GlobalState.lastSeenTime.date.Month << 8) |
 80052f4:	4b85      	ldr	r3, [pc, #532]	; (800550c <startESMMain+0x2b8>)
 80052f6:	7e5b      	ldrb	r3, [r3, #25]
 80052f8:	021b      	lsls	r3, r3, #8
    uint32_t last_date = (GlobalState.lastSeenTime.date.Year << 16) |
 80052fa:	4313      	orrs	r3, r2
						  GlobalState.lastSeenTime.date.Date;
 80052fc:	4a83      	ldr	r2, [pc, #524]	; (800550c <startESMMain+0x2b8>)
 80052fe:	7e92      	ldrb	r2, [r2, #26]
    					 (GlobalState.lastSeenTime.date.Month << 8) |
 8005300:	4313      	orrs	r3, r2
    uint32_t last_date = (GlobalState.lastSeenTime.date.Year << 16) |
 8005302:	633b      	str	r3, [r7, #48]	; 0x30

    uint8_t sameDayFlag = 1;
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

    //Going to do time in minutes for ease.  60 min *24 hours = 1440 min / day

    uint16_t current_time_in_min = (60*curr_hrs + curr_min);
 800530a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800530e:	b29b      	uxth	r3, r3
 8005310:	461a      	mov	r2, r3
 8005312:	0112      	lsls	r2, r2, #4
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	b29a      	uxth	r2, r3
 800531a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800531e:	b29b      	uxth	r3, r3
 8005320:	4413      	add	r3, r2
 8005322:	85fb      	strh	r3, [r7, #46]	; 0x2e

    uint16_t thresh_time_in_min = (60*last_hrs + last_min + GlobalState.currentInterval);
 8005324:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005328:	b29b      	uxth	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	0112      	lsls	r2, r2, #4
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	b29a      	uxth	r2, r3
 8005334:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005338:	b29b      	uxth	r3, r3
 800533a:	4413      	add	r3, r2
 800533c:	b29a      	uxth	r2, r3
 800533e:	4b73      	ldr	r3, [pc, #460]	; (800550c <startESMMain+0x2b8>)
 8005340:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8005344:	b29b      	uxth	r3, r3
 8005346:	4413      	add	r3, r2
 8005348:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	if (thresh_time_in_min >= 1440){
 800534c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005350:	f5b3 6fb4 	cmp.w	r3, #1440	; 0x5a0
 8005354:	d30f      	bcc.n	8005376 <startESMMain+0x122>
		thresh_time_in_min %= 1440;
 8005356:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800535a:	095a      	lsrs	r2, r3, #5
 800535c:	496c      	ldr	r1, [pc, #432]	; (8005510 <startESMMain+0x2bc>)
 800535e:	fba1 1202 	umull	r1, r2, r1, r2
 8005362:	f44f 61b4 	mov.w	r1, #1440	; 0x5a0
 8005366:	fb01 f202 	mul.w	r2, r1, r2
 800536a:	1a9b      	subs	r3, r3, r2
 800536c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		sameDayFlag = 0;
 8005370:	2300      	movs	r3, #0
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    //Init Survey:
    // TIME BOUNDS for current time hrs
    // curr_time == last_time + interval  (minute resolution, this is checked every 15 sec).
    // programMode is RESTING
    // not GlobalState.paused
    if (GlobalState.programMode == MODE_RESTING && !GlobalState.paused &&
 8005376:	4b65      	ldr	r3, [pc, #404]	; (800550c <startESMMain+0x2b8>)
 8005378:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	f040 83c7 	bne.w	8005b10 <startESMMain+0x8bc>
 8005382:	4b62      	ldr	r3, [pc, #392]	; (800550c <startESMMain+0x2b8>)
 8005384:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
 8005388:	2b00      	cmp	r3, #0
 800538a:	f040 83c1 	bne.w	8005b10 <startESMMain+0x8bc>
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 800538e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005392:	4618      	mov	r0, r3
 8005394:	f7ff ff28 	bl	80051e8 <check_time_bounds>
 8005398:	4603      	mov	r3, r0
    if (GlobalState.programMode == MODE_RESTING && !GlobalState.paused &&
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 83b8 	beq.w	8005b10 <startESMMain+0x8bc>
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 80053a0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80053a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80053a6:	429a      	cmp	r2, r3
 80053a8:	f0c0 83b2 	bcc.w	8005b10 <startESMMain+0x8bc>
		(sameDayFlag | (curr_date > last_date )) ){
 80053ac:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80053b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80053b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053b4:	4291      	cmp	r1, r2
 80053b6:	bf8c      	ite	hi
 80053b8:	2201      	movhi	r2, #1
 80053ba:	2200      	movls	r2, #0
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	4313      	orrs	r3, r2
    	check_time_bounds(curr_hrs) && current_time_in_min >= thresh_time_in_min &&
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 83a5 	beq.w	8005b10 <startESMMain+0x8bc>

    	//send TX_SURVEY_INITIALIZED
    	osMessageQueuePut(bleTXqueueHandle, &bleSendInit, 0, 0);
 80053c6:	4b53      	ldr	r3, [pc, #332]	; (8005514 <startESMMain+0x2c0>)
 80053c8:	6818      	ldr	r0, [r3, #0]
 80053ca:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80053ce:	2300      	movs	r3, #0
 80053d0:	2200      	movs	r2, #0
 80053d2:	f00a ffef 	bl	80103b4 <osMessageQueuePut>

    	//set program mode to MODE_ESM_TIME_ESTIMATE
    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80053d6:	4b50      	ldr	r3, [pc, #320]	; (8005518 <startESMMain+0x2c4>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f04f 31ff 	mov.w	r1, #4294967295
 80053de:	4618      	mov	r0, r3
 80053e0:	f00a fd58 	bl	800fe94 <osMutexAcquire>
    	GlobalState.programMode = MODE_ESM_TIME_ESTIMATE;
 80053e4:	4b49      	ldr	r3, [pc, #292]	; (800550c <startESMMain+0x2b8>)
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    	osMutexRelease(modeMutexHandle);
 80053ec:	4b4a      	ldr	r3, [pc, #296]	; (8005518 <startESMMain+0x2c4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f00a fdad 	bl	800ff50 <osMutexRelease>

    	//clear UI notification flags
    	xTaskNotifyStateClear(NULL);
 80053f6:	2000      	movs	r0, #0
 80053f8:	f00e f896 	bl	8013528 <xTaskNotifyStateClear>

    	uint8_t continue_flag = 1;
 80053fc:	2301      	movs	r3, #1
 80053fe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    	//(1) Alert Loop and ESM_TIME_ESTIMATE
    	uint8_t keep_alerting = 1;
 8005402:	2301      	movs	r3, #1
 8005404:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    	while(keep_alerting){
 8005408:	e020      	b.n	800544c <startESMMain+0x1f8>

    		//alert
    		xTaskNotifyGive(alertHandle);
 800540a:	4b44      	ldr	r3, [pc, #272]	; (800551c <startESMMain+0x2c8>)
 800540c:	6818      	ldr	r0, [r3, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	2202      	movs	r2, #2
 8005412:	2100      	movs	r1, #0
 8005414:	f00d fefa 	bl	801320c <xTaskGenericNotify>
    		//wait for notification from UI thread that indicates start of user interaction
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(ALERT_TIMEOUT));
 8005418:	f241 7170 	movw	r1, #6000	; 0x1770
 800541c:	2001      	movs	r0, #1
 800541e:	f00d fe53 	bl	80130c8 <ulTaskNotifyTake>
 8005422:	6478      	str	r0, [r7, #68]	; 0x44
       	    if (notification){ //not a timeout, interaction started
 8005424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005426:	2b00      	cmp	r3, #0
 8005428:	d002      	beq.n	8005430 <startESMMain+0x1dc>
        		keep_alerting = 0;
 800542a:	2300      	movs	r3, #0
 800542c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
     		}
    	    if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 8005430:	4b36      	ldr	r3, [pc, #216]	; (800550c <startESMMain+0x2b8>)
 8005432:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005436:	2b02      	cmp	r3, #2
 8005438:	d005      	beq.n	8005446 <startESMMain+0x1f2>
    	    	//button press has changed mode and canceled interaction. want to exit alert loop.
    	    	keep_alerting = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    	    	continue_flag = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    	    }

    	    osDelay(10);
 8005446:	200a      	movs	r0, #10
 8005448:	f00a fc5c 	bl	800fd04 <osDelay>
    	while(keep_alerting){
 800544c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1da      	bne.n	800540a <startESMMain+0x1b6>
        }

    	//SECOND SCREEN FOR ESM - FOCUS
    	if (continue_flag){
 8005454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00d      	beq.n	8005478 <startESMMain+0x224>
    		//(2) Wait for notification from UI thread that indicates confirmed input
    		notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800545c:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005460:	2001      	movs	r0, #1
 8005462:	f00d fe31 	bl	80130c8 <ulTaskNotifyTake>
 8005466:	6478      	str	r0, [r7, #68]	; 0x44

    		if (GlobalState.programMode != MODE_ESM_TIME_ESTIMATE){
 8005468:	4b28      	ldr	r3, [pc, #160]	; (800550c <startESMMain+0x2b8>)
 800546a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800546e:	2b02      	cmp	r3, #2
 8005470:	d002      	beq.n	8005478 <startESMMain+0x224>
    			//if our mode has changed, we had a dismiss/snooze event
    			continue_flag = 0;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    		}
    	}

    	if (continue_flag){
 8005478:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800547c:	2b00      	cmp	r3, #0
 800547e:	d06a      	beq.n	8005556 <startESMMain+0x302>
    		if (notification){//not timed out, had a confirmed event
 8005480:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005482:	2b00      	cmp	r3, #0
 8005484:	d054      	beq.n	8005530 <startESMMain+0x2dc>
    			//set up next interaction
    			//set up survey
    			osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005486:	4b26      	ldr	r3, [pc, #152]	; (8005520 <startESMMain+0x2cc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f04f 31ff 	mov.w	r1, #4294967295
 800548e:	4618      	mov	r0, r3
 8005490:	f00a fd00 	bl	800fe94 <osMutexAcquire>
    			strncpy(GlobalState.surveyState.screenText, "    FOCUS?", strlen("    FOCUS?") + 1);
 8005494:	4a23      	ldr	r2, [pc, #140]	; (8005524 <startESMMain+0x2d0>)
 8005496:	4b24      	ldr	r3, [pc, #144]	; (8005528 <startESMMain+0x2d4>)
 8005498:	cb03      	ldmia	r3!, {r0, r1}
 800549a:	6010      	str	r0, [r2, #0]
 800549c:	6051      	str	r1, [r2, #4]
 800549e:	8819      	ldrh	r1, [r3, #0]
 80054a0:	789b      	ldrb	r3, [r3, #2]
 80054a2:	8111      	strh	r1, [r2, #8]
 80054a4:	7293      	strb	r3, [r2, #10]
    			GlobalState.surveyState.screenTextLength = strlen("    FOCUS?");
 80054a6:	4b19      	ldr	r3, [pc, #100]	; (800550c <startESMMain+0x2b8>)
 80054a8:	220a      	movs	r2, #10
 80054aa:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
    			GlobalState.surveyState.surveyID = SURVEY_FOCUS;
 80054ae:	4b17      	ldr	r3, [pc, #92]	; (800550c <startESMMain+0x2b8>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    			memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 80054b6:	4b15      	ldr	r3, [pc, #84]	; (800550c <startESMMain+0x2b8>)
 80054b8:	4a1c      	ldr	r2, [pc, #112]	; (800552c <startESMMain+0x2d8>)
 80054ba:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80054be:	4615      	mov	r5, r2
 80054c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80054cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    			GlobalState.surveyState.optionArrayLength = 5;
 80054d0:	4b0e      	ldr	r3, [pc, #56]	; (800550c <startESMMain+0x2b8>)
 80054d2:	2205      	movs	r2, #5
 80054d4:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
    			osMutexRelease(surveyMutexHandle);
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <startESMMain+0x2cc>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f00a fd37 	bl	800ff50 <osMutexRelease>

    			//programMode
    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <startESMMain+0x2c4>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f04f 31ff 	mov.w	r1, #4294967295
 80054ea:	4618      	mov	r0, r3
 80054ec:	f00a fcd2 	bl	800fe94 <osMutexAcquire>
    			GlobalState.programMode = MODE_ESM_SURVEY;
 80054f0:	4b06      	ldr	r3, [pc, #24]	; (800550c <startESMMain+0x2b8>)
 80054f2:	2203      	movs	r2, #3
 80054f4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    			osMutexRelease(modeMutexHandle);
 80054f8:	4b07      	ldr	r3, [pc, #28]	; (8005518 <startESMMain+0x2c4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	f00a fd27 	bl	800ff50 <osMutexRelease>
 8005502:	e028      	b.n	8005556 <startESMMain+0x302>
 8005504:	2002e0c8 	.word	0x2002e0c8
 8005508:	2002e0a4 	.word	0x2002e0a4
 800550c:	2002e0cc 	.word	0x2002e0cc
 8005510:	05b05b06 	.word	0x05b05b06
 8005514:	2002e298 	.word	0x2002e298
 8005518:	2002e238 	.word	0x2002e238
 800551c:	2002e1d8 	.word	0x2002e1d8
 8005520:	2002e230 	.word	0x2002e230
 8005524:	2002e0fd 	.word	0x2002e0fd
 8005528:	08018614 	.word	0x08018614
 800552c:	08019634 	.word	0x08019634

    		} else {//timed out due to inactivity
    			continue_flag = 0;
 8005530:	2300      	movs	r3, #0
 8005532:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    			osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005536:	4bb2      	ldr	r3, [pc, #712]	; (8005800 <startESMMain+0x5ac>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f04f 31ff 	mov.w	r1, #4294967295
 800553e:	4618      	mov	r0, r3
 8005540:	f00a fca8 	bl	800fe94 <osMutexAcquire>
    			GlobalState.programMode = MODE_CLEAR;
 8005544:	4baf      	ldr	r3, [pc, #700]	; (8005804 <startESMMain+0x5b0>)
 8005546:	2207      	movs	r2, #7
 8005548:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    			osMutexRelease(modeMutexHandle);
 800554c:	4bac      	ldr	r3, [pc, #688]	; (8005800 <startESMMain+0x5ac>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4618      	mov	r0, r3
 8005552:	f00a fcfd 	bl	800ff50 <osMutexRelease>
    		}
    	}

    	//THIRD SCREEN FOR ESM - ALERTNESS/AROUSAL
		if (continue_flag){
 8005556:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00d      	beq.n	800557a <startESMMain+0x326>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800555e:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005562:	2001      	movs	r0, #1
 8005564:	f00d fdb0 	bl	80130c8 <ulTaskNotifyTake>
 8005568:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 800556a:	4ba6      	ldr	r3, [pc, #664]	; (8005804 <startESMMain+0x5b0>)
 800556c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005570:	2b03      	cmp	r3, #3
 8005572:	d002      	beq.n	800557a <startESMMain+0x326>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005574:	2300      	movs	r3, #0
 8005576:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 800557a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800557e:	2b00      	cmp	r3, #0
 8005580:	d042      	beq.n	8005608 <startESMMain+0x3b4>
			if (notification){//not timed out, had a confirmed event
 8005582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02c      	beq.n	80055e2 <startESMMain+0x38e>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005588:	4b9f      	ldr	r3, [pc, #636]	; (8005808 <startESMMain+0x5b4>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f04f 31ff 	mov.w	r1, #4294967295
 8005590:	4618      	mov	r0, r3
 8005592:	f00a fc7f 	bl	800fe94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " ALERTNESS?", strlen(" ALERTNESS?") + 1);
 8005596:	4a9d      	ldr	r2, [pc, #628]	; (800580c <startESMMain+0x5b8>)
 8005598:	4b9d      	ldr	r3, [pc, #628]	; (8005810 <startESMMain+0x5bc>)
 800559a:	4614      	mov	r4, r2
 800559c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800559e:	6020      	str	r0, [r4, #0]
 80055a0:	6061      	str	r1, [r4, #4]
 80055a2:	60a2      	str	r2, [r4, #8]
				GlobalState.surveyState.screenTextLength = strlen(" ALERTNESS?");
 80055a4:	4b97      	ldr	r3, [pc, #604]	; (8005804 <startESMMain+0x5b0>)
 80055a6:	220b      	movs	r2, #11
 80055a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_AROUSAL;
 80055ac:	4b95      	ldr	r3, [pc, #596]	; (8005804 <startESMMain+0x5b0>)
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 80055b4:	4b93      	ldr	r3, [pc, #588]	; (8005804 <startESMMain+0x5b0>)
 80055b6:	4a97      	ldr	r2, [pc, #604]	; (8005814 <startESMMain+0x5c0>)
 80055b8:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80055bc:	4615      	mov	r5, r2
 80055be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80055c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80055c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80055ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 80055ce:	4b8d      	ldr	r3, [pc, #564]	; (8005804 <startESMMain+0x5b0>)
 80055d0:	2205      	movs	r2, #5
 80055d2:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 80055d6:	4b8c      	ldr	r3, [pc, #560]	; (8005808 <startESMMain+0x5b4>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f00a fcb8 	bl	800ff50 <osMutexRelease>
 80055e0:	e012      	b.n	8005608 <startESMMain+0x3b4>

			} else {//timed out due to inactivity
				continue_flag = 0;
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80055e8:	4b85      	ldr	r3, [pc, #532]	; (8005800 <startESMMain+0x5ac>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f04f 31ff 	mov.w	r1, #4294967295
 80055f0:	4618      	mov	r0, r3
 80055f2:	f00a fc4f 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80055f6:	4b83      	ldr	r3, [pc, #524]	; (8005804 <startESMMain+0x5b0>)
 80055f8:	2207      	movs	r2, #7
 80055fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80055fe:	4b80      	ldr	r3, [pc, #512]	; (8005800 <startESMMain+0x5ac>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4618      	mov	r0, r3
 8005604:	f00a fca4 	bl	800ff50 <osMutexRelease>
			}
		}

		//FOURTH SCREEN FOR ESM - EMOTION/VALENCE
		if (continue_flag){
 8005608:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00d      	beq.n	800562c <startESMMain+0x3d8>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005610:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005614:	2001      	movs	r0, #1
 8005616:	f00d fd57 	bl	80130c8 <ulTaskNotifyTake>
 800561a:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 800561c:	4b79      	ldr	r3, [pc, #484]	; (8005804 <startESMMain+0x5b0>)
 800561e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005622:	2b03      	cmp	r3, #3
 8005624:	d002      	beq.n	800562c <startESMMain+0x3d8>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005626:	2300      	movs	r3, #0
 8005628:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 800562c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005630:	2b00      	cmp	r3, #0
 8005632:	d044      	beq.n	80056be <startESMMain+0x46a>
			if (notification){//not timed out, had a confirmed event
 8005634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005636:	2b00      	cmp	r3, #0
 8005638:	d02e      	beq.n	8005698 <startESMMain+0x444>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 800563a:	4b73      	ldr	r3, [pc, #460]	; (8005808 <startESMMain+0x5b4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f04f 31ff 	mov.w	r1, #4294967295
 8005642:	4618      	mov	r0, r3
 8005644:	f00a fc26 	bl	800fe94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "  EMOTION?", strlen("  EMOTION?") + 1);
 8005648:	4a70      	ldr	r2, [pc, #448]	; (800580c <startESMMain+0x5b8>)
 800564a:	4b73      	ldr	r3, [pc, #460]	; (8005818 <startESMMain+0x5c4>)
 800564c:	cb03      	ldmia	r3!, {r0, r1}
 800564e:	6010      	str	r0, [r2, #0]
 8005650:	6051      	str	r1, [r2, #4]
 8005652:	8819      	ldrh	r1, [r3, #0]
 8005654:	789b      	ldrb	r3, [r3, #2]
 8005656:	8111      	strh	r1, [r2, #8]
 8005658:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen("  EMOTION?");
 800565a:	4b6a      	ldr	r3, [pc, #424]	; (8005804 <startESMMain+0x5b0>)
 800565c:	220a      	movs	r2, #10
 800565e:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_VALENCE;
 8005662:	4b68      	ldr	r3, [pc, #416]	; (8005804 <startESMMain+0x5b0>)
 8005664:	2203      	movs	r2, #3
 8005666:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_valence, sizeof(opts_valence));
 800566a:	4b66      	ldr	r3, [pc, #408]	; (8005804 <startESMMain+0x5b0>)
 800566c:	4a6b      	ldr	r2, [pc, #428]	; (800581c <startESMMain+0x5c8>)
 800566e:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8005672:	4615      	mov	r5, r2
 8005674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800567a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800567c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005680:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 8005684:	4b5f      	ldr	r3, [pc, #380]	; (8005804 <startESMMain+0x5b0>)
 8005686:	2205      	movs	r2, #5
 8005688:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 800568c:	4b5e      	ldr	r3, [pc, #376]	; (8005808 <startESMMain+0x5b4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4618      	mov	r0, r3
 8005692:	f00a fc5d 	bl	800ff50 <osMutexRelease>
 8005696:	e012      	b.n	80056be <startESMMain+0x46a>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005698:	2300      	movs	r3, #0
 800569a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800569e:	4b58      	ldr	r3, [pc, #352]	; (8005800 <startESMMain+0x5ac>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f04f 31ff 	mov.w	r1, #4294967295
 80056a6:	4618      	mov	r0, r3
 80056a8:	f00a fbf4 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80056ac:	4b55      	ldr	r3, [pc, #340]	; (8005804 <startESMMain+0x5b0>)
 80056ae:	2207      	movs	r2, #7
 80056b0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80056b4:	4b52      	ldr	r3, [pc, #328]	; (8005800 <startESMMain+0x5ac>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f00a fc49 	bl	800ff50 <osMutexRelease>
			}
		}

		//FIFTH SCREEN FOR ESM - COG LOAD
		if (continue_flag){
 80056be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00d      	beq.n	80056e2 <startESMMain+0x48e>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 80056c6:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 80056ca:	2001      	movs	r0, #1
 80056cc:	f00d fcfc 	bl	80130c8 <ulTaskNotifyTake>
 80056d0:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 80056d2:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <startESMMain+0x5b0>)
 80056d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d002      	beq.n	80056e2 <startESMMain+0x48e>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 80056dc:	2300      	movs	r3, #0
 80056de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 80056e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d044      	beq.n	8005774 <startESMMain+0x520>
			if (notification){//not timed out, had a confirmed event
 80056ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d02e      	beq.n	800574e <startESMMain+0x4fa>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 80056f0:	4b45      	ldr	r3, [pc, #276]	; (8005808 <startESMMain+0x5b4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f04f 31ff 	mov.w	r1, #4294967295
 80056f8:	4618      	mov	r0, r3
 80056fa:	f00a fbcb 	bl	800fe94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "COG. EFFORT?", strlen("COG. EFFORT?") + 1);
 80056fe:	4a43      	ldr	r2, [pc, #268]	; (800580c <startESMMain+0x5b8>)
 8005700:	4b47      	ldr	r3, [pc, #284]	; (8005820 <startESMMain+0x5cc>)
 8005702:	4614      	mov	r4, r2
 8005704:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005706:	6020      	str	r0, [r4, #0]
 8005708:	6061      	str	r1, [r4, #4]
 800570a:	60a2      	str	r2, [r4, #8]
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	7323      	strb	r3, [r4, #12]
				GlobalState.surveyState.screenTextLength = strlen("COG. EFFORT?");
 8005710:	4b3c      	ldr	r3, [pc, #240]	; (8005804 <startESMMain+0x5b0>)
 8005712:	220c      	movs	r2, #12
 8005714:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_COGLOAD;
 8005718:	4b3a      	ldr	r3, [pc, #232]	; (8005804 <startESMMain+0x5b0>)
 800571a:	2204      	movs	r2, #4
 800571c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 8005720:	4b38      	ldr	r3, [pc, #224]	; (8005804 <startESMMain+0x5b0>)
 8005722:	4a3c      	ldr	r2, [pc, #240]	; (8005814 <startESMMain+0x5c0>)
 8005724:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8005728:	4615      	mov	r5, r2
 800572a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800572c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800572e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 800573a:	4b32      	ldr	r3, [pc, #200]	; (8005804 <startESMMain+0x5b0>)
 800573c:	2205      	movs	r2, #5
 800573e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 8005742:	4b31      	ldr	r3, [pc, #196]	; (8005808 <startESMMain+0x5b4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f00a fc02 	bl	800ff50 <osMutexRelease>
 800574c:	e012      	b.n	8005774 <startESMMain+0x520>

			} else {//timed out due to inactivity
				continue_flag = 0;
 800574e:	2300      	movs	r3, #0
 8005750:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005754:	4b2a      	ldr	r3, [pc, #168]	; (8005800 <startESMMain+0x5ac>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f04f 31ff 	mov.w	r1, #4294967295
 800575c:	4618      	mov	r0, r3
 800575e:	f00a fb99 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005762:	4b28      	ldr	r3, [pc, #160]	; (8005804 <startESMMain+0x5b0>)
 8005764:	2207      	movs	r2, #7
 8005766:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 800576a:	4b25      	ldr	r3, [pc, #148]	; (8005800 <startESMMain+0x5ac>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4618      	mov	r0, r3
 8005770:	f00a fbee 	bl	800ff50 <osMutexRelease>
			}
		}

		//SIXTH SCREEN FOR ESM - STRESS
		if (continue_flag){
 8005774:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <startESMMain+0x544>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800577c:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005780:	2001      	movs	r0, #1
 8005782:	f00d fca1 	bl	80130c8 <ulTaskNotifyTake>
 8005786:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005788:	4b1e      	ldr	r3, [pc, #120]	; (8005804 <startESMMain+0x5b0>)
 800578a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800578e:	2b03      	cmp	r3, #3
 8005790:	d002      	beq.n	8005798 <startESMMain+0x544>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005792:	2300      	movs	r3, #0
 8005794:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005798:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800579c:	2b00      	cmp	r3, #0
 800579e:	d056      	beq.n	800584e <startESMMain+0x5fa>
			if (notification){//not timed out, had a confirmed event
 80057a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d040      	beq.n	8005828 <startESMMain+0x5d4>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 80057a6:	4b18      	ldr	r3, [pc, #96]	; (8005808 <startESMMain+0x5b4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f04f 31ff 	mov.w	r1, #4294967295
 80057ae:	4618      	mov	r0, r3
 80057b0:	f00a fb70 	bl	800fe94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, "  STRESS?", strlen("  STRESS?") + 1);
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <startESMMain+0x5b8>)
 80057b6:	4b1b      	ldr	r3, [pc, #108]	; (8005824 <startESMMain+0x5d0>)
 80057b8:	cb03      	ldmia	r3!, {r0, r1}
 80057ba:	6010      	str	r0, [r2, #0]
 80057bc:	6051      	str	r1, [r2, #4]
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	8113      	strh	r3, [r2, #8]
				GlobalState.surveyState.screenTextLength = strlen("  STRESS?");
 80057c2:	4b10      	ldr	r3, [pc, #64]	; (8005804 <startESMMain+0x5b0>)
 80057c4:	2209      	movs	r2, #9
 80057c6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_STRESS;
 80057ca:	4b0e      	ldr	r3, [pc, #56]	; (8005804 <startESMMain+0x5b0>)
 80057cc:	2208      	movs	r2, #8
 80057ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_arousal, sizeof(opts_arousal));
 80057d2:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <startESMMain+0x5b0>)
 80057d4:	4a0f      	ldr	r2, [pc, #60]	; (8005814 <startESMMain+0x5c0>)
 80057d6:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80057da:	4615      	mov	r5, r2
 80057dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80057e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80057e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80057e8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 5;
 80057ec:	4b05      	ldr	r3, [pc, #20]	; (8005804 <startESMMain+0x5b0>)
 80057ee:	2205      	movs	r2, #5
 80057f0:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <startESMMain+0x5b4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4618      	mov	r0, r3
 80057fa:	f00a fba9 	bl	800ff50 <osMutexRelease>
 80057fe:	e026      	b.n	800584e <startESMMain+0x5fa>
 8005800:	2002e238 	.word	0x2002e238
 8005804:	2002e0cc 	.word	0x2002e0cc
 8005808:	2002e230 	.word	0x2002e230
 800580c:	2002e0fd 	.word	0x2002e0fd
 8005810:	08018620 	.word	0x08018620
 8005814:	08019634 	.word	0x08019634
 8005818:	0801862c 	.word	0x0801862c
 800581c:	08019608 	.word	0x08019608
 8005820:	08018638 	.word	0x08018638
 8005824:	08018648 	.word	0x08018648

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800582e:	4bb0      	ldr	r3, [pc, #704]	; (8005af0 <startESMMain+0x89c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f04f 31ff 	mov.w	r1, #4294967295
 8005836:	4618      	mov	r0, r3
 8005838:	f00a fb2c 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 800583c:	4bad      	ldr	r3, [pc, #692]	; (8005af4 <startESMMain+0x8a0>)
 800583e:	2207      	movs	r2, #7
 8005840:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8005844:	4baa      	ldr	r3, [pc, #680]	; (8005af0 <startESMMain+0x89c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4618      	mov	r0, r3
 800584a:	f00a fb81 	bl	800ff50 <osMutexRelease>
			}
		}

		//SEVENTH SCREEN FOR ESM - CAFFEINE
		if (continue_flag){
 800584e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00d      	beq.n	8005872 <startESMMain+0x61e>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005856:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 800585a:	2001      	movs	r0, #1
 800585c:	f00d fc34 	bl	80130c8 <ulTaskNotifyTake>
 8005860:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005862:	4ba4      	ldr	r3, [pc, #656]	; (8005af4 <startESMMain+0x8a0>)
 8005864:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005868:	2b03      	cmp	r3, #3
 800586a:	d002      	beq.n	8005872 <startESMMain+0x61e>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 800586c:	2300      	movs	r3, #0
 800586e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005872:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005876:	2b00      	cmp	r3, #0
 8005878:	d044      	beq.n	8005904 <startESMMain+0x6b0>
			if (notification){//not timed out, had a confirmed event
 800587a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800587c:	2b00      	cmp	r3, #0
 800587e:	d02e      	beq.n	80058de <startESMMain+0x68a>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005880:	4b9d      	ldr	r3, [pc, #628]	; (8005af8 <startESMMain+0x8a4>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f04f 31ff 	mov.w	r1, #4294967295
 8005888:	4618      	mov	r0, r3
 800588a:	f00a fb03 	bl	800fe94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " CAFFEINE?", strlen(" CAFFEINE?") + 1);
 800588e:	4a9b      	ldr	r2, [pc, #620]	; (8005afc <startESMMain+0x8a8>)
 8005890:	4b9b      	ldr	r3, [pc, #620]	; (8005b00 <startESMMain+0x8ac>)
 8005892:	cb03      	ldmia	r3!, {r0, r1}
 8005894:	6010      	str	r0, [r2, #0]
 8005896:	6051      	str	r1, [r2, #4]
 8005898:	8819      	ldrh	r1, [r3, #0]
 800589a:	789b      	ldrb	r3, [r3, #2]
 800589c:	8111      	strh	r1, [r2, #8]
 800589e:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" CAFFEINE?");
 80058a0:	4b94      	ldr	r3, [pc, #592]	; (8005af4 <startESMMain+0x8a0>)
 80058a2:	220a      	movs	r2, #10
 80058a4:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_CAFFEINE;
 80058a8:	4b92      	ldr	r3, [pc, #584]	; (8005af4 <startESMMain+0x8a0>)
 80058aa:	2206      	movs	r2, #6
 80058ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_yes, sizeof(opts_yes));
 80058b0:	4b90      	ldr	r3, [pc, #576]	; (8005af4 <startESMMain+0x8a0>)
 80058b2:	4a94      	ldr	r2, [pc, #592]	; (8005b04 <startESMMain+0x8b0>)
 80058b4:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 80058b8:	4615      	mov	r5, r2
 80058ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058c2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 80058ca:	4b8a      	ldr	r3, [pc, #552]	; (8005af4 <startESMMain+0x8a0>)
 80058cc:	2202      	movs	r2, #2
 80058ce:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 80058d2:	4b89      	ldr	r3, [pc, #548]	; (8005af8 <startESMMain+0x8a4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f00a fb3a 	bl	800ff50 <osMutexRelease>
 80058dc:	e012      	b.n	8005904 <startESMMain+0x6b0>

			} else {//timed out due to inactivity
				continue_flag = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80058e4:	4b82      	ldr	r3, [pc, #520]	; (8005af0 <startESMMain+0x89c>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f04f 31ff 	mov.w	r1, #4294967295
 80058ec:	4618      	mov	r0, r3
 80058ee:	f00a fad1 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80058f2:	4b80      	ldr	r3, [pc, #512]	; (8005af4 <startESMMain+0x8a0>)
 80058f4:	2207      	movs	r2, #7
 80058f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80058fa:	4b7d      	ldr	r3, [pc, #500]	; (8005af0 <startESMMain+0x89c>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4618      	mov	r0, r3
 8005900:	f00a fb26 	bl	800ff50 <osMutexRelease>
			}
		}

		//EIGHTH SCREEN FOR ESM - EXERCISE
		if (continue_flag){
 8005904:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <startESMMain+0x6d4>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 800590c:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005910:	2001      	movs	r0, #1
 8005912:	f00d fbd9 	bl	80130c8 <ulTaskNotifyTake>
 8005916:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005918:	4b76      	ldr	r3, [pc, #472]	; (8005af4 <startESMMain+0x8a0>)
 800591a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800591e:	2b03      	cmp	r3, #3
 8005920:	d002      	beq.n	8005928 <startESMMain+0x6d4>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005922:	2300      	movs	r3, #0
 8005924:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005928:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800592c:	2b00      	cmp	r3, #0
 800592e:	d044      	beq.n	80059ba <startESMMain+0x766>
			if (notification){//not timed out, had a confirmed event
 8005930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005932:	2b00      	cmp	r3, #0
 8005934:	d02e      	beq.n	8005994 <startESMMain+0x740>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 8005936:	4b70      	ldr	r3, [pc, #448]	; (8005af8 <startESMMain+0x8a4>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f04f 31ff 	mov.w	r1, #4294967295
 800593e:	4618      	mov	r0, r3
 8005940:	f00a faa8 	bl	800fe94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " EXERCISE?", strlen(" EXERCISE?") + 1);
 8005944:	4a6d      	ldr	r2, [pc, #436]	; (8005afc <startESMMain+0x8a8>)
 8005946:	4b70      	ldr	r3, [pc, #448]	; (8005b08 <startESMMain+0x8b4>)
 8005948:	cb03      	ldmia	r3!, {r0, r1}
 800594a:	6010      	str	r0, [r2, #0]
 800594c:	6051      	str	r1, [r2, #4]
 800594e:	8819      	ldrh	r1, [r3, #0]
 8005950:	789b      	ldrb	r3, [r3, #2]
 8005952:	8111      	strh	r1, [r2, #8]
 8005954:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" EXERCISE?");
 8005956:	4b67      	ldr	r3, [pc, #412]	; (8005af4 <startESMMain+0x8a0>)
 8005958:	220a      	movs	r2, #10
 800595a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_EXERCISE;
 800595e:	4b65      	ldr	r3, [pc, #404]	; (8005af4 <startESMMain+0x8a0>)
 8005960:	2207      	movs	r2, #7
 8005962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_yes, sizeof(opts_yes));
 8005966:	4b63      	ldr	r3, [pc, #396]	; (8005af4 <startESMMain+0x8a0>)
 8005968:	4a66      	ldr	r2, [pc, #408]	; (8005b04 <startESMMain+0x8b0>)
 800596a:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 800596e:	4615      	mov	r5, r2
 8005970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005974:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005976:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005978:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800597c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 8005980:	4b5c      	ldr	r3, [pc, #368]	; (8005af4 <startESMMain+0x8a0>)
 8005982:	2202      	movs	r2, #2
 8005984:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 8005988:	4b5b      	ldr	r3, [pc, #364]	; (8005af8 <startESMMain+0x8a4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4618      	mov	r0, r3
 800598e:	f00a fadf 	bl	800ff50 <osMutexRelease>
 8005992:	e012      	b.n	80059ba <startESMMain+0x766>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 800599a:	4b55      	ldr	r3, [pc, #340]	; (8005af0 <startESMMain+0x89c>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f04f 31ff 	mov.w	r1, #4294967295
 80059a2:	4618      	mov	r0, r3
 80059a4:	f00a fa76 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 80059a8:	4b52      	ldr	r3, [pc, #328]	; (8005af4 <startESMMain+0x8a0>)
 80059aa:	2207      	movs	r2, #7
 80059ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 80059b0:	4b4f      	ldr	r3, [pc, #316]	; (8005af0 <startESMMain+0x89c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4618      	mov	r0, r3
 80059b6:	f00a facb 	bl	800ff50 <osMutexRelease>
			}
		}

		//NINETH SCREEN FOR ESM - TIME CUE
		if (continue_flag){
 80059ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00d      	beq.n	80059de <startESMMain+0x78a>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 80059c2:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 80059c6:	2001      	movs	r0, #1
 80059c8:	f00d fb7e 	bl	80130c8 <ulTaskNotifyTake>
 80059cc:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 80059ce:	4b49      	ldr	r3, [pc, #292]	; (8005af4 <startESMMain+0x8a0>)
 80059d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d002      	beq.n	80059de <startESMMain+0x78a>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 80059de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d044      	beq.n	8005a70 <startESMMain+0x81c>
			if (notification){//not timed out, had a confirmed event
 80059e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02e      	beq.n	8005a4a <startESMMain+0x7f6>
				//set up next interaction
				//set up survey
				osMutexAcquire(surveyMutexHandle, portMAX_DELAY);
 80059ec:	4b42      	ldr	r3, [pc, #264]	; (8005af8 <startESMMain+0x8a4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f04f 31ff 	mov.w	r1, #4294967295
 80059f4:	4618      	mov	r0, r3
 80059f6:	f00a fa4d 	bl	800fe94 <osMutexAcquire>
				strncpy(GlobalState.surveyState.screenText, " TIME CUE?", strlen(" TIME CUE?") + 1);
 80059fa:	4a40      	ldr	r2, [pc, #256]	; (8005afc <startESMMain+0x8a8>)
 80059fc:	4b43      	ldr	r3, [pc, #268]	; (8005b0c <startESMMain+0x8b8>)
 80059fe:	cb03      	ldmia	r3!, {r0, r1}
 8005a00:	6010      	str	r0, [r2, #0]
 8005a02:	6051      	str	r1, [r2, #4]
 8005a04:	8819      	ldrh	r1, [r3, #0]
 8005a06:	789b      	ldrb	r3, [r3, #2]
 8005a08:	8111      	strh	r1, [r2, #8]
 8005a0a:	7293      	strb	r3, [r2, #10]
				GlobalState.surveyState.screenTextLength = strlen(" TIME CUE?");
 8005a0c:	4b39      	ldr	r3, [pc, #228]	; (8005af4 <startESMMain+0x8a0>)
 8005a0e:	220a      	movs	r2, #10
 8005a10:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
				GlobalState.surveyState.surveyID = SURVEY_TIMECUE;
 8005a14:	4b37      	ldr	r3, [pc, #220]	; (8005af4 <startESMMain+0x8a0>)
 8005a16:	2205      	movs	r2, #5
 8005a18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				memcpy(GlobalState.surveyState.optionArray, opts_yes, sizeof(opts_yes));
 8005a1c:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <startESMMain+0x8a0>)
 8005a1e:	4a39      	ldr	r2, [pc, #228]	; (8005b04 <startESMMain+0x8b0>)
 8005a20:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8005a24:	4615      	mov	r5, r2
 8005a26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005a32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
				GlobalState.surveyState.optionArrayLength = 2;
 8005a36:	4b2f      	ldr	r3, [pc, #188]	; (8005af4 <startESMMain+0x8a0>)
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
				osMutexRelease(surveyMutexHandle);
 8005a3e:	4b2e      	ldr	r3, [pc, #184]	; (8005af8 <startESMMain+0x8a4>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4618      	mov	r0, r3
 8005a44:	f00a fa84 	bl	800ff50 <osMutexRelease>
 8005a48:	e012      	b.n	8005a70 <startESMMain+0x81c>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005a50:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <startESMMain+0x89c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f04f 31ff 	mov.w	r1, #4294967295
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f00a fa1b 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005a5e:	4b25      	ldr	r3, [pc, #148]	; (8005af4 <startESMMain+0x8a0>)
 8005a60:	2207      	movs	r2, #7
 8005a62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8005a66:	4b22      	ldr	r3, [pc, #136]	; (8005af0 <startESMMain+0x89c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f00a fa70 	bl	800ff50 <osMutexRelease>
			}
		}


		//FINISH ESM; SHOW TIME
		if (continue_flag){
 8005a70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00d      	beq.n	8005a94 <startESMMain+0x840>
			//(2) Wait for notification from UI thread that indicates confirmed input
			notification = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS(INTERACTION_TIMEOUT));
 8005a78:	f64a 71c8 	movw	r1, #45000	; 0xafc8
 8005a7c:	2001      	movs	r0, #1
 8005a7e:	f00d fb23 	bl	80130c8 <ulTaskNotifyTake>
 8005a82:	6478      	str	r0, [r7, #68]	; 0x44

			if (GlobalState.programMode != MODE_ESM_SURVEY){
 8005a84:	4b1b      	ldr	r3, [pc, #108]	; (8005af4 <startESMMain+0x8a0>)
 8005a86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005a8a:	2b03      	cmp	r3, #3
 8005a8c:	d002      	beq.n	8005a94 <startESMMain+0x840>
				//if our mode has changed, we had a dismiss/snooze event
				continue_flag = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			}
		}

		if (continue_flag){
 8005a94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	f000 8088 	beq.w	8005bae <startESMMain+0x95a>
			if (notification){//not timed out, had a confirmed event
 8005a9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d010      	beq.n	8005ac6 <startESMMain+0x872>
				//completed survey with no problem!

				//back to rest, show time
				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005aa4:	4b12      	ldr	r3, [pc, #72]	; (8005af0 <startESMMain+0x89c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8005aac:	4618      	mov	r0, r3
 8005aae:	f00a f9f1 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_SHOW_TIME;
 8005ab2:	4b10      	ldr	r3, [pc, #64]	; (8005af4 <startESMMain+0x8a0>)
 8005ab4:	2205      	movs	r2, #5
 8005ab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);;
 8005aba:	4b0d      	ldr	r3, [pc, #52]	; (8005af0 <startESMMain+0x89c>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f00a fa46 	bl	800ff50 <osMutexRelease>
		(sameDayFlag | (curr_date > last_date )) ){
 8005ac4:	e073      	b.n	8005bae <startESMMain+0x95a>

			} else {//timed out due to inactivity
				continue_flag = 0;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005acc:	4b08      	ldr	r3, [pc, #32]	; (8005af0 <startESMMain+0x89c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f00a f9dd 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_CLEAR;
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <startESMMain+0x8a0>)
 8005adc:	2207      	movs	r2, #7
 8005ade:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <startESMMain+0x89c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f00a fa32 	bl	800ff50 <osMutexRelease>
		(sameDayFlag | (curr_date > last_date )) ){
 8005aec:	e05f      	b.n	8005bae <startESMMain+0x95a>
 8005aee:	bf00      	nop
 8005af0:	2002e238 	.word	0x2002e238
 8005af4:	2002e0cc 	.word	0x2002e0cc
 8005af8:	2002e230 	.word	0x2002e230
 8005afc:	2002e0fd 	.word	0x2002e0fd
 8005b00:	08018654 	.word	0x08018654
 8005b04:	08019660 	.word	0x08019660
 8005b08:	08018660 	.word	0x08018660
 8005b0c:	0801866c 	.word	0x0801866c
		}

    } else {//not time for a survey

    	//get hour for last_seen + interval (trigger) time
    	uint8_t extra_hours = (last_min + GlobalState.currentInterval) / 60;
 8005b10:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005b14:	4a27      	ldr	r2, [pc, #156]	; (8005bb4 <startESMMain+0x960>)
 8005b16:	f892 20d4 	ldrb.w	r2, [r2, #212]	; 0xd4
 8005b1a:	4413      	add	r3, r2
 8005b1c:	4a26      	ldr	r2, [pc, #152]	; (8005bb8 <startESMMain+0x964>)
 8005b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8005b22:	441a      	add	r2, r3
 8005b24:	1152      	asrs	r2, r2, #5
 8005b26:	17db      	asrs	r3, r3, #31
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
    	last_hrs = (last_hrs + extra_hours) % 24;
 8005b2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005b32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005b36:	441a      	add	r2, r3
 8005b38:	4b20      	ldr	r3, [pc, #128]	; (8005bbc <startESMMain+0x968>)
 8005b3a:	fb83 1302 	smull	r1, r3, r3, r2
 8005b3e:	1099      	asrs	r1, r3, #2
 8005b40:	17d3      	asrs	r3, r2, #31
 8005b42:	1ac9      	subs	r1, r1, r3
 8005b44:	460b      	mov	r3, r1
 8005b46:	005b      	lsls	r3, r3, #1
 8005b48:	440b      	add	r3, r1
 8005b4a:	00db      	lsls	r3, r3, #3
 8005b4c:	1ad1      	subs	r1, r2, r3
 8005b4e:	460b      	mov	r3, r1
 8005b50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    	//if next trigger is outside of timebound (i.e. last seen time is end of the day) AND
    	//its the morning (curr_hr = startHR), put it in paused mode, wait for user to initiate.
    	if (!check_time_bounds(last_hrs) && (curr_hrs == RTC_Bcd2ToByte(GlobalState.timeBound.startHR_BCD)) && !GlobalState.paused){
 8005b54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005b58:	4618      	mov	r0, r3
 8005b5a:	f7ff fb45 	bl	80051e8 <check_time_bounds>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f47f ab80 	bne.w	8005266 <startESMMain+0x12>
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <startESMMain+0x960>)
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f005 fc24 	bl	800b3b8 <RTC_Bcd2ToByte>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	f47f ab74 	bne.w	8005266 <startESMMain+0x12>
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <startESMMain+0x960>)
 8005b80:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f47f ab6e 	bne.w	8005266 <startESMMain+0x12>
    		GlobalState.paused = 1;
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <startESMMain+0x960>)
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    		const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 8005b92:	2308      	movs	r3, #8
 8005b94:	733b      	strb	r3, [r7, #12]
 8005b96:	2300      	movs	r3, #0
 8005b98:	81fb      	strh	r3, [r7, #14]
     		osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 8005b9a:	4b09      	ldr	r3, [pc, #36]	; (8005bc0 <startESMMain+0x96c>)
 8005b9c:	6818      	ldr	r0, [r3, #0]
 8005b9e:	f107 010c 	add.w	r1, r7, #12
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f00a fc05 	bl	80103b4 <osMessageQueuePut>
 8005baa:	f7ff bb5c 	b.w	8005266 <startESMMain+0x12>
		(sameDayFlag | (curr_date > last_date )) ){
 8005bae:	bf00      	nop
  {
 8005bb0:	f7ff bb59 	b.w	8005266 <startESMMain+0x12>
 8005bb4:	2002e0cc 	.word	0x2002e0cc
 8005bb8:	88888889 	.word	0x88888889
 8005bbc:	2aaaaaab 	.word	0x2aaaaaab
 8005bc0:	2002e298 	.word	0x2002e298

08005bc4 <startButtonPress>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startButtonPress */
void startButtonPress(void *argument)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startButtonPress */
  /* Infinite loop */

  //Buttons are PULLED UP and drop to 0 when pressed
  uint8_t buttonState[] = {1, 1, 1};
 8005bcc:	4a60      	ldr	r2, [pc, #384]	; (8005d50 <startButtonPress+0x18c>)
 8005bce:	f107 0314 	add.w	r3, r7, #20
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	8019      	strh	r1, [r3, #0]
 8005bd8:	3302      	adds	r3, #2
 8005bda:	0c12      	lsrs	r2, r2, #16
 8005bdc:	701a      	strb	r2, [r3, #0]
  uint32_t callingPin = 0x00;
 8005bde:	2300      	movs	r3, #0
 8005be0:	613b      	str	r3, [r7, #16]

  const BLETX_Queue_t bleSendData = {TX_PREVIOUS_INVALID, 0x0000};
 8005be2:	2306      	movs	r3, #6
 8005be4:	733b      	strb	r3, [r7, #12]
 8005be6:	2300      	movs	r3, #0
 8005be8:	81fb      	strh	r3, [r7, #14]

  for(;;)
  {
	//wait for rising or falling edge trigger, put calling pin in callingPin
	xTaskNotifyWait(0x00, 0x00, &callingPin, portMAX_DELAY);
 8005bea:	f107 0210 	add.w	r2, r7, #16
 8005bee:	f04f 33ff 	mov.w	r3, #4294967295
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	f00d faaf 	bl	8013158 <xTaskNotifyWait>

	//check state of pin
	GPIO_PinState first_read = HAL_GPIO_ReadPin(GPIOB, callingPin);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	4619      	mov	r1, r3
 8005c00:	4854      	ldr	r0, [pc, #336]	; (8005d54 <startButtonPress+0x190>)
 8005c02:	f002 fa6f 	bl	80080e4 <HAL_GPIO_ReadPin>
 8005c06:	4603      	mov	r3, r0
 8005c08:	75fb      	strb	r3, [r7, #23]

	//wait 50ms
    osDelay(50);
 8005c0a:	2032      	movs	r0, #50	; 0x32
 8005c0c:	f00a f87a 	bl	800fd04 <osDelay>

    //check again (debounce) to get a good reading
	if (first_read == HAL_GPIO_ReadPin(GPIOB, callingPin)){
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	b29b      	uxth	r3, r3
 8005c14:	4619      	mov	r1, r3
 8005c16:	484f      	ldr	r0, [pc, #316]	; (8005d54 <startButtonPress+0x190>)
 8005c18:	f002 fa64 	bl	80080e4 <HAL_GPIO_ReadPin>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	461a      	mov	r2, r3
 8005c20:	7dfb      	ldrb	r3, [r7, #23]
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d1e1      	bne.n	8005bea <startButtonPress+0x26>
		//when this happens (except during debouncing) so we expect this to be true
		//almost always

		//callingPin can be used as bitmask Pin 5/4/3 give 1000000/10000/1000

		if (callingPin == 0b1000 && first_read != buttonState[0]) { //button 1 trigger
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b08      	cmp	r3, #8
 8005c2a:	d128      	bne.n	8005c7e <startButtonPress+0xba>
 8005c2c:	7d3b      	ldrb	r3, [r7, #20]
 8005c2e:	7dfa      	ldrb	r2, [r7, #23]
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d024      	beq.n	8005c7e <startButtonPress+0xba>
		  //set buttonState
		  buttonState[0] = first_read;
 8005c34:	7dfb      	ldrb	r3, [r7, #23]
 8005c36:	753b      	strb	r3, [r7, #20]

		  //do stuff if button pressed
		  if (!first_read){
 8005c38:	7dfb      	ldrb	r3, [r7, #23]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11f      	bne.n	8005c7e <startButtonPress+0xba>
			  osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005c3e:	4b46      	ldr	r3, [pc, #280]	; (8005d58 <startButtonPress+0x194>)
 8005c40:	6818      	ldr	r0, [r3, #0]
 8005c42:	f107 010c 	add.w	r1, r7, #12
 8005c46:	2300      	movs	r3, #0
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f00a fbb3 	bl	80103b4 <osMessageQueuePut>

			  GlobalState.paused = 0;
 8005c4e:	4b43      	ldr	r3, [pc, #268]	; (8005d5c <startButtonPress+0x198>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
			  GlobalState.demo = 0;
 8005c56:	4b41      	ldr	r3, [pc, #260]	; (8005d5c <startButtonPress+0x198>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6

			  osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005c5e:	4b40      	ldr	r3, [pc, #256]	; (8005d60 <startButtonPress+0x19c>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f04f 31ff 	mov.w	r1, #4294967295
 8005c66:	4618      	mov	r0, r3
 8005c68:	f00a f914 	bl	800fe94 <osMutexAcquire>
			  GlobalState.programMode = MODE_CANCEL;
 8005c6c:	4b3b      	ldr	r3, [pc, #236]	; (8005d5c <startButtonPress+0x198>)
 8005c6e:	2204      	movs	r2, #4
 8005c70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			  osMutexRelease(modeMutexHandle);
 8005c74:	4b3a      	ldr	r3, [pc, #232]	; (8005d60 <startButtonPress+0x19c>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f00a f969 	bl	800ff50 <osMutexRelease>

		  }

		}
		if (callingPin == 0b10000 && first_read != buttonState[1]) { //button 2 trigger
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b10      	cmp	r3, #16
 8005c82:	d128      	bne.n	8005cd6 <startButtonPress+0x112>
 8005c84:	7d7b      	ldrb	r3, [r7, #21]
 8005c86:	7dfa      	ldrb	r2, [r7, #23]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d024      	beq.n	8005cd6 <startButtonPress+0x112>
		    //set buttonState
		    buttonState[1] = first_read;
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	757b      	strb	r3, [r7, #21]

		    //do stuff if button pressed
		    if (!first_read){
 8005c90:	7dfb      	ldrb	r3, [r7, #23]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d11f      	bne.n	8005cd6 <startButtonPress+0x112>
		    	osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005c96:	4b30      	ldr	r3, [pc, #192]	; (8005d58 <startButtonPress+0x194>)
 8005c98:	6818      	ldr	r0, [r3, #0]
 8005c9a:	f107 010c 	add.w	r1, r7, #12
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f00a fb87 	bl	80103b4 <osMessageQueuePut>

		    	GlobalState.paused = 0;
 8005ca6:	4b2d      	ldr	r3, [pc, #180]	; (8005d5c <startButtonPress+0x198>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
		    	GlobalState.demo = 0;
 8005cae:	4b2b      	ldr	r3, [pc, #172]	; (8005d5c <startButtonPress+0x198>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6

		    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005cb6:	4b2a      	ldr	r3, [pc, #168]	; (8005d60 <startButtonPress+0x19c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f04f 31ff 	mov.w	r1, #4294967295
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f00a f8e8 	bl	800fe94 <osMutexAcquire>
		    	GlobalState.programMode = MODE_CANCEL;
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <startButtonPress+0x198>)
 8005cc6:	2204      	movs	r2, #4
 8005cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		    	osMutexRelease(modeMutexHandle);
 8005ccc:	4b24      	ldr	r3, [pc, #144]	; (8005d60 <startButtonPress+0x19c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f00a f93d 	bl	800ff50 <osMutexRelease>

		    }
		}
		if (callingPin == 0b100000 && first_read != buttonState[2]) { //button 3 trigger
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d186      	bne.n	8005bea <startButtonPress+0x26>
 8005cdc:	7dbb      	ldrb	r3, [r7, #22]
 8005cde:	7dfa      	ldrb	r2, [r7, #23]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d082      	beq.n	8005bea <startButtonPress+0x26>
		    //set buttonState
		    buttonState[2] = first_read;
 8005ce4:	7dfb      	ldrb	r3, [r7, #23]
 8005ce6:	75bb      	strb	r3, [r7, #22]

		    //do stuff if button pressed
		    if (!first_read){
 8005ce8:	7dfb      	ldrb	r3, [r7, #23]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f47f af7d 	bne.w	8005bea <startButtonPress+0x26>
		    	osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 8005cf0:	4b19      	ldr	r3, [pc, #100]	; (8005d58 <startButtonPress+0x194>)
 8005cf2:	6818      	ldr	r0, [r3, #0]
 8005cf4:	f107 010c 	add.w	r1, r7, #12
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f00a fb5a 	bl	80103b4 <osMessageQueuePut>

		    	GlobalState.paused = 0;
 8005d00:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <startButtonPress+0x198>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
		    	GlobalState.demo = 0;
 8005d08:	4b14      	ldr	r3, [pc, #80]	; (8005d5c <startButtonPress+0x198>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6

		    	osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8005d10:	4b13      	ldr	r3, [pc, #76]	; (8005d60 <startButtonPress+0x19c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f04f 31ff 	mov.w	r1, #4294967295
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f00a f8bb 	bl	800fe94 <osMutexAcquire>
		    	GlobalState.programMode = MODE_CANCEL;
 8005d1e:	4b0f      	ldr	r3, [pc, #60]	; (8005d5c <startButtonPress+0x198>)
 8005d20:	2204      	movs	r2, #4
 8005d22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
		        osMutexRelease(modeMutexHandle);
 8005d26:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <startButtonPress+0x19c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f00a f910 	bl	800ff50 <osMutexRelease>

		        if (!buttonState[0]){
 8005d30:	7d3b      	ldrb	r3, [r7, #20]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	f47f af59 	bne.w	8005bea <startButtonPress+0x26>
		        	//if the first button is pressed AND we've pressed this button, demo mode
		        	GlobalState.demo = 1;
 8005d38:	4b08      	ldr	r3, [pc, #32]	; (8005d5c <startButtonPress+0x198>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 20d6 	strb.w	r2, [r3, #214]	; 0xd6
		        	xTaskNotifyGive(alertHandle);
 8005d40:	4b08      	ldr	r3, [pc, #32]	; (8005d64 <startButtonPress+0x1a0>)
 8005d42:	6818      	ldr	r0, [r3, #0]
 8005d44:	2300      	movs	r3, #0
 8005d46:	2202      	movs	r2, #2
 8005d48:	2100      	movs	r1, #0
 8005d4a:	f00d fa5f 	bl	801320c <xTaskGenericNotify>
  {
 8005d4e:	e74c      	b.n	8005bea <startButtonPress+0x26>
 8005d50:	08018678 	.word	0x08018678
 8005d54:	48000400 	.word	0x48000400
 8005d58:	2002e298 	.word	0x2002e298
 8005d5c:	2002e0cc 	.word	0x2002e0cc
 8005d60:	2002e238 	.word	0x2002e238
 8005d64:	2002e1d8 	.word	0x2002e1d8

08005d68 <startAlert>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startAlert */
void startAlert(void *argument)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08c      	sub	sp, #48	; 0x30
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  //xTaskNotifyGive(alertHandle); to alert user with flash and vibration

  //HAL_GPIO_WritePin(VIBRATION_GPIO_Port, VIBRATION_Pin, GPIO_PIN_RESET);

  //Init Vibration Motor PWM Parameters
  int duty_cycle = 79; //0 is off, up to ~80
 8005d70:	234f      	movs	r3, #79	; 0x4f
 8005d72:	61bb      	str	r3, [r7, #24]
  htim1.Instance->CCR2 = duty_cycle;
 8005d74:	4ba4      	ldr	r3, [pc, #656]	; (8006008 <startAlert+0x2a0>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38

  //Dotstar Init
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 8005d7c:	4ba3      	ldr	r3, [pc, #652]	; (800600c <startAlert+0x2a4>)
 8005d7e:	60fb      	str	r3, [r7, #12]
  dotstar.numLEDs = NUM_PIXELS;
 8005d80:	230c      	movs	r3, #12
 8005d82:	823b      	strh	r3, [r7, #16]
  dotstar.colorOrder = DOTSTAR_BGR;
 8005d84:	2306      	movs	r3, #6
 8005d86:	74bb      	strb	r3, [r7, #18]
  Dotstar_Init(&dotstar);
 8005d88:	f107 030c 	add.w	r3, r7, #12
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f7fc f941 	bl	8002014 <Dotstar_Init>

  ds_clear();  //turn off
 8005d92:	f7fc fa2b 	bl	80021ec <ds_clear>
  ds_show();
 8005d96:	f7fc f98d 	bl	80020b4 <ds_show>

  const uint8_t MAX_BRIGHTNESS = 0xAA; //max brightness, 0x01-0xFF
 8005d9a:	23aa      	movs	r3, #170	; 0xaa
 8005d9c:	75fb      	strb	r3, [r7, #23]

  ds_setBrightness(0);
 8005d9e:	2000      	movs	r0, #0
 8005da0:	f7fc fab4 	bl	800230c <ds_setBrightness>
  osDelay(1000);
 8005da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005da8:	f009 ffac 	bl	800fd04 <osDelay>

  /* Infinite loop */
  for(;;)
  {

	counter = 0;
 8005dac:	2300      	movs	r3, #0
 8005dae:	85fb      	strh	r3, [r7, #46]	; 0x2e
	LEDDirection = 0;
 8005db0:	2300      	movs	r3, #0
 8005db2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	LEDBrightness = 0;
 8005db6:	2300      	movs	r3, #0
 8005db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	ulTaskNotifyTake( pdTRUE, portMAX_DELAY);
 8005dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8005dc0:	2001      	movs	r0, #1
 8005dc2:	f00d f981 	bl	80130c8 <ulTaskNotifyTake>

	//start vibration
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8005dc6:	2100      	movs	r1, #0
 8005dc8:	488f      	ldr	r0, [pc, #572]	; (8006008 <startAlert+0x2a0>)
 8005dca:	f005 ffbd 	bl	800bd48 <HAL_TIM_PWM_Start>

	//flash loop
	ds_fill(0xFFFFFF, 0, 12);
 8005dce:	220c      	movs	r2, #12
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8005dd6:	f7fc fa63 	bl	80022a0 <ds_fill>

	while (counter++ < MAX_BRIGHTNESS*2) {
 8005dda:	e027      	b.n	8005e2c <startAlert+0xc4>

		ds_setBrightness(LEDBrightness);
 8005ddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fc fa93 	bl	800230c <ds_setBrightness>
		ds_show();
 8005de6:	f7fc f965 	bl	80020b4 <ds_show>

		//increment color intensity
		if (LEDDirection) {LEDBrightness--;}
 8005dea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d005      	beq.n	8005dfe <startAlert+0x96>
 8005df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005df6:	3b01      	subs	r3, #1
 8005df8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005dfc:	e004      	b.n	8005e08 <startAlert+0xa0>
		else {LEDBrightness++;}
 8005dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e02:	3301      	adds	r3, #1
 8005e04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

		//if we hit a limit switch color scaling up or down
		if (LEDBrightness == MAX_BRIGHTNESS) {LEDDirection = 1;}
 8005e08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005e0c:	7dfb      	ldrb	r3, [r7, #23]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d102      	bne.n	8005e18 <startAlert+0xb0>
 8005e12:	2301      	movs	r3, #1
 8005e14:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if (LEDBrightness == 0x00) {LEDDirection = 0;}
 8005e18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d102      	bne.n	8005e26 <startAlert+0xbe>
 8005e20:	2300      	movs	r3, #0
 8005e22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		osDelay(pdMS_TO_TICKS(2)); //2ms delay
 8005e26:	2002      	movs	r0, #2
 8005e28:	f009 ff6c 	bl	800fd04 <osDelay>
	while (counter++ < MAX_BRIGHTNESS*2) {
 8005e2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8005e32:	461a      	mov	r2, r3
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	dbcf      	blt.n	8005ddc <startAlert+0x74>
	}

	//turn off LEDs
	ds_setBrightness(0);
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	f7fc fa65 	bl	800230c <ds_setBrightness>
	ds_fill(0x000000, 0, 12);
 8005e42:	220c      	movs	r2, #12
 8005e44:	2100      	movs	r1, #0
 8005e46:	2000      	movs	r0, #0
 8005e48:	f7fc fa2a 	bl	80022a0 <ds_fill>
	ds_show();
 8005e4c:	f7fc f932 	bl	80020b4 <ds_show>

	osDelay(pdMS_TO_TICKS(100)); //100ms delay
 8005e50:	2064      	movs	r0, #100	; 0x64
 8005e52:	f009 ff57 	bl	800fd04 <osDelay>

    //stop vibration
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8005e56:	2100      	movs	r1, #0
 8005e58:	486b      	ldr	r0, [pc, #428]	; (8006008 <startAlert+0x2a0>)
 8005e5a:	f006 f84f 	bl	800befc <HAL_TIM_PWM_Stop>

    //if we're in demo mode, flash some LEDs
    if (GlobalState.demo){
 8005e5e:	4b6c      	ldr	r3, [pc, #432]	; (8006010 <startAlert+0x2a8>)
 8005e60:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0a1      	beq.n	8005dac <startAlert+0x44>

    	counter = 0;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
    	r = 0xFF;
 8005e6c:	23ff      	movs	r3, #255	; 0xff
 8005e6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    	g = 0xFF;
 8005e72:	23ff      	movs	r3, #255	; 0xff
 8005e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    	b = 0xFF;
 8005e78:	23ff      	movs	r3, #255	; 0xff
 8005e7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    	ds_setBrightness(MAX_BRIGHTNESS);
 8005e7e:	7dfb      	ldrb	r3, [r7, #23]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f7fc fa43 	bl	800230c <ds_setBrightness>
    	while(GlobalState.demo) {
 8005e86:	e0ae      	b.n	8005fe6 <startAlert+0x27e>

    		for (int i=0; i< NUM_PIXELS; i++){
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
 8005e8c:	e05e      	b.n	8005f4c <startAlert+0x1e4>

    			if      (i==(counter+2)%12)	{ color = (r  <<16) | (g  <<8) | b; }
 8005e8e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005e90:	1c99      	adds	r1, r3, #2
 8005e92:	4b60      	ldr	r3, [pc, #384]	; (8006014 <startAlert+0x2ac>)
 8005e94:	fb83 2301 	smull	r2, r3, r3, r1
 8005e98:	105a      	asrs	r2, r3, #1
 8005e9a:	17cb      	asrs	r3, r1, #31
 8005e9c:	1ad2      	subs	r2, r2, r3
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	005b      	lsls	r3, r3, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	1aca      	subs	r2, r1, r3
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d10b      	bne.n	8005ec6 <startAlert+0x15e>
 8005eae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eb2:	041a      	lsls	r2, r3, #16
 8005eb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005eb8:	021b      	lsls	r3, r3, #8
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ec4:	e039      	b.n	8005f3a <startAlert+0x1d2>
    			else if (i==(counter+1)%12) { color = (r/2<<16) | (g/2<<8) | b/2; }
 8005ec6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ec8:	1c59      	adds	r1, r3, #1
 8005eca:	4b52      	ldr	r3, [pc, #328]	; (8006014 <startAlert+0x2ac>)
 8005ecc:	fb83 2301 	smull	r2, r3, r3, r1
 8005ed0:	105a      	asrs	r2, r3, #1
 8005ed2:	17cb      	asrs	r3, r1, #31
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	005b      	lsls	r3, r3, #1
 8005eda:	4413      	add	r3, r2
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	1aca      	subs	r2, r1, r3
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d111      	bne.n	8005f0a <startAlert+0x1a2>
 8005ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	041a      	lsls	r2, r3, #16
 8005ef0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ef4:	085b      	lsrs	r3, r3, #1
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	021b      	lsls	r3, r3, #8
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005f00:	0852      	lsrs	r2, r2, #1
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	4313      	orrs	r3, r2
 8005f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f08:	e017      	b.n	8005f3a <startAlert+0x1d2>
    			else if (i==counter)        { color = (r/4<<16) | (g/4<<8) | b/4; }
 8005f0a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d111      	bne.n	8005f36 <startAlert+0x1ce>
 8005f12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f16:	089b      	lsrs	r3, r3, #2
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	041a      	lsls	r2, r3, #16
 8005f1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f20:	089b      	lsrs	r3, r3, #2
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	021b      	lsls	r3, r3, #8
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005f2c:	0892      	lsrs	r2, r2, #2
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	4313      	orrs	r3, r2
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f34:	e001      	b.n	8005f3a <startAlert+0x1d2>
    			else 						{ color = 0x000000; }
 8005f36:	2300      	movs	r3, #0
 8005f38:	62bb      	str	r3, [r7, #40]	; 0x28

    			ds_setPixelColor32B(i, color); // 'off' pixel at head
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	b29b      	uxth	r3, r3
 8005f3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fc f977 	bl	8002234 <ds_setPixelColor32B>
    		for (int i=0; i< NUM_PIXELS; i++){
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b0b      	cmp	r3, #11
 8005f50:	dd9d      	ble.n	8005e8e <startAlert+0x126>
    		}

    		ds_show();
 8005f52:	f7fc f8af 	bl	80020b4 <ds_show>
    		r = (r + 11) % 0xFF;
 8005f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005f5a:	f103 020b 	add.w	r2, r3, #11
 8005f5e:	4b2e      	ldr	r3, [pc, #184]	; (8006018 <startAlert+0x2b0>)
 8005f60:	fb83 1302 	smull	r1, r3, r3, r2
 8005f64:	4413      	add	r3, r2
 8005f66:	11d9      	asrs	r1, r3, #7
 8005f68:	17d3      	asrs	r3, r2, #31
 8005f6a:	1ac9      	subs	r1, r1, r3
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	1a5b      	subs	r3, r3, r1
 8005f72:	1ad1      	subs	r1, r2, r3
 8005f74:	460b      	mov	r3, r1
 8005f76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    		g = (g + 13) % 0xFF;
 8005f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005f7e:	f103 020d 	add.w	r2, r3, #13
 8005f82:	4b25      	ldr	r3, [pc, #148]	; (8006018 <startAlert+0x2b0>)
 8005f84:	fb83 1302 	smull	r1, r3, r3, r2
 8005f88:	4413      	add	r3, r2
 8005f8a:	11d9      	asrs	r1, r3, #7
 8005f8c:	17d3      	asrs	r3, r2, #31
 8005f8e:	1ac9      	subs	r1, r1, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	1a5b      	subs	r3, r3, r1
 8005f96:	1ad1      	subs	r1, r2, r3
 8005f98:	460b      	mov	r3, r1
 8005f9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    		b = (b + 17) % 0xFF;
 8005f9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005fa2:	f103 0211 	add.w	r2, r3, #17
 8005fa6:	4b1c      	ldr	r3, [pc, #112]	; (8006018 <startAlert+0x2b0>)
 8005fa8:	fb83 1302 	smull	r1, r3, r3, r2
 8005fac:	4413      	add	r3, r2
 8005fae:	11d9      	asrs	r1, r3, #7
 8005fb0:	17d3      	asrs	r3, r2, #31
 8005fb2:	1ac9      	subs	r1, r1, r3
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	021b      	lsls	r3, r3, #8
 8005fb8:	1a5b      	subs	r3, r3, r1
 8005fba:	1ad1      	subs	r1, r2, r3
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    		counter = (counter+1)%12;
 8005fc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fc4:	1c5a      	adds	r2, r3, #1
 8005fc6:	4b13      	ldr	r3, [pc, #76]	; (8006014 <startAlert+0x2ac>)
 8005fc8:	fb83 1302 	smull	r1, r3, r3, r2
 8005fcc:	1059      	asrs	r1, r3, #1
 8005fce:	17d3      	asrs	r3, r2, #31
 8005fd0:	1ac9      	subs	r1, r1, r3
 8005fd2:	460b      	mov	r3, r1
 8005fd4:	005b      	lsls	r3, r3, #1
 8005fd6:	440b      	add	r3, r1
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	1ad1      	subs	r1, r2, r3
 8005fdc:	460b      	mov	r3, r1
 8005fde:	85fb      	strh	r3, [r7, #46]	; 0x2e
    		osDelay(pdMS_TO_TICKS(50));
 8005fe0:	2032      	movs	r0, #50	; 0x32
 8005fe2:	f009 fe8f 	bl	800fd04 <osDelay>
    	while(GlobalState.demo) {
 8005fe6:	4b0a      	ldr	r3, [pc, #40]	; (8006010 <startAlert+0x2a8>)
 8005fe8:	f893 30d6 	ldrb.w	r3, [r3, #214]	; 0xd6
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f47f af4b 	bne.w	8005e88 <startAlert+0x120>
    	}

    	//turn off LEDs
		ds_setBrightness(0);
 8005ff2:	2000      	movs	r0, #0
 8005ff4:	f7fc f98a 	bl	800230c <ds_setBrightness>
		ds_fill(0x000000, 0, 12);
 8005ff8:	220c      	movs	r2, #12
 8005ffa:	2100      	movs	r1, #0
 8005ffc:	2000      	movs	r0, #0
 8005ffe:	f7fc f94f 	bl	80022a0 <ds_fill>
		ds_show();
 8006002:	f7fc f857 	bl	80020b4 <ds_show>
	counter = 0;
 8006006:	e6d1      	b.n	8005dac <startAlert+0x44>
 8006008:	2002e24c 	.word	0x2002e24c
 800600c:	2002e2a4 	.word	0x2002e2a4
 8006010:	2002e0cc 	.word	0x2002e0cc
 8006014:	2aaaaaab 	.word	0x2aaaaaab
 8006018:	80808081 	.word	0x80808081

0800601c <startConditionsPoll>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startConditionsPoll */
void startConditionsPoll(void *argument)
{
 800601c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800601e:	b099      	sub	sp, #100	; 0x64
 8006020:	af10      	add	r7, sp, #64	; 0x40
 8006022:	6078      	str	r0, [r7, #4]
	osDelay(500); //let screen start first
 8006024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006028:	f009 fe6c 	bl	800fd04 <osDelay>

	//poll ambient temp, humidity, visible light, white light
	//every 5sec
  	if (veml_Setup(hi2c1, VEML_5S_POLLING) == HAL_ERROR){
 800602c:	4e46      	ldr	r6, [pc, #280]	; (8006148 <startConditionsPoll+0x12c>)
 800602e:	2300      	movs	r3, #0
 8006030:	930f      	str	r3, [sp, #60]	; 0x3c
 8006032:	466d      	mov	r5, sp
 8006034:	f106 0410 	add.w	r4, r6, #16
 8006038:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800603a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800603c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800603e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006040:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006042:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006044:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006048:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800604c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8006050:	f001 f988 	bl	8007364 <veml_Setup>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d10c      	bne.n	8006074 <startConditionsPoll+0x58>
  		//error condition
  		strncpy(errorCondition, "ERR:VEML7700", sizeof(errorCondition));
 800605a:	4a3c      	ldr	r2, [pc, #240]	; (800614c <startConditionsPoll+0x130>)
 800605c:	4b3c      	ldr	r3, [pc, #240]	; (8006150 <startConditionsPoll+0x134>)
 800605e:	4614      	mov	r4, r2
 8006060:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006062:	6020      	str	r0, [r4, #0]
 8006064:	6061      	str	r1, [r4, #4]
 8006066:	60a2      	str	r2, [r4, #8]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 800606c:	4b39      	ldr	r3, [pc, #228]	; (8006154 <startConditionsPoll+0x138>)
 800606e:	2206      	movs	r2, #6
 8006070:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  	}

  	osDelay(10);
 8006074:	200a      	movs	r0, #10
 8006076:	f009 fe45 	bl	800fd04 <osDelay>

  	if (si7021_set_config(&hi2c1, SI7021_HEATER_OFF, SI7021_RESOLUTION_RH12_TEMP14) == HAL_ERROR) {
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	4832      	ldr	r0, [pc, #200]	; (8006148 <startConditionsPoll+0x12c>)
 8006080:	f000 fd8c 	bl	8006b9c <si7021_set_config>
 8006084:	4603      	mov	r3, r0
 8006086:	2b01      	cmp	r3, #1
 8006088:	d10c      	bne.n	80060a4 <startConditionsPoll+0x88>
  		//error condition
  		strncpy(errorCondition, "ERR:SI7021CF", sizeof(errorCondition));
 800608a:	4a30      	ldr	r2, [pc, #192]	; (800614c <startConditionsPoll+0x130>)
 800608c:	4b32      	ldr	r3, [pc, #200]	; (8006158 <startConditionsPoll+0x13c>)
 800608e:	4614      	mov	r4, r2
 8006090:	cb07      	ldmia	r3!, {r0, r1, r2}
 8006092:	6020      	str	r0, [r4, #0]
 8006094:	6061      	str	r1, [r4, #4]
 8006096:	60a2      	str	r2, [r4, #8]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 800609c:	4b2d      	ldr	r3, [pc, #180]	; (8006154 <startConditionsPoll+0x138>)
 800609e:	2206      	movs	r2, #6
 80060a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  	}

  	osDelay(10);
 80060a4:	200a      	movs	r0, #10
 80060a6:	f009 fe2d 	bl	800fd04 <osDelay>

  	if (si7021_set_heater_power(&hi2c1, SI7021_HEATER_POWER_3MA) == HAL_ERROR) {
 80060aa:	2100      	movs	r1, #0
 80060ac:	4826      	ldr	r0, [pc, #152]	; (8006148 <startConditionsPoll+0x12c>)
 80060ae:	f000 fd92 	bl	8006bd6 <si7021_set_heater_power>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d10c      	bne.n	80060d2 <startConditionsPoll+0xb6>
  		//error condition
  		strncpy(errorCondition, "ERR:SI7021HT", sizeof(errorCondition));
 80060b8:	4a24      	ldr	r2, [pc, #144]	; (800614c <startConditionsPoll+0x130>)
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <startConditionsPoll+0x140>)
 80060bc:	4614      	mov	r4, r2
 80060be:	cb07      	ldmia	r3!, {r0, r1, r2}
 80060c0:	6020      	str	r0, [r4, #0]
 80060c2:	6061      	str	r1, [r4, #4]
 80060c4:	60a2      	str	r2, [r4, #8]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	7323      	strb	r3, [r4, #12]
  	    GlobalState.programMode = MODE_ERROR;
 80060ca:	4b22      	ldr	r3, [pc, #136]	; (8006154 <startConditionsPoll+0x138>)
 80060cc:	2206      	movs	r2, #6
 80060ce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  	float lux;
  	float whiteLux;
  	float humidity;
    float temperature;

    const BLETX_Queue_t bleSendData = {TX_TEMP_HUMD, 0x0000};
 80060d2:	2301      	movs	r3, #1
 80060d4:	733b      	strb	r3, [r7, #12]
 80060d6:	2300      	movs	r3, #0
 80060d8:	81fb      	strh	r3, [r7, #14]

  	for (;;){

  		lux = veml_Get_Lux();
 80060da:	f001 fa81 	bl	80075e0 <veml_Get_Lux>
 80060de:	ed87 0a07 	vstr	s0, [r7, #28]
    	whiteLux = veml_Get_White_Lux();
 80060e2:	f001 fb65 	bl	80077b0 <veml_Get_White_Lux>
 80060e6:	ed87 0a06 	vstr	s0, [r7, #24]
    	temperature = si7021_measure_temperature(&hi2c1);
 80060ea:	4817      	ldr	r0, [pc, #92]	; (8006148 <startConditionsPoll+0x12c>)
 80060ec:	f000 fdea 	bl	8006cc4 <si7021_measure_temperature>
 80060f0:	ed87 0a05 	vstr	s0, [r7, #20]
    	humidity = si7021_measure_humidity(&hi2c1);
 80060f4:	4814      	ldr	r0, [pc, #80]	; (8006148 <startConditionsPoll+0x12c>)
 80060f6:	f000 fd87 	bl	8006c08 <si7021_measure_humidity>
 80060fa:	ed87 0a04 	vstr	s0, [r7, #16]

    	osMutexAcquire(conditionMutexHandle, portMAX_DELAY);
 80060fe:	4b18      	ldr	r3, [pc, #96]	; (8006160 <startConditionsPoll+0x144>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f04f 31ff 	mov.w	r1, #4294967295
 8006106:	4618      	mov	r0, r3
 8006108:	f009 fec4 	bl	800fe94 <osMutexAcquire>
    	GlobalState.lastConditions.lux = lux;
 800610c:	4a11      	ldr	r2, [pc, #68]	; (8006154 <startConditionsPoll+0x138>)
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	61d3      	str	r3, [r2, #28]
    	GlobalState.lastConditions.whiteLux = whiteLux;
 8006112:	4a10      	ldr	r2, [pc, #64]	; (8006154 <startConditionsPoll+0x138>)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	6213      	str	r3, [r2, #32]
    	GlobalState.lastConditions.temp = temperature;
 8006118:	4a0e      	ldr	r2, [pc, #56]	; (8006154 <startConditionsPoll+0x138>)
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	6253      	str	r3, [r2, #36]	; 0x24
    	GlobalState.lastConditions.humd = humidity;
 800611e:	4a0d      	ldr	r2, [pc, #52]	; (8006154 <startConditionsPoll+0x138>)
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	6293      	str	r3, [r2, #40]	; 0x28
    	osMutexRelease(conditionMutexHandle);
 8006124:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <startConditionsPoll+0x144>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f009 ff11 	bl	800ff50 <osMutexRelease>

		osMessageQueuePut(bleTXqueueHandle, &bleSendData, 0, 0);
 800612e:	4b0d      	ldr	r3, [pc, #52]	; (8006164 <startConditionsPoll+0x148>)
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	f107 010c 	add.w	r1, r7, #12
 8006136:	2300      	movs	r3, #0
 8006138:	2200      	movs	r2, #0
 800613a:	f00a f93b 	bl	80103b4 <osMessageQueuePut>

    	osDelay(29900);
 800613e:	f247 40cc 	movw	r0, #29900	; 0x74cc
 8006142:	f009 fddf 	bl	800fd04 <osDelay>
  		lux = veml_Get_Lux();
 8006146:	e7c8      	b.n	80060da <startConditionsPoll+0xbe>
 8006148:	2002e1e0 	.word	0x2002e1e0
 800614c:	2002e1a8 	.word	0x2002e1a8
 8006150:	0801867c 	.word	0x0801867c
 8006154:	2002e0cc 	.word	0x2002e0cc
 8006158:	0801868c 	.word	0x0801868c
 800615c:	0801869c 	.word	0x0801869c
 8006160:	2002e22c 	.word	0x2002e22c
 8006164:	2002e298 	.word	0x2002e298

08006168 <startBLETX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLETX */
void startBLETX(void *argument)
{
 8006168:	b5b0      	push	{r4, r5, r7, lr}
 800616a:	b09a      	sub	sp, #104	; 0x68
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  //TX_TIMESTAMP_UPDATE -- use data in sendData for error, to send
  //TX_SURVEY_RESULT -- use data in sendData, first byte is survey/second is answer

  BLETX_Queue_t sendData;

  UnsentQueueAddress_t DataQueue = NULL;
 8006170:	2300      	movs	r3, #0
 8006172:	667b      	str	r3, [r7, #100]	; 0x64

  RTC_TimeTypeDef cTime;
  RTC_DateTypeDef cDate;
  uint16_t sendval[10] = {0};
 8006174:	f107 0310 	add.w	r3, r7, #16
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	609a      	str	r2, [r3, #8]
 8006180:	60da      	str	r2, [r3, #12]
 8006182:	611a      	str	r2, [r3, #16]
  uint16_t lightval[4] = {0};
 8006184:	f107 0308 	add.w	r3, r7, #8
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	605a      	str	r2, [r3, #4]
  uint8_t numBytes = 0;
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

  /* Infinite loop */
  for(;;)
  {
        if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8006194:	4b90      	ldr	r3, [pc, #576]	; (80063d8 <startBLETX+0x270>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800619c:	f04f 33ff 	mov.w	r3, #4294967295
 80061a0:	2200      	movs	r2, #0
 80061a2:	f00a f97b 	bl	801049c <osMessageQueueGet>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f3      	bne.n	8006194 <startBLETX+0x2c>

          //construct timestamped data to send
          osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 80061ac:	4b8b      	ldr	r3, [pc, #556]	; (80063dc <startBLETX+0x274>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f04f 31ff 	mov.w	r1, #4294967295
 80061b4:	4618      	mov	r0, r3
 80061b6:	f009 fe6d 	bl	800fe94 <osMutexAcquire>
          HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 80061ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061be:	2201      	movs	r2, #1
 80061c0:	4619      	mov	r1, r3
 80061c2:	4887      	ldr	r0, [pc, #540]	; (80063e0 <startBLETX+0x278>)
 80061c4:	f004 ff31 	bl	800b02a <HAL_RTC_GetTime>
          HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 80061c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80061cc:	2201      	movs	r2, #1
 80061ce:	4619      	mov	r1, r3
 80061d0:	4883      	ldr	r0, [pc, #524]	; (80063e0 <startBLETX+0x278>)
 80061d2:	f005 f834 	bl	800b23e <HAL_RTC_GetDate>
          osMutexRelease(rtcMutexHandle);
 80061d6:	4b81      	ldr	r3, [pc, #516]	; (80063dc <startBLETX+0x274>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f009 feb8 	bl	800ff50 <osMutexRelease>

          switch (sendData.sendType){
 80061e0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80061e4:	2b08      	cmp	r3, #8
 80061e6:	f200 814b 	bhi.w	8006480 <startBLETX+0x318>
 80061ea:	a201      	add	r2, pc, #4	; (adr r2, 80061f0 <startBLETX+0x88>)
 80061ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f0:	080063ed 	.word	0x080063ed
 80061f4:	080063ed 	.word	0x080063ed
 80061f8:	08006215 	.word	0x08006215
 80061fc:	0800627d 	.word	0x0800627d
 8006200:	080062e9 	.word	0x080062e9
 8006204:	0800627d 	.word	0x0800627d
 8006208:	08006215 	.word	0x08006215
 800620c:	0800627d 	.word	0x0800627d
 8006210:	08006215 	.word	0x08006215
            case TX_PREVIOUS_INVALID:
            case TX_SURVEY_INITIALIZED:
            case TX_BEGIN_PAUSE:

            	sendval[4] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8006214:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006218:	021b      	lsls	r3, r3, #8
 800621a:	b21a      	sxth	r2, r3
 800621c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006220:	b21b      	sxth	r3, r3
 8006222:	4313      	orrs	r3, r2
 8006224:	b21b      	sxth	r3, r3
 8006226:	b29b      	uxth	r3, r3
 8006228:	833b      	strh	r3, [r7, #24]
            	sendval[3] = (cDate.Date << (8*1)) | cDate.Year;
 800622a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	b21a      	sxth	r2, r3
 8006232:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006236:	b21b      	sxth	r3, r3
 8006238:	4313      	orrs	r3, r2
 800623a:	b21b      	sxth	r3, r3
 800623c:	b29b      	uxth	r3, r3
 800623e:	82fb      	strh	r3, [r7, #22]
            	sendval[2] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8006240:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006244:	021b      	lsls	r3, r3, #8
 8006246:	b21a      	sxth	r2, r3
 8006248:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800624c:	b21b      	sxth	r3, r3
 800624e:	4313      	orrs	r3, r2
 8006250:	b21b      	sxth	r3, r3
 8006252:	b29b      	uxth	r3, r3
 8006254:	82bb      	strh	r3, [r7, #20]
            	sendval[1] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 8006256:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800625a:	021b      	lsls	r3, r3, #8
 800625c:	b21a      	sxth	r2, r3
 800625e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006262:	b21b      	sxth	r3, r3
 8006264:	4313      	orrs	r3, r2
 8006266:	b21b      	sxth	r3, r3
 8006268:	b29b      	uxth	r3, r3
 800626a:	827b      	strh	r3, [r7, #18]
            	sendval[0] = sendData.sendType;
 800626c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006270:	b29b      	uxth	r3, r3
 8006272:	823b      	strh	r3, [r7, #16]
            	numBytes = 10;
 8006274:	230a      	movs	r3, #10
 8006276:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 800627a:	e101      	b.n	8006480 <startBLETX+0x318>

            case TX_TIME_EST:
            case TX_TIMESTAMP_UPDATE:
            case TX_SURVEY_RESULT:
            	sendval[5] = (cDate.WeekDay << (8*1)) | cDate.Month;
 800627c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006280:	021b      	lsls	r3, r3, #8
 8006282:	b21a      	sxth	r2, r3
 8006284:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006288:	b21b      	sxth	r3, r3
 800628a:	4313      	orrs	r3, r2
 800628c:	b21b      	sxth	r3, r3
 800628e:	b29b      	uxth	r3, r3
 8006290:	837b      	strh	r3, [r7, #26]
            	sendval[4] = (cDate.Date << (8*1)) | cDate.Year;
 8006292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006296:	021b      	lsls	r3, r3, #8
 8006298:	b21a      	sxth	r2, r3
 800629a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800629e:	b21b      	sxth	r3, r3
 80062a0:	4313      	orrs	r3, r2
 80062a2:	b21b      	sxth	r3, r3
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	833b      	strh	r3, [r7, #24]
            	sendval[3] = (cTime.Hours << (8*1)) | cTime.Minutes;
 80062a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80062ac:	021b      	lsls	r3, r3, #8
 80062ae:	b21a      	sxth	r2, r3
 80062b0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80062b4:	b21b      	sxth	r3, r3
 80062b6:	4313      	orrs	r3, r2
 80062b8:	b21b      	sxth	r3, r3
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	82fb      	strh	r3, [r7, #22]
            	sendval[2] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 80062be:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80062c2:	021b      	lsls	r3, r3, #8
 80062c4:	b21a      	sxth	r2, r3
 80062c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80062ca:	b21b      	sxth	r3, r3
 80062cc:	4313      	orrs	r3, r2
 80062ce:	b21b      	sxth	r3, r3
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	82bb      	strh	r3, [r7, #20]
            	sendval[1] = sendData.sendType;
 80062d4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80062d8:	b29b      	uxth	r3, r3
 80062da:	827b      	strh	r3, [r7, #18]
            	sendval[0] = sendData.data;
 80062dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80062de:	823b      	strh	r3, [r7, #16]
            	numBytes = 12;
 80062e0:	230c      	movs	r3, #12
 80062e2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 80062e6:	e0cb      	b.n	8006480 <startBLETX+0x318>

            case TX_TIME_SEEN:
            	sendval[8] = (cDate.WeekDay << (8*1)) | cDate.Month;
 80062e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80062ec:	021b      	lsls	r3, r3, #8
 80062ee:	b21a      	sxth	r2, r3
 80062f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80062f4:	b21b      	sxth	r3, r3
 80062f6:	4313      	orrs	r3, r2
 80062f8:	b21b      	sxth	r3, r3
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	843b      	strh	r3, [r7, #32]
            	sendval[7] = (cDate.Date << (8*1)) | cDate.Year;
 80062fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	b21a      	sxth	r2, r3
 8006306:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800630a:	b21b      	sxth	r3, r3
 800630c:	4313      	orrs	r3, r2
 800630e:	b21b      	sxth	r3, r3
 8006310:	b29b      	uxth	r3, r3
 8006312:	83fb      	strh	r3, [r7, #30]
            	sendval[6] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8006314:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	b21a      	sxth	r2, r3
 800631c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006320:	b21b      	sxth	r3, r3
 8006322:	4313      	orrs	r3, r2
 8006324:	b21b      	sxth	r3, r3
 8006326:	b29b      	uxth	r3, r3
 8006328:	83bb      	strh	r3, [r7, #28]
            	sendval[5] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 800632a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800632e:	021b      	lsls	r3, r3, #8
 8006330:	b21a      	sxth	r2, r3
 8006332:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006336:	b21b      	sxth	r3, r3
 8006338:	4313      	orrs	r3, r2
 800633a:	b21b      	sxth	r3, r3
 800633c:	b29b      	uxth	r3, r3
 800633e:	837b      	strh	r3, [r7, #26]
            	sendval[4] = sendData.sendType;
 8006340:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8006344:	b29b      	uxth	r3, r3
 8006346:	833b      	strh	r3, [r7, #24]

                osMutexAcquire(lastSeenMutexHandle, portMAX_DELAY);
 8006348:	4b26      	ldr	r3, [pc, #152]	; (80063e4 <startBLETX+0x27c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f04f 31ff 	mov.w	r1, #4294967295
 8006350:	4618      	mov	r0, r3
 8006352:	f009 fd9f 	bl	800fe94 <osMutexAcquire>
                cTime = GlobalState.lastSeenTime.time;
 8006356:	4b24      	ldr	r3, [pc, #144]	; (80063e8 <startBLETX+0x280>)
 8006358:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800635c:	1d1d      	adds	r5, r3, #4
 800635e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006360:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006362:	682b      	ldr	r3, [r5, #0]
 8006364:	6023      	str	r3, [r4, #0]
                cDate = GlobalState.lastSeenTime.date;
 8006366:	4b20      	ldr	r3, [pc, #128]	; (80063e8 <startBLETX+0x280>)
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	627b      	str	r3, [r7, #36]	; 0x24
                osMutexRelease(lastSeenMutexHandle);
 800636c:	4b1d      	ldr	r3, [pc, #116]	; (80063e4 <startBLETX+0x27c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4618      	mov	r0, r3
 8006372:	f009 fded 	bl	800ff50 <osMutexRelease>

                sendval[3] = (cDate.WeekDay << (8*1)) | cDate.Month;
 8006376:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	b21a      	sxth	r2, r3
 800637e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006382:	b21b      	sxth	r3, r3
 8006384:	4313      	orrs	r3, r2
 8006386:	b21b      	sxth	r3, r3
 8006388:	b29b      	uxth	r3, r3
 800638a:	82fb      	strh	r3, [r7, #22]
                sendval[2] = (cDate.Date << (8*1)) | cDate.Year;
 800638c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	b21a      	sxth	r2, r3
 8006394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006398:	b21b      	sxth	r3, r3
 800639a:	4313      	orrs	r3, r2
 800639c:	b21b      	sxth	r3, r3
 800639e:	b29b      	uxth	r3, r3
 80063a0:	82bb      	strh	r3, [r7, #20]
                sendval[1] = (cTime.Hours << (8*1)) | cTime.Minutes;
 80063a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80063a6:	021b      	lsls	r3, r3, #8
 80063a8:	b21a      	sxth	r2, r3
 80063aa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80063ae:	b21b      	sxth	r3, r3
 80063b0:	4313      	orrs	r3, r2
 80063b2:	b21b      	sxth	r3, r3
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	827b      	strh	r3, [r7, #18]
                sendval[0] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 80063b8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	b21a      	sxth	r2, r3
 80063c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063c4:	b21b      	sxth	r3, r3
 80063c6:	4313      	orrs	r3, r2
 80063c8:	b21b      	sxth	r3, r3
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	823b      	strh	r3, [r7, #16]
            	numBytes = 18;
 80063ce:	2312      	movs	r3, #18
 80063d0:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
            	break;
 80063d4:	e054      	b.n	8006480 <startBLETX+0x318>
 80063d6:	bf00      	nop
 80063d8:	2002e298 	.word	0x2002e298
 80063dc:	2002e0c8 	.word	0x2002e0c8
 80063e0:	2002e0a4 	.word	0x2002e0a4
 80063e4:	2002e308 	.word	0x2002e308
 80063e8:	2002e0cc 	.word	0x2002e0cc

            case TX_TEMP_HUMD:
            case TX_LUX_WHITELUX:
            	sendval[8] = (cDate.WeekDay << (8*1)) | cDate.Month;
 80063ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063f0:	021b      	lsls	r3, r3, #8
 80063f2:	b21a      	sxth	r2, r3
 80063f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80063f8:	b21b      	sxth	r3, r3
 80063fa:	4313      	orrs	r3, r2
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	b29b      	uxth	r3, r3
 8006400:	843b      	strh	r3, [r7, #32]
            	sendval[7] = (cDate.Date << (8*1)) | cDate.Year;
 8006402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	b21a      	sxth	r2, r3
 800640a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800640e:	b21b      	sxth	r3, r3
 8006410:	4313      	orrs	r3, r2
 8006412:	b21b      	sxth	r3, r3
 8006414:	b29b      	uxth	r3, r3
 8006416:	83fb      	strh	r3, [r7, #30]
            	sendval[6] = (cTime.Hours << (8*1)) | cTime.Minutes;
 8006418:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800641c:	021b      	lsls	r3, r3, #8
 800641e:	b21a      	sxth	r2, r3
 8006420:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006424:	b21b      	sxth	r3, r3
 8006426:	4313      	orrs	r3, r2
 8006428:	b21b      	sxth	r3, r3
 800642a:	b29b      	uxth	r3, r3
 800642c:	83bb      	strh	r3, [r7, #28]
            	sendval[5] = (cTime.Seconds << (8*1)) | cTime.TimeFormat;
 800642e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006432:	021b      	lsls	r3, r3, #8
 8006434:	b21a      	sxth	r2, r3
 8006436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800643a:	b21b      	sxth	r3, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	b21b      	sxth	r3, r3
 8006440:	b29b      	uxth	r3, r3
 8006442:	837b      	strh	r3, [r7, #26]
            	sendval[4] = TX_TEMP_HUMD;
 8006444:	2301      	movs	r3, #1
 8006446:	833b      	strh	r3, [r7, #24]
            	numBytes = 18;
 8006448:	2312      	movs	r3, #18
 800644a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

            	osMutexAcquire(conditionMutexHandle, portMAX_DELAY);
 800644e:	4b81      	ldr	r3, [pc, #516]	; (8006654 <startBLETX+0x4ec>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f04f 31ff 	mov.w	r1, #4294967295
 8006456:	4618      	mov	r0, r3
 8006458:	f009 fd1c 	bl	800fe94 <osMutexAcquire>
            	memcpy(&(sendval[2]), &GlobalState.lastConditions.temp, 4);
 800645c:	4b7e      	ldr	r3, [pc, #504]	; (8006658 <startBLETX+0x4f0>)
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	617b      	str	r3, [r7, #20]
            	memcpy(sendval, &GlobalState.lastConditions.humd, 4);
 8006462:	4b7d      	ldr	r3, [pc, #500]	; (8006658 <startBLETX+0x4f0>)
 8006464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006466:	613b      	str	r3, [r7, #16]
            	memcpy(&(lightval[2]), &GlobalState.lastConditions.lux, 4);
 8006468:	4b7b      	ldr	r3, [pc, #492]	; (8006658 <startBLETX+0x4f0>)
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	60fb      	str	r3, [r7, #12]
            	memcpy(lightval, &GlobalState.lastConditions.whiteLux, 4);
 800646e:	4b7a      	ldr	r3, [pc, #488]	; (8006658 <startBLETX+0x4f0>)
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	60bb      	str	r3, [r7, #8]
            	osMutexRelease(conditionMutexHandle);
 8006474:	4b77      	ldr	r3, [pc, #476]	; (8006654 <startBLETX+0x4ec>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f009 fd69 	bl	800ff50 <osMutexRelease>
            	break;
 800647e:	bf00      	nop
                //memcpy(sendval, lightval, 8);
          }


          //try to send queued data if we have a queue
          uint8_t dataSuccessFlag = 1;
 8006480:	2301      	movs	r3, #1
 8006482:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
          uint8_t failed_attempts = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		  const uint8_t MAX_ATTEMPTS = 50;
 800648c:	2332      	movs	r3, #50	; 0x32
 800648e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

          if (!P2P_Server_App_Context.Connected) { dataSuccessFlag = 0;}
 8006492:	4b72      	ldr	r3, [pc, #456]	; (800665c <startBLETX+0x4f4>)
 8006494:	785b      	ldrb	r3, [r3, #1]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d132      	bne.n	8006500 <startBLETX+0x398>
 800649a:	2300      	movs	r3, #0
 800649c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

          while(DataQueue && dataSuccessFlag){//we have data queued and have not failed to send data
 80064a0:	e02e      	b.n	8006500 <startBLETX+0x398>

        	  //try to send data at front of list
        	  if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)DataQueue->packet, DataQueue->numBytes) == BLE_STATUS_SUCCESS){
 80064a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a4:	6819      	ldr	r1, [r3, #0]
 80064a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064a8:	791b      	ldrb	r3, [r3, #4]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80064b0:	f008 fc66 	bl	800ed80 <P2PS_STM_App_Update_Int8>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d110      	bne.n	80064dc <startBLETX+0x374>

        		  //if successful, move dataQueue to next, which is NULL for last element, and free memory
        		  UnsentQueueAddress_t addressJustSent = DataQueue;
 80064ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064bc:	653b      	str	r3, [r7, #80]	; 0x50
        		  DataQueue = DataQueue->next;
 80064be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	667b      	str	r3, [r7, #100]	; 0x64

        		  vPortFree(addressJustSent->packet);
 80064c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4618      	mov	r0, r3
 80064ca:	f00a fb93 	bl	8010bf4 <vPortFree>
        		  vPortFree(addressJustSent);
 80064ce:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80064d0:	f00a fb90 	bl	8010bf4 <vPortFree>

        		  failed_attempts = 0;
 80064d4:	2300      	movs	r3, #0
 80064d6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80064da:	e011      	b.n	8006500 <startBLETX+0x398>
        	  } else {  //if unsuccessful MAX_ATTEMPTS in a row, dataSuccessFlag = 0
        		  failed_attempts +=1;
 80064dc:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80064e0:	3301      	adds	r3, #1
 80064e2:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

        		  if (failed_attempts >= MAX_ATTEMPTS){ dataSuccessFlag = 0; }
 80064e6:	f897 2061 	ldrb.w	r2, [r7, #97]	; 0x61
 80064ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d303      	bcc.n	80064fa <startBLETX+0x392>
 80064f2:	2300      	movs	r3, #0
 80064f4:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 80064f8:	e002      	b.n	8006500 <startBLETX+0x398>
        		  else { osDelay(2); }
 80064fa:	2002      	movs	r0, #2
 80064fc:	f009 fc02 	bl	800fd04 <osDelay>
          while(DataQueue && dataSuccessFlag){//we have data queued and have not failed to send data
 8006500:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <startBLETX+0x3a6>
 8006506:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1c9      	bne.n	80064a2 <startBLETX+0x33a>
        	  }
          }

        //if we haven't had a data failure with the queue, try to send current data packet
        if (dataSuccessFlag){
 800650e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8006512:	2b00      	cmp	r3, #0
 8006514:	d02c      	beq.n	8006570 <startBLETX+0x408>
        	if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, numBytes) != BLE_STATUS_SUCCESS){
 8006516:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800651a:	f107 0310 	add.w	r3, r7, #16
 800651e:	4619      	mov	r1, r3
 8006520:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8006524:	f008 fc2c 	bl	800ed80 <P2PS_STM_App_Update_Int8>
 8006528:	4603      	mov	r3, r0
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <startBLETX+0x3ce>
        		//unsuccessful packet send means we flag it
        		dataSuccessFlag = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8006534:	e01c      	b.n	8006570 <startBLETX+0x408>

        	} else if (sendData.sendType == TX_TEMP_HUMD){ //if first packet was successful and we're transmitting conditions
 8006536:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800653a:	2b01      	cmp	r3, #1
 800653c:	d118      	bne.n	8006570 <startBLETX+0x408>

        		//construct second packet for conditions
                sendval[4] = TX_LUX_WHITELUX;
 800653e:	2300      	movs	r3, #0
 8006540:	833b      	strh	r3, [r7, #24]
                memcpy(sendval, lightval, 8);
 8006542:	f107 0310 	add.w	r3, r7, #16
 8006546:	f107 0208 	add.w	r2, r7, #8
 800654a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800654e:	e883 0003 	stmia.w	r3, {r0, r1}

                //and send it
        		if (P2PS_STM_App_Update_Int8(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&sendval, numBytes) != BLE_STATUS_SUCCESS){
 8006552:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8006556:	f107 0310 	add.w	r3, r7, #16
 800655a:	4619      	mov	r1, r3
 800655c:	f64f 6042 	movw	r0, #65090	; 0xfe42
 8006560:	f008 fc0e 	bl	800ed80 <P2PS_STM_App_Update_Int8>
 8006564:	4603      	mov	r3, r0
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <startBLETX+0x408>
        		        dataSuccessFlag = 0;
 800656a:	2300      	movs	r3, #0
 800656c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
        	}

        }

        //if we had a data send failure, add current packet to the queue dynamically
        if (!dataSuccessFlag){
 8006570:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8006574:	2b00      	cmp	r3, #0
 8006576:	f47f ae0d 	bne.w	8006194 <startBLETX+0x2c>

        	//malloc the packet data
        	uint16_t *newPacketAddress = pvPortMalloc(numBytes);
 800657a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800657e:	4618      	mov	r0, r3
 8006580:	f00a fa76 	bl	8010a70 <pvPortMalloc>
 8006584:	64f8      	str	r0, [r7, #76]	; 0x4c
        	//copy the packet data in from sendval
        	memcpy(newPacketAddress, sendval, numBytes);
 8006586:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800658a:	f107 0310 	add.w	r3, r7, #16
 800658e:	4619      	mov	r1, r3
 8006590:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8006592:	f00d fbf3 	bl	8013d7c <memcpy>

        	//malloc the queue item that points to that data
        	UnsentQueue_t *newQueueItemAddress = pvPortMalloc(sizeof(UnsentQueue_t));
 8006596:	200c      	movs	r0, #12
 8006598:	f00a fa6a 	bl	8010a70 <pvPortMalloc>
 800659c:	64b8      	str	r0, [r7, #72]	; 0x48
        	//correctly fill the new Queue Item
        	newQueueItemAddress->packet = newPacketAddress;
 800659e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065a2:	601a      	str	r2, [r3, #0]
        	newQueueItemAddress->numBytes = numBytes;
 80065a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065a6:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80065aa:	711a      	strb	r2, [r3, #4]
        	newQueueItemAddress->next = NULL;
 80065ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ae:	2200      	movs	r2, #0
 80065b0:	609a      	str	r2, [r3, #8]

        	//if DataQueue is empty, simply set the queue address to this one.
        	if (!DataQueue){ DataQueue = newQueueItemAddress; }
 80065b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <startBLETX+0x456>
 80065b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065ba:	667b      	str	r3, [r7, #100]	; 0x64
 80065bc:	e00c      	b.n	80065d8 <startBLETX+0x470>
        	else {//otherwise traverse until we get null
        		UnsentQueueAddress_t current_node = DataQueue;
 80065be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065c0:	65fb      	str	r3, [r7, #92]	; 0x5c
        		while (current_node->next){ //while the pointer to the next is not null
 80065c2:	e002      	b.n	80065ca <startBLETX+0x462>
        			current_node = current_node->next; //update current_node to next
 80065c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	65fb      	str	r3, [r7, #92]	; 0x5c
        		while (current_node->next){ //while the pointer to the next is not null
 80065ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1f8      	bne.n	80065c4 <startBLETX+0x45c>
        		}
        		current_node->next = newQueueItemAddress;
 80065d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065d6:	609a      	str	r2, [r3, #8]
        	}

        	if (sendData.sendType == TX_TEMP_HUMD && sendval[4] == TX_TEMP_HUMD){
 80065d8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f47f add9 	bne.w	8006194 <startBLETX+0x2c>
 80065e2:	8b3b      	ldrh	r3, [r7, #24]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	f47f add5 	bne.w	8006194 <startBLETX+0x2c>
        		//if we're sending conditions and we didn't successfully move to second packet,
        		//add second packet to data queue as well
        		sendval[4] = TX_LUX_WHITELUX;
 80065ea:	2300      	movs	r3, #0
 80065ec:	833b      	strh	r3, [r7, #24]
        		memcpy(sendval, lightval, 8);
 80065ee:	f107 0310 	add.w	r3, r7, #16
 80065f2:	f107 0208 	add.w	r2, r7, #8
 80065f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80065fa:	e883 0003 	stmia.w	r3, {r0, r1}

        		//malloc the packet data
				uint16_t *newPacketAddress = pvPortMalloc(numBytes);
 80065fe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8006602:	4618      	mov	r0, r3
 8006604:	f00a fa34 	bl	8010a70 <pvPortMalloc>
 8006608:	6478      	str	r0, [r7, #68]	; 0x44
				//copy the packet data in from sendval
				memcpy(newPacketAddress, sendval, numBytes);
 800660a:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800660e:	f107 0310 	add.w	r3, r7, #16
 8006612:	4619      	mov	r1, r3
 8006614:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8006616:	f00d fbb1 	bl	8013d7c <memcpy>

				//malloc the queue item that points to that data
				UnsentQueue_t *newQueueItemAddress = pvPortMalloc(sizeof(UnsentQueue_t));
 800661a:	200c      	movs	r0, #12
 800661c:	f00a fa28 	bl	8010a70 <pvPortMalloc>
 8006620:	6438      	str	r0, [r7, #64]	; 0x40
				//correctly fill the new Queue Item
				newQueueItemAddress->packet = newPacketAddress;
 8006622:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006624:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006626:	601a      	str	r2, [r3, #0]
				newQueueItemAddress->numBytes = numBytes;
 8006628:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800662a:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800662e:	711a      	strb	r2, [r3, #4]
				newQueueItemAddress->next = NULL;
 8006630:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006632:	2200      	movs	r2, #0
 8006634:	609a      	str	r2, [r3, #8]

				UnsentQueueAddress_t current_node = DataQueue;
 8006636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006638:	65bb      	str	r3, [r7, #88]	; 0x58

				while (current_node->next){ //while the pointer to the next is not null
 800663a:	e002      	b.n	8006642 <startBLETX+0x4da>
					current_node = current_node->next; //update current_node to next
 800663c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	65bb      	str	r3, [r7, #88]	; 0x58
				while (current_node->next){ //while the pointer to the next is not null
 8006642:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f8      	bne.n	800663c <startBLETX+0x4d4>
				}

				current_node->next = newQueueItemAddress;
 800664a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800664c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800664e:	609a      	str	r2, [r3, #8]
        if (osMessageQueueGet(bleTXqueueHandle, &sendData, NULL, osWaitForever) == osOK){
 8006650:	e5a0      	b.n	8006194 <startBLETX+0x2c>
 8006652:	bf00      	nop
 8006654:	2002e22c 	.word	0x2002e22c
 8006658:	2002e0cc 	.word	0x2002e0cc
 800665c:	2002e088 	.word	0x2002e088

08006660 <startBLERX>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBLERX */
void startBLERX(void *argument)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b09c      	sub	sp, #112	; 0x70
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
  P2PS_STM_Data_t rxData;

  for(;;)
  {

	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 8006668:	4bb9      	ldr	r3, [pc, #740]	; (8006950 <startBLERX+0x2f0>)
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8006670:	f04f 33ff 	mov.w	r3, #4294967295
 8006674:	2200      	movs	r2, #0
 8006676:	f009 ff11 	bl	801049c <osMessageQueueGet>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1f3      	bne.n	8006668 <startBLERX+0x8>

		if (rxData.pPayload[0] == 0x00) { // timestamp update starts with 0x00
 8006680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	f040 8106 	bne.w	8006896 <startBLERX+0x236>
			memcpy(&P2P_Server_App_Context.OTATimestamp, &(rxData.pPayload[1]), 8);
 800668a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668c:	3301      	adds	r3, #1
 800668e:	2208      	movs	r2, #8
 8006690:	4619      	mov	r1, r3
 8006692:	48b0      	ldr	r0, [pc, #704]	; (8006954 <startBLERX+0x2f4>)
 8006694:	f00d fb72 	bl	8013d7c <memcpy>
    	    P2P_Server_App_Context.OTA12HrFormat = rxData.pPayload[9];
 8006698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800669a:	7a5a      	ldrb	r2, [r3, #9]
 800669c:	4bae      	ldr	r3, [pc, #696]	; (8006958 <startBLERX+0x2f8>)
 800669e:	741a      	strb	r2, [r3, #16]
    		P2P_Server_App_Context.OTADaylightSavings = rxData.pPayload[10];
 80066a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a2:	7a9a      	ldrb	r2, [r3, #10]
 80066a4:	4bac      	ldr	r3, [pc, #688]	; (8006958 <startBLERX+0x2f8>)
 80066a6:	745a      	strb	r2, [r3, #17]

    	    RTC_TimeTypeDef sTime = {0};
 80066a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80066ac:	2200      	movs	r2, #0
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	605a      	str	r2, [r3, #4]
 80066b2:	609a      	str	r2, [r3, #8]
 80066b4:	60da      	str	r2, [r3, #12]
 80066b6:	611a      	str	r2, [r3, #16]
    		RTC_DateTypeDef sDate = {0};
 80066b8:	2300      	movs	r3, #0
 80066ba:	637b      	str	r3, [r7, #52]	; 0x34

    		uint8_t timestampvals[8];
    		memcpy(timestampvals, &(P2P_Server_App_Context.OTATimestamp), 8);
 80066bc:	4aa6      	ldr	r2, [pc, #664]	; (8006958 <startBLERX+0x2f8>)
 80066be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80066c2:	3208      	adds	r2, #8
 80066c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066c8:	e883 0003 	stmia.w	r3, {r0, r1}

    		uint8_t AMPM = timestampvals[0];
 80066cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80066d0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

    		sTime.Hours      = timestampvals[4];
 80066d4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80066d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    		sTime.Minutes    = timestampvals[5];
 80066dc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80066e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
    		sTime.Seconds    = timestampvals[6];
 80066e4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80066e8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
    		sTime.SubSeconds = 0x0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80066f0:	2300      	movs	r3, #0
 80066f2:	647b      	str	r3, [r7, #68]	; 0x44

    		if (P2P_Server_App_Context.OTADaylightSavings){ sTime.DayLightSaving = RTC_DAYLIGHTSAVING_ADD1H; }
 80066f4:	4b98      	ldr	r3, [pc, #608]	; (8006958 <startBLERX+0x2f8>)
 80066f6:	7c5b      	ldrb	r3, [r3, #17]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d002      	beq.n	8006702 <startBLERX+0xa2>
 80066fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006700:	647b      	str	r3, [r7, #68]	; 0x44

    		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006702:	2300      	movs	r3, #0
 8006704:	64bb      	str	r3, [r7, #72]	; 0x48

    		sDate.WeekDay = timestampvals[0];
 8006706:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800670a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    		sDate.Month   = timestampvals[1];
 800670e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006712:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    		sDate.Date    = timestampvals[2];
 8006716:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800671a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    		sDate.Year    = timestampvals[3];
 800671e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006722:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    		RTC_TimeTypeDef cTime;
   	        RTC_DateTypeDef cDate;

    		osMutexAcquire(rtcMutexHandle, portMAX_DELAY);
 8006726:	4b8d      	ldr	r3, [pc, #564]	; (800695c <startBLERX+0x2fc>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f04f 31ff 	mov.w	r1, #4294967295
 800672e:	4618      	mov	r0, r3
 8006730:	f009 fbb0 	bl	800fe94 <osMutexAcquire>
    		HAL_RTC_GetTime(&hrtc, &cTime, RTC_FORMAT_BCD);
 8006734:	f107 0318 	add.w	r3, r7, #24
 8006738:	2201      	movs	r2, #1
 800673a:	4619      	mov	r1, r3
 800673c:	4888      	ldr	r0, [pc, #544]	; (8006960 <startBLERX+0x300>)
 800673e:	f004 fc74 	bl	800b02a <HAL_RTC_GetTime>
    		HAL_RTC_GetDate(&hrtc, &cDate, RTC_FORMAT_BCD);
 8006742:	f107 0314 	add.w	r3, r7, #20
 8006746:	2201      	movs	r2, #1
 8006748:	4619      	mov	r1, r3
 800674a:	4885      	ldr	r0, [pc, #532]	; (8006960 <startBLERX+0x300>)
 800674c:	f004 fd77 	bl	800b23e <HAL_RTC_GetDate>
    		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 8006750:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006754:	2201      	movs	r2, #1
 8006756:	4619      	mov	r1, r3
 8006758:	4881      	ldr	r0, [pc, #516]	; (8006960 <startBLERX+0x300>)
 800675a:	f004 fba2 	bl	800aea2 <HAL_RTC_SetTime>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d001      	beq.n	8006768 <startBLERX+0x108>
 8006764:	f000 f9a4 	bl	8006ab0 <Error_Handler>
    		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {Error_Handler();}
 8006768:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800676c:	2201      	movs	r2, #1
 800676e:	4619      	mov	r1, r3
 8006770:	487b      	ldr	r0, [pc, #492]	; (8006960 <startBLERX+0x300>)
 8006772:	f004 fcb6 	bl	800b0e2 <HAL_RTC_SetDate>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d001      	beq.n	8006780 <startBLERX+0x120>
 800677c:	f000 f998 	bl	8006ab0 <Error_Handler>
    	    osMutexRelease(rtcMutexHandle);
 8006780:	4b76      	ldr	r3, [pc, #472]	; (800695c <startBLERX+0x2fc>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f009 fbe3 	bl	800ff50 <osMutexRelease>

    	    //calculate the seconds off between the two.
    	    uint8_t prev_hrs = RTC_Bcd2ToByte(cTime.Hours);
 800678a:	7e3b      	ldrb	r3, [r7, #24]
 800678c:	4618      	mov	r0, r3
 800678e:	f004 fe13 	bl	800b3b8 <RTC_Bcd2ToByte>
 8006792:	4603      	mov	r3, r0
 8006794:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    	    uint8_t prev_min = RTC_Bcd2ToByte(cTime.Minutes);
 8006798:	7e7b      	ldrb	r3, [r7, #25]
 800679a:	4618      	mov	r0, r3
 800679c:	f004 fe0c 	bl	800b3b8 <RTC_Bcd2ToByte>
 80067a0:	4603      	mov	r3, r0
 80067a2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    	    uint8_t prev_sec = RTC_Bcd2ToByte(cTime.Seconds);
 80067a6:	7ebb      	ldrb	r3, [r7, #26]
 80067a8:	4618      	mov	r0, r3
 80067aa:	f004 fe05 	bl	800b3b8 <RTC_Bcd2ToByte>
 80067ae:	4603      	mov	r3, r0
 80067b0:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62

    	    uint8_t new_hrs = RTC_Bcd2ToByte(sTime.Hours);
 80067b4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80067b8:	4618      	mov	r0, r3
 80067ba:	f004 fdfd 	bl	800b3b8 <RTC_Bcd2ToByte>
 80067be:	4603      	mov	r3, r0
 80067c0:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
    	    uint8_t new_min = RTC_Bcd2ToByte(sTime.Minutes);
 80067c4:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 80067c8:	4618      	mov	r0, r3
 80067ca:	f004 fdf5 	bl	800b3b8 <RTC_Bcd2ToByte>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
    	    uint8_t new_sec = RTC_Bcd2ToByte(sTime.Seconds);
 80067d4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80067d8:	4618      	mov	r0, r3
 80067da:	f004 fded 	bl	800b3b8 <RTC_Bcd2ToByte>
 80067de:	4603      	mov	r3, r0
 80067e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

    	    int32_t new_totalsec = (60*60*new_hrs + 60*new_min + new_sec); //86400 sec in day
 80067e4:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80067e8:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 80067ec:	fb02 f103 	mul.w	r1, r2, r3
 80067f0:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 80067f4:	4613      	mov	r3, r2
 80067f6:	011b      	lsls	r3, r3, #4
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	18ca      	adds	r2, r1, r3
 80067fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006802:	4413      	add	r3, r2
 8006804:	65bb      	str	r3, [r7, #88]	; 0x58
    	    int32_t prev_totalsec = (60*60*prev_hrs + 60*prev_min + prev_sec);
 8006806:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800680a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 800680e:	fb02 f103 	mul.w	r1, r2, r3
 8006812:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 8006816:	4613      	mov	r3, r2
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	1a9b      	subs	r3, r3, r2
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	18ca      	adds	r2, r1, r3
 8006820:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8006824:	4413      	add	r3, r2
 8006826:	657b      	str	r3, [r7, #84]	; 0x54
    	    int32_t forward_diff;
    	    int32_t backward_diff;

    	    int16_t signed_sec_difference; //cant hold more than 9 hours difference

    	    if (new_totalsec > prev_totalsec) {
 8006828:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800682a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800682c:	429a      	cmp	r2, r3
 800682e:	dd0a      	ble.n	8006846 <startBLERX+0x1e6>
    	    	forward_diff  = new_totalsec - prev_totalsec;
 8006830:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    	backward_diff = 86400 - forward_diff;
 8006838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800683a:	f5c3 33a8 	rsb	r3, r3, #86016	; 0x15000
 800683e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006842:	66bb      	str	r3, [r7, #104]	; 0x68
 8006844:	e009      	b.n	800685a <startBLERX+0x1fa>
    	    } else {
    	    	backward_diff = prev_totalsec - new_totalsec;
 8006846:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	66bb      	str	r3, [r7, #104]	; 0x68
    	    	forward_diff  = 86400 - backward_diff;
 800684e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006850:	f5c3 33a8 	rsb	r3, r3, #86016	; 0x15000
 8006854:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8006858:	66fb      	str	r3, [r7, #108]	; 0x6c
    	    }

    	    if (backward_diff < forward_diff){
 800685a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800685c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800685e:	429a      	cmp	r2, r3
 8006860:	da06      	bge.n	8006870 <startBLERX+0x210>
    	    	signed_sec_difference= -1 * backward_diff;
 8006862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006864:	b29b      	uxth	r3, r3
 8006866:	425b      	negs	r3, r3
 8006868:	b29b      	uxth	r3, r3
 800686a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800686e:	e002      	b.n	8006876 <startBLERX+0x216>
    	    }else {
    	    	signed_sec_difference = forward_diff;
 8006870:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006872:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    	    }

    	    BLETX_Queue_t bleSendUpdate = {TX_TIMESTAMP_UPDATE, 0x00};
 8006876:	2307      	movs	r3, #7
 8006878:	743b      	strb	r3, [r7, #16]
 800687a:	2300      	movs	r3, #0
 800687c:	827b      	strh	r3, [r7, #18]
			bleSendUpdate.data = (uint16_t)signed_sec_difference;
 800687e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8006882:	827b      	strh	r3, [r7, #18]
			osMessageQueuePut(bleTXqueueHandle, &bleSendUpdate, 0, 0);
 8006884:	4b37      	ldr	r3, [pc, #220]	; (8006964 <startBLERX+0x304>)
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	f107 0110 	add.w	r1, r7, #16
 800688c:	2300      	movs	r3, #0
 800688e:	2200      	movs	r2, #0
 8006890:	f009 fd90 	bl	80103b4 <osMessageQueuePut>
 8006894:	e6e8      	b.n	8006668 <startBLERX+0x8>
		}

		else if (rxData.pPayload[0] == 0x01) {//change time bounds
 8006896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006898:	781b      	ldrb	r3, [r3, #0]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d118      	bne.n	80068d0 <startBLERX+0x270>
			//startHR, endHR in BCD
			GlobalState.timeBound.startHR_BCD = rxData.pPayload[1];
 800689e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a0:	785a      	ldrb	r2, [r3, #1]
 80068a2:	4b31      	ldr	r3, [pc, #196]	; (8006968 <startBLERX+0x308>)
 80068a4:	701a      	strb	r2, [r3, #0]
			GlobalState.timeBound.endHR_BCD  = rxData.pPayload[2];
 80068a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a8:	789a      	ldrb	r2, [r3, #2]
 80068aa:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <startBLERX+0x308>)
 80068ac:	705a      	strb	r2, [r3, #1]

			GlobalState.paused = 1;
 80068ae:	4b2e      	ldr	r3, [pc, #184]	; (8006968 <startBLERX+0x308>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
			const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 80068b6:	2308      	movs	r3, #8
 80068b8:	733b      	strb	r3, [r7, #12]
 80068ba:	2300      	movs	r3, #0
 80068bc:	81fb      	strh	r3, [r7, #14]
			osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 80068be:	4b29      	ldr	r3, [pc, #164]	; (8006964 <startBLERX+0x304>)
 80068c0:	6818      	ldr	r0, [r3, #0]
 80068c2:	f107 010c 	add.w	r1, r7, #12
 80068c6:	2300      	movs	r3, #0
 80068c8:	2200      	movs	r2, #0
 80068ca:	f009 fd73 	bl	80103b4 <osMessageQueuePut>
 80068ce:	e6cb      	b.n	8006668 <startBLERX+0x8>
		}

		else if (rxData.pPayload[0] == 0x02) {//pause or unpause watch
 80068d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	f47f aec7 	bne.w	8006668 <startBLERX+0x8>

			if (rxData.pPayload[1]) { //pause things
 80068da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068dc:	3301      	adds	r3, #1
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d020      	beq.n	8006926 <startBLERX+0x2c6>

				GlobalState.paused = 1;
 80068e4:	4b20      	ldr	r3, [pc, #128]	; (8006968 <startBLERX+0x308>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 80068ec:	4b1f      	ldr	r3, [pc, #124]	; (800696c <startBLERX+0x30c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f04f 31ff 	mov.w	r1, #4294967295
 80068f4:	4618      	mov	r0, r3
 80068f6:	f009 facd 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_RESTING;
 80068fa:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <startBLERX+0x308>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <startBLERX+0x30c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4618      	mov	r0, r3
 8006908:	f009 fb22 	bl	800ff50 <osMutexRelease>
	    		const BLETX_Queue_t bleSendPause = {TX_BEGIN_PAUSE, 0x0000};
 800690c:	2308      	movs	r3, #8
 800690e:	723b      	strb	r3, [r7, #8]
 8006910:	2300      	movs	r3, #0
 8006912:	817b      	strh	r3, [r7, #10]
	     		osMessageQueuePut(bleTXqueueHandle, &bleSendPause, 0, 0);
 8006914:	4b13      	ldr	r3, [pc, #76]	; (8006964 <startBLERX+0x304>)
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	f107 0108 	add.w	r1, r7, #8
 800691c:	2300      	movs	r3, #0
 800691e:	2200      	movs	r2, #0
 8006920:	f009 fd48 	bl	80103b4 <osMessageQueuePut>
 8006924:	e6a0      	b.n	8006668 <startBLERX+0x8>

			} else { //unpause things

				osMutexAcquire(modeMutexHandle, portMAX_DELAY);
 8006926:	4b11      	ldr	r3, [pc, #68]	; (800696c <startBLERX+0x30c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f04f 31ff 	mov.w	r1, #4294967295
 800692e:	4618      	mov	r0, r3
 8006930:	f009 fab0 	bl	800fe94 <osMutexAcquire>
				GlobalState.programMode = MODE_SHOW_TIME;
 8006934:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <startBLERX+0x308>)
 8006936:	2205      	movs	r2, #5
 8006938:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
				osMutexRelease(modeMutexHandle);
 800693c:	4b0b      	ldr	r3, [pc, #44]	; (800696c <startBLERX+0x30c>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f009 fb05 	bl	800ff50 <osMutexRelease>
				GlobalState.paused = 0;
 8006946:	4b08      	ldr	r3, [pc, #32]	; (8006968 <startBLERX+0x308>)
 8006948:	2200      	movs	r2, #0
 800694a:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
	if (osMessageQueueGet(bleRXqueueHandle, &rxData, NULL, osWaitForever) == osOK){
 800694e:	e68b      	b.n	8006668 <startBLERX+0x8>
 8006950:	2002e07c 	.word	0x2002e07c
 8006954:	2002e090 	.word	0x2002e090
 8006958:	2002e088 	.word	0x2002e088
 800695c:	2002e0c8 	.word	0x2002e0c8
 8006960:	2002e0a4 	.word	0x2002e0a4
 8006964:	2002e298 	.word	0x2002e298
 8006968:	2002e0cc 	.word	0x2002e0cc
 800696c:	2002e238 	.word	0x2002e238

08006970 <PeriphClock_Config>:
  /* USER CODE END startBLERX */
}


void PeriphClock_Config(void)
{
 8006970:	b480      	push	{r7}
 8006972:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8006974:	bf00      	nop
}
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b082      	sub	sp, #8
 8006982:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006984:	2000      	movs	r0, #0
 8006986:	f008 fad1 	bl	800ef2c <OTP_Read>
 800698a:	6078      	str	r0, [r7, #4]
  if (p_otp)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	799b      	ldrb	r3, [r3, #6]
 8006996:	4618      	mov	r0, r3
 8006998:	f7fd f9aa 	bl	8003cf0 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 800699c:	bf00      	nop
 800699e:	bf00      	nop
}  
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <Reset_Device>:

static void Reset_Device( void )
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 80069aa:	f000 f827 	bl	80069fc <Reset_BackupDomain>

	Reset_IPCC();
 80069ae:	f000 f803 	bl	80069b8 <Reset_IPCC>
#endif

	return;
 80069b2:	bf00      	nop
}
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 80069bc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80069c0:	f7fd fa2b 	bl	8003e1a <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 80069c4:	213f      	movs	r1, #63	; 0x3f
 80069c6:	480c      	ldr	r0, [pc, #48]	; (80069f8 <Reset_IPCC+0x40>)
 80069c8:	f7fd fa86 	bl	8003ed8 <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 80069cc:	213f      	movs	r1, #63	; 0x3f
 80069ce:	480a      	ldr	r0, [pc, #40]	; (80069f8 <Reset_IPCC+0x40>)
 80069d0:	f7fd fa90 	bl	8003ef4 <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 80069d4:	213f      	movs	r1, #63	; 0x3f
 80069d6:	4808      	ldr	r0, [pc, #32]	; (80069f8 <Reset_IPCC+0x40>)
 80069d8:	f7fd fa38 	bl	8003e4c <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 80069dc:	213f      	movs	r1, #63	; 0x3f
 80069de:	4806      	ldr	r0, [pc, #24]	; (80069f8 <Reset_IPCC+0x40>)
 80069e0:	f7fd fa57 	bl	8003e92 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 80069e4:	213f      	movs	r1, #63	; 0x3f
 80069e6:	4804      	ldr	r0, [pc, #16]	; (80069f8 <Reset_IPCC+0x40>)
 80069e8:	f7fd fa42 	bl	8003e70 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 80069ec:	213f      	movs	r1, #63	; 0x3f
 80069ee:	4802      	ldr	r0, [pc, #8]	; (80069f8 <Reset_IPCC+0x40>)
 80069f0:	f7fd fa61 	bl	8003eb6 <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 80069f4:	bf00      	nop
}
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	58000c00 	.word	0x58000c00

080069fc <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8006a00:	f7fd f9cc 	bl	8003d9c <LL_RCC_IsActiveFlag_PINRST>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d00d      	beq.n	8006a26 <Reset_BackupDomain+0x2a>
 8006a0a:	f7fd f9da 	bl	8003dc2 <LL_RCC_IsActiveFlag_SFTRST>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d108      	bne.n	8006a26 <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006a14:	f002 fb9a 	bl	800914c <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8006a18:	f002 fb98 	bl	800914c <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8006a1c:	f7fd f99c 	bl	8003d58 <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8006a20:	f7fd f9ab 	bl	8003d7a <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
}
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <Init_Exti>:

static void Init_Exti( void )
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8006a2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a32:	f7fd f931 	bl	8003c98 <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8006a36:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8006a3a:	f7fd f943 	bl	8003cc4 <LL_EXTI_DisableIT_32_63>

  return;
 8006a3e:	bf00      	nop
}
 8006a40:	bd80      	pop	{r7, pc}

08006a42 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8006a42:	b580      	push	{r7, lr}
 8006a44:	b084      	sub	sp, #16
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a4a:	f001 f843 	bl	8007ad4 <HAL_GetTick>
 8006a4e:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5a:	d00a      	beq.n	8006a72 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8006a5c:	f001 f852 	bl	8007b04 <HAL_GetTickFreq>
 8006a60:	4603      	mov	r3, r0
 8006a62:	461a      	mov	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006a6a:	e002      	b.n	8006a72 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8006a6c:	f7fd fa50 	bl	8003f10 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8006a70:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8006a72:	f001 f82f 	bl	8007ad4 <HAL_GetTick>
 8006a76:	4602      	mov	r2, r0
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d8f4      	bhi.n	8006a6c <HAL_Delay+0x2a>
  }
}
 8006a82:	bf00      	nop
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
	...

08006a8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b082      	sub	sp, #8
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a04      	ldr	r2, [pc, #16]	; (8006aac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d101      	bne.n	8006aa2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006a9e:	f001 f805 	bl	8007aac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8006aa2:	bf00      	nop
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	40014800 	.word	0x40014800

08006ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8006ab4:	bf00      	nop
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <_read_and_convert_temperature>:
  return id;
}

// Helper to read and convert temperature into uint format
static float _read_and_convert_temperature(I2C_HandleTypeDef *hi2c)
{
 8006ac0:	b590      	push	{r4, r7, lr}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af02      	add	r7, sp, #8
 8006ac6:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  int res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 8006ac8:	f107 0208 	add.w	r2, r7, #8
 8006acc:	2364      	movs	r3, #100	; 0x64
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	2181      	movs	r1, #129	; 0x81
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f001 fcf5 	bl	80084c4 <HAL_I2C_Master_Receive>
 8006ada:	4603      	mov	r3, r0
 8006adc:	617b      	str	r3, [r7, #20]

  if (res != HAL_OK) {
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d001      	beq.n	8006ae8 <_read_and_convert_temperature+0x28>
    return SI7021_MEASURE_FAILED;
 8006ae4:	4b2a      	ldr	r3, [pc, #168]	; (8006b90 <_read_and_convert_temperature+0xd0>)
 8006ae6:	e03f      	b.n	8006b68 <_read_and_convert_temperature+0xa8>
  }

  int16_t temp_code = (si7021_buf[0] << 8 | si7021_buf[1]);
 8006ae8:	7a3b      	ldrb	r3, [r7, #8]
 8006aea:	021b      	lsls	r3, r3, #8
 8006aec:	b21a      	sxth	r2, r3
 8006aee:	7a7b      	ldrb	r3, [r7, #9]
 8006af0:	b21b      	sxth	r3, r3
 8006af2:	4313      	orrs	r3, r2
 8006af4:	827b      	strh	r3, [r7, #18]
  float temp = 175.72 * temp_code / 65535.00 - 46.85;
 8006af6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7f9 fcea 	bl	80004d4 <__aeabi_i2d>
 8006b00:	a31d      	add	r3, pc, #116	; (adr r3, 8006b78 <_read_and_convert_temperature+0xb8>)
 8006b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b06:	f7f9 fd4f 	bl	80005a8 <__aeabi_dmul>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	4618      	mov	r0, r3
 8006b10:	4621      	mov	r1, r4
 8006b12:	a31b      	add	r3, pc, #108	; (adr r3, 8006b80 <_read_and_convert_temperature+0xc0>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fe70 	bl	80007fc <__aeabi_ddiv>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	460c      	mov	r4, r1
 8006b20:	4618      	mov	r0, r3
 8006b22:	4621      	mov	r1, r4
 8006b24:	a318      	add	r3, pc, #96	; (adr r3, 8006b88 <_read_and_convert_temperature+0xc8>)
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	f7f9 fb85 	bl	8000238 <__aeabi_dsub>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	460c      	mov	r4, r1
 8006b32:	4618      	mov	r0, r3
 8006b34:	4621      	mov	r1, r4
 8006b36:	f7fa f80f 	bl	8000b58 <__aeabi_d2f>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	60fb      	str	r3, [r7, #12]

  if (temp > 125.00 || temp < -40.00) {
 8006b3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b42:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8006b94 <_read_and_convert_temperature+0xd4>
 8006b46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b4e:	dc08      	bgt.n	8006b62 <_read_and_convert_temperature+0xa2>
 8006b50:	edd7 7a03 	vldr	s15, [r7, #12]
 8006b54:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8006b98 <_read_and_convert_temperature+0xd8>
 8006b58:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b60:	d501      	bpl.n	8006b66 <_read_and_convert_temperature+0xa6>
    return SI7021_MEASURE_FAILED;
 8006b62:	4b0b      	ldr	r3, [pc, #44]	; (8006b90 <_read_and_convert_temperature+0xd0>)
 8006b64:	e000      	b.n	8006b68 <_read_and_convert_temperature+0xa8>
  }

  return temp;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	ee07 3a90 	vmov	s15, r3
}
 8006b6c:	eeb0 0a67 	vmov.f32	s0, s15
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd90      	pop	{r4, r7, pc}
 8006b76:	bf00      	nop
 8006b78:	3d70a3d7 	.word	0x3d70a3d7
 8006b7c:	4065f70a 	.word	0x4065f70a
 8006b80:	00000000 	.word	0x00000000
 8006b84:	40efffe0 	.word	0x40efffe0
 8006b88:	cccccccd 	.word	0xcccccccd
 8006b8c:	40476ccc 	.word	0x40476ccc
 8006b90:	477fff00 	.word	0x477fff00
 8006b94:	42fa0000 	.word	0x42fa0000
 8006b98:	c2200000 	.word	0xc2200000

08006b9c <si7021_set_config>:

  return (uint64_t)id1 << 32 | id2;
}

uint32_t si7021_set_config(I2C_HandleTypeDef *hi2c, uint8_t heater, uint8_t resolution)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	70fb      	strb	r3, [r7, #3]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	70bb      	strb	r3, [r7, #2]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_USER_REG1;
 8006bac:	23e6      	movs	r3, #230	; 0xe6
 8006bae:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = heater | resolution;
 8006bb0:	78fa      	ldrb	r2, [r7, #3]
 8006bb2:	78bb      	ldrb	r3, [r7, #2]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 2, 100);
 8006bba:	f107 020c 	add.w	r2, r7, #12
 8006bbe:	2364      	movs	r3, #100	; 0x64
 8006bc0:	9300      	str	r3, [sp, #0]
 8006bc2:	2302      	movs	r3, #2
 8006bc4:	2180      	movs	r1, #128	; 0x80
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f001 fb88 	bl	80082dc <HAL_I2C_Master_Transmit>
 8006bcc:	4603      	mov	r3, r0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3710      	adds	r7, #16
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <si7021_set_heater_power>:

uint32_t si7021_set_heater_power(I2C_HandleTypeDef *hi2c, uint8_t power)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b086      	sub	sp, #24
 8006bda:	af02      	add	r7, sp, #8
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	460b      	mov	r3, r1
 8006be0:	70fb      	strb	r3, [r7, #3]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_WRITE_HEATER_REG;
 8006be2:	2351      	movs	r3, #81	; 0x51
 8006be4:	733b      	strb	r3, [r7, #12]
  si7021_buf[1] = power;
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	737b      	strb	r3, [r7, #13]

  return HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 2, 100);
 8006bea:	f107 020c 	add.w	r2, r7, #12
 8006bee:	2364      	movs	r3, #100	; 0x64
 8006bf0:	9300      	str	r3, [sp, #0]
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	2180      	movs	r1, #128	; 0x80
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 fb70 	bl	80082dc <HAL_I2C_Master_Transmit>
 8006bfc:	4603      	mov	r3, r0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <si7021_measure_humidity>:

float si7021_measure_humidity(I2C_HandleTypeDef *hi2c)
{
 8006c08:	b590      	push	{r4, r7, lr}
 8006c0a:	b087      	sub	sp, #28
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_NOHOLD;
 8006c10:	23f5      	movs	r3, #245	; 0xf5
 8006c12:	723b      	strb	r3, [r7, #8]

  // Start measure
  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, si7021_buf, 1, 100);
 8006c14:	f107 0208 	add.w	r2, r7, #8
 8006c18:	2364      	movs	r3, #100	; 0x64
 8006c1a:	9300      	str	r3, [sp, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	2180      	movs	r1, #128	; 0x80
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f001 fb5b 	bl	80082dc <HAL_I2C_Master_Transmit>
 8006c26:	4603      	mov	r3, r0
 8006c28:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <si7021_measure_humidity+0x2c>
    return SI7021_MEASURE_FAILED;
 8006c30:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <si7021_measure_humidity+0xac>)
 8006c32:	e037      	b.n	8006ca4 <si7021_measure_humidity+0x9c>
  }
  HAL_Delay(30);
 8006c34:	201e      	movs	r0, #30
 8006c36:	f7ff ff04 	bl	8006a42 <HAL_Delay>

  // Read result
  res = HAL_I2C_Master_Receive(hi2c, SI7021_ADDRESS_READ, si7021_buf, 2, 100);
 8006c3a:	f107 0208 	add.w	r2, r7, #8
 8006c3e:	2364      	movs	r3, #100	; 0x64
 8006c40:	9300      	str	r3, [sp, #0]
 8006c42:	2302      	movs	r3, #2
 8006c44:	2181      	movs	r1, #129	; 0x81
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f001 fc3c 	bl	80084c4 <HAL_I2C_Master_Receive>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <si7021_measure_humidity+0x52>
    return SI7021_MEASURE_FAILED;
 8006c56:	4b17      	ldr	r3, [pc, #92]	; (8006cb4 <si7021_measure_humidity+0xac>)
 8006c58:	e024      	b.n	8006ca4 <si7021_measure_humidity+0x9c>
  }

  return (si7021_buf[0] << 8 | si7021_buf[1]) * 125.0 / 65536.0 - 6.0;
 8006c5a:	7a3b      	ldrb	r3, [r7, #8]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	7a7a      	ldrb	r2, [r7, #9]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7f9 fc36 	bl	80004d4 <__aeabi_i2d>
 8006c68:	f04f 0200 	mov.w	r2, #0
 8006c6c:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <si7021_measure_humidity+0xb0>)
 8006c6e:	f7f9 fc9b 	bl	80005a8 <__aeabi_dmul>
 8006c72:	4603      	mov	r3, r0
 8006c74:	460c      	mov	r4, r1
 8006c76:	4618      	mov	r0, r3
 8006c78:	4621      	mov	r1, r4
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <si7021_measure_humidity+0xb4>)
 8006c80:	f7f9 fdbc 	bl	80007fc <__aeabi_ddiv>
 8006c84:	4603      	mov	r3, r0
 8006c86:	460c      	mov	r4, r1
 8006c88:	4618      	mov	r0, r3
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <si7021_measure_humidity+0xb8>)
 8006c92:	f7f9 fad1 	bl	8000238 <__aeabi_dsub>
 8006c96:	4603      	mov	r3, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	4621      	mov	r1, r4
 8006c9e:	f7f9 ff5b 	bl	8000b58 <__aeabi_d2f>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	ee07 3a90 	vmov	s15, r3
}
 8006ca8:	eeb0 0a67 	vmov.f32	s0, s15
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd90      	pop	{r4, r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	477fff00 	.word	0x477fff00
 8006cb8:	405f4000 	.word	0x405f4000
 8006cbc:	40f00000 	.word	0x40f00000
 8006cc0:	40180000 	.word	0x40180000

08006cc4 <si7021_measure_temperature>:

float si7021_measure_temperature(I2C_HandleTypeDef *hi2c)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b086      	sub	sp, #24
 8006cc8:	af02      	add	r7, sp, #8
 8006cca:	6078      	str	r0, [r7, #4]
  uint8_t si7021_buf[4];
  si7021_buf[0] = SI7021_MEASURE_TEMP_NOHOLD;
 8006ccc:	23f3      	movs	r3, #243	; 0xf3
 8006cce:	723b      	strb	r3, [r7, #8]

  int res = HAL_I2C_Master_Transmit(hi2c, SI7021_ADDRESS_WRITE, &si7021_buf[0], 1, 100);
 8006cd0:	f107 0208 	add.w	r2, r7, #8
 8006cd4:	2364      	movs	r3, #100	; 0x64
 8006cd6:	9300      	str	r3, [sp, #0]
 8006cd8:	2301      	movs	r3, #1
 8006cda:	2180      	movs	r1, #128	; 0x80
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f001 fafd 	bl	80082dc <HAL_I2C_Master_Transmit>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	60fb      	str	r3, [r7, #12]
  if (res != HAL_OK) {
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <si7021_measure_temperature+0x2e>
    return SI7021_MEASURE_FAILED;
 8006cec:	eddf 7a07 	vldr	s15, [pc, #28]	; 8006d0c <si7021_measure_temperature+0x48>
 8006cf0:	e007      	b.n	8006d02 <si7021_measure_temperature+0x3e>
  }
  HAL_Delay(30);
 8006cf2:	201e      	movs	r0, #30
 8006cf4:	f7ff fea5 	bl	8006a42 <HAL_Delay>

  return _read_and_convert_temperature(hi2c);
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f7ff fee1 	bl	8006ac0 <_read_and_convert_temperature>
 8006cfe:	eef0 7a40 	vmov.f32	s15, s0
}
 8006d02:	eeb0 0a67 	vmov.f32	s0, s15
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	477fff00 	.word	0x477fff00

08006d10 <LL_RCC_SetRTCClockSource>:
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8006d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8006d30:	bf00      	nop
 8006d32:	370c      	adds	r7, #12
 8006d34:	46bd      	mov	sp, r7
 8006d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3a:	4770      	bx	lr

08006d3c <LL_RCC_EnableRTC>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8006d54:	bf00      	nop
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <LL_AHB2_GRP1_EnableClock>:
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b085      	sub	sp, #20
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d82:	68fb      	ldr	r3, [r7, #12]
}
 8006d84:	bf00      	nop
 8006d86:	3714      	adds	r7, #20
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_AHB3_GRP1_EnableClock>:
{
 8006d90:	b480      	push	{r7}
 8006d92:	b085      	sub	sp, #20
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006d98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006d9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4313      	orrs	r3, r2
 8006da6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006db4:	68fb      	ldr	r3, [r7, #12]
}
 8006db6:	bf00      	nop
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <LL_APB1_GRP1_EnableClock>:
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006dd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006dda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006dde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4013      	ands	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006de6:	68fb      	ldr	r3, [r7, #12]
}
 8006de8:	bf00      	nop
 8006dea:	3714      	adds	r7, #20
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <LL_APB2_GRP1_EnableClock>:
{
 8006df4:	b480      	push	{r7}
 8006df6:	b085      	sub	sp, #20
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8006dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e00:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e10:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4013      	ands	r3, r2
 8006e16:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e18:	68fb      	ldr	r3, [r7, #12]
}
 8006e1a:	bf00      	nop
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006e2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006e2e:	f7ff ffaf 	bl	8006d90 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006e32:	2200      	movs	r2, #0
 8006e34:	210f      	movs	r1, #15
 8006e36:	f06f 0001 	mvn.w	r0, #1
 8006e3a:	f000 ff91 	bl	8007d60 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 5, 0);
 8006e3e:	2200      	movs	r2, #0
 8006e40:	2105      	movs	r1, #5
 8006e42:	202e      	movs	r0, #46	; 0x2e
 8006e44:	f000 ff8c 	bl	8007d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006e48:	202e      	movs	r0, #46	; 0x2e
 8006e4a:	f000 ffa3 	bl	8007d94 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn , 6, 0);
 8006e4e:	2200      	movs	r2, #0
 8006e50:	2106      	movs	r1, #6
 8006e52:	202c      	movs	r0, #44	; 0x2c
 8006e54:	f000 ff84 	bl	8007d60 <HAL_NVIC_SetPriority>
  HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn , 6, 0);
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2106      	movs	r1, #6
 8006e5c:	202d      	movs	r0, #45	; 0x2d
 8006e5e:	f000 ff7f 	bl	8007d60 <HAL_NVIC_SetPriority>

  /* USER CODE END MspInit 1 */
}
 8006e62:	bf00      	nop
 8006e64:	bd80      	pop	{r7, pc}
	...

08006e68 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b082      	sub	sp, #8
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a0b      	ldr	r2, [pc, #44]	; (8006ea4 <HAL_RTC_MspInit+0x3c>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d110      	bne.n	8006e9c <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006e7a:	f002 f967 	bl	800914c <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 8006e7e:	f002 f965 	bl	800914c <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 8006e82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8006e86:	f7ff ff43 	bl	8006d10 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006e8a:	f7ff ff57 	bl	8006d3c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8006e8e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8006e92:	f7ff ff96 	bl	8006dc2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f004 faaa 	bl	800b3f0 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006e9c:	bf00      	nop
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	40002800 	.word	0x40002800

08006ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006eb0:	f107 030c 	add.w	r3, r7, #12
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	605a      	str	r2, [r3, #4]
 8006eba:	609a      	str	r2, [r3, #8]
 8006ebc:	60da      	str	r2, [r3, #12]
 8006ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a0f      	ldr	r2, [pc, #60]	; (8006f04 <HAL_I2C_MspInit+0x5c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d117      	bne.n	8006efa <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006eca:	2002      	movs	r0, #2
 8006ecc:	f7ff ff47 	bl	8006d5e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006ed0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006ed4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006ed6:	2312      	movs	r3, #18
 8006ed8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006eda:	2301      	movs	r3, #1
 8006edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006ee2:	2304      	movs	r3, #4
 8006ee4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	4619      	mov	r1, r3
 8006eec:	4806      	ldr	r0, [pc, #24]	; (8006f08 <HAL_I2C_MspInit+0x60>)
 8006eee:	f000 ff89 	bl	8007e04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ef2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8006ef6:	f7ff ff64 	bl	8006dc2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006efa:	bf00      	nop
 8006efc:	3720      	adds	r7, #32
 8006efe:	46bd      	mov	sp, r7
 8006f00:	bd80      	pop	{r7, pc}
 8006f02:	bf00      	nop
 8006f04:	40005400 	.word	0x40005400
 8006f08:	48000400 	.word	0x48000400

08006f0c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b088      	sub	sp, #32
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f14:	f107 030c 	add.w	r3, r7, #12
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
 8006f1c:	605a      	str	r2, [r3, #4]
 8006f1e:	609a      	str	r2, [r3, #8]
 8006f20:	60da      	str	r2, [r3, #12]
 8006f22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a0f      	ldr	r2, [pc, #60]	; (8006f68 <HAL_SPI_MspInit+0x5c>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d117      	bne.n	8006f5e <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8006f2e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006f32:	f7ff ff5f 	bl	8006df4 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f36:	2001      	movs	r0, #1
 8006f38:	f7ff ff11 	bl	8006d5e <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8006f3c:	2382      	movs	r3, #130	; 0x82
 8006f3e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f40:	2302      	movs	r3, #2
 8006f42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f44:	2300      	movs	r3, #0
 8006f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006f4c:	2305      	movs	r3, #5
 8006f4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f50:	f107 030c 	add.w	r3, r7, #12
 8006f54:	4619      	mov	r1, r3
 8006f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f5a:	f000 ff53 	bl	8007e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006f5e:	bf00      	nop
 8006f60:	3720      	adds	r7, #32
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40013000 	.word	0x40013000

08006f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a09      	ldr	r2, [pc, #36]	; (8006fa0 <HAL_TIM_Base_MspInit+0x34>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d10b      	bne.n	8006f96 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006f7e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006f82:	f7ff ff37 	bl	8006df4 <LL_APB2_GRP1_EnableClock>
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 15, 0);
 8006f86:	2200      	movs	r2, #0
 8006f88:	210f      	movs	r1, #15
 8006f8a:	2019      	movs	r0, #25
 8006f8c:	f000 fee8 	bl	8007d60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006f90:	2019      	movs	r0, #25
 8006f92:	f000 feff 	bl	8007d94 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	40012c00 	.word	0x40012c00

08006fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b088      	sub	sp, #32
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006fac:	f107 030c 	add.w	r3, r7, #12
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	605a      	str	r2, [r3, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
 8006fb8:	60da      	str	r2, [r3, #12]
 8006fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0d      	ldr	r2, [pc, #52]	; (8006ff8 <HAL_TIM_MspPostInit+0x54>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d114      	bne.n	8006ff0 <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fc6:	2001      	movs	r0, #1
 8006fc8:	f7ff fec9 	bl	8006d5e <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd2:	2302      	movs	r3, #2
 8006fd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fe2:	f107 030c 	add.w	r3, r7, #12
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006fec:	f000 ff0a 	bl	8007e04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8006ff0:	bf00      	nop
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	40012c00 	.word	0x40012c00

08006ffc <LL_APB2_GRP1_EnableClock>:
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b085      	sub	sp, #20
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8007004:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007008:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800700a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4313      	orrs	r3, r2
 8007012:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8007014:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007018:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4013      	ands	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007020:	68fb      	ldr	r3, [r7, #12]
}
 8007022:	bf00      	nop
 8007024:	3714      	adds	r7, #20
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08c      	sub	sp, #48	; 0x30
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8007038:	2300      	movs	r3, #0
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800703c:	2300      	movs	r3, #0
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 8007040:	2200      	movs	r2, #0
 8007042:	6879      	ldr	r1, [r7, #4]
 8007044:	201a      	movs	r0, #26
 8007046:	f000 fe8b 	bl	8007d60 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800704a:	201a      	movs	r0, #26
 800704c:	f000 fea2 	bl	8007d94 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8007050:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8007054:	f7ff ffd2 	bl	8006ffc <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007058:	f107 0208 	add.w	r2, r7, #8
 800705c:	f107 030c 	add.w	r3, r7, #12
 8007060:	4611      	mov	r1, r2
 8007062:	4618      	mov	r0, r3
 8007064:	f003 f972 	bl	800a34c <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8007068:	f003 f95a 	bl	800a320 <HAL_RCC_GetPCLK2Freq>
 800706c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800706e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007070:	4a12      	ldr	r2, [pc, #72]	; (80070bc <HAL_InitTick+0x8c>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	0c9b      	lsrs	r3, r3, #18
 8007078:	3b01      	subs	r3, #1
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800707c:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <HAL_InitTick+0x90>)
 800707e:	4a11      	ldr	r2, [pc, #68]	; (80070c4 <HAL_InitTick+0x94>)
 8007080:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8007082:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <HAL_InitTick+0x90>)
 8007084:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007088:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800708a:	4a0d      	ldr	r2, [pc, #52]	; (80070c0 <HAL_InitTick+0x90>)
 800708c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708e:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8007090:	4b0b      	ldr	r3, [pc, #44]	; (80070c0 <HAL_InitTick+0x90>)
 8007092:	2200      	movs	r2, #0
 8007094:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007096:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <HAL_InitTick+0x90>)
 8007098:	2200      	movs	r2, #0
 800709a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800709c:	4808      	ldr	r0, [pc, #32]	; (80070c0 <HAL_InitTick+0x90>)
 800709e:	f004 fd4b 	bl	800bb38 <HAL_TIM_Base_Init>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d104      	bne.n	80070b2 <HAL_InitTick+0x82>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 80070a8:	4805      	ldr	r0, [pc, #20]	; (80070c0 <HAL_InitTick+0x90>)
 80070aa:	f004 fd9d 	bl	800bbe8 <HAL_TIM_Base_Start_IT>
 80070ae:	4603      	mov	r3, r0
 80070b0:	e000      	b.n	80070b4 <HAL_InitTick+0x84>
  }

  /* Return function status */
  return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3730      	adds	r7, #48	; 0x30
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	431bde83 	.word	0x431bde83
 80070c0:	2002e30c 	.word	0x2002e30c
 80070c4:	40014800 	.word	0x40014800

080070c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80070d6:	b480      	push	{r7}
 80070d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80070da:	e7fe      	b.n	80070da <HardFault_Handler+0x4>

080070dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80070e0:	e7fe      	b.n	80070e0 <MemManage_Handler+0x4>

080070e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80070e2:	b480      	push	{r7}
 80070e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80070e6:	e7fe      	b.n	80070e6 <BusFault_Handler+0x4>

080070e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80070e8:	b480      	push	{r7}
 80070ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80070ec:	e7fe      	b.n	80070ec <UsageFault_Handler+0x4>

080070ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070ee:	b480      	push	{r7}
 80070f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070f2:	bf00      	nop
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8007100:	4802      	ldr	r0, [pc, #8]	; (800710c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8007102:	f004 ff83 	bl	800c00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8007106:	bf00      	nop
 8007108:	bd80      	pop	{r7, pc}
 800710a:	bf00      	nop
 800710c:	2002e30c 	.word	0x2002e30c

08007110 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007114:	f001 f82e 	bl	8008174 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007118:	bf00      	nop
 800711a:	bd80      	pop	{r7, pc}

0800711c <EXTI3_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void EXTI3_IRQHandler(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8007120:	2008      	movs	r0, #8
 8007122:	f001 f80f 	bl	8008144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8007126:	bf00      	nop
 8007128:	bd80      	pop	{r7, pc}

0800712a <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800712a:	b580      	push	{r7, lr}
 800712c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800712e:	2010      	movs	r0, #16
 8007130:	f001 f808 	bl	8008144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8007134:	bf00      	nop
 8007136:	bd80      	pop	{r7, pc}

08007138 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800713c:	2020      	movs	r0, #32
 800713e:	f001 f801 	bl	8008144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8007142:	bf00      	nop
 8007144:	bd80      	pop	{r7, pc}
	...

08007148 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800714c:	4802      	ldr	r0, [pc, #8]	; (8007158 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800714e:	f004 ff5d 	bl	800c00c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8007152:	bf00      	nop
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	2002e24c 	.word	0x2002e24c

0800715c <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8007160:	f7fb ffbc 	bl	80030dc <HW_TS_RTC_Wakeup_Handler>
}
 8007164:	bf00      	nop
 8007166:	bd80      	pop	{r7, pc}

08007168 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 800716c:	f7fa fbaa 	bl	80018c4 <HW_IPCC_Tx_Handler>

  return;
 8007170:	bf00      	nop
}
 8007172:	bd80      	pop	{r7, pc}

08007174 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8007178:	f7fa fb6c 	bl	8001854 <HW_IPCC_Rx_Handler>
  return;
 800717c:	bf00      	nop
}
 800717e:	bd80      	pop	{r7, pc}

08007180 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800718c:	2300      	movs	r3, #0
 800718e:	617b      	str	r3, [r7, #20]
 8007190:	e00a      	b.n	80071a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007192:	f3af 8000 	nop.w
 8007196:	4601      	mov	r1, r0
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	60ba      	str	r2, [r7, #8]
 800719e:	b2ca      	uxtb	r2, r1
 80071a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	3301      	adds	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	429a      	cmp	r2, r3
 80071ae:	dbf0      	blt.n	8007192 <_read+0x12>
	}

return len;
 80071b0:	687b      	ldr	r3, [r7, #4]
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3718      	adds	r7, #24
 80071b6:	46bd      	mov	sp, r7
 80071b8:	bd80      	pop	{r7, pc}

080071ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80071ba:	b480      	push	{r7}
 80071bc:	b083      	sub	sp, #12
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
	return -1;
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80071e2:	605a      	str	r2, [r3, #4]
	return 0;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr

080071f2 <_isatty>:

int _isatty(int file)
{
 80071f2:	b480      	push	{r7}
 80071f4:	b083      	sub	sp, #12
 80071f6:	af00      	add	r7, sp, #0
 80071f8:	6078      	str	r0, [r7, #4]
	return 1;
 80071fa:	2301      	movs	r3, #1
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	370c      	adds	r7, #12
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr

08007208 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007208:	b480      	push	{r7}
 800720a:	b085      	sub	sp, #20
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
	return 0;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3714      	adds	r7, #20
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800722c:	4b11      	ldr	r3, [pc, #68]	; (8007274 <_sbrk+0x50>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d102      	bne.n	800723a <_sbrk+0x16>
		heap_end = &end;
 8007234:	4b0f      	ldr	r3, [pc, #60]	; (8007274 <_sbrk+0x50>)
 8007236:	4a10      	ldr	r2, [pc, #64]	; (8007278 <_sbrk+0x54>)
 8007238:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800723a:	4b0e      	ldr	r3, [pc, #56]	; (8007274 <_sbrk+0x50>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007240:	4b0c      	ldr	r3, [pc, #48]	; (8007274 <_sbrk+0x50>)
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	4413      	add	r3, r2
 8007248:	466a      	mov	r2, sp
 800724a:	4293      	cmp	r3, r2
 800724c:	d907      	bls.n	800725e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800724e:	f00c fd6b 	bl	8013d28 <__errno>
 8007252:	4602      	mov	r2, r0
 8007254:	230c      	movs	r3, #12
 8007256:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007258:	f04f 33ff 	mov.w	r3, #4294967295
 800725c:	e006      	b.n	800726c <_sbrk+0x48>
	}

	heap_end += incr;
 800725e:	4b05      	ldr	r3, [pc, #20]	; (8007274 <_sbrk+0x50>)
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4413      	add	r3, r2
 8007266:	4a03      	ldr	r2, [pc, #12]	; (8007274 <_sbrk+0x50>)
 8007268:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800726a:	68fb      	ldr	r3, [r7, #12]
}
 800726c:	4618      	mov	r0, r3
 800726e:	3710      	adds	r7, #16
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	200003a4 	.word	0x200003a4
 8007278:	2002e3f8 	.word	0x2002e3f8

0800727c <veml_PushState>:
  HAL_I2C_Master_Transmit(&VEML_State.i2cHandle, VEML_ADDR, Data, 3, HAL_MAX_DELAY);
}



HAL_StatusTypeDef veml_PushState(){ //helper to push power/gain/it to VEML7700
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af04      	add	r7, sp, #16

	//main config register; gain and integration time
	HAL_StatusTypeDef resp = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[2] = {0x00, 0x00};
 8007286:	2300      	movs	r3, #0
 8007288:	713b      	strb	r3, [r7, #4]
 800728a:	2300      	movs	r3, #0
 800728c:	717b      	strb	r3, [r7, #5]
	out_data[1] |= (VEML_State.gain << 3);
 800728e:	797b      	ldrb	r3, [r7, #5]
 8007290:	b25a      	sxtb	r2, r3
 8007292:	4b33      	ldr	r3, [pc, #204]	; (8007360 <veml_PushState+0xe4>)
 8007294:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007298:	00db      	lsls	r3, r3, #3
 800729a:	b25b      	sxtb	r3, r3
 800729c:	4313      	orrs	r3, r2
 800729e:	b25b      	sxtb	r3, r3
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	717b      	strb	r3, [r7, #5]
	out_data[1] |= ((VEML_State.integrationTime & 0x0C) >> 2);
 80072a4:	797b      	ldrb	r3, [r7, #5]
 80072a6:	b25a      	sxtb	r2, r3
 80072a8:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <veml_PushState+0xe4>)
 80072aa:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80072ae:	109b      	asrs	r3, r3, #2
 80072b0:	b25b      	sxtb	r3, r3
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	b25b      	sxtb	r3, r3
 80072b8:	4313      	orrs	r3, r2
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	717b      	strb	r3, [r7, #5]
	out_data[0] |= ((VEML_State.integrationTime & 0x03) << 6);
 80072c0:	793b      	ldrb	r3, [r7, #4]
 80072c2:	b25a      	sxtb	r2, r3
 80072c4:	4b26      	ldr	r3, [pc, #152]	; (8007360 <veml_PushState+0xe4>)
 80072c6:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 80072ca:	019b      	lsls	r3, r3, #6
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	4313      	orrs	r3, r2
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	713b      	strb	r3, [r7, #4]
	out_data[0] |= (VEML7700_PERS_1 << 4);
 80072d6:	793b      	ldrb	r3, [r7, #4]
 80072d8:	713b      	strb	r3, [r7, #4]

	//out_data |= (VEML_State.gain << 11);
	//out_data |= (VEML_State.integrationTime << 6);
	//out_data |= (VEML7700_PERS_1 << 4);

	while (resp == HAL_ERROR){
 80072da:	e00e      	b.n	80072fa <veml_PushState+0x7e>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 80072dc:	f04f 33ff 	mov.w	r3, #4294967295
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	2302      	movs	r3, #2
 80072e4:	9301      	str	r3, [sp, #4]
 80072e6:	1d3b      	adds	r3, r7, #4
 80072e8:	9300      	str	r3, [sp, #0]
 80072ea:	2301      	movs	r3, #1
 80072ec:	2200      	movs	r2, #0
 80072ee:	2120      	movs	r1, #32
 80072f0:	481b      	ldr	r0, [pc, #108]	; (8007360 <veml_PushState+0xe4>)
 80072f2:	f001 f9dd 	bl	80086b0 <HAL_I2C_Mem_Write>
 80072f6:	4603      	mov	r3, r0
 80072f8:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 80072fa:	79fb      	ldrb	r3, [r7, #7]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d0ed      	beq.n	80072dc <veml_PushState+0x60>
	  						   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	//power save config register
	resp = HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	71fb      	strb	r3, [r7, #7]
	out_data[0] = 0x00;
 8007304:	2300      	movs	r3, #0
 8007306:	713b      	strb	r3, [r7, #4]
	out_data[1] = 0x00;
 8007308:	2300      	movs	r3, #0
 800730a:	717b      	strb	r3, [r7, #5]

	out_data[0] |= (VEML_State.powerSaveMode << 1);
 800730c:	793b      	ldrb	r3, [r7, #4]
 800730e:	b25a      	sxtb	r2, r3
 8007310:	4b13      	ldr	r3, [pc, #76]	; (8007360 <veml_PushState+0xe4>)
 8007312:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	b25b      	sxtb	r3, r3
 800731a:	4313      	orrs	r3, r2
 800731c:	b25b      	sxtb	r3, r3
 800731e:	b2db      	uxtb	r3, r3
 8007320:	713b      	strb	r3, [r7, #4]
	out_data[0] |= VEML_State.powerSaveEnable;
 8007322:	793a      	ldrb	r2, [r7, #4]
 8007324:	4b0e      	ldr	r3, [pc, #56]	; (8007360 <veml_PushState+0xe4>)
 8007326:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800732a:	4313      	orrs	r3, r2
 800732c:	b2db      	uxtb	r3, r3
 800732e:	713b      	strb	r3, [r7, #4]


	//out_data |= (VEML_State.powerSaveMode << 1);
	//out_data |= VEML_State.powerSaveEnable;

	while (resp == HAL_ERROR){
 8007330:	e00e      	b.n	8007350 <veml_PushState+0xd4>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 8007332:	f04f 33ff 	mov.w	r3, #4294967295
 8007336:	9302      	str	r3, [sp, #8]
 8007338:	2302      	movs	r3, #2
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	1d3b      	adds	r3, r7, #4
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2301      	movs	r3, #1
 8007342:	2203      	movs	r2, #3
 8007344:	2120      	movs	r1, #32
 8007346:	4806      	ldr	r0, [pc, #24]	; (8007360 <veml_PushState+0xe4>)
 8007348:	f001 f9b2 	bl	80086b0 <HAL_I2C_Mem_Write>
 800734c:	4603      	mov	r3, r0
 800734e:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8007350:	79fb      	ldrb	r3, [r7, #7]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d0ed      	beq.n	8007332 <veml_PushState+0xb6>
							   out_data, 2,
							   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	return resp;
 8007356:	79fb      	ldrb	r3, [r7, #7]
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}
 8007360:	2002e358 	.word	0x2002e358

08007364 <veml_Setup>:

HAL_StatusTypeDef veml_Setup(I2C_HandleTypeDef i2cHandle, VEML7700_Mode_t Mode){
 8007364:	b084      	sub	sp, #16
 8007366:	b580      	push	{r7, lr}
 8007368:	af00      	add	r7, sp, #0
 800736a:	f107 0c08 	add.w	ip, r7, #8
 800736e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	VEML_State.i2cHandle = i2cHandle;
 8007372:	4b28      	ldr	r3, [pc, #160]	; (8007414 <veml_Setup+0xb0>)
 8007374:	4618      	mov	r0, r3
 8007376:	f107 0108 	add.w	r1, r7, #8
 800737a:	234c      	movs	r3, #76	; 0x4c
 800737c:	461a      	mov	r2, r3
 800737e:	f00c fcfd 	bl	8013d7c <memcpy>
	VEML_State.autoGain = 0;
 8007382:	4b24      	ldr	r3, [pc, #144]	; (8007414 <veml_Setup+0xb0>)
 8007384:	2200      	movs	r2, #0
 8007386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	switch (Mode){
 800738a:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 800738e:	2b01      	cmp	r3, #1
 8007390:	d014      	beq.n	80073bc <veml_Setup+0x58>
 8007392:	2b02      	cmp	r3, #2
 8007394:	d023      	beq.n	80073de <veml_Setup+0x7a>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d132      	bne.n	8007400 <veml_Setup+0x9c>
		case VEML_5S_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE4;
 800739a:	4b1e      	ldr	r3, [pc, #120]	; (8007414 <veml_Setup+0xb0>)
 800739c:	2203      	movs	r2, #3
 800739e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x01;
 80073a2:	4b1c      	ldr	r3, [pc, #112]	; (8007414 <veml_Setup+0xb0>)
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 80073aa:	4b1a      	ldr	r3, [pc, #104]	; (8007414 <veml_Setup+0xb0>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_800MS;
 80073b2:	4b18      	ldr	r3, [pc, #96]	; (8007414 <veml_Setup+0xb0>)
 80073b4:	2203      	movs	r2, #3
 80073b6:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 80073ba:	e021      	b.n	8007400 <veml_Setup+0x9c>

		case VEML_100MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 80073bc:	4b15      	ldr	r3, [pc, #84]	; (8007414 <veml_Setup+0xb0>)
 80073be:	2200      	movs	r2, #0
 80073c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 80073c4:	4b13      	ldr	r3, [pc, #76]	; (8007414 <veml_Setup+0xb0>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 80073cc:	4b11      	ldr	r3, [pc, #68]	; (8007414 <veml_Setup+0xb0>)
 80073ce:	2201      	movs	r2, #1
 80073d0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_100MS;
 80073d4:	4b0f      	ldr	r3, [pc, #60]	; (8007414 <veml_Setup+0xb0>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 80073dc:	e010      	b.n	8007400 <veml_Setup+0x9c>

		case VEML_25MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 80073de:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <veml_Setup+0xb0>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 80073e6:	4b0b      	ldr	r3, [pc, #44]	; (8007414 <veml_Setup+0xb0>)
 80073e8:	2200      	movs	r2, #0
 80073ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_2;
 80073ee:	4b09      	ldr	r3, [pc, #36]	; (8007414 <veml_Setup+0xb0>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_25MS;
 80073f6:	4b07      	ldr	r3, [pc, #28]	; (8007414 <veml_Setup+0xb0>)
 80073f8:	220c      	movs	r2, #12
 80073fa:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 80073fe:	bf00      	nop
	}

	return veml_PushState();
 8007400:	f7ff ff3c 	bl	800727c <veml_PushState>
 8007404:	4603      	mov	r3, r0

}
 8007406:	4618      	mov	r0, r3
 8007408:	46bd      	mov	sp, r7
 800740a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800740e:	b004      	add	sp, #16
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	2002e358 	.word	0x2002e358

08007418 <autoGain>:
HAL_StatusTypeDef veml_Set_IntegrationTime(uint8_t integrationTime){
	VEML_State.integrationTime = integrationTime;
	return veml_PushState();
}

void autoGain(uint16_t raw_data){
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	4603      	mov	r3, r0
 8007420:	80fb      	strh	r3, [r7, #6]

	if (VEML_State.autoGain){ //if we are autoGaining
 8007422:	4b29      	ldr	r3, [pc, #164]	; (80074c8 <autoGain+0xb0>)
 8007424:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007428:	2b00      	cmp	r3, #0
 800742a:	d049      	beq.n	80074c0 <autoGain+0xa8>

		//if raw value is > ~90% of 0xFFFF and we're not at min gain
		if (VEML_State.gain != VEML7700_GAIN_1_8 && raw_data > 0xE665) {
 800742c:	4b26      	ldr	r3, [pc, #152]	; (80074c8 <autoGain+0xb0>)
 800742e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007432:	2b02      	cmp	r3, #2
 8007434:	d01f      	beq.n	8007476 <autoGain+0x5e>
 8007436:	88fb      	ldrh	r3, [r7, #6]
 8007438:	f24e 6265 	movw	r2, #58981	; 0xe665
 800743c:	4293      	cmp	r3, r2
 800743e:	d91a      	bls.n	8007476 <autoGain+0x5e>
			switch (VEML_State.gain){
 8007440:	4b21      	ldr	r3, [pc, #132]	; (80074c8 <autoGain+0xb0>)
 8007442:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007446:	2b01      	cmp	r3, #1
 8007448:	d004      	beq.n	8007454 <autoGain+0x3c>
 800744a:	2b03      	cmp	r3, #3
 800744c:	d00c      	beq.n	8007468 <autoGain+0x50>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d005      	beq.n	800745e <autoGain+0x46>
 8007452:	e00e      	b.n	8007472 <autoGain+0x5a>
				case VEML7700_GAIN_2:
					VEML_State.gain = VEML7700_GAIN_1;
 8007454:	4b1c      	ldr	r3, [pc, #112]	; (80074c8 <autoGain+0xb0>)
 8007456:	2200      	movs	r2, #0
 8007458:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 800745c:	e009      	b.n	8007472 <autoGain+0x5a>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_1_4;
 800745e:	4b1a      	ldr	r3, [pc, #104]	; (80074c8 <autoGain+0xb0>)
 8007460:	2203      	movs	r2, #3
 8007462:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8007466:	e004      	b.n	8007472 <autoGain+0x5a>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1_8;
 8007468:	4b17      	ldr	r3, [pc, #92]	; (80074c8 <autoGain+0xb0>)
 800746a:	2202      	movs	r2, #2
 800746c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8007470:	bf00      	nop
			}
			veml_PushState();
 8007472:	f7ff ff03 	bl	800727c <veml_PushState>
		}

		//if raw value is < ~45% of 0xFFFF and we're not at max gain
		if (VEML_State.gain != VEML7700_GAIN_2 && raw_data < 0x7332) {
 8007476:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <autoGain+0xb0>)
 8007478:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800747c:	2b01      	cmp	r3, #1
 800747e:	d01f      	beq.n	80074c0 <autoGain+0xa8>
 8007480:	88fb      	ldrh	r3, [r7, #6]
 8007482:	f247 3231 	movw	r2, #29489	; 0x7331
 8007486:	4293      	cmp	r3, r2
 8007488:	d81a      	bhi.n	80074c0 <autoGain+0xa8>
			switch (VEML_State.gain){
 800748a:	4b0f      	ldr	r3, [pc, #60]	; (80074c8 <autoGain+0xb0>)
 800748c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007490:	2b02      	cmp	r3, #2
 8007492:	d004      	beq.n	800749e <autoGain+0x86>
 8007494:	2b03      	cmp	r3, #3
 8007496:	d007      	beq.n	80074a8 <autoGain+0x90>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00a      	beq.n	80074b2 <autoGain+0x9a>
 800749c:	e00e      	b.n	80074bc <autoGain+0xa4>
				case VEML7700_GAIN_1_8:
					VEML_State.gain = VEML7700_GAIN_1_4;
 800749e:	4b0a      	ldr	r3, [pc, #40]	; (80074c8 <autoGain+0xb0>)
 80074a0:	2203      	movs	r2, #3
 80074a2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 80074a6:	e009      	b.n	80074bc <autoGain+0xa4>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1;
 80074a8:	4b07      	ldr	r3, [pc, #28]	; (80074c8 <autoGain+0xb0>)
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 80074b0:	e004      	b.n	80074bc <autoGain+0xa4>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_2;
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <autoGain+0xb0>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 80074ba:	bf00      	nop
			}
			veml_PushState();
 80074bc:	f7ff fede 	bl	800727c <veml_PushState>
		}
	}
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	2002e358 	.word	0x2002e358

080074cc <veml_norm_data>:

float veml_norm_data(uint16_t raw_data){
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	4603      	mov	r3, r0
 80074d4:	80fb      	strh	r3, [r7, #6]

	float lux = (float)raw_data;
 80074d6:	88fb      	ldrh	r3, [r7, #6]
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074e0:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (VEML_State.gain){
 80074e4:	4b3d      	ldr	r3, [pc, #244]	; (80075dc <veml_norm_data+0x110>)
 80074e6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d015      	beq.n	800751a <veml_norm_data+0x4e>
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d00a      	beq.n	8007508 <veml_norm_data+0x3c>
 80074f2:	2b01      	cmp	r3, #1
 80074f4:	d11a      	bne.n	800752c <veml_norm_data+0x60>
		case VEML7700_GAIN_2:
			lux /= 2.0;
 80074f6:	ed97 7a03 	vldr	s14, [r7, #12]
 80074fa:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80074fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007502:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8007506:	e011      	b.n	800752c <veml_norm_data+0x60>
		case VEML7700_GAIN_1_4:
		    lux *= 4;
 8007508:	edd7 7a03 	vldr	s15, [r7, #12]
 800750c:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007510:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007514:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 8007518:	e008      	b.n	800752c <veml_norm_data+0x60>
		case VEML7700_GAIN_1_8:
		    lux *= 8;
 800751a:	edd7 7a03 	vldr	s15, [r7, #12]
 800751e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007522:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007526:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 800752a:	bf00      	nop
	}

	switch (VEML_State.integrationTime){
 800752c:	4b2b      	ldr	r3, [pc, #172]	; (80075dc <veml_norm_data+0x110>)
 800752e:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8007532:	3b01      	subs	r3, #1
 8007534:	2b0b      	cmp	r3, #11
 8007536:	d846      	bhi.n	80075c6 <veml_norm_data+0xfa>
 8007538:	a201      	add	r2, pc, #4	; (adr r2, 8007540 <veml_norm_data+0x74>)
 800753a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753e:	bf00      	nop
 8007540:	08007591 	.word	0x08007591
 8007544:	080075a3 	.word	0x080075a3
 8007548:	080075b5 	.word	0x080075b5
 800754c:	080075c7 	.word	0x080075c7
 8007550:	080075c7 	.word	0x080075c7
 8007554:	080075c7 	.word	0x080075c7
 8007558:	080075c7 	.word	0x080075c7
 800755c:	08007583 	.word	0x08007583
 8007560:	080075c7 	.word	0x080075c7
 8007564:	080075c7 	.word	0x080075c7
 8007568:	080075c7 	.word	0x080075c7
 800756c:	08007571 	.word	0x08007571
	  	case VEML7700_IT_25MS:
	  		lux *= 4;
 8007570:	edd7 7a03 	vldr	s15, [r7, #12]
 8007574:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8007578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800757c:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8007580:	e021      	b.n	80075c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_50MS:
	  		lux *= 2;
 8007582:	edd7 7a03 	vldr	s15, [r7, #12]
 8007586:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800758a:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 800758e:	e01a      	b.n	80075c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_200MS:
	  		lux /= 2.0;
 8007590:	ed97 7a03 	vldr	s14, [r7, #12]
 8007594:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8007598:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800759c:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 80075a0:	e011      	b.n	80075c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_400MS:
	  		lux /= 4.0;
 80075a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80075a6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80075aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075ae:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 80075b2:	e008      	b.n	80075c6 <veml_norm_data+0xfa>
	  	case VEML7700_IT_800MS:
	  		lux /= 8.0;
 80075b4:	ed97 7a03 	vldr	s14, [r7, #12]
 80075b8:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 80075bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075c0:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 80075c4:	bf00      	nop
	}

	return lux;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	ee07 3a90 	vmov	s15, r3
}
 80075cc:	eeb0 0a67 	vmov.f32	s0, s15
 80075d0:	3714      	adds	r7, #20
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr
 80075da:	bf00      	nop
 80075dc:	2002e358 	.word	0x2002e358

080075e0 <veml_Get_Lux>:

float veml_Get_Lux(){
 80075e0:	b5b0      	push	{r4, r5, r7, lr}
 80075e2:	b088      	sub	sp, #32
 80075e4:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 80075e6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80075ea:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 80075f4:	e011      	b.n	800761a <veml_Get_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 80075f6:	f04f 33ff 	mov.w	r3, #4294967295
 80075fa:	9302      	str	r3, [sp, #8]
 80075fc:	2302      	movs	r3, #2
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	463b      	mov	r3, r7
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	2301      	movs	r3, #1
 8007606:	2204      	movs	r2, #4
 8007608:	2120      	movs	r1, #32
 800760a:	4867      	ldr	r0, [pc, #412]	; (80077a8 <veml_Get_Lux+0x1c8>)
 800760c:	f001 f964 	bl	80088d8 <HAL_I2C_Mem_Read>
 8007610:	4603      	mov	r3, r0
 8007612:	737b      	strb	r3, [r7, #13]
							  HAL_MAX_DELAY);

	  //resp = HAL_I2C_Master_Receive(&VEML_State.i2cHandle,
	  //	  	  	  VEML_ADDR,&buffer, 2,
	//			  HAL_MAX_DELAY);
	  current_tries++;
 8007614:	89fb      	ldrh	r3, [r7, #14]
 8007616:	3301      	adds	r3, #1
 8007618:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 800761a:	7b7b      	ldrb	r3, [r7, #13]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d103      	bne.n	8007628 <veml_Get_Lux+0x48>
 8007620:	89fa      	ldrh	r2, [r7, #14]
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	429a      	cmp	r2, r3
 8007626:	d3e6      	bcc.n	80075f6 <veml_Get_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 8007628:	89fa      	ldrh	r2, [r7, #14]
 800762a:	88fb      	ldrh	r3, [r7, #6]
 800762c:	429a      	cmp	r2, r3
 800762e:	d301      	bcc.n	8007634 <veml_Get_Lux+0x54>
	  return -1;
 8007630:	4b5e      	ldr	r3, [pc, #376]	; (80077ac <veml_Get_Lux+0x1cc>)
 8007632:	e090      	b.n	8007756 <veml_Get_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8007634:	787b      	ldrb	r3, [r7, #1]
 8007636:	021b      	lsls	r3, r3, #8
 8007638:	b21a      	sxth	r2, r3
 800763a:	783b      	ldrb	r3, [r7, #0]
 800763c:	b21b      	sxth	r3, r3
 800763e:	4313      	orrs	r3, r2
 8007640:	b21b      	sxth	r3, r3
 8007642:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 8007644:	88bb      	ldrh	r3, [r7, #4]
 8007646:	4618      	mov	r0, r3
 8007648:	f7ff fee6 	bl	8007418 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 800764c:	88bb      	ldrh	r3, [r7, #4]
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff ff3c 	bl	80074cc <veml_norm_data>
 8007654:	ee10 3a10 	vmov	r3, s0
 8007658:	4618      	mov	r0, r3
 800765a:	f7f8 ff4d 	bl	80004f8 <__aeabi_f2d>
 800765e:	a342      	add	r3, pc, #264	; (adr r3, 8007768 <veml_Get_Lux+0x188>)
 8007660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007664:	f7f8 ffa0 	bl	80005a8 <__aeabi_dmul>
 8007668:	4603      	mov	r3, r0
 800766a:	460c      	mov	r4, r1
 800766c:	4618      	mov	r0, r3
 800766e:	4621      	mov	r1, r4
 8007670:	f7f9 fa72 	bl	8000b58 <__aeabi_d2f>
 8007674:	4603      	mov	r3, r0
 8007676:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8007678:	4b4b      	ldr	r3, [pc, #300]	; (80077a8 <veml_Get_Lux+0x1c8>)
 800767a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800767e:	2b02      	cmp	r3, #2
 8007680:	d168      	bne.n	8007754 <veml_Get_Lux+0x174>
 8007682:	4b49      	ldr	r3, [pc, #292]	; (80077a8 <veml_Get_Lux+0x1c8>)
 8007684:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8007688:	2b0c      	cmp	r3, #12
 800768a:	d163      	bne.n	8007754 <veml_Get_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 800768c:	68b8      	ldr	r0, [r7, #8]
 800768e:	f7f8 ff33 	bl	80004f8 <__aeabi_f2d>
 8007692:	4603      	mov	r3, r0
 8007694:	460c      	mov	r4, r1
 8007696:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8007770 <veml_Get_Lux+0x190>
 800769a:	ec44 3b10 	vmov	d0, r3, r4
 800769e:	f00f f973 	bl	8016988 <pow>
 80076a2:	ec51 0b10 	vmov	r0, r1, d0
 80076a6:	a334      	add	r3, pc, #208	; (adr r3, 8007778 <veml_Get_Lux+0x198>)
 80076a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ac:	f7f8 ff7c 	bl	80005a8 <__aeabi_dmul>
 80076b0:	4603      	mov	r3, r0
 80076b2:	460c      	mov	r4, r1
 80076b4:	4625      	mov	r5, r4
 80076b6:	461c      	mov	r4, r3
 80076b8:	68b8      	ldr	r0, [r7, #8]
 80076ba:	f7f8 ff1d 	bl	80004f8 <__aeabi_f2d>
 80076be:	4602      	mov	r2, r0
 80076c0:	460b      	mov	r3, r1
 80076c2:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8007780 <veml_Get_Lux+0x1a0>
 80076c6:	ec43 2b10 	vmov	d0, r2, r3
 80076ca:	f00f f95d 	bl	8016988 <pow>
 80076ce:	ec51 0b10 	vmov	r0, r1, d0
 80076d2:	a32d      	add	r3, pc, #180	; (adr r3, 8007788 <veml_Get_Lux+0x1a8>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f8 ff66 	bl	80005a8 <__aeabi_dmul>
 80076dc:	4602      	mov	r2, r0
 80076de:	460b      	mov	r3, r1
 80076e0:	4620      	mov	r0, r4
 80076e2:	4629      	mov	r1, r5
 80076e4:	f7f8 fda8 	bl	8000238 <__aeabi_dsub>
 80076e8:	4603      	mov	r3, r0
 80076ea:	460c      	mov	r4, r1
 80076ec:	4625      	mov	r5, r4
 80076ee:	461c      	mov	r4, r3
 80076f0:	68b8      	ldr	r0, [r7, #8]
 80076f2:	f7f8 ff01 	bl	80004f8 <__aeabi_f2d>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8007790 <veml_Get_Lux+0x1b0>
 80076fe:	ec43 2b10 	vmov	d0, r2, r3
 8007702:	f00f f941 	bl	8016988 <pow>
 8007706:	ec51 0b10 	vmov	r0, r1, d0
 800770a:	a323      	add	r3, pc, #140	; (adr r3, 8007798 <veml_Get_Lux+0x1b8>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7f8 ff4a 	bl	80005a8 <__aeabi_dmul>
 8007714:	4602      	mov	r2, r0
 8007716:	460b      	mov	r3, r1
 8007718:	4620      	mov	r0, r4
 800771a:	4629      	mov	r1, r5
 800771c:	f7f8 fd8e 	bl	800023c <__adddf3>
 8007720:	4603      	mov	r3, r0
 8007722:	460c      	mov	r4, r1
 8007724:	4625      	mov	r5, r4
 8007726:	461c      	mov	r4, r3
 8007728:	68b8      	ldr	r0, [r7, #8]
 800772a:	f7f8 fee5 	bl	80004f8 <__aeabi_f2d>
 800772e:	a31c      	add	r3, pc, #112	; (adr r3, 80077a0 <veml_Get_Lux+0x1c0>)
 8007730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007734:	f7f8 ff38 	bl	80005a8 <__aeabi_dmul>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4620      	mov	r0, r4
 800773e:	4629      	mov	r1, r5
 8007740:	f7f8 fd7c 	bl	800023c <__adddf3>
 8007744:	4603      	mov	r3, r0
 8007746:	460c      	mov	r4, r1
 8007748:	4618      	mov	r0, r3
 800774a:	4621      	mov	r1, r4
 800774c:	f7f9 fa04 	bl	8000b58 <__aeabi_d2f>
 8007750:	4603      	mov	r3, r0
 8007752:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	ee07 3a90 	vmov	s15, r3
}
 800775a:	eeb0 0a67 	vmov.f32	s0, s15
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bdb0      	pop	{r4, r5, r7, pc}
 8007764:	f3af 8000 	nop.w
 8007768:	487fcb92 	.word	0x487fcb92
 800776c:	3fad7dbf 	.word	0x3fad7dbf
 8007770:	00000000 	.word	0x00000000
 8007774:	40100000 	.word	0x40100000
 8007778:	b18f283b 	.word	0xb18f283b
 800777c:	3d65287a 	.word	0x3d65287a
 8007780:	00000000 	.word	0x00000000
 8007784:	40080000 	.word	0x40080000
 8007788:	c91ef46e 	.word	0xc91ef46e
 800778c:	3e442b86 	.word	0x3e442b86
 8007790:	00000000 	.word	0x00000000
 8007794:	40000000 	.word	0x40000000
 8007798:	2e18cab0 	.word	0x2e18cab0
 800779c:	3f155c91 	.word	0x3f155c91
 80077a0:	b98c7e28 	.word	0xb98c7e28
 80077a4:	3ff0096b 	.word	0x3ff0096b
 80077a8:	2002e358 	.word	0x2002e358
 80077ac:	bf800000 	.word	0xbf800000

080077b0 <veml_Get_White_Lux>:

float veml_Get_White_Lux(){
 80077b0:	b5b0      	push	{r4, r5, r7, lr}
 80077b2:	b088      	sub	sp, #32
 80077b4:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 80077b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80077ba:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 80077bc:	2300      	movs	r3, #0
 80077be:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 80077c4:	e011      	b.n	80077ea <veml_Get_White_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 80077c6:	f04f 33ff 	mov.w	r3, #4294967295
 80077ca:	9302      	str	r3, [sp, #8]
 80077cc:	2302      	movs	r3, #2
 80077ce:	9301      	str	r3, [sp, #4]
 80077d0:	463b      	mov	r3, r7
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	2301      	movs	r3, #1
 80077d6:	2205      	movs	r2, #5
 80077d8:	2120      	movs	r1, #32
 80077da:	4867      	ldr	r0, [pc, #412]	; (8007978 <veml_Get_White_Lux+0x1c8>)
 80077dc:	f001 f87c 	bl	80088d8 <HAL_I2C_Mem_Read>
 80077e0:	4603      	mov	r3, r0
 80077e2:	737b      	strb	r3, [r7, #13]
			  	  	  	  	  VEML_ADDR,
							  VEML7700_WHITE_DATA, 1,
							  buffer, 2,
							  HAL_MAX_DELAY);
	  current_tries++;
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	3301      	adds	r3, #1
 80077e8:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 80077ea:	7b7b      	ldrb	r3, [r7, #13]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d103      	bne.n	80077f8 <veml_Get_White_Lux+0x48>
 80077f0:	89fa      	ldrh	r2, [r7, #14]
 80077f2:	88fb      	ldrh	r3, [r7, #6]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d3e6      	bcc.n	80077c6 <veml_Get_White_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 80077f8:	89fa      	ldrh	r2, [r7, #14]
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d301      	bcc.n	8007804 <veml_Get_White_Lux+0x54>
	  return -1;
 8007800:	4b5e      	ldr	r3, [pc, #376]	; (800797c <veml_Get_White_Lux+0x1cc>)
 8007802:	e090      	b.n	8007926 <veml_Get_White_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8007804:	787b      	ldrb	r3, [r7, #1]
 8007806:	021b      	lsls	r3, r3, #8
 8007808:	b21a      	sxth	r2, r3
 800780a:	783b      	ldrb	r3, [r7, #0]
 800780c:	b21b      	sxth	r3, r3
 800780e:	4313      	orrs	r3, r2
 8007810:	b21b      	sxth	r3, r3
 8007812:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 8007814:	88bb      	ldrh	r3, [r7, #4]
 8007816:	4618      	mov	r0, r3
 8007818:	f7ff fdfe 	bl	8007418 <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 800781c:	88bb      	ldrh	r3, [r7, #4]
 800781e:	4618      	mov	r0, r3
 8007820:	f7ff fe54 	bl	80074cc <veml_norm_data>
 8007824:	ee10 3a10 	vmov	r3, s0
 8007828:	4618      	mov	r0, r3
 800782a:	f7f8 fe65 	bl	80004f8 <__aeabi_f2d>
 800782e:	a342      	add	r3, pc, #264	; (adr r3, 8007938 <veml_Get_White_Lux+0x188>)
 8007830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007834:	f7f8 feb8 	bl	80005a8 <__aeabi_dmul>
 8007838:	4603      	mov	r3, r0
 800783a:	460c      	mov	r4, r1
 800783c:	4618      	mov	r0, r3
 800783e:	4621      	mov	r1, r4
 8007840:	f7f9 f98a 	bl	8000b58 <__aeabi_d2f>
 8007844:	4603      	mov	r3, r0
 8007846:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8007848:	4b4b      	ldr	r3, [pc, #300]	; (8007978 <veml_Get_White_Lux+0x1c8>)
 800784a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800784e:	2b02      	cmp	r3, #2
 8007850:	d168      	bne.n	8007924 <veml_Get_White_Lux+0x174>
 8007852:	4b49      	ldr	r3, [pc, #292]	; (8007978 <veml_Get_White_Lux+0x1c8>)
 8007854:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8007858:	2b0c      	cmp	r3, #12
 800785a:	d163      	bne.n	8007924 <veml_Get_White_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 800785c:	68b8      	ldr	r0, [r7, #8]
 800785e:	f7f8 fe4b 	bl	80004f8 <__aeabi_f2d>
 8007862:	4603      	mov	r3, r0
 8007864:	460c      	mov	r4, r1
 8007866:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8007940 <veml_Get_White_Lux+0x190>
 800786a:	ec44 3b10 	vmov	d0, r3, r4
 800786e:	f00f f88b 	bl	8016988 <pow>
 8007872:	ec51 0b10 	vmov	r0, r1, d0
 8007876:	a334      	add	r3, pc, #208	; (adr r3, 8007948 <veml_Get_White_Lux+0x198>)
 8007878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800787c:	f7f8 fe94 	bl	80005a8 <__aeabi_dmul>
 8007880:	4603      	mov	r3, r0
 8007882:	460c      	mov	r4, r1
 8007884:	4625      	mov	r5, r4
 8007886:	461c      	mov	r4, r3
 8007888:	68b8      	ldr	r0, [r7, #8]
 800788a:	f7f8 fe35 	bl	80004f8 <__aeabi_f2d>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8007950 <veml_Get_White_Lux+0x1a0>
 8007896:	ec43 2b10 	vmov	d0, r2, r3
 800789a:	f00f f875 	bl	8016988 <pow>
 800789e:	ec51 0b10 	vmov	r0, r1, d0
 80078a2:	a32d      	add	r3, pc, #180	; (adr r3, 8007958 <veml_Get_White_Lux+0x1a8>)
 80078a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a8:	f7f8 fe7e 	bl	80005a8 <__aeabi_dmul>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4620      	mov	r0, r4
 80078b2:	4629      	mov	r1, r5
 80078b4:	f7f8 fcc0 	bl	8000238 <__aeabi_dsub>
 80078b8:	4603      	mov	r3, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	4625      	mov	r5, r4
 80078be:	461c      	mov	r4, r3
 80078c0:	68b8      	ldr	r0, [r7, #8]
 80078c2:	f7f8 fe19 	bl	80004f8 <__aeabi_f2d>
 80078c6:	4602      	mov	r2, r0
 80078c8:	460b      	mov	r3, r1
 80078ca:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8007960 <veml_Get_White_Lux+0x1b0>
 80078ce:	ec43 2b10 	vmov	d0, r2, r3
 80078d2:	f00f f859 	bl	8016988 <pow>
 80078d6:	ec51 0b10 	vmov	r0, r1, d0
 80078da:	a323      	add	r3, pc, #140	; (adr r3, 8007968 <veml_Get_White_Lux+0x1b8>)
 80078dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e0:	f7f8 fe62 	bl	80005a8 <__aeabi_dmul>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4620      	mov	r0, r4
 80078ea:	4629      	mov	r1, r5
 80078ec:	f7f8 fca6 	bl	800023c <__adddf3>
 80078f0:	4603      	mov	r3, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	4625      	mov	r5, r4
 80078f6:	461c      	mov	r4, r3
 80078f8:	68b8      	ldr	r0, [r7, #8]
 80078fa:	f7f8 fdfd 	bl	80004f8 <__aeabi_f2d>
 80078fe:	a31c      	add	r3, pc, #112	; (adr r3, 8007970 <veml_Get_White_Lux+0x1c0>)
 8007900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007904:	f7f8 fe50 	bl	80005a8 <__aeabi_dmul>
 8007908:	4602      	mov	r2, r0
 800790a:	460b      	mov	r3, r1
 800790c:	4620      	mov	r0, r4
 800790e:	4629      	mov	r1, r5
 8007910:	f7f8 fc94 	bl	800023c <__adddf3>
 8007914:	4603      	mov	r3, r0
 8007916:	460c      	mov	r4, r1
 8007918:	4618      	mov	r0, r3
 800791a:	4621      	mov	r1, r4
 800791c:	f7f9 f91c 	bl	8000b58 <__aeabi_d2f>
 8007920:	4603      	mov	r3, r0
 8007922:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	ee07 3a90 	vmov	s15, r3

}
 800792a:	eeb0 0a67 	vmov.f32	s0, s15
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bdb0      	pop	{r4, r5, r7, pc}
 8007934:	f3af 8000 	nop.w
 8007938:	487fcb92 	.word	0x487fcb92
 800793c:	3fad7dbf 	.word	0x3fad7dbf
 8007940:	00000000 	.word	0x00000000
 8007944:	40100000 	.word	0x40100000
 8007948:	b18f283b 	.word	0xb18f283b
 800794c:	3d65287a 	.word	0x3d65287a
 8007950:	00000000 	.word	0x00000000
 8007954:	40080000 	.word	0x40080000
 8007958:	c91ef46e 	.word	0xc91ef46e
 800795c:	3e442b86 	.word	0x3e442b86
 8007960:	00000000 	.word	0x00000000
 8007964:	40000000 	.word	0x40000000
 8007968:	2e18cab0 	.word	0x2e18cab0
 800796c:	3f155c91 	.word	0x3f155c91
 8007970:	b98c7e28 	.word	0xb98c7e28
 8007974:	3ff0096b 	.word	0x3ff0096b
 8007978:	2002e358 	.word	0x2002e358
 800797c:	bf800000 	.word	0xbf800000

08007980 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007980:	b480      	push	{r7}
 8007982:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8007984:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <SystemInit+0xa0>)
 8007986:	2200      	movs	r2, #0
 8007988:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800798a:	4b25      	ldr	r3, [pc, #148]	; (8007a20 <SystemInit+0xa0>)
 800798c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007990:	4a23      	ldr	r2, [pc, #140]	; (8007a20 <SystemInit+0xa0>)
 8007992:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007996:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800799a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079a4:	f043 0301 	orr.w	r3, r3, #1
 80079a8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80079aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079ae:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80079b2:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80079b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079be:	4b19      	ldr	r3, [pc, #100]	; (8007a24 <SystemInit+0xa4>)
 80079c0:	4013      	ands	r3, r2
 80079c2:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80079c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079d0:	f023 0305 	bic.w	r3, r3, #5
 80079d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80079d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80079e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80079e4:	f023 0301 	bic.w	r3, r3, #1
 80079e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80079ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f0:	4a0d      	ldr	r2, [pc, #52]	; (8007a28 <SystemInit+0xa8>)
 80079f2:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 80079f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079f8:	4a0b      	ldr	r2, [pc, #44]	; (8007a28 <SystemInit+0xa8>)
 80079fa:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80079fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a10:	2200      	movs	r2, #0
 8007a12:	619a      	str	r2, [r3, #24]
}
 8007a14:	bf00      	nop
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	e000ed00 	.word	0xe000ed00
 8007a24:	faf6fefb 	.word	0xfaf6fefb
 8007a28:	22041000 	.word	0x22041000

08007a2c <LL_DBGMCU_EnableDBGSleepMode>:
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007a30:	4b05      	ldr	r3, [pc, #20]	; (8007a48 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	4a04      	ldr	r2, [pc, #16]	; (8007a48 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007a36:	f043 0301 	orr.w	r3, r3, #1
 8007a3a:	6053      	str	r3, [r2, #4]
}
 8007a3c:	bf00      	nop
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	e0042000 	.word	0xe0042000

08007a4c <LL_DBGMCU_EnableDBGStopMode>:
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007a50:	4b05      	ldr	r3, [pc, #20]	; (8007a68 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	4a04      	ldr	r2, [pc, #16]	; (8007a68 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007a56:	f043 0302 	orr.w	r3, r3, #2
 8007a5a:	6053      	str	r3, [r2, #4]
}
 8007a5c:	bf00      	nop
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	e0042000 	.word	0xe0042000

08007a6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007a76:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <HAL_Init+0x3c>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a0b      	ldr	r2, [pc, #44]	; (8007aa8 <HAL_Init+0x3c>)
 8007a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a80:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007a82:	2003      	movs	r0, #3
 8007a84:	f000 f961 	bl	8007d4a <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007a88:	2000      	movs	r0, #0
 8007a8a:	f7ff fad1 	bl	8007030 <HAL_InitTick>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007a94:	2301      	movs	r3, #1
 8007a96:	71fb      	strb	r3, [r7, #7]
 8007a98:	e001      	b.n	8007a9e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007a9a:	f7ff f9c4 	bl	8006e26 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007a9e:	79fb      	ldrb	r3, [r7, #7]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3708      	adds	r7, #8
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	58004000 	.word	0x58004000

08007aac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007aac:	b480      	push	{r7}
 8007aae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007ab0:	4b06      	ldr	r3, [pc, #24]	; (8007acc <HAL_IncTick+0x20>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	461a      	mov	r2, r3
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <HAL_IncTick+0x24>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4413      	add	r3, r2
 8007abc:	4a04      	ldr	r2, [pc, #16]	; (8007ad0 <HAL_IncTick+0x24>)
 8007abe:	6013      	str	r3, [r2, #0]
}
 8007ac0:	bf00      	nop
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	2000001c 	.word	0x2000001c
 8007ad0:	2002e3ac 	.word	0x2002e3ac

08007ad4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	af00      	add	r7, sp, #0
  return uwTick;
 8007ad8:	4b03      	ldr	r3, [pc, #12]	; (8007ae8 <HAL_GetTick+0x14>)
 8007ada:	681b      	ldr	r3, [r3, #0]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr
 8007ae6:	bf00      	nop
 8007ae8:	2002e3ac 	.word	0x2002e3ac

08007aec <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007aec:	b480      	push	{r7}
 8007aee:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007af0:	4b03      	ldr	r3, [pc, #12]	; (8007b00 <HAL_GetTickPrio+0x14>)
 8007af2:	681b      	ldr	r3, [r3, #0]
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000018 	.word	0x20000018

08007b04 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007b08:	4b03      	ldr	r3, [pc, #12]	; (8007b18 <HAL_GetTickFreq+0x14>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
 8007b16:	bf00      	nop
 8007b18:	2000001c 	.word	0x2000001c

08007b1c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8007b20:	f7ff ff84 	bl	8007a2c <LL_DBGMCU_EnableDBGSleepMode>
}
 8007b24:	bf00      	nop
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8007b2c:	f7ff ff8e 	bl	8007a4c <LL_DBGMCU_EnableDBGStopMode>
}
 8007b30:	bf00      	nop
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b085      	sub	sp, #20
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b44:	4b0c      	ldr	r3, [pc, #48]	; (8007b78 <__NVIC_SetPriorityGrouping+0x44>)
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b50:	4013      	ands	r3, r2
 8007b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b66:	4a04      	ldr	r2, [pc, #16]	; (8007b78 <__NVIC_SetPriorityGrouping+0x44>)
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	60d3      	str	r3, [r2, #12]
}
 8007b6c:	bf00      	nop
 8007b6e:	3714      	adds	r7, #20
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	e000ed00 	.word	0xe000ed00

08007b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b80:	4b04      	ldr	r3, [pc, #16]	; (8007b94 <__NVIC_GetPriorityGrouping+0x18>)
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	0a1b      	lsrs	r3, r3, #8
 8007b86:	f003 0307 	and.w	r3, r3, #7
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	e000ed00 	.word	0xe000ed00

08007b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	db0b      	blt.n	8007bc2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007baa:	79fb      	ldrb	r3, [r7, #7]
 8007bac:	f003 021f 	and.w	r2, r3, #31
 8007bb0:	4907      	ldr	r1, [pc, #28]	; (8007bd0 <__NVIC_EnableIRQ+0x38>)
 8007bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bb6:	095b      	lsrs	r3, r3, #5
 8007bb8:	2001      	movs	r0, #1
 8007bba:	fa00 f202 	lsl.w	r2, r0, r2
 8007bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007bc2:	bf00      	nop
 8007bc4:	370c      	adds	r7, #12
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	e000e100 	.word	0xe000e100

08007bd4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	4603      	mov	r3, r0
 8007bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	db10      	blt.n	8007c08 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007be6:	79fb      	ldrb	r3, [r7, #7]
 8007be8:	f003 021f 	and.w	r2, r3, #31
 8007bec:	4909      	ldr	r1, [pc, #36]	; (8007c14 <__NVIC_DisableIRQ+0x40>)
 8007bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf2:	095b      	lsrs	r3, r3, #5
 8007bf4:	2001      	movs	r0, #1
 8007bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8007bfa:	3320      	adds	r3, #32
 8007bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007c00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007c04:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr
 8007c14:	e000e100 	.word	0xe000e100

08007c18 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	db0c      	blt.n	8007c44 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c2a:	79fb      	ldrb	r3, [r7, #7]
 8007c2c:	f003 021f 	and.w	r2, r3, #31
 8007c30:	4907      	ldr	r1, [pc, #28]	; (8007c50 <__NVIC_SetPendingIRQ+0x38>)
 8007c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	2001      	movs	r0, #1
 8007c3a:	fa00 f202 	lsl.w	r2, r0, r2
 8007c3e:	3340      	adds	r3, #64	; 0x40
 8007c40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	e000e100 	.word	0xe000e100

08007c54 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	db0c      	blt.n	8007c80 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007c66:	79fb      	ldrb	r3, [r7, #7]
 8007c68:	f003 021f 	and.w	r2, r3, #31
 8007c6c:	4907      	ldr	r1, [pc, #28]	; (8007c8c <__NVIC_ClearPendingIRQ+0x38>)
 8007c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c72:	095b      	lsrs	r3, r3, #5
 8007c74:	2001      	movs	r0, #1
 8007c76:	fa00 f202 	lsl.w	r2, r0, r2
 8007c7a:	3360      	adds	r3, #96	; 0x60
 8007c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr
 8007c8c:	e000e100 	.word	0xe000e100

08007c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007c90:	b480      	push	{r7}
 8007c92:	b083      	sub	sp, #12
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	4603      	mov	r3, r0
 8007c98:	6039      	str	r1, [r7, #0]
 8007c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	db0a      	blt.n	8007cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	b2da      	uxtb	r2, r3
 8007ca8:	490c      	ldr	r1, [pc, #48]	; (8007cdc <__NVIC_SetPriority+0x4c>)
 8007caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cae:	0112      	lsls	r2, r2, #4
 8007cb0:	b2d2      	uxtb	r2, r2
 8007cb2:	440b      	add	r3, r1
 8007cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007cb8:	e00a      	b.n	8007cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	4908      	ldr	r1, [pc, #32]	; (8007ce0 <__NVIC_SetPriority+0x50>)
 8007cc0:	79fb      	ldrb	r3, [r7, #7]
 8007cc2:	f003 030f 	and.w	r3, r3, #15
 8007cc6:	3b04      	subs	r3, #4
 8007cc8:	0112      	lsls	r2, r2, #4
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	440b      	add	r3, r1
 8007cce:	761a      	strb	r2, [r3, #24]
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	e000e100 	.word	0xe000e100
 8007ce0:	e000ed00 	.word	0xe000ed00

08007ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b089      	sub	sp, #36	; 0x24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	f1c3 0307 	rsb	r3, r3, #7
 8007cfe:	2b04      	cmp	r3, #4
 8007d00:	bf28      	it	cs
 8007d02:	2304      	movcs	r3, #4
 8007d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	2b06      	cmp	r3, #6
 8007d0c:	d902      	bls.n	8007d14 <NVIC_EncodePriority+0x30>
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	3b03      	subs	r3, #3
 8007d12:	e000      	b.n	8007d16 <NVIC_EncodePriority+0x32>
 8007d14:	2300      	movs	r3, #0
 8007d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d18:	f04f 32ff 	mov.w	r2, #4294967295
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	43da      	mvns	r2, r3
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	401a      	ands	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	43d9      	mvns	r1, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d3c:	4313      	orrs	r3, r2
         );
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3724      	adds	r7, #36	; 0x24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d4a:	b580      	push	{r7, lr}
 8007d4c:	b082      	sub	sp, #8
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f7ff feee 	bl	8007b34 <__NVIC_SetPriorityGrouping>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	4603      	mov	r3, r0
 8007d68:	60b9      	str	r1, [r7, #8]
 8007d6a:	607a      	str	r2, [r7, #4]
 8007d6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007d6e:	f7ff ff05 	bl	8007b7c <__NVIC_GetPriorityGrouping>
 8007d72:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	68b9      	ldr	r1, [r7, #8]
 8007d78:	6978      	ldr	r0, [r7, #20]
 8007d7a:	f7ff ffb3 	bl	8007ce4 <NVIC_EncodePriority>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d84:	4611      	mov	r1, r2
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff ff82 	bl	8007c90 <__NVIC_SetPriority>
}
 8007d8c:	bf00      	nop
 8007d8e:	3718      	adds	r7, #24
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b082      	sub	sp, #8
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7ff fef8 	bl	8007b98 <__NVIC_EnableIRQ>
}
 8007da8:	bf00      	nop
 8007daa:	3708      	adds	r7, #8
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	4603      	mov	r3, r0
 8007db8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7ff ff08 	bl	8007bd4 <__NVIC_DisableIRQ>
}
 8007dc4:	bf00      	nop
 8007dc6:	3708      	adds	r7, #8
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8007dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff ff1c 	bl	8007c18 <__NVIC_SetPendingIRQ>
}
 8007de0:	bf00      	nop
 8007de2:	3708      	adds	r7, #8
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8007df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff ff2c 	bl	8007c54 <__NVIC_ClearPendingIRQ>
}
 8007dfc:	bf00      	nop
 8007dfe:	3708      	adds	r7, #8
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e12:	e14c      	b.n	80080ae <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	2101      	movs	r1, #1
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e20:	4013      	ands	r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	f000 813e 	beq.w	80080a8 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d00b      	beq.n	8007e4c <HAL_GPIO_Init+0x48>
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d007      	beq.n	8007e4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007e40:	2b11      	cmp	r3, #17
 8007e42:	d003      	beq.n	8007e4c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2b12      	cmp	r3, #18
 8007e4a:	d130      	bne.n	8007eae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	2203      	movs	r2, #3
 8007e58:	fa02 f303 	lsl.w	r3, r2, r3
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	693a      	ldr	r2, [r7, #16]
 8007e60:	4013      	ands	r3, r2
 8007e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	68da      	ldr	r2, [r3, #12]
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	693a      	ldr	r2, [r7, #16]
 8007e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007e82:	2201      	movs	r2, #1
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	fa02 f303 	lsl.w	r3, r2, r3
 8007e8a:	43db      	mvns	r3, r3
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	091b      	lsrs	r3, r3, #4
 8007e98:	f003 0201 	and.w	r2, r3, #1
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea2:	693a      	ldr	r2, [r7, #16]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	693a      	ldr	r2, [r7, #16]
 8007eac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	2203      	movs	r2, #3
 8007eba:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebe:	43db      	mvns	r3, r3
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4013      	ands	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	693a      	ldr	r2, [r7, #16]
 8007edc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	2b02      	cmp	r3, #2
 8007ee4:	d003      	beq.n	8007eee <HAL_GPIO_Init+0xea>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2b12      	cmp	r3, #18
 8007eec:	d123      	bne.n	8007f36 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	08da      	lsrs	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	3208      	adds	r2, #8
 8007ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007efa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	220f      	movs	r2, #15
 8007f06:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0a:	43db      	mvns	r3, r3
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4013      	ands	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	691a      	ldr	r2, [r3, #16]
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	f003 0307 	and.w	r3, r3, #7
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	693a      	ldr	r2, [r7, #16]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	08da      	lsrs	r2, r3, #3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3208      	adds	r2, #8
 8007f30:	6939      	ldr	r1, [r7, #16]
 8007f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	2203      	movs	r2, #3
 8007f42:	fa02 f303 	lsl.w	r3, r2, r3
 8007f46:	43db      	mvns	r3, r3
 8007f48:	693a      	ldr	r2, [r7, #16]
 8007f4a:	4013      	ands	r3, r2
 8007f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f003 0203 	and.w	r2, r3, #3
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	693a      	ldr	r2, [r7, #16]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f000 8098 	beq.w	80080a8 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8007f78:	4a54      	ldr	r2, [pc, #336]	; (80080cc <HAL_GPIO_Init+0x2c8>)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	089b      	lsrs	r3, r3, #2
 8007f7e:	3302      	adds	r3, #2
 8007f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	220f      	movs	r2, #15
 8007f90:	fa02 f303 	lsl.w	r3, r2, r3
 8007f94:	43db      	mvns	r3, r3
 8007f96:	693a      	ldr	r2, [r7, #16]
 8007f98:	4013      	ands	r3, r2
 8007f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007fa2:	d019      	beq.n	8007fd8 <HAL_GPIO_Init+0x1d4>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	4a4a      	ldr	r2, [pc, #296]	; (80080d0 <HAL_GPIO_Init+0x2cc>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d013      	beq.n	8007fd4 <HAL_GPIO_Init+0x1d0>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	4a49      	ldr	r2, [pc, #292]	; (80080d4 <HAL_GPIO_Init+0x2d0>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d00d      	beq.n	8007fd0 <HAL_GPIO_Init+0x1cc>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a48      	ldr	r2, [pc, #288]	; (80080d8 <HAL_GPIO_Init+0x2d4>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d007      	beq.n	8007fcc <HAL_GPIO_Init+0x1c8>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a47      	ldr	r2, [pc, #284]	; (80080dc <HAL_GPIO_Init+0x2d8>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d101      	bne.n	8007fc8 <HAL_GPIO_Init+0x1c4>
 8007fc4:	2304      	movs	r3, #4
 8007fc6:	e008      	b.n	8007fda <HAL_GPIO_Init+0x1d6>
 8007fc8:	2307      	movs	r3, #7
 8007fca:	e006      	b.n	8007fda <HAL_GPIO_Init+0x1d6>
 8007fcc:	2303      	movs	r3, #3
 8007fce:	e004      	b.n	8007fda <HAL_GPIO_Init+0x1d6>
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	e002      	b.n	8007fda <HAL_GPIO_Init+0x1d6>
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e000      	b.n	8007fda <HAL_GPIO_Init+0x1d6>
 8007fd8:	2300      	movs	r3, #0
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	f002 0203 	and.w	r2, r2, #3
 8007fe0:	0092      	lsls	r2, r2, #2
 8007fe2:	4093      	lsls	r3, r2
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007fea:	4938      	ldr	r1, [pc, #224]	; (80080cc <HAL_GPIO_Init+0x2c8>)
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	089b      	lsrs	r3, r3, #2
 8007ff0:	3302      	adds	r3, #2
 8007ff2:	693a      	ldr	r2, [r7, #16]
 8007ff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007ff8:	4b39      	ldr	r3, [pc, #228]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 8007ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	43db      	mvns	r3, r3
 8008004:	693a      	ldr	r2, [r7, #16]
 8008006:	4013      	ands	r3, r2
 8008008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d003      	beq.n	800801e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8008016:	693a      	ldr	r2, [r7, #16]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	4313      	orrs	r3, r2
 800801c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800801e:	4a30      	ldr	r2, [pc, #192]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008026:	4b2e      	ldr	r3, [pc, #184]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 8008028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	43db      	mvns	r3, r3
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4013      	ands	r3, r2
 8008036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008040:	2b00      	cmp	r3, #0
 8008042:	d003      	beq.n	800804c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8008044:	693a      	ldr	r2, [r7, #16]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800804c:	4a24      	ldr	r2, [pc, #144]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008054:	4b22      	ldr	r3, [pc, #136]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	43db      	mvns	r3, r3
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	4013      	ands	r3, r2
 8008062:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8008070:	693a      	ldr	r2, [r7, #16]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	4313      	orrs	r3, r2
 8008076:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008078:	4a19      	ldr	r2, [pc, #100]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800807e:	4b18      	ldr	r3, [pc, #96]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	43db      	mvns	r3, r3
 8008088:	693a      	ldr	r2, [r7, #16]
 800808a:	4013      	ands	r3, r2
 800808c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800809a:	693a      	ldr	r2, [r7, #16]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80080a2:	4a0f      	ldr	r2, [pc, #60]	; (80080e0 <HAL_GPIO_Init+0x2dc>)
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	3301      	adds	r3, #1
 80080ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	681a      	ldr	r2, [r3, #0]
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	fa22 f303 	lsr.w	r3, r2, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	f47f aeab 	bne.w	8007e14 <HAL_GPIO_Init+0x10>
  }
}
 80080be:	bf00      	nop
 80080c0:	371c      	adds	r7, #28
 80080c2:	46bd      	mov	sp, r7
 80080c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	40010000 	.word	0x40010000
 80080d0:	48000400 	.word	0x48000400
 80080d4:	48000800 	.word	0x48000800
 80080d8:	48000c00 	.word	0x48000c00
 80080dc:	48001000 	.word	0x48001000
 80080e0:	58000800 	.word	0x58000800

080080e4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	460b      	mov	r3, r1
 80080ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	887b      	ldrh	r3, [r7, #2]
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d002      	beq.n	8008102 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80080fc:	2301      	movs	r3, #1
 80080fe:	73fb      	strb	r3, [r7, #15]
 8008100:	e001      	b.n	8008106 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008102:	2300      	movs	r3, #0
 8008104:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008106:	7bfb      	ldrb	r3, [r7, #15]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	807b      	strh	r3, [r7, #2]
 8008120:	4613      	mov	r3, r2
 8008122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008124:	787b      	ldrb	r3, [r7, #1]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800812a:	887a      	ldrh	r2, [r7, #2]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008130:	e002      	b.n	8008138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008132:	887a      	ldrh	r2, [r7, #2]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	b082      	sub	sp, #8
 8008148:	af00      	add	r7, sp, #0
 800814a:	4603      	mov	r3, r0
 800814c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800814e:	4b08      	ldr	r3, [pc, #32]	; (8008170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008150:	68da      	ldr	r2, [r3, #12]
 8008152:	88fb      	ldrh	r3, [r7, #6]
 8008154:	4013      	ands	r3, r2
 8008156:	2b00      	cmp	r3, #0
 8008158:	d006      	beq.n	8008168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800815a:	4a05      	ldr	r2, [pc, #20]	; (8008170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800815c:	88fb      	ldrh	r3, [r7, #6]
 800815e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008160:	88fb      	ldrh	r3, [r7, #6]
 8008162:	4618      	mov	r0, r3
 8008164:	f7fc fadc 	bl	8004720 <HAL_GPIO_EXTI_Callback>
  }
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	58000800 	.word	0x58000800

08008174 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800817a:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <HAL_HSEM_IRQHandler+0x30>)
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8008180:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <HAL_HSEM_IRQHandler+0x30>)
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	43db      	mvns	r3, r3
 8008188:	4906      	ldr	r1, [pc, #24]	; (80081a4 <HAL_HSEM_IRQHandler+0x30>)
 800818a:	4013      	ands	r3, r2
 800818c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800818e:	4a05      	ldr	r2, [pc, #20]	; (80081a4 <HAL_HSEM_IRQHandler+0x30>)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 f807 	bl	80081a8 <HAL_HSEM_FreeCallback>
}
 800819a:	bf00      	nop
 800819c:	3708      	adds	r7, #8
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	58001500 	.word	0x58001500

080081a8 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ba:	4770      	bx	lr

080081bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d101      	bne.n	80081ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e081      	b.n	80082d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081d4:	b2db      	uxtb	r3, r3
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f7fe fe60 	bl	8006ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2224      	movs	r2, #36	; 0x24
 80081ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0201 	bic.w	r2, r2, #1
 80081fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685a      	ldr	r2, [r3, #4]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800820c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800821c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	68db      	ldr	r3, [r3, #12]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d107      	bne.n	8008236 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689a      	ldr	r2, [r3, #8]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008232:	609a      	str	r2, [r3, #8]
 8008234:	e006      	b.n	8008244 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	689a      	ldr	r2, [r3, #8]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008242:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	2b02      	cmp	r3, #2
 800824a:	d104      	bne.n	8008256 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008254:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	687a      	ldr	r2, [r7, #4]
 800825e:	6812      	ldr	r2, [r2, #0]
 8008260:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008264:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008268:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68da      	ldr	r2, [r3, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008278:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691a      	ldr	r2, [r3, #16]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	ea42 0103 	orr.w	r1, r2, r3
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	021a      	lsls	r2, r3, #8
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	69d9      	ldr	r1, [r3, #28]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a1a      	ldr	r2, [r3, #32]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	430a      	orrs	r2, r1
 80082a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f042 0201 	orr.w	r2, r2, #1
 80082b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2220      	movs	r2, #32
 80082be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3708      	adds	r7, #8
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b088      	sub	sp, #32
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	607a      	str	r2, [r7, #4]
 80082e6:	461a      	mov	r2, r3
 80082e8:	460b      	mov	r3, r1
 80082ea:	817b      	strh	r3, [r7, #10]
 80082ec:	4613      	mov	r3, r2
 80082ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	f040 80da 	bne.w	80084b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_I2C_Master_Transmit+0x30>
 8008308:	2302      	movs	r3, #2
 800830a:	e0d3      	b.n	80084b4 <HAL_I2C_Master_Transmit+0x1d8>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008314:	f7ff fbde 	bl	8007ad4 <HAL_GetTick>
 8008318:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	2319      	movs	r3, #25
 8008320:	2201      	movs	r2, #1
 8008322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f000 fcbc 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 800832c:	4603      	mov	r3, r0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d001      	beq.n	8008336 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e0be      	b.n	80084b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	2221      	movs	r2, #33	; 0x21
 800833a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	2210      	movs	r2, #16
 8008342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	2200      	movs	r2, #0
 800834a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	893a      	ldrh	r2, [r7, #8]
 8008356:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2200      	movs	r2, #0
 800835c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008362:	b29b      	uxth	r3, r3
 8008364:	2bff      	cmp	r3, #255	; 0xff
 8008366:	d90e      	bls.n	8008386 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	22ff      	movs	r2, #255	; 0xff
 800836c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008372:	b2da      	uxtb	r2, r3
 8008374:	8979      	ldrh	r1, [r7, #10]
 8008376:	4b51      	ldr	r3, [pc, #324]	; (80084bc <HAL_I2C_Master_Transmit+0x1e0>)
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800837e:	68f8      	ldr	r0, [r7, #12]
 8008380:	f000 fe1e 	bl	8008fc0 <I2C_TransferConfig>
 8008384:	e06c      	b.n	8008460 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800838a:	b29a      	uxth	r2, r3
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008394:	b2da      	uxtb	r2, r3
 8008396:	8979      	ldrh	r1, [r7, #10]
 8008398:	4b48      	ldr	r3, [pc, #288]	; (80084bc <HAL_I2C_Master_Transmit+0x1e0>)
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fe0d 	bl	8008fc0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80083a6:	e05b      	b.n	8008460 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	6a39      	ldr	r1, [r7, #32]
 80083ac:	68f8      	ldr	r0, [r7, #12]
 80083ae:	f000 fcb9 	bl	8008d24 <I2C_WaitOnTXISFlagUntilTimeout>
 80083b2:	4603      	mov	r3, r0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d001      	beq.n	80083bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80083b8:	2301      	movs	r3, #1
 80083ba:	e07b      	b.n	80084b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c0:	781a      	ldrb	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083cc:	1c5a      	adds	r2, r3, #1
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	3b01      	subs	r3, #1
 80083da:	b29a      	uxth	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d034      	beq.n	8008460 <HAL_I2C_Master_Transmit+0x184>
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d130      	bne.n	8008460 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	9300      	str	r3, [sp, #0]
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	2200      	movs	r2, #0
 8008406:	2180      	movs	r1, #128	; 0x80
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f000 fc4b 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 800840e:	4603      	mov	r3, r0
 8008410:	2b00      	cmp	r3, #0
 8008412:	d001      	beq.n	8008418 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e04d      	b.n	80084b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800841c:	b29b      	uxth	r3, r3
 800841e:	2bff      	cmp	r3, #255	; 0xff
 8008420:	d90e      	bls.n	8008440 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	22ff      	movs	r2, #255	; 0xff
 8008426:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800842c:	b2da      	uxtb	r2, r3
 800842e:	8979      	ldrh	r1, [r7, #10]
 8008430:	2300      	movs	r3, #0
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f000 fdc1 	bl	8008fc0 <I2C_TransferConfig>
 800843e:	e00f      	b.n	8008460 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008444:	b29a      	uxth	r2, r3
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800844e:	b2da      	uxtb	r2, r3
 8008450:	8979      	ldrh	r1, [r7, #10]
 8008452:	2300      	movs	r3, #0
 8008454:	9300      	str	r3, [sp, #0]
 8008456:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800845a:	68f8      	ldr	r0, [r7, #12]
 800845c:	f000 fdb0 	bl	8008fc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d19e      	bne.n	80083a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800846a:	697a      	ldr	r2, [r7, #20]
 800846c:	6a39      	ldr	r1, [r7, #32]
 800846e:	68f8      	ldr	r0, [r7, #12]
 8008470:	f000 fc98 	bl	8008da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d001      	beq.n	800847e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800847a:	2301      	movs	r3, #1
 800847c:	e01a      	b.n	80084b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2220      	movs	r2, #32
 8008484:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6859      	ldr	r1, [r3, #4]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	4b0b      	ldr	r3, [pc, #44]	; (80084c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8008492:	400b      	ands	r3, r1
 8008494:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	2220      	movs	r2, #32
 800849a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	e000      	b.n	80084b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80084b2:	2302      	movs	r3, #2
  }
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	3718      	adds	r7, #24
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}
 80084bc:	80002000 	.word	0x80002000
 80084c0:	fe00e800 	.word	0xfe00e800

080084c4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af02      	add	r7, sp, #8
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	607a      	str	r2, [r7, #4]
 80084ce:	461a      	mov	r2, r3
 80084d0:	460b      	mov	r3, r1
 80084d2:	817b      	strh	r3, [r7, #10]
 80084d4:	4613      	mov	r3, r2
 80084d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	2b20      	cmp	r3, #32
 80084e2:	f040 80db 	bne.w	800869c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d101      	bne.n	80084f4 <HAL_I2C_Master_Receive+0x30>
 80084f0:	2302      	movs	r3, #2
 80084f2:	e0d4      	b.n	800869e <HAL_I2C_Master_Receive+0x1da>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80084fc:	f7ff faea 	bl	8007ad4 <HAL_GetTick>
 8008500:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	2319      	movs	r3, #25
 8008508:	2201      	movs	r2, #1
 800850a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800850e:	68f8      	ldr	r0, [r7, #12]
 8008510:	f000 fbc8 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	e0bf      	b.n	800869e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2222      	movs	r2, #34	; 0x22
 8008522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2210      	movs	r2, #16
 800852a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2200      	movs	r2, #0
 8008532:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	893a      	ldrh	r2, [r7, #8]
 800853e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800854a:	b29b      	uxth	r3, r3
 800854c:	2bff      	cmp	r3, #255	; 0xff
 800854e:	d90e      	bls.n	800856e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	22ff      	movs	r2, #255	; 0xff
 8008554:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800855a:	b2da      	uxtb	r2, r3
 800855c:	8979      	ldrh	r1, [r7, #10]
 800855e:	4b52      	ldr	r3, [pc, #328]	; (80086a8 <HAL_I2C_Master_Receive+0x1e4>)
 8008560:	9300      	str	r3, [sp, #0]
 8008562:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008566:	68f8      	ldr	r0, [r7, #12]
 8008568:	f000 fd2a 	bl	8008fc0 <I2C_TransferConfig>
 800856c:	e06d      	b.n	800864a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008572:	b29a      	uxth	r2, r3
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800857c:	b2da      	uxtb	r2, r3
 800857e:	8979      	ldrh	r1, [r7, #10]
 8008580:	4b49      	ldr	r3, [pc, #292]	; (80086a8 <HAL_I2C_Master_Receive+0x1e4>)
 8008582:	9300      	str	r3, [sp, #0]
 8008584:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 fd19 	bl	8008fc0 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800858e:	e05c      	b.n	800864a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008590:	697a      	ldr	r2, [r7, #20]
 8008592:	6a39      	ldr	r1, [r7, #32]
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f000 fc41 	bl	8008e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800859a:	4603      	mov	r3, r0
 800859c:	2b00      	cmp	r3, #0
 800859e:	d001      	beq.n	80085a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80085a0:	2301      	movs	r3, #1
 80085a2:	e07c      	b.n	800869e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085c0:	3b01      	subs	r3, #1
 80085c2:	b29a      	uxth	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	3b01      	subs	r3, #1
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085da:	b29b      	uxth	r3, r3
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d034      	beq.n	800864a <HAL_I2C_Master_Receive+0x186>
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d130      	bne.n	800864a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	6a3b      	ldr	r3, [r7, #32]
 80085ee:	2200      	movs	r2, #0
 80085f0:	2180      	movs	r1, #128	; 0x80
 80085f2:	68f8      	ldr	r0, [r7, #12]
 80085f4:	f000 fb56 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e04d      	b.n	800869e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008606:	b29b      	uxth	r3, r3
 8008608:	2bff      	cmp	r3, #255	; 0xff
 800860a:	d90e      	bls.n	800862a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22ff      	movs	r2, #255	; 0xff
 8008610:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008616:	b2da      	uxtb	r2, r3
 8008618:	8979      	ldrh	r1, [r7, #10]
 800861a:	2300      	movs	r3, #0
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008622:	68f8      	ldr	r0, [r7, #12]
 8008624:	f000 fccc 	bl	8008fc0 <I2C_TransferConfig>
 8008628:	e00f      	b.n	800864a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008638:	b2da      	uxtb	r2, r3
 800863a:	8979      	ldrh	r1, [r7, #10]
 800863c:	2300      	movs	r3, #0
 800863e:	9300      	str	r3, [sp, #0]
 8008640:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008644:	68f8      	ldr	r0, [r7, #12]
 8008646:	f000 fcbb 	bl	8008fc0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800864e:	b29b      	uxth	r3, r3
 8008650:	2b00      	cmp	r3, #0
 8008652:	d19d      	bne.n	8008590 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008654:	697a      	ldr	r2, [r7, #20]
 8008656:	6a39      	ldr	r1, [r7, #32]
 8008658:	68f8      	ldr	r0, [r7, #12]
 800865a:	f000 fba3 	bl	8008da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e01a      	b.n	800869e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2220      	movs	r2, #32
 800866e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	6859      	ldr	r1, [r3, #4]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <HAL_I2C_Master_Receive+0x1e8>)
 800867c:	400b      	ands	r3, r1
 800867e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2220      	movs	r2, #32
 8008684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	e000      	b.n	800869e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800869c:	2302      	movs	r3, #2
  }
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	80002400 	.word	0x80002400
 80086ac:	fe00e800 	.word	0xfe00e800

080086b0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b088      	sub	sp, #32
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	4608      	mov	r0, r1
 80086ba:	4611      	mov	r1, r2
 80086bc:	461a      	mov	r2, r3
 80086be:	4603      	mov	r3, r0
 80086c0:	817b      	strh	r3, [r7, #10]
 80086c2:	460b      	mov	r3, r1
 80086c4:	813b      	strh	r3, [r7, #8]
 80086c6:	4613      	mov	r3, r2
 80086c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	f040 80f9 	bne.w	80088ca <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086d8:	6a3b      	ldr	r3, [r7, #32]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d002      	beq.n	80086e4 <HAL_I2C_Mem_Write+0x34>
 80086de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d105      	bne.n	80086f0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086ea:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	e0ed      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_I2C_Mem_Write+0x4e>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e0e6      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008706:	f7ff f9e5 	bl	8007ad4 <HAL_GetTick>
 800870a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	2319      	movs	r3, #25
 8008712:	2201      	movs	r2, #1
 8008714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008718:	68f8      	ldr	r0, [r7, #12]
 800871a:	f000 fac3 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008724:	2301      	movs	r3, #1
 8008726:	e0d1      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2221      	movs	r2, #33	; 0x21
 800872c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2240      	movs	r2, #64	; 0x40
 8008734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a3a      	ldr	r2, [r7, #32]
 8008742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2200      	movs	r2, #0
 800874e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008750:	88f8      	ldrh	r0, [r7, #6]
 8008752:	893a      	ldrh	r2, [r7, #8]
 8008754:	8979      	ldrh	r1, [r7, #10]
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	4603      	mov	r3, r0
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 f9d3 	bl	8008b0c <I2C_RequestMemoryWrite>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d005      	beq.n	8008778 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2200      	movs	r2, #0
 8008770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e0a9      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800877c:	b29b      	uxth	r3, r3
 800877e:	2bff      	cmp	r3, #255	; 0xff
 8008780:	d90e      	bls.n	80087a0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	22ff      	movs	r2, #255	; 0xff
 8008786:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800878c:	b2da      	uxtb	r2, r3
 800878e:	8979      	ldrh	r1, [r7, #10]
 8008790:	2300      	movs	r3, #0
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008798:	68f8      	ldr	r0, [r7, #12]
 800879a:	f000 fc11 	bl	8008fc0 <I2C_TransferConfig>
 800879e:	e00f      	b.n	80087c0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087a4:	b29a      	uxth	r2, r3
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087ae:	b2da      	uxtb	r2, r3
 80087b0:	8979      	ldrh	r1, [r7, #10]
 80087b2:	2300      	movs	r3, #0
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f000 fc00 	bl	8008fc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087c4:	68f8      	ldr	r0, [r7, #12]
 80087c6:	f000 faad 	bl	8008d24 <I2C_WaitOnTXISFlagUntilTimeout>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d001      	beq.n	80087d4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e07b      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d8:	781a      	ldrb	r2, [r3, #0]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	3b01      	subs	r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29a      	uxth	r2, r3
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	d034      	beq.n	8008878 <HAL_I2C_Mem_Write+0x1c8>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008812:	2b00      	cmp	r3, #0
 8008814:	d130      	bne.n	8008878 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	9300      	str	r3, [sp, #0]
 800881a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800881c:	2200      	movs	r2, #0
 800881e:	2180      	movs	r1, #128	; 0x80
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f000 fa3f 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e04d      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008834:	b29b      	uxth	r3, r3
 8008836:	2bff      	cmp	r3, #255	; 0xff
 8008838:	d90e      	bls.n	8008858 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	22ff      	movs	r2, #255	; 0xff
 800883e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008844:	b2da      	uxtb	r2, r3
 8008846:	8979      	ldrh	r1, [r7, #10]
 8008848:	2300      	movs	r3, #0
 800884a:	9300      	str	r3, [sp, #0]
 800884c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f000 fbb5 	bl	8008fc0 <I2C_TransferConfig>
 8008856:	e00f      	b.n	8008878 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008866:	b2da      	uxtb	r2, r3
 8008868:	8979      	ldrh	r1, [r7, #10]
 800886a:	2300      	movs	r3, #0
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f000 fba4 	bl	8008fc0 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800887c:	b29b      	uxth	r3, r3
 800887e:	2b00      	cmp	r3, #0
 8008880:	d19e      	bne.n	80087c0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008886:	68f8      	ldr	r0, [r7, #12]
 8008888:	f000 fa8c 	bl	8008da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800888c:	4603      	mov	r3, r0
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e01a      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2220      	movs	r2, #32
 800889c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	6859      	ldr	r1, [r3, #4]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <HAL_I2C_Mem_Write+0x224>)
 80088aa:	400b      	ands	r3, r1
 80088ac:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e000      	b.n	80088cc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80088ca:	2302      	movs	r3, #2
  }
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}
 80088d4:	fe00e800 	.word	0xfe00e800

080088d8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b088      	sub	sp, #32
 80088dc:	af02      	add	r7, sp, #8
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	4608      	mov	r0, r1
 80088e2:	4611      	mov	r1, r2
 80088e4:	461a      	mov	r2, r3
 80088e6:	4603      	mov	r3, r0
 80088e8:	817b      	strh	r3, [r7, #10]
 80088ea:	460b      	mov	r3, r1
 80088ec:	813b      	strh	r3, [r7, #8]
 80088ee:	4613      	mov	r3, r2
 80088f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	f040 80fd 	bne.w	8008afa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008900:	6a3b      	ldr	r3, [r7, #32]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d002      	beq.n	800890c <HAL_I2C_Mem_Read+0x34>
 8008906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008908:	2b00      	cmp	r3, #0
 800890a:	d105      	bne.n	8008918 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008912:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e0f1      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_I2C_Mem_Read+0x4e>
 8008922:	2302      	movs	r3, #2
 8008924:	e0ea      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800892e:	f7ff f8d1 	bl	8007ad4 <HAL_GetTick>
 8008932:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	9300      	str	r3, [sp, #0]
 8008938:	2319      	movs	r3, #25
 800893a:	2201      	movs	r2, #1
 800893c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f9af 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e0d5      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2222      	movs	r2, #34	; 0x22
 8008954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2240      	movs	r2, #64	; 0x40
 800895c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a3a      	ldr	r2, [r7, #32]
 800896a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008970:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	2200      	movs	r2, #0
 8008976:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008978:	88f8      	ldrh	r0, [r7, #6]
 800897a:	893a      	ldrh	r2, [r7, #8]
 800897c:	8979      	ldrh	r1, [r7, #10]
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	9301      	str	r3, [sp, #4]
 8008982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008984:	9300      	str	r3, [sp, #0]
 8008986:	4603      	mov	r3, r0
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 f913 	bl	8008bb4 <I2C_RequestMemoryRead>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d005      	beq.n	80089a0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800899c:	2301      	movs	r3, #1
 800899e:	e0ad      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089a4:	b29b      	uxth	r3, r3
 80089a6:	2bff      	cmp	r3, #255	; 0xff
 80089a8:	d90e      	bls.n	80089c8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	22ff      	movs	r2, #255	; 0xff
 80089ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	8979      	ldrh	r1, [r7, #10]
 80089b8:	4b52      	ldr	r3, [pc, #328]	; (8008b04 <HAL_I2C_Mem_Read+0x22c>)
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089c0:	68f8      	ldr	r0, [r7, #12]
 80089c2:	f000 fafd 	bl	8008fc0 <I2C_TransferConfig>
 80089c6:	e00f      	b.n	80089e8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80089d6:	b2da      	uxtb	r2, r3
 80089d8:	8979      	ldrh	r1, [r7, #10]
 80089da:	4b4a      	ldr	r3, [pc, #296]	; (8008b04 <HAL_I2C_Mem_Read+0x22c>)
 80089dc:	9300      	str	r3, [sp, #0]
 80089de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 faec 	bl	8008fc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	9300      	str	r3, [sp, #0]
 80089ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ee:	2200      	movs	r2, #0
 80089f0:	2104      	movs	r1, #4
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f956 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e07c      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0c:	b2d2      	uxtb	r2, r2
 8008a0e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a14:	1c5a      	adds	r2, r3, #1
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a1e:	3b01      	subs	r3, #1
 8008a20:	b29a      	uxth	r2, r3
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	b29a      	uxth	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d034      	beq.n	8008aa8 <HAL_I2C_Mem_Read+0x1d0>
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d130      	bne.n	8008aa8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2180      	movs	r1, #128	; 0x80
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f000 f927 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d001      	beq.n	8008a60 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	e04d      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a64:	b29b      	uxth	r3, r3
 8008a66:	2bff      	cmp	r3, #255	; 0xff
 8008a68:	d90e      	bls.n	8008a88 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	22ff      	movs	r2, #255	; 0xff
 8008a6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	8979      	ldrh	r1, [r7, #10]
 8008a78:	2300      	movs	r3, #0
 8008a7a:	9300      	str	r3, [sp, #0]
 8008a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a80:	68f8      	ldr	r0, [r7, #12]
 8008a82:	f000 fa9d 	bl	8008fc0 <I2C_TransferConfig>
 8008a86:	e00f      	b.n	8008aa8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a8c:	b29a      	uxth	r2, r3
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a96:	b2da      	uxtb	r2, r3
 8008a98:	8979      	ldrh	r1, [r7, #10]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	9300      	str	r3, [sp, #0]
 8008a9e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008aa2:	68f8      	ldr	r0, [r7, #12]
 8008aa4:	f000 fa8c 	bl	8008fc0 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008aac:	b29b      	uxth	r3, r3
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d19a      	bne.n	80089e8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 f974 	bl	8008da4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008abc:	4603      	mov	r3, r0
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d001      	beq.n	8008ac6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e01a      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2220      	movs	r2, #32
 8008acc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	6859      	ldr	r1, [r3, #4]
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	4b0b      	ldr	r3, [pc, #44]	; (8008b08 <HAL_I2C_Mem_Read+0x230>)
 8008ada:	400b      	ands	r3, r1
 8008adc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	2220      	movs	r2, #32
 8008ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	e000      	b.n	8008afc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8008afa:	2302      	movs	r3, #2
  }
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3718      	adds	r7, #24
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	80002400 	.word	0x80002400
 8008b08:	fe00e800 	.word	0xfe00e800

08008b0c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af02      	add	r7, sp, #8
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	4608      	mov	r0, r1
 8008b16:	4611      	mov	r1, r2
 8008b18:	461a      	mov	r2, r3
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	817b      	strh	r3, [r7, #10]
 8008b1e:	460b      	mov	r3, r1
 8008b20:	813b      	strh	r3, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008b26:	88fb      	ldrh	r3, [r7, #6]
 8008b28:	b2da      	uxtb	r2, r3
 8008b2a:	8979      	ldrh	r1, [r7, #10]
 8008b2c:	4b20      	ldr	r3, [pc, #128]	; (8008bb0 <I2C_RequestMemoryWrite+0xa4>)
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b34:	68f8      	ldr	r0, [r7, #12]
 8008b36:	f000 fa43 	bl	8008fc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	69b9      	ldr	r1, [r7, #24]
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f000 f8f0 	bl	8008d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b44:	4603      	mov	r3, r0
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d001      	beq.n	8008b4e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	e02c      	b.n	8008ba8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008b4e:	88fb      	ldrh	r3, [r7, #6]
 8008b50:	2b01      	cmp	r3, #1
 8008b52:	d105      	bne.n	8008b60 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b54:	893b      	ldrh	r3, [r7, #8]
 8008b56:	b2da      	uxtb	r2, r3
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	629a      	str	r2, [r3, #40]	; 0x28
 8008b5e:	e015      	b.n	8008b8c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008b60:	893b      	ldrh	r3, [r7, #8]
 8008b62:	0a1b      	lsrs	r3, r3, #8
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	b2da      	uxtb	r2, r3
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b6e:	69fa      	ldr	r2, [r7, #28]
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 f8d6 	bl	8008d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e012      	b.n	8008ba8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008b82:	893b      	ldrh	r3, [r7, #8]
 8008b84:	b2da      	uxtb	r2, r3
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	69bb      	ldr	r3, [r7, #24]
 8008b92:	2200      	movs	r2, #0
 8008b94:	2180      	movs	r1, #128	; 0x80
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f000 f884 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	e000      	b.n	8008ba8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008ba6:	2300      	movs	r3, #0
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}
 8008bb0:	80002000 	.word	0x80002000

08008bb4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af02      	add	r7, sp, #8
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	4608      	mov	r0, r1
 8008bbe:	4611      	mov	r1, r2
 8008bc0:	461a      	mov	r2, r3
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	817b      	strh	r3, [r7, #10]
 8008bc6:	460b      	mov	r3, r1
 8008bc8:	813b      	strh	r3, [r7, #8]
 8008bca:	4613      	mov	r3, r2
 8008bcc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008bce:	88fb      	ldrh	r3, [r7, #6]
 8008bd0:	b2da      	uxtb	r2, r3
 8008bd2:	8979      	ldrh	r1, [r7, #10]
 8008bd4:	4b20      	ldr	r3, [pc, #128]	; (8008c58 <I2C_RequestMemoryRead+0xa4>)
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	2300      	movs	r3, #0
 8008bda:	68f8      	ldr	r0, [r7, #12]
 8008bdc:	f000 f9f0 	bl	8008fc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008be0:	69fa      	ldr	r2, [r7, #28]
 8008be2:	69b9      	ldr	r1, [r7, #24]
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f000 f89d 	bl	8008d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	e02c      	b.n	8008c4e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bf4:	88fb      	ldrh	r3, [r7, #6]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d105      	bne.n	8008c06 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008bfa:	893b      	ldrh	r3, [r7, #8]
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	629a      	str	r2, [r3, #40]	; 0x28
 8008c04:	e015      	b.n	8008c32 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c06:	893b      	ldrh	r3, [r7, #8]
 8008c08:	0a1b      	lsrs	r3, r3, #8
 8008c0a:	b29b      	uxth	r3, r3
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c14:	69fa      	ldr	r2, [r7, #28]
 8008c16:	69b9      	ldr	r1, [r7, #24]
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f000 f883 	bl	8008d24 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e012      	b.n	8008c4e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c28:	893b      	ldrh	r3, [r7, #8]
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	9300      	str	r3, [sp, #0]
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	2140      	movs	r1, #64	; 0x40
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f000 f831 	bl	8008ca4 <I2C_WaitOnFlagUntilTimeout>
 8008c42:	4603      	mov	r3, r0
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e000      	b.n	8008c4e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
 8008c56:	bf00      	nop
 8008c58:	80002000 	.word	0x80002000

08008c5c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f003 0302 	and.w	r3, r3, #2
 8008c6e:	2b02      	cmp	r3, #2
 8008c70:	d103      	bne.n	8008c7a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d007      	beq.n	8008c98 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	699a      	ldr	r2, [r3, #24]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f042 0201 	orr.w	r2, r2, #1
 8008c96:	619a      	str	r2, [r3, #24]
  }
}
 8008c98:	bf00      	nop
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	60f8      	str	r0, [r7, #12]
 8008cac:	60b9      	str	r1, [r7, #8]
 8008cae:	603b      	str	r3, [r7, #0]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cb4:	e022      	b.n	8008cfc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cbc:	d01e      	beq.n	8008cfc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cbe:	f7fe ff09 	bl	8007ad4 <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d302      	bcc.n	8008cd4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d113      	bne.n	8008cfc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cd8:	f043 0220 	orr.w	r2, r3, #32
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2220      	movs	r2, #32
 8008ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e00f      	b.n	8008d1c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	699a      	ldr	r2, [r3, #24]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	4013      	ands	r3, r2
 8008d06:	68ba      	ldr	r2, [r7, #8]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2301      	moveq	r3, #1
 8008d0e:	2300      	movne	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	461a      	mov	r2, r3
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d0cd      	beq.n	8008cb6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d30:	e02c      	b.n	8008d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	68b9      	ldr	r1, [r7, #8]
 8008d36:	68f8      	ldr	r0, [r7, #12]
 8008d38:	f000 f8dc 	bl	8008ef4 <I2C_IsAcknowledgeFailed>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d42:	2301      	movs	r3, #1
 8008d44:	e02a      	b.n	8008d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d4c:	d01e      	beq.n	8008d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d4e:	f7fe fec1 	bl	8007ad4 <HAL_GetTick>
 8008d52:	4602      	mov	r2, r0
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d302      	bcc.n	8008d64 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d113      	bne.n	8008d8c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d68:	f043 0220 	orr.w	r2, r3, #32
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e007      	b.n	8008d9c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	699b      	ldr	r3, [r3, #24]
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d1cb      	bne.n	8008d32 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008d9a:	2300      	movs	r3, #0
}
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	3710      	adds	r7, #16
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}

08008da4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008da4:	b580      	push	{r7, lr}
 8008da6:	b084      	sub	sp, #16
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	60f8      	str	r0, [r7, #12]
 8008dac:	60b9      	str	r1, [r7, #8]
 8008dae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008db0:	e028      	b.n	8008e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008db2:	687a      	ldr	r2, [r7, #4]
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f000 f89c 	bl	8008ef4 <I2C_IsAcknowledgeFailed>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e026      	b.n	8008e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dc6:	f7fe fe85 	bl	8007ad4 <HAL_GetTick>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	1ad3      	subs	r3, r2, r3
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d302      	bcc.n	8008ddc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d113      	bne.n	8008e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008de0:	f043 0220 	orr.w	r2, r3, #32
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	2220      	movs	r2, #32
 8008dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2200      	movs	r2, #0
 8008df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e007      	b.n	8008e14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	699b      	ldr	r3, [r3, #24]
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d1cf      	bne.n	8008db2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008e12:	2300      	movs	r3, #0
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3710      	adds	r7, #16
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b084      	sub	sp, #16
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	60f8      	str	r0, [r7, #12]
 8008e24:	60b9      	str	r1, [r7, #8]
 8008e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008e28:	e055      	b.n	8008ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	68b9      	ldr	r1, [r7, #8]
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 f860 	bl	8008ef4 <I2C_IsAcknowledgeFailed>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e053      	b.n	8008ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	f003 0320 	and.w	r3, r3, #32
 8008e48:	2b20      	cmp	r3, #32
 8008e4a:	d129      	bne.n	8008ea0 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	f003 0304 	and.w	r3, r3, #4
 8008e56:	2b04      	cmp	r3, #4
 8008e58:	d105      	bne.n	8008e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d001      	beq.n	8008e66 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	e03f      	b.n	8008ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	6859      	ldr	r1, [r3, #4]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8008e7a:	400b      	ands	r3, r1
 8008e7c:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2200      	movs	r2, #0
 8008e82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2220      	movs	r2, #32
 8008e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	e022      	b.n	8008ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ea0:	f7fe fe18 	bl	8007ad4 <HAL_GetTick>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	1ad3      	subs	r3, r2, r3
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	429a      	cmp	r2, r3
 8008eae:	d302      	bcc.n	8008eb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d10f      	bne.n	8008ed6 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eba:	f043 0220 	orr.w	r2, r3, #32
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	2220      	movs	r2, #32
 8008ec6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	e007      	b.n	8008ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b04      	cmp	r3, #4
 8008ee2:	d1a2      	bne.n	8008e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
 8008eee:	bf00      	nop
 8008ef0:	fe00e800 	.word	0xfe00e800

08008ef4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	699b      	ldr	r3, [r3, #24]
 8008f06:	f003 0310 	and.w	r3, r3, #16
 8008f0a:	2b10      	cmp	r3, #16
 8008f0c:	d151      	bne.n	8008fb2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f0e:	e022      	b.n	8008f56 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d01e      	beq.n	8008f56 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f18:	f7fe fddc 	bl	8007ad4 <HAL_GetTick>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	68ba      	ldr	r2, [r7, #8]
 8008f24:	429a      	cmp	r2, r3
 8008f26:	d302      	bcc.n	8008f2e <I2C_IsAcknowledgeFailed+0x3a>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d113      	bne.n	8008f56 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f32:	f043 0220 	orr.w	r2, r3, #32
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
 8008f54:	e02e      	b.n	8008fb4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	f003 0320 	and.w	r3, r3, #32
 8008f60:	2b20      	cmp	r3, #32
 8008f62:	d1d5      	bne.n	8008f10 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2210      	movs	r2, #16
 8008f6a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2220      	movs	r2, #32
 8008f72:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f7ff fe71 	bl	8008c5c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	6859      	ldr	r1, [r3, #4]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	4b0d      	ldr	r3, [pc, #52]	; (8008fbc <I2C_IsAcknowledgeFailed+0xc8>)
 8008f86:	400b      	ands	r3, r1
 8008f88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f8e:	f043 0204 	orr.w	r2, r3, #4
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2220      	movs	r2, #32
 8008f9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8008fb2:	2300      	movs	r3, #0
}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	3710      	adds	r7, #16
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	fe00e800 	.word	0xfe00e800

08008fc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	607b      	str	r3, [r7, #4]
 8008fca:	460b      	mov	r3, r1
 8008fcc:	817b      	strh	r3, [r7, #10]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	685a      	ldr	r2, [r3, #4]
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	0d5b      	lsrs	r3, r3, #21
 8008fdc:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <I2C_TransferConfig+0x58>)
 8008fe2:	430b      	orrs	r3, r1
 8008fe4:	43db      	mvns	r3, r3
 8008fe6:	ea02 0103 	and.w	r1, r2, r3
 8008fea:	897b      	ldrh	r3, [r7, #10]
 8008fec:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8008ff0:	7a7b      	ldrb	r3, [r7, #9]
 8008ff2:	041b      	lsls	r3, r3, #16
 8008ff4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008ff8:	431a      	orrs	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	431a      	orrs	r2, r3
 8008ffe:	69bb      	ldr	r3, [r7, #24]
 8009000:	431a      	orrs	r2, r3
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800900a:	bf00      	nop
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	03ff63ff 	.word	0x03ff63ff

0800901c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
 8009024:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b20      	cmp	r3, #32
 8009030:	d138      	bne.n	80090a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009038:	2b01      	cmp	r3, #1
 800903a:	d101      	bne.n	8009040 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800903c:	2302      	movs	r3, #2
 800903e:	e032      	b.n	80090a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2201      	movs	r2, #1
 8009044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2224      	movs	r2, #36	; 0x24
 800904c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681a      	ldr	r2, [r3, #0]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f022 0201 	bic.w	r2, r2, #1
 800905e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	681a      	ldr	r2, [r3, #0]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800906e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	6819      	ldr	r1, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	683a      	ldr	r2, [r7, #0]
 800907c:	430a      	orrs	r2, r1
 800907e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f042 0201 	orr.w	r2, r2, #1
 800908e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2220      	movs	r2, #32
 8009094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80090a0:	2300      	movs	r3, #0
 80090a2:	e000      	b.n	80090a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80090a4:	2302      	movs	r3, #2
  }
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
 80090ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b20      	cmp	r3, #32
 80090c6:	d139      	bne.n	800913c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d101      	bne.n	80090d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80090d2:	2302      	movs	r3, #2
 80090d4:	e033      	b.n	800913e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2201      	movs	r2, #1
 80090da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2224      	movs	r2, #36	; 0x24
 80090e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f022 0201 	bic.w	r2, r2, #1
 80090f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009104:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68fa      	ldr	r2, [r7, #12]
 8009116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681a      	ldr	r2, [r3, #0]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f042 0201 	orr.w	r2, r2, #1
 8009126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2220      	movs	r2, #32
 800912c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr
	...

0800914c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a04      	ldr	r2, [pc, #16]	; (8009168 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800915a:	6013      	str	r3, [r2, #0]
}
 800915c:	bf00      	nop
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	58000400 	.word	0x58000400

0800916c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800916c:	b480      	push	{r7}
 800916e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <HAL_PWREx_GetVoltageRange+0x18>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8009178:	4618      	mov	r0, r3
 800917a:	46bd      	mov	sp, r7
 800917c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009180:	4770      	bx	lr
 8009182:	bf00      	nop
 8009184:	58000400 	.word	0x58000400

08009188 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800918c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009196:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800919a:	d101      	bne.n	80091a0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800919c:	2301      	movs	r3, #1
 800919e:	e000      	b.n	80091a2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80091a0:	2300      	movs	r3, #0
}
 80091a2:	4618      	mov	r0, r3
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <LL_RCC_HSE_Enable>:
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80091b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091be:	6013      	str	r3, [r2, #0]
}
 80091c0:	bf00      	nop
 80091c2:	46bd      	mov	sp, r7
 80091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c8:	4770      	bx	lr

080091ca <LL_RCC_HSE_Disable>:
{
 80091ca:	b480      	push	{r7}
 80091cc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80091ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80091d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091dc:	6013      	str	r3, [r2, #0]
}
 80091de:	bf00      	nop
 80091e0:	46bd      	mov	sp, r7
 80091e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e6:	4770      	bx	lr

080091e8 <LL_RCC_HSE_IsReady>:
{
 80091e8:	b480      	push	{r7}
 80091ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80091ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091fa:	d101      	bne.n	8009200 <LL_RCC_HSE_IsReady+0x18>
 80091fc:	2301      	movs	r3, #1
 80091fe:	e000      	b.n	8009202 <LL_RCC_HSE_IsReady+0x1a>
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr

0800920c <LL_RCC_HSI_Enable>:
{
 800920c:	b480      	push	{r7}
 800920e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8009210:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800921a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800921e:	6013      	str	r3, [r2, #0]
}
 8009220:	bf00      	nop
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <LL_RCC_HSI_Disable>:
{
 800922a:	b480      	push	{r7}
 800922c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800922e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800923c:	6013      	str	r3, [r2, #0]
}
 800923e:	bf00      	nop
 8009240:	46bd      	mov	sp, r7
 8009242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009246:	4770      	bx	lr

08009248 <LL_RCC_HSI_IsReady>:
{
 8009248:	b480      	push	{r7}
 800924a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800924c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009256:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800925a:	d101      	bne.n	8009260 <LL_RCC_HSI_IsReady+0x18>
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <LL_RCC_HSI_IsReady+0x1a>
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <LL_RCC_HSI_SetCalibTrimming>:
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8009274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009278:	685b      	ldr	r3, [r3, #4]
 800927a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	061b      	lsls	r3, r3, #24
 8009282:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009286:	4313      	orrs	r3, r2
 8009288:	604b      	str	r3, [r1, #4]
}
 800928a:	bf00      	nop
 800928c:	370c      	adds	r7, #12
 800928e:	46bd      	mov	sp, r7
 8009290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009294:	4770      	bx	lr

08009296 <LL_RCC_HSI48_Enable>:
{
 8009296:	b480      	push	{r7}
 8009298:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800929a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80092ae:	bf00      	nop
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_RCC_HSI48_Disable>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80092bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80092d0:	bf00      	nop
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <LL_RCC_HSI48_IsReady>:
{
 80092da:	b480      	push	{r7}
 80092dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80092de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092e6:	f003 0302 	and.w	r3, r3, #2
 80092ea:	2b02      	cmp	r3, #2
 80092ec:	d101      	bne.n	80092f2 <LL_RCC_HSI48_IsReady+0x18>
 80092ee:	2301      	movs	r3, #1
 80092f0:	e000      	b.n	80092f4 <LL_RCC_HSI48_IsReady+0x1a>
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <LL_RCC_LSE_Enable>:
{
 80092fe:	b480      	push	{r7}
 8009300:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009302:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800930a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800930e:	f043 0301 	orr.w	r3, r3, #1
 8009312:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009316:	bf00      	nop
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <LL_RCC_LSE_Disable>:
{
 8009320:	b480      	push	{r7}
 8009322:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800932c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009330:	f023 0301 	bic.w	r3, r3, #1
 8009334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009338:	bf00      	nop
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <LL_RCC_LSE_EnableBypass>:
{
 8009342:	b480      	push	{r7}
 8009344:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009346:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800934a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800934e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009352:	f043 0304 	orr.w	r3, r3, #4
 8009356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800935a:	bf00      	nop
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <LL_RCC_LSE_DisableBypass>:
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800936c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009370:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009374:	f023 0304 	bic.w	r3, r3, #4
 8009378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800937c:	bf00      	nop
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <LL_RCC_LSE_IsReady>:
{
 8009386:	b480      	push	{r7}
 8009388:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800938a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800938e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b02      	cmp	r3, #2
 8009398:	d101      	bne.n	800939e <LL_RCC_LSE_IsReady+0x18>
 800939a:	2301      	movs	r3, #1
 800939c:	e000      	b.n	80093a0 <LL_RCC_LSE_IsReady+0x1a>
 800939e:	2300      	movs	r3, #0
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <LL_RCC_LSI1_Enable>:
{
 80093aa:	b480      	push	{r7}
 80093ac:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80093ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093ba:	f043 0301 	orr.w	r3, r3, #1
 80093be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80093c2:	bf00      	nop
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <LL_RCC_LSI1_Disable>:
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80093d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093dc:	f023 0301 	bic.w	r3, r3, #1
 80093e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80093e4:	bf00      	nop
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <LL_RCC_LSI1_IsReady>:
{
 80093ee:	b480      	push	{r7}
 80093f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80093f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80093fa:	f003 0302 	and.w	r3, r3, #2
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d101      	bne.n	8009406 <LL_RCC_LSI1_IsReady+0x18>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <LL_RCC_LSI1_IsReady+0x1a>
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <LL_RCC_LSI2_Enable>:
{
 8009412:	b480      	push	{r7}
 8009414:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800941a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800941e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009422:	f043 0304 	orr.w	r3, r3, #4
 8009426:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800942a:	bf00      	nop
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr

08009434 <LL_RCC_LSI2_Disable>:
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800943c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009440:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009444:	f023 0304 	bic.w	r3, r3, #4
 8009448:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800944c:	bf00      	nop
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <LL_RCC_LSI2_IsReady>:
{
 8009456:	b480      	push	{r7}
 8009458:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800945a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800945e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009462:	f003 0308 	and.w	r3, r3, #8
 8009466:	2b08      	cmp	r3, #8
 8009468:	d101      	bne.n	800946e <LL_RCC_LSI2_IsReady+0x18>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <LL_RCC_LSI2_IsReady+0x1a>
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr

0800947a <LL_RCC_LSI2_SetTrimming>:
{
 800947a:	b480      	push	{r7}
 800947c:	b083      	sub	sp, #12
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8009482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800948a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	021b      	lsls	r3, r3, #8
 8009492:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800949c:	bf00      	nop
 800949e:	370c      	adds	r7, #12
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <LL_RCC_MSI_Enable>:
{
 80094a8:	b480      	push	{r7}
 80094aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80094ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094b6:	f043 0301 	orr.w	r3, r3, #1
 80094ba:	6013      	str	r3, [r2, #0]
}
 80094bc:	bf00      	nop
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <LL_RCC_MSI_Disable>:
{
 80094c6:	b480      	push	{r7}
 80094c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80094ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094d4:	f023 0301 	bic.w	r3, r3, #1
 80094d8:	6013      	str	r3, [r2, #0]
}
 80094da:	bf00      	nop
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <LL_RCC_MSI_IsReady>:
{
 80094e4:	b480      	push	{r7}
 80094e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80094e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f003 0302 	and.w	r3, r3, #2
 80094f2:	2b02      	cmp	r3, #2
 80094f4:	d101      	bne.n	80094fa <LL_RCC_MSI_IsReady+0x16>
 80094f6:	2301      	movs	r3, #1
 80094f8:	e000      	b.n	80094fc <LL_RCC_MSI_IsReady+0x18>
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	46bd      	mov	sp, r7
 8009500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009504:	4770      	bx	lr

08009506 <LL_RCC_MSI_SetRange>:
{
 8009506:	b480      	push	{r7}
 8009508:	b083      	sub	sp, #12
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800950e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009518:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4313      	orrs	r3, r2
 8009520:	600b      	str	r3, [r1, #0]
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952c:	4770      	bx	lr

0800952e <LL_RCC_MSI_GetRange>:
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800953e:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2bb0      	cmp	r3, #176	; 0xb0
 8009544:	d901      	bls.n	800954a <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8009546:	23b0      	movs	r3, #176	; 0xb0
 8009548:	607b      	str	r3, [r7, #4]
  return msiRange;
 800954a:	687b      	ldr	r3, [r7, #4]
}
 800954c:	4618      	mov	r0, r3
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <LL_RCC_MSI_SetCalibTrimming>:
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8009560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009572:	4313      	orrs	r3, r2
 8009574:	604b      	str	r3, [r1, #4]
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <LL_RCC_SetSysClkSource>:
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800958a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f023 0203 	bic.w	r2, r3, #3
 8009594:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4313      	orrs	r3, r2
 800959c:	608b      	str	r3, [r1, #8]
}
 800959e:	bf00      	nop
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr

080095aa <LL_RCC_GetSysClkSource>:
{
 80095aa:	b480      	push	{r7}
 80095ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80095ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f003 030c 	and.w	r3, r3, #12
}
 80095b8:	4618      	mov	r0, r3
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <LL_RCC_SetAHBPrescaler>:
{
 80095c2:	b480      	push	{r7}
 80095c4:	b083      	sub	sp, #12
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80095ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095ce:	689b      	ldr	r3, [r3, #8]
 80095d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4313      	orrs	r3, r2
 80095dc:	608b      	str	r3, [r1, #8]
}
 80095de:	bf00      	nop
 80095e0:	370c      	adds	r7, #12
 80095e2:	46bd      	mov	sp, r7
 80095e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <LL_C2_RCC_SetAHBPrescaler>:
{
 80095ea:	b480      	push	{r7}
 80095ec:	b083      	sub	sp, #12
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80095f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80095fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80095fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4313      	orrs	r3, r2
 8009606:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800960a:	bf00      	nop
 800960c:	370c      	adds	r7, #12
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <LL_RCC_SetAHB4Prescaler>:
{
 8009616:	b480      	push	{r7}
 8009618:	b083      	sub	sp, #12
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800961e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009622:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009626:	f023 020f 	bic.w	r2, r3, #15
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	091b      	lsrs	r3, r3, #4
 800962e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009632:	4313      	orrs	r3, r2
 8009634:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr

08009644 <LL_RCC_SetAPB1Prescaler>:
{
 8009644:	b480      	push	{r7}
 8009646:	b083      	sub	sp, #12
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800964c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009650:	689b      	ldr	r3, [r3, #8]
 8009652:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009656:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4313      	orrs	r3, r2
 800965e:	608b      	str	r3, [r1, #8]
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <LL_RCC_SetAPB2Prescaler>:
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8009674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800967e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4313      	orrs	r3, r2
 8009686:	608b      	str	r3, [r1, #8]
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <LL_RCC_GetAHBPrescaler>:
{
 8009694:	b480      	push	{r7}
 8009696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8009698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <LL_C2_RCC_GetAHBPrescaler>:
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE));
 80096b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096b4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80096b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr

080096c6 <LL_RCC_GetAHB4Prescaler>:
{
 80096c6:	b480      	push	{r7}
 80096c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80096ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80096d2:	011b      	lsls	r3, r3, #4
 80096d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr

080096e2 <LL_RCC_GetAPB1Prescaler>:
{
 80096e2:	b480      	push	{r7}
 80096e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80096e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096ea:	689b      	ldr	r3, [r3, #8]
 80096ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <LL_RCC_GetAPB2Prescaler>:
{
 80096fa:	b480      	push	{r7}
 80096fc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80096fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8009708:	4618      	mov	r0, r3
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr

08009712 <LL_RCC_PLL_Enable>:
{
 8009712:	b480      	push	{r7}
 8009714:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009716:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009720:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009724:	6013      	str	r3, [r2, #0]
}
 8009726:	bf00      	nop
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <LL_RCC_PLL_Disable>:
{
 8009730:	b480      	push	{r7}
 8009732:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009734:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800973e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009742:	6013      	str	r3, [r2, #0]
}
 8009744:	bf00      	nop
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <LL_RCC_PLL_IsReady>:
{
 800974e:	b480      	push	{r7}
 8009750:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800975c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009760:	d101      	bne.n	8009766 <LL_RCC_PLL_IsReady+0x18>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <LL_RCC_PLL_IsReady+0x1a>
 8009766:	2300      	movs	r3, #0
}
 8009768:	4618      	mov	r0, r3
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <LL_RCC_PLL_GetN>:
{
 8009772:	b480      	push	{r7}
 8009774:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8009776:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	0a1b      	lsrs	r3, r3, #8
 800977e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8009782:	4618      	mov	r0, r3
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <LL_RCC_PLL_GetR>:
{
 800978c:	b480      	push	{r7}
 800978e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8009790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009794:	68db      	ldr	r3, [r3, #12]
 8009796:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800979a:	4618      	mov	r0, r3
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <LL_RCC_PLL_GetDivider>:
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80097a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <LL_RCC_PLL_GetMainSource>:
{
 80097bc:	b480      	push	{r7}
 80097be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80097c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097c4:	68db      	ldr	r3, [r3, #12]
 80097c6:	f003 0303 	and.w	r3, r3, #3
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <LL_RCC_IsActiveFlag_HPRE>:
{
 80097d4:	b480      	push	{r7}
 80097d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80097d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097dc:	689b      	ldr	r3, [r3, #8]
 80097de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097e6:	d101      	bne.n	80097ec <LL_RCC_IsActiveFlag_HPRE+0x18>
 80097e8:	2301      	movs	r3, #1
 80097ea:	e000      	b.n	80097ee <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 80097f8:	b480      	push	{r7}
 80097fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80097fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009800:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800980c:	d101      	bne.n	8009812 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800980e:	2301      	movs	r3, #1
 8009810:	e000      	b.n	8009814 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr

0800981e <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800981e:	b480      	push	{r7}
 8009820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009826:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800982a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800982e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009832:	d101      	bne.n	8009838 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8009844:	b480      	push	{r7}
 8009846:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8009848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009852:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009856:	d101      	bne.n	800985c <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8009858:	2301      	movs	r3, #1
 800985a:	e000      	b.n	800985e <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8009868:	b480      	push	{r7}
 800986a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800986c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009876:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800987a:	d101      	bne.n	8009880 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800987c:	2301      	movs	r3, #1
 800987e:	e000      	b.n	8009882 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8009880:	2300      	movs	r3, #0
}
 8009882:	4618      	mov	r0, r3
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800988c:	b590      	push	{r4, r7, lr}
 800988e:	b08d      	sub	sp, #52	; 0x34
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d101      	bne.n	800989e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800989a:	2301      	movs	r3, #1
 800989c:	e37e      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f003 0320 	and.w	r3, r3, #32
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	f000 8092 	beq.w	80099d0 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098ac:	f7ff fe7d 	bl	80095aa <LL_RCC_GetSysClkSource>
 80098b0:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098b2:	f7ff ff83 	bl	80097bc <LL_RCC_PLL_GetMainSource>
 80098b6:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d005      	beq.n	80098ca <HAL_RCC_OscConfig+0x3e>
 80098be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c0:	2b0c      	cmp	r3, #12
 80098c2:	d14c      	bne.n	800995e <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80098c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d149      	bne.n	800995e <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80098ca:	f7ff fe0b 	bl	80094e4 <LL_RCC_MSI_IsReady>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d005      	beq.n	80098e0 <HAL_RCC_OscConfig+0x54>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d101      	bne.n	80098e0 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80098dc:	2301      	movs	r3, #1
 80098de:	e35d      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80098e4:	f7ff fe23 	bl	800952e <LL_RCC_MSI_GetRange>
 80098e8:	4603      	mov	r3, r0
 80098ea:	429c      	cmp	r4, r3
 80098ec:	d914      	bls.n	8009918 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f000 fd5c 	bl	800a3b0 <RCC_SetFlashLatencyFromMSIRange>
 80098f8:	4603      	mov	r3, r0
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d001      	beq.n	8009902 <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80098fe:	2301      	movs	r3, #1
 8009900:	e34c      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009906:	4618      	mov	r0, r3
 8009908:	f7ff fdfd 	bl	8009506 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6a1b      	ldr	r3, [r3, #32]
 8009910:	4618      	mov	r0, r3
 8009912:	f7ff fe21 	bl	8009558 <LL_RCC_MSI_SetCalibTrimming>
 8009916:	e013      	b.n	8009940 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	4618      	mov	r0, r3
 800991e:	f7ff fdf2 	bl	8009506 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6a1b      	ldr	r3, [r3, #32]
 8009926:	4618      	mov	r0, r3
 8009928:	f7ff fe16 	bl	8009558 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fd3d 	bl	800a3b0 <RCC_SetFlashLatencyFromMSIRange>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d001      	beq.n	8009940 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 800993c:	2301      	movs	r3, #1
 800993e:	e32d      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8009940:	f000 fcda 	bl	800a2f8 <HAL_RCC_GetHCLKFreq>
 8009944:	4602      	mov	r2, r0
 8009946:	4bb3      	ldr	r3, [pc, #716]	; (8009c14 <HAL_RCC_OscConfig+0x388>)
 8009948:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800994a:	4bb3      	ldr	r3, [pc, #716]	; (8009c18 <HAL_RCC_OscConfig+0x38c>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f7fd fb6e 	bl	8007030 <HAL_InitTick>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d039      	beq.n	80099ce <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e31e      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	69db      	ldr	r3, [r3, #28]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d01e      	beq.n	80099a4 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009966:	f7ff fd9f 	bl	80094a8 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800996a:	f7fe f8b3 	bl	8007ad4 <HAL_GetTick>
 800996e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8009970:	e008      	b.n	8009984 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009972:	f7fe f8af 	bl	8007ad4 <HAL_GetTick>
 8009976:	4602      	mov	r2, r0
 8009978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800997a:	1ad3      	subs	r3, r2, r3
 800997c:	2b02      	cmp	r3, #2
 800997e:	d901      	bls.n	8009984 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8009980:	2303      	movs	r3, #3
 8009982:	e30b      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8009984:	f7ff fdae 	bl	80094e4 <LL_RCC_MSI_IsReady>
 8009988:	4603      	mov	r3, r0
 800998a:	2b00      	cmp	r3, #0
 800998c:	d0f1      	beq.n	8009972 <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fdb7 	bl	8009506 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	6a1b      	ldr	r3, [r3, #32]
 800999c:	4618      	mov	r0, r3
 800999e:	f7ff fddb 	bl	8009558 <LL_RCC_MSI_SetCalibTrimming>
 80099a2:	e015      	b.n	80099d0 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80099a4:	f7ff fd8f 	bl	80094c6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80099a8:	f7fe f894 	bl	8007ad4 <HAL_GetTick>
 80099ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80099ae:	e008      	b.n	80099c2 <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80099b0:	f7fe f890 	bl	8007ad4 <HAL_GetTick>
 80099b4:	4602      	mov	r2, r0
 80099b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b8:	1ad3      	subs	r3, r2, r3
 80099ba:	2b02      	cmp	r3, #2
 80099bc:	d901      	bls.n	80099c2 <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e2ec      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 80099c2:	f7ff fd8f 	bl	80094e4 <LL_RCC_MSI_IsReady>
 80099c6:	4603      	mov	r3, r0
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f1      	bne.n	80099b0 <HAL_RCC_OscConfig+0x124>
 80099cc:	e000      	b.n	80099d0 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80099ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0301 	and.w	r3, r3, #1
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d04e      	beq.n	8009a7a <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099dc:	f7ff fde5 	bl	80095aa <LL_RCC_GetSysClkSource>
 80099e0:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80099e2:	f7ff feeb 	bl	80097bc <LL_RCC_PLL_GetMainSource>
 80099e6:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	2b08      	cmp	r3, #8
 80099ec:	d005      	beq.n	80099fa <HAL_RCC_OscConfig+0x16e>
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	2b0c      	cmp	r3, #12
 80099f2:	d10d      	bne.n	8009a10 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80099f4:	69fb      	ldr	r3, [r7, #28]
 80099f6:	2b03      	cmp	r3, #3
 80099f8:	d10a      	bne.n	8009a10 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099fa:	f7ff fbf5 	bl	80091e8 <LL_RCC_HSE_IsReady>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d039      	beq.n	8009a78 <HAL_RCC_OscConfig+0x1ec>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d135      	bne.n	8009a78 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e2c5      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a18:	d102      	bne.n	8009a20 <HAL_RCC_OscConfig+0x194>
 8009a1a:	f7ff fbc7 	bl	80091ac <LL_RCC_HSE_Enable>
 8009a1e:	e001      	b.n	8009a24 <HAL_RCC_OscConfig+0x198>
 8009a20:	f7ff fbd3 	bl	80091ca <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d012      	beq.n	8009a52 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a2c:	f7fe f852 	bl	8007ad4 <HAL_GetTick>
 8009a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a32:	e008      	b.n	8009a46 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a34:	f7fe f84e 	bl	8007ad4 <HAL_GetTick>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3c:	1ad3      	subs	r3, r2, r3
 8009a3e:	2b64      	cmp	r3, #100	; 0x64
 8009a40:	d901      	bls.n	8009a46 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8009a42:	2303      	movs	r3, #3
 8009a44:	e2aa      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a46:	f7ff fbcf 	bl	80091e8 <LL_RCC_HSE_IsReady>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d0f1      	beq.n	8009a34 <HAL_RCC_OscConfig+0x1a8>
 8009a50:	e013      	b.n	8009a7a <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a52:	f7fe f83f 	bl	8007ad4 <HAL_GetTick>
 8009a56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009a58:	e008      	b.n	8009a6c <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a5a:	f7fe f83b 	bl	8007ad4 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b64      	cmp	r3, #100	; 0x64
 8009a66:	d901      	bls.n	8009a6c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e297      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009a6c:	f7ff fbbc 	bl	80091e8 <LL_RCC_HSE_IsReady>
 8009a70:	4603      	mov	r3, r0
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d1f1      	bne.n	8009a5a <HAL_RCC_OscConfig+0x1ce>
 8009a76:	e000      	b.n	8009a7a <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f003 0302 	and.w	r3, r3, #2
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d051      	beq.n	8009b2a <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a86:	f7ff fd90 	bl	80095aa <LL_RCC_GetSysClkSource>
 8009a8a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a8c:	f7ff fe96 	bl	80097bc <LL_RCC_PLL_GetMainSource>
 8009a90:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	d005      	beq.n	8009aa4 <HAL_RCC_OscConfig+0x218>
 8009a98:	69bb      	ldr	r3, [r7, #24]
 8009a9a:	2b0c      	cmp	r3, #12
 8009a9c:	d113      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	2b02      	cmp	r3, #2
 8009aa2:	d110      	bne.n	8009ac6 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009aa4:	f7ff fbd0 	bl	8009248 <LL_RCC_HSI_IsReady>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d005      	beq.n	8009aba <HAL_RCC_OscConfig+0x22e>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d101      	bne.n	8009aba <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	e270      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	691b      	ldr	r3, [r3, #16]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f7ff fbd4 	bl	800926c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ac4:	e031      	b.n	8009b2a <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d019      	beq.n	8009b02 <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ace:	f7ff fb9d 	bl	800920c <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad2:	f7fd ffff 	bl	8007ad4 <HAL_GetTick>
 8009ad6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009ad8:	e008      	b.n	8009aec <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ada:	f7fd fffb 	bl	8007ad4 <HAL_GetTick>
 8009ade:	4602      	mov	r2, r0
 8009ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae2:	1ad3      	subs	r3, r2, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d901      	bls.n	8009aec <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8009ae8:	2303      	movs	r3, #3
 8009aea:	e257      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009aec:	f7ff fbac 	bl	8009248 <LL_RCC_HSI_IsReady>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d0f1      	beq.n	8009ada <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff fbb6 	bl	800926c <LL_RCC_HSI_SetCalibTrimming>
 8009b00:	e013      	b.n	8009b2a <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b02:	f7ff fb92 	bl	800922a <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b06:	f7fd ffe5 	bl	8007ad4 <HAL_GetTick>
 8009b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009b0c:	e008      	b.n	8009b20 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b0e:	f7fd ffe1 	bl	8007ad4 <HAL_GetTick>
 8009b12:	4602      	mov	r2, r0
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	1ad3      	subs	r3, r2, r3
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d901      	bls.n	8009b20 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	e23d      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009b20:	f7ff fb92 	bl	8009248 <LL_RCC_HSI_IsReady>
 8009b24:	4603      	mov	r3, r0
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1f1      	bne.n	8009b0e <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f003 0308 	and.w	r3, r3, #8
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d106      	bne.n	8009b44 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	f000 80a3 	beq.w	8009c8a <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	695b      	ldr	r3, [r3, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d076      	beq.n	8009c3a <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f003 0310 	and.w	r3, r3, #16
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d046      	beq.n	8009be6 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009b58:	f7ff fc49 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d113      	bne.n	8009b8a <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8009b62:	f7ff fc22 	bl	80093aa <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b66:	f7fd ffb5 	bl	8007ad4 <HAL_GetTick>
 8009b6a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009b6c:	e008      	b.n	8009b80 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009b6e:	f7fd ffb1 	bl	8007ad4 <HAL_GetTick>
 8009b72:	4602      	mov	r2, r0
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	2b02      	cmp	r3, #2
 8009b7a:	d901      	bls.n	8009b80 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8009b7c:	2303      	movs	r3, #3
 8009b7e:	e20d      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009b80:	f7ff fc35 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d0f1      	beq.n	8009b6e <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009b8a:	f7ff fc42 	bl	8009412 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b8e:	f7fd ffa1 	bl	8007ad4 <HAL_GetTick>
 8009b92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009b94:	e008      	b.n	8009ba8 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009b96:	f7fd ff9d 	bl	8007ad4 <HAL_GetTick>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	1ad3      	subs	r3, r2, r3
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d901      	bls.n	8009ba8 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	e1f9      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009ba8:	f7ff fc55 	bl	8009456 <LL_RCC_LSI2_IsReady>
 8009bac:	4603      	mov	r3, r0
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d0f1      	beq.n	8009b96 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7ff fc5f 	bl	800947a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009bbc:	f7ff fc06 	bl	80093cc <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc0:	f7fd ff88 	bl	8007ad4 <HAL_GetTick>
 8009bc4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009bc6:	e008      	b.n	8009bda <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009bc8:	f7fd ff84 	bl	8007ad4 <HAL_GetTick>
 8009bcc:	4602      	mov	r2, r0
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	1ad3      	subs	r3, r2, r3
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	d901      	bls.n	8009bda <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e1e0      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009bda:	f7ff fc08 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d1f1      	bne.n	8009bc8 <HAL_RCC_OscConfig+0x33c>
 8009be4:	e051      	b.n	8009c8a <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009be6:	f7ff fbe0 	bl	80093aa <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bea:	f7fd ff73 	bl	8007ad4 <HAL_GetTick>
 8009bee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009bf0:	e008      	b.n	8009c04 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009bf2:	f7fd ff6f 	bl	8007ad4 <HAL_GetTick>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	1ad3      	subs	r3, r2, r3
 8009bfc:	2b02      	cmp	r3, #2
 8009bfe:	d901      	bls.n	8009c04 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e1cb      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009c04:	f7ff fbf3 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d0f1      	beq.n	8009bf2 <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009c0e:	f7ff fc11 	bl	8009434 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009c12:	e00c      	b.n	8009c2e <HAL_RCC_OscConfig+0x3a2>
 8009c14:	20000014 	.word	0x20000014
 8009c18:	20000018 	.word	0x20000018
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c1c:	f7fd ff5a 	bl	8007ad4 <HAL_GetTick>
 8009c20:	4602      	mov	r2, r0
 8009c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	2b03      	cmp	r3, #3
 8009c28:	d901      	bls.n	8009c2e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e1b6      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009c2e:	f7ff fc12 	bl	8009456 <LL_RCC_LSI2_IsReady>
 8009c32:	4603      	mov	r3, r0
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1f1      	bne.n	8009c1c <HAL_RCC_OscConfig+0x390>
 8009c38:	e027      	b.n	8009c8a <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009c3a:	f7ff fbfb 	bl	8009434 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c3e:	f7fd ff49 	bl	8007ad4 <HAL_GetTick>
 8009c42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c44:	e008      	b.n	8009c58 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c46:	f7fd ff45 	bl	8007ad4 <HAL_GetTick>
 8009c4a:	4602      	mov	r2, r0
 8009c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4e:	1ad3      	subs	r3, r2, r3
 8009c50:	2b03      	cmp	r3, #3
 8009c52:	d901      	bls.n	8009c58 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e1a1      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c58:	f7ff fbfd 	bl	8009456 <LL_RCC_LSI2_IsReady>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f1      	bne.n	8009c46 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009c62:	f7ff fbb3 	bl	80093cc <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c66:	f7fd ff35 	bl	8007ad4 <HAL_GetTick>
 8009c6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009c6c:	e008      	b.n	8009c80 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009c6e:	f7fd ff31 	bl	8007ad4 <HAL_GetTick>
 8009c72:	4602      	mov	r2, r0
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	1ad3      	subs	r3, r2, r3
 8009c78:	2b02      	cmp	r3, #2
 8009c7a:	d901      	bls.n	8009c80 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e18d      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009c80:	f7ff fbb5 	bl	80093ee <LL_RCC_LSI1_IsReady>
 8009c84:	4603      	mov	r3, r0
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1f1      	bne.n	8009c6e <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f003 0304 	and.w	r3, r3, #4
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d05b      	beq.n	8009d4e <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009c96:	4bb5      	ldr	r3, [pc, #724]	; (8009f6c <HAL_RCC_OscConfig+0x6e0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d114      	bne.n	8009ccc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009ca2:	f7ff fa53 	bl	800914c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009ca6:	f7fd ff15 	bl	8007ad4 <HAL_GetTick>
 8009caa:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cac:	e008      	b.n	8009cc0 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cae:	f7fd ff11 	bl	8007ad4 <HAL_GetTick>
 8009cb2:	4602      	mov	r2, r0
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	2b02      	cmp	r3, #2
 8009cba:	d901      	bls.n	8009cc0 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e16d      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cc0:	4baa      	ldr	r3, [pc, #680]	; (8009f6c <HAL_RCC_OscConfig+0x6e0>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0f0      	beq.n	8009cae <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d102      	bne.n	8009cda <HAL_RCC_OscConfig+0x44e>
 8009cd4:	f7ff fb13 	bl	80092fe <LL_RCC_LSE_Enable>
 8009cd8:	e00c      	b.n	8009cf4 <HAL_RCC_OscConfig+0x468>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	689b      	ldr	r3, [r3, #8]
 8009cde:	2b05      	cmp	r3, #5
 8009ce0:	d104      	bne.n	8009cec <HAL_RCC_OscConfig+0x460>
 8009ce2:	f7ff fb2e 	bl	8009342 <LL_RCC_LSE_EnableBypass>
 8009ce6:	f7ff fb0a 	bl	80092fe <LL_RCC_LSE_Enable>
 8009cea:	e003      	b.n	8009cf4 <HAL_RCC_OscConfig+0x468>
 8009cec:	f7ff fb18 	bl	8009320 <LL_RCC_LSE_Disable>
 8009cf0:	f7ff fb38 	bl	8009364 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d014      	beq.n	8009d26 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cfc:	f7fd feea 	bl	8007ad4 <HAL_GetTick>
 8009d00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009d02:	e00a      	b.n	8009d1a <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d04:	f7fd fee6 	bl	8007ad4 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d901      	bls.n	8009d1a <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 8009d16:	2303      	movs	r3, #3
 8009d18:	e140      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009d1a:	f7ff fb34 	bl	8009386 <LL_RCC_LSE_IsReady>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d0ef      	beq.n	8009d04 <HAL_RCC_OscConfig+0x478>
 8009d24:	e013      	b.n	8009d4e <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d26:	f7fd fed5 	bl	8007ad4 <HAL_GetTick>
 8009d2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009d2c:	e00a      	b.n	8009d44 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d2e:	f7fd fed1 	bl	8007ad4 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d901      	bls.n	8009d44 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e12b      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009d44:	f7ff fb1f 	bl	8009386 <LL_RCC_LSE_IsReady>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d1ef      	bne.n	8009d2e <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d02c      	beq.n	8009db4 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d014      	beq.n	8009d8c <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d62:	f7ff fa98 	bl	8009296 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d66:	f7fd feb5 	bl	8007ad4 <HAL_GetTick>
 8009d6a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009d6c:	e008      	b.n	8009d80 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d6e:	f7fd feb1 	bl	8007ad4 <HAL_GetTick>
 8009d72:	4602      	mov	r2, r0
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	1ad3      	subs	r3, r2, r3
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d901      	bls.n	8009d80 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8009d7c:	2303      	movs	r3, #3
 8009d7e:	e10d      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009d80:	f7ff faab 	bl	80092da <LL_RCC_HSI48_IsReady>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d0f1      	beq.n	8009d6e <HAL_RCC_OscConfig+0x4e2>
 8009d8a:	e013      	b.n	8009db4 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d8c:	f7ff fa94 	bl	80092b8 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d90:	f7fd fea0 	bl	8007ad4 <HAL_GetTick>
 8009d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009d96:	e008      	b.n	8009daa <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d98:	f7fd fe9c 	bl	8007ad4 <HAL_GetTick>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d901      	bls.n	8009daa <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e0f8      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009daa:	f7ff fa96 	bl	80092da <LL_RCC_HSI48_IsReady>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1f1      	bne.n	8009d98 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 80ee 	beq.w	8009f9a <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dbe:	f7ff fbf4 	bl	80095aa <LL_RCC_GetSysClkSource>
 8009dc2:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009dc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	f040 80af 	bne.w	8009f34 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f003 0203 	and.w	r2, r3, #3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d123      	bne.n	8009e2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d11c      	bne.n	8009e2c <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	0a1b      	lsrs	r3, r3, #8
 8009df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d114      	bne.n	8009e2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d10d      	bne.n	8009e2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d106      	bne.n	8009e2c <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d05d      	beq.n	8009ee8 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	2b0c      	cmp	r3, #12
 8009e30:	d058      	beq.n	8009ee4 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009e32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d001      	beq.n	8009e44 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 8009e40:	2301      	movs	r3, #1
 8009e42:	e0ab      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009e44:	f7ff fc74 	bl	8009730 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009e48:	f7fd fe44 	bl	8007ad4 <HAL_GetTick>
 8009e4c:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e4e:	e008      	b.n	8009e62 <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e50:	f7fd fe40 	bl	8007ad4 <HAL_GetTick>
 8009e54:	4602      	mov	r2, r0
 8009e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e58:	1ad3      	subs	r3, r2, r3
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d901      	bls.n	8009e62 <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 8009e5e:	2303      	movs	r3, #3
 8009e60:	e09c      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d1ef      	bne.n	8009e50 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e74:	68da      	ldr	r2, [r3, #12]
 8009e76:	4b3e      	ldr	r3, [pc, #248]	; (8009f70 <HAL_RCC_OscConfig+0x6e4>)
 8009e78:	4013      	ands	r3, r2
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009e7e:	687a      	ldr	r2, [r7, #4]
 8009e80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009e82:	4311      	orrs	r1, r2
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e88:	0212      	lsls	r2, r2, #8
 8009e8a:	4311      	orrs	r1, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009e90:	4311      	orrs	r1, r2
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009e96:	4311      	orrs	r1, r2
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009e9c:	430a      	orrs	r2, r1
 8009e9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009ea6:	f7ff fc34 	bl	8009712 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009eaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eae:	68db      	ldr	r3, [r3, #12]
 8009eb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eb8:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009eba:	f7fd fe0b 	bl	8007ad4 <HAL_GetTick>
 8009ebe:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ec0:	e008      	b.n	8009ed4 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ec2:	f7fd fe07 	bl	8007ad4 <HAL_GetTick>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	2b02      	cmp	r3, #2
 8009ece:	d901      	bls.n	8009ed4 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8009ed0:	2303      	movs	r3, #3
 8009ed2:	e063      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d0ef      	beq.n	8009ec2 <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ee2:	e05a      	b.n	8009f9a <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	e059      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d151      	bne.n	8009f9a <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009ef6:	f7ff fc0c 	bl	8009712 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f08:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f0a:	f7fd fde3 	bl	8007ad4 <HAL_GetTick>
 8009f0e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f10:	e008      	b.n	8009f24 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f12:	f7fd fddf 	bl	8007ad4 <HAL_GetTick>
 8009f16:	4602      	mov	r2, r0
 8009f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f1a:	1ad3      	subs	r3, r2, r3
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d901      	bls.n	8009f24 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8009f20:	2303      	movs	r3, #3
 8009f22:	e03b      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d0ef      	beq.n	8009f12 <HAL_RCC_OscConfig+0x686>
 8009f32:	e032      	b.n	8009f9a <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	2b0c      	cmp	r3, #12
 8009f38:	d02d      	beq.n	8009f96 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f3a:	f7ff fbf9 	bl	8009730 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8009f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f48:	f023 0303 	bic.w	r3, r3, #3
 8009f4c:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 8009f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f58:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8009f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f60:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f62:	f7fd fdb7 	bl	8007ad4 <HAL_GetTick>
 8009f66:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f68:	e00d      	b.n	8009f86 <HAL_RCC_OscConfig+0x6fa>
 8009f6a:	bf00      	nop
 8009f6c:	58000400 	.word	0x58000400
 8009f70:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f74:	f7fd fdae 	bl	8007ad4 <HAL_GetTick>
 8009f78:	4602      	mov	r2, r0
 8009f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f7c:	1ad3      	subs	r3, r2, r3
 8009f7e:	2b02      	cmp	r3, #2
 8009f80:	d901      	bls.n	8009f86 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 8009f82:	2303      	movs	r3, #3
 8009f84:	e00a      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1ef      	bne.n	8009f74 <HAL_RCC_OscConfig+0x6e8>
 8009f94:	e001      	b.n	8009f9a <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3734      	adds	r7, #52	; 0x34
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd90      	pop	{r4, r7, pc}

08009fa4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b084      	sub	sp, #16
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d101      	bne.n	8009fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e12d      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fb8:	4b98      	ldr	r3, [pc, #608]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0307 	and.w	r3, r3, #7
 8009fc0:	683a      	ldr	r2, [r7, #0]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d91b      	bls.n	8009ffe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fc6:	4b95      	ldr	r3, [pc, #596]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f023 0207 	bic.w	r2, r3, #7
 8009fce:	4993      	ldr	r1, [pc, #588]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fd6:	f7fd fd7d 	bl	8007ad4 <HAL_GetTick>
 8009fda:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fdc:	e008      	b.n	8009ff0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009fde:	f7fd fd79 	bl	8007ad4 <HAL_GetTick>
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	1ad3      	subs	r3, r2, r3
 8009fe8:	2b02      	cmp	r3, #2
 8009fea:	d901      	bls.n	8009ff0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009fec:	2303      	movs	r3, #3
 8009fee:	e111      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ff0:	4b8a      	ldr	r3, [pc, #552]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f003 0307 	and.w	r3, r3, #7
 8009ff8:	683a      	ldr	r2, [r7, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d1ef      	bne.n	8009fde <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0302 	and.w	r3, r3, #2
 800a006:	2b00      	cmp	r3, #0
 800a008:	d016      	beq.n	800a038 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	4618      	mov	r0, r3
 800a010:	f7ff fad7 	bl	80095c2 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a014:	f7fd fd5e 	bl	8007ad4 <HAL_GetTick>
 800a018:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a01a:	e008      	b.n	800a02e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a01c:	f7fd fd5a 	bl	8007ad4 <HAL_GetTick>
 800a020:	4602      	mov	r2, r0
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1ad3      	subs	r3, r2, r3
 800a026:	2b02      	cmp	r3, #2
 800a028:	d901      	bls.n	800a02e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800a02a:	2303      	movs	r3, #3
 800a02c:	e0f2      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a02e:	f7ff fbd1 	bl	80097d4 <LL_RCC_IsActiveFlag_HPRE>
 800a032:	4603      	mov	r3, r0
 800a034:	2b00      	cmp	r3, #0
 800a036:	d0f1      	beq.n	800a01c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f003 0320 	and.w	r3, r3, #32
 800a040:	2b00      	cmp	r3, #0
 800a042:	d016      	beq.n	800a072 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	695b      	ldr	r3, [r3, #20]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff face 	bl	80095ea <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a04e:	f7fd fd41 	bl	8007ad4 <HAL_GetTick>
 800a052:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a054:	e008      	b.n	800a068 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a056:	f7fd fd3d 	bl	8007ad4 <HAL_GetTick>
 800a05a:	4602      	mov	r2, r0
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	1ad3      	subs	r3, r2, r3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d901      	bls.n	800a068 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800a064:	2303      	movs	r3, #3
 800a066:	e0d5      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a068:	f7ff fbc6 	bl	80097f8 <LL_RCC_IsActiveFlag_C2HPRE>
 800a06c:	4603      	mov	r3, r0
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d0f1      	beq.n	800a056 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d016      	beq.n	800a0ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	699b      	ldr	r3, [r3, #24]
 800a082:	4618      	mov	r0, r3
 800a084:	f7ff fac7 	bl	8009616 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a088:	f7fd fd24 	bl	8007ad4 <HAL_GetTick>
 800a08c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a08e:	e008      	b.n	800a0a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a090:	f7fd fd20 	bl	8007ad4 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	d901      	bls.n	800a0a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800a09e:	2303      	movs	r3, #3
 800a0a0:	e0b8      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a0a2:	f7ff fbbc 	bl	800981e <LL_RCC_IsActiveFlag_SHDHPRE>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d0f1      	beq.n	800a090 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	f003 0304 	and.w	r3, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d016      	beq.n	800a0e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	4618      	mov	r0, r3
 800a0be:	f7ff fac1 	bl	8009644 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a0c2:	f7fd fd07 	bl	8007ad4 <HAL_GetTick>
 800a0c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a0c8:	e008      	b.n	800a0dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a0ca:	f7fd fd03 	bl	8007ad4 <HAL_GetTick>
 800a0ce:	4602      	mov	r2, r0
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	1ad3      	subs	r3, r2, r3
 800a0d4:	2b02      	cmp	r3, #2
 800a0d6:	d901      	bls.n	800a0dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800a0d8:	2303      	movs	r3, #3
 800a0da:	e09b      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a0dc:	f7ff fbb2 	bl	8009844 <LL_RCC_IsActiveFlag_PPRE1>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f1      	beq.n	800a0ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	f003 0308 	and.w	r3, r3, #8
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d017      	beq.n	800a122 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f7ff fab7 	bl	800966c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a0fe:	f7fd fce9 	bl	8007ad4 <HAL_GetTick>
 800a102:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a104:	e008      	b.n	800a118 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a106:	f7fd fce5 	bl	8007ad4 <HAL_GetTick>
 800a10a:	4602      	mov	r2, r0
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	1ad3      	subs	r3, r2, r3
 800a110:	2b02      	cmp	r3, #2
 800a112:	d901      	bls.n	800a118 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a114:	2303      	movs	r3, #3
 800a116:	e07d      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a118:	f7ff fba6 	bl	8009868 <LL_RCC_IsActiveFlag_PPRE2>
 800a11c:	4603      	mov	r3, r0
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d0f1      	beq.n	800a106 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f003 0301 	and.w	r3, r3, #1
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d043      	beq.n	800a1b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d106      	bne.n	800a144 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a136:	f7ff f857 	bl	80091e8 <LL_RCC_HSE_IsReady>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d11e      	bne.n	800a17e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a140:	2301      	movs	r3, #1
 800a142:	e067      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	685b      	ldr	r3, [r3, #4]
 800a148:	2b03      	cmp	r3, #3
 800a14a:	d106      	bne.n	800a15a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a14c:	f7ff faff 	bl	800974e <LL_RCC_PLL_IsReady>
 800a150:	4603      	mov	r3, r0
 800a152:	2b00      	cmp	r3, #0
 800a154:	d113      	bne.n	800a17e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	e05c      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d106      	bne.n	800a170 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a162:	f7ff f9bf 	bl	80094e4 <LL_RCC_MSI_IsReady>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d108      	bne.n	800a17e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e051      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a170:	f7ff f86a 	bl	8009248 <LL_RCC_HSI_IsReady>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e04a      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	685b      	ldr	r3, [r3, #4]
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff f9fd 	bl	8009582 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a188:	f7fd fca4 	bl	8007ad4 <HAL_GetTick>
 800a18c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a18e:	e00a      	b.n	800a1a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a190:	f7fd fca0 	bl	8007ad4 <HAL_GetTick>
 800a194:	4602      	mov	r2, r0
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	1ad3      	subs	r3, r2, r3
 800a19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d901      	bls.n	800a1a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a1a2:	2303      	movs	r3, #3
 800a1a4:	e036      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1a6:	f7ff fa00 	bl	80095aa <LL_RCC_GetSysClkSource>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d1ec      	bne.n	800a190 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1b6:	4b19      	ldr	r3, [pc, #100]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d21b      	bcs.n	800a1fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1c4:	4b15      	ldr	r3, [pc, #84]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f023 0207 	bic.w	r2, r3, #7
 800a1cc:	4913      	ldr	r1, [pc, #76]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d4:	f7fd fc7e 	bl	8007ad4 <HAL_GetTick>
 800a1d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1da:	e008      	b.n	800a1ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a1dc:	f7fd fc7a 	bl	8007ad4 <HAL_GetTick>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	1ad3      	subs	r3, r2, r3
 800a1e6:	2b02      	cmp	r3, #2
 800a1e8:	d901      	bls.n	800a1ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e012      	b.n	800a214 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1ee:	4b0b      	ldr	r3, [pc, #44]	; (800a21c <HAL_RCC_ClockConfig+0x278>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0307 	and.w	r3, r3, #7
 800a1f6:	683a      	ldr	r2, [r7, #0]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d1ef      	bne.n	800a1dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a1fc:	f000 f87c 	bl	800a2f8 <HAL_RCC_GetHCLKFreq>
 800a200:	4602      	mov	r2, r0
 800a202:	4b07      	ldr	r3, [pc, #28]	; (800a220 <HAL_RCC_ClockConfig+0x27c>)
 800a204:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a206:	f7fd fc71 	bl	8007aec <HAL_GetTickPrio>
 800a20a:	4603      	mov	r3, r0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fc ff0f 	bl	8007030 <HAL_InitTick>
 800a212:	4603      	mov	r3, r0
}
 800a214:	4618      	mov	r0, r3
 800a216:	3710      	adds	r7, #16
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}
 800a21c:	58004000 	.word	0x58004000
 800a220:	20000014 	.word	0x20000014

0800a224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a224:	b590      	push	{r4, r7, lr}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a22a:	f7ff f9be 	bl	80095aa <LL_RCC_GetSysClkSource>
 800a22e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d10a      	bne.n	800a24c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a236:	f7ff f97a 	bl	800952e <LL_RCC_MSI_GetRange>
 800a23a:	4603      	mov	r3, r0
 800a23c:	091b      	lsrs	r3, r3, #4
 800a23e:	f003 030f 	and.w	r3, r3, #15
 800a242:	4a2a      	ldr	r2, [pc, #168]	; (800a2ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800a244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e04a      	b.n	800a2e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b04      	cmp	r3, #4
 800a250:	d102      	bne.n	800a258 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a252:	4b27      	ldr	r3, [pc, #156]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a254:	60fb      	str	r3, [r7, #12]
 800a256:	e044      	b.n	800a2e2 <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2b08      	cmp	r3, #8
 800a25c:	d10a      	bne.n	800a274 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a25e:	f7fe ff93 	bl	8009188 <LL_RCC_HSE_IsEnabledDiv2>
 800a262:	4603      	mov	r3, r0
 800a264:	2b01      	cmp	r3, #1
 800a266:	d102      	bne.n	800a26e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a268:	4b21      	ldr	r3, [pc, #132]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a26a:	60fb      	str	r3, [r7, #12]
 800a26c:	e039      	b.n	800a2e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a26e:	4b21      	ldr	r3, [pc, #132]	; (800a2f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a270:	60fb      	str	r3, [r7, #12]
 800a272:	e036      	b.n	800a2e2 <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a274:	f7ff faa2 	bl	80097bc <LL_RCC_PLL_GetMainSource>
 800a278:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d002      	beq.n	800a286 <HAL_RCC_GetSysClockFreq+0x62>
 800a280:	2b03      	cmp	r3, #3
 800a282:	d003      	beq.n	800a28c <HAL_RCC_GetSysClockFreq+0x68>
 800a284:	e00d      	b.n	800a2a2 <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a286:	4b1a      	ldr	r3, [pc, #104]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a288:	60bb      	str	r3, [r7, #8]
        break;
 800a28a:	e015      	b.n	800a2b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a28c:	f7fe ff7c 	bl	8009188 <LL_RCC_HSE_IsEnabledDiv2>
 800a290:	4603      	mov	r3, r0
 800a292:	2b01      	cmp	r3, #1
 800a294:	d102      	bne.n	800a29c <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a296:	4b16      	ldr	r3, [pc, #88]	; (800a2f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a298:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a29a:	e00d      	b.n	800a2b8 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 800a29c:	4b15      	ldr	r3, [pc, #84]	; (800a2f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a29e:	60bb      	str	r3, [r7, #8]
        break;
 800a2a0:	e00a      	b.n	800a2b8 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a2a2:	f7ff f944 	bl	800952e <LL_RCC_MSI_GetRange>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	091b      	lsrs	r3, r3, #4
 800a2aa:	f003 030f 	and.w	r3, r3, #15
 800a2ae:	4a0f      	ldr	r2, [pc, #60]	; (800a2ec <HAL_RCC_GetSysClockFreq+0xc8>)
 800a2b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2b4:	60bb      	str	r3, [r7, #8]
        break;
 800a2b6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 800a2b8:	f7ff fa5b 	bl	8009772 <LL_RCC_PLL_GetN>
 800a2bc:	4602      	mov	r2, r0
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	fb03 f402 	mul.w	r4, r3, r2
 800a2c4:	f7ff fa6e 	bl	80097a4 <LL_RCC_PLL_GetDivider>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	091b      	lsrs	r3, r3, #4
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	fbb4 f4f3 	udiv	r4, r4, r3
 800a2d2:	f7ff fa5b 	bl	800978c <LL_RCC_PLL_GetR>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	0f5b      	lsrs	r3, r3, #29
 800a2da:	3301      	adds	r3, #1
 800a2dc:	fbb4 f3f3 	udiv	r3, r4, r3
 800a2e0:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	bd90      	pop	{r4, r7, pc}
 800a2ec:	08019878 	.word	0x08019878
 800a2f0:	00f42400 	.word	0x00f42400
 800a2f4:	01e84800 	.word	0x01e84800

0800a2f8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2f8:	b598      	push	{r3, r4, r7, lr}
 800a2fa:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a2fc:	f7ff ff92 	bl	800a224 <HAL_RCC_GetSysClockFreq>
 800a300:	4604      	mov	r4, r0
 800a302:	f7ff f9c7 	bl	8009694 <LL_RCC_GetAHBPrescaler>
 800a306:	4603      	mov	r3, r0
 800a308:	091b      	lsrs	r3, r3, #4
 800a30a:	f003 030f 	and.w	r3, r3, #15
 800a30e:	4a03      	ldr	r2, [pc, #12]	; (800a31c <HAL_RCC_GetHCLKFreq+0x24>)
 800a310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a314:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a318:	4618      	mov	r0, r3
 800a31a:	bd98      	pop	{r3, r4, r7, pc}
 800a31c:	08019818 	.word	0x08019818

0800a320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a320:	b598      	push	{r3, r4, r7, lr}
 800a322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a324:	f7ff ffe8 	bl	800a2f8 <HAL_RCC_GetHCLKFreq>
 800a328:	4604      	mov	r4, r0
 800a32a:	f7ff f9e6 	bl	80096fa <LL_RCC_GetAPB2Prescaler>
 800a32e:	4603      	mov	r3, r0
 800a330:	0adb      	lsrs	r3, r3, #11
 800a332:	f003 0307 	and.w	r3, r3, #7
 800a336:	4a04      	ldr	r2, [pc, #16]	; (800a348 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a33c:	f003 031f 	and.w	r3, r3, #31
 800a340:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a344:	4618      	mov	r0, r3
 800a346:	bd98      	pop	{r3, r4, r7, pc}
 800a348:	08019858 	.word	0x08019858

0800a34c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a34c:	b580      	push	{r7, lr}
 800a34e:	b082      	sub	sp, #8
 800a350:	af00      	add	r7, sp, #0
 800a352:	6078      	str	r0, [r7, #4]
 800a354:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 |  \
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	226f      	movs	r2, #111	; 0x6f
 800a35a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_HCLK2 | RCC_CLOCKTYPE_HCLK4);

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = LL_RCC_GetSysClkSource();
 800a35c:	f7ff f925 	bl	80095aa <LL_RCC_GetSysClkSource>
 800a360:	4602      	mov	r2, r0
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = LL_RCC_GetAHBPrescaler();
 800a366:	f7ff f995 	bl	8009694 <LL_RCC_GetAHBPrescaler>
 800a36a:	4602      	mov	r2, r0
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = LL_RCC_GetAPB1Prescaler();
 800a370:	f7ff f9b7 	bl	80096e2 <LL_RCC_GetAPB1Prescaler>
 800a374:	4602      	mov	r2, r0
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = LL_RCC_GetAPB2Prescaler();
 800a37a:	f7ff f9be 	bl	80096fa <LL_RCC_GetAPB2Prescaler>
 800a37e:	4602      	mov	r2, r0
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	611a      	str	r2, [r3, #16]

  /* Get the AHBCLK2Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK2Divider = LL_C2_RCC_GetAHBPrescaler();
 800a384:	f7ff f992 	bl	80096ac <LL_C2_RCC_GetAHBPrescaler>
 800a388:	4602      	mov	r2, r0
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	615a      	str	r2, [r3, #20]

  /* Get the AHBCLK4Divider configuration ------------------------------------*/
  RCC_ClkInitStruct->AHBCLK4Divider = LL_RCC_GetAHB4Prescaler();
 800a38e:	f7ff f99a 	bl	80096c6 <LL_RCC_GetAHB4Prescaler>
 800a392:	4602      	mov	r2, r0
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	619a      	str	r2, [r3, #24]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a398:	4b04      	ldr	r3, [pc, #16]	; (800a3ac <HAL_RCC_GetClockConfig+0x60>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f003 0207 	and.w	r2, r3, #7
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	3708      	adds	r7, #8
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}
 800a3ac:	58004000 	.word	0x58004000

0800a3b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a3b0:	b590      	push	{r4, r7, lr}
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	2bb0      	cmp	r3, #176	; 0xb0
 800a3bc:	d903      	bls.n	800a3c6 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a3be:	4b15      	ldr	r3, [pc, #84]	; (800a414 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a3c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e007      	b.n	800a3d6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	091b      	lsrs	r3, r3, #4
 800a3ca:	f003 030f 	and.w	r3, r3, #15
 800a3ce:	4a11      	ldr	r2, [pc, #68]	; (800a414 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a3d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3d4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a3d6:	f7ff f976 	bl	80096c6 <LL_RCC_GetAHB4Prescaler>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	091b      	lsrs	r3, r3, #4
 800a3de:	f003 030f 	and.w	r3, r3, #15
 800a3e2:	4a0d      	ldr	r2, [pc, #52]	; (800a418 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ee:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a3f4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3f8:	0c9c      	lsrs	r4, r3, #18
 800a3fa:	f7fe feb7 	bl	800916c <HAL_PWREx_GetVoltageRange>
 800a3fe:	4603      	mov	r3, r0
 800a400:	4619      	mov	r1, r3
 800a402:	4620      	mov	r0, r4
 800a404:	f000 f80c 	bl	800a420 <RCC_SetFlashLatency>
 800a408:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd90      	pop	{r4, r7, pc}
 800a412:	bf00      	nop
 800a414:	08019878 	.word	0x08019878
 800a418:	08019818 	.word	0x08019818
 800a41c:	431bde83 	.word	0x431bde83

0800a420 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a420:	b590      	push	{r4, r7, lr}
 800a422:	b093      	sub	sp, #76	; 0x4c
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a42a:	4b39      	ldr	r3, [pc, #228]	; (800a510 <RCC_SetFlashLatency+0xf0>)
 800a42c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a436:	4a37      	ldr	r2, [pc, #220]	; (800a514 <RCC_SetFlashLatency+0xf4>)
 800a438:	f107 031c 	add.w	r3, r7, #28
 800a43c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a43e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a442:	4b35      	ldr	r3, [pc, #212]	; (800a518 <RCC_SetFlashLatency+0xf8>)
 800a444:	f107 040c 	add.w	r4, r7, #12
 800a448:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a44a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a44e:	2300      	movs	r3, #0
 800a450:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a458:	d11c      	bne.n	800a494 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a45a:	2300      	movs	r3, #0
 800a45c:	643b      	str	r3, [r7, #64]	; 0x40
 800a45e:	e015      	b.n	800a48c <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a460:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a468:	4413      	add	r3, r2
 800a46a:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a46e:	687a      	ldr	r2, [r7, #4]
 800a470:	429a      	cmp	r2, r3
 800a472:	d808      	bhi.n	800a486 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a47c:	4413      	add	r3, r2
 800a47e:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a482:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a484:	e022      	b.n	800a4cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a486:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a488:	3301      	adds	r3, #1
 800a48a:	643b      	str	r3, [r7, #64]	; 0x40
 800a48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d9e6      	bls.n	800a460 <RCC_SetFlashLatency+0x40>
 800a492:	e01b      	b.n	800a4cc <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a494:	2300      	movs	r3, #0
 800a496:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a498:	e015      	b.n	800a4c6 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a49a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4a2:	4413      	add	r3, r2
 800a4a4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a4a8:	687a      	ldr	r2, [r7, #4]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	d808      	bhi.n	800a4c0 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a4ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4b0:	009b      	lsls	r3, r3, #2
 800a4b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800a4b6:	4413      	add	r3, r2
 800a4b8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a4bc:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a4be:	e005      	b.n	800a4cc <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a4c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4c8:	2b02      	cmp	r3, #2
 800a4ca:	d9e6      	bls.n	800a49a <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 800a4cc:	4b13      	ldr	r3, [pc, #76]	; (800a51c <RCC_SetFlashLatency+0xfc>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f023 0207 	bic.w	r2, r3, #7
 800a4d4:	4911      	ldr	r1, [pc, #68]	; (800a51c <RCC_SetFlashLatency+0xfc>)
 800a4d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4d8:	4313      	orrs	r3, r2
 800a4da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4dc:	f7fd fafa 	bl	8007ad4 <HAL_GetTick>
 800a4e0:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a4e2:	e008      	b.n	800a4f6 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a4e4:	f7fd faf6 	bl	8007ad4 <HAL_GetTick>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	1ad3      	subs	r3, r2, r3
 800a4ee:	2b02      	cmp	r3, #2
 800a4f0:	d901      	bls.n	800a4f6 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 800a4f2:	2303      	movs	r3, #3
 800a4f4:	e007      	b.n	800a506 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a4f6:	4b09      	ldr	r3, [pc, #36]	; (800a51c <RCC_SetFlashLatency+0xfc>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f003 0307 	and.w	r3, r3, #7
 800a4fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a500:	429a      	cmp	r2, r3
 800a502:	d1ef      	bne.n	800a4e4 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	374c      	adds	r7, #76	; 0x4c
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd90      	pop	{r4, r7, pc}
 800a50e:	bf00      	nop
 800a510:	080186ac 	.word	0x080186ac
 800a514:	080186bc 	.word	0x080186bc
 800a518:	080186c8 	.word	0x080186c8
 800a51c:	58004000 	.word	0x58004000

0800a520 <LL_RCC_LSE_IsEnabled>:
{
 800a520:	b480      	push	{r7}
 800a522:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <LL_RCC_LSE_IsEnabled+0x18>
 800a534:	2301      	movs	r3, #1
 800a536:	e000      	b.n	800a53a <LL_RCC_LSE_IsEnabled+0x1a>
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <LL_RCC_LSE_IsReady>:
{
 800a544:	b480      	push	{r7}
 800a546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a54c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a550:	f003 0302 	and.w	r3, r3, #2
 800a554:	2b02      	cmp	r3, #2
 800a556:	d101      	bne.n	800a55c <LL_RCC_LSE_IsReady+0x18>
 800a558:	2301      	movs	r3, #1
 800a55a:	e000      	b.n	800a55e <LL_RCC_LSE_IsReady+0x1a>
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <LL_RCC_SetRFWKPClockSource>:
{
 800a568:	b480      	push	{r7}
 800a56a:	b083      	sub	sp, #12
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a578:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a57c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	4313      	orrs	r3, r2
 800a584:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a588:	bf00      	nop
 800a58a:	370c      	adds	r7, #12
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr

0800a594 <LL_RCC_SetSMPSClockSource>:
{
 800a594:	b480      	push	{r7}
 800a596:	b083      	sub	sp, #12
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a59c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	f023 0203 	bic.w	r2, r3, #3
 800a5a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a5b0:	bf00      	nop
 800a5b2:	370c      	adds	r7, #12
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ba:	4770      	bx	lr

0800a5bc <LL_RCC_SetSMPSPrescaler>:
{
 800a5bc:	b480      	push	{r7}
 800a5be:	b083      	sub	sp, #12
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a5c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a5ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a5d8:	bf00      	nop
 800a5da:	370c      	adds	r7, #12
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e2:	4770      	bx	lr

0800a5e4 <LL_RCC_SetUSARTClockSource>:
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a5ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f4:	f023 0203 	bic.w	r2, r3, #3
 800a5f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	4313      	orrs	r3, r2
 800a600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a604:	bf00      	nop
 800a606:	370c      	adds	r7, #12
 800a608:	46bd      	mov	sp, r7
 800a60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60e:	4770      	bx	lr

0800a610 <LL_RCC_SetLPUARTClockSource>:
{
 800a610:	b480      	push	{r7}
 800a612:	b083      	sub	sp, #12
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a61c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a620:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a624:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	4313      	orrs	r3, r2
 800a62c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <LL_RCC_SetI2CClockSource>:
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a644:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a648:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	091b      	lsrs	r3, r3, #4
 800a650:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a654:	43db      	mvns	r3, r3
 800a656:	401a      	ands	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a660:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a664:	4313      	orrs	r3, r2
 800a666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a66a:	bf00      	nop
 800a66c:	370c      	adds	r7, #12
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr

0800a676 <LL_RCC_SetLPTIMClockSource>:
{
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a67e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a682:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	0c1b      	lsrs	r3, r3, #16
 800a68a:	041b      	lsls	r3, r3, #16
 800a68c:	43db      	mvns	r3, r3
 800a68e:	401a      	ands	r2, r3
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	041b      	lsls	r3, r3, #16
 800a694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a698:	4313      	orrs	r3, r2
 800a69a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a69e:	bf00      	nop
 800a6a0:	370c      	adds	r7, #12
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <LL_RCC_SetSAIClockSource>:
{
 800a6aa:	b480      	push	{r7}
 800a6ac:	b083      	sub	sp, #12
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a6b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a6be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <LL_RCC_SetRNGClockSource>:
{
 800a6d6:	b480      	push	{r7}
 800a6d8:	b083      	sub	sp, #12
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a6de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6e6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a6ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a6f6:	bf00      	nop
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <LL_RCC_SetCLK48ClockSource>:
{
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a70a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a70e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a716:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	4313      	orrs	r3, r2
 800a71e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a722:	bf00      	nop
 800a724:	370c      	adds	r7, #12
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <LL_RCC_SetUSBClockSource>:
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b082      	sub	sp, #8
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a736:	6878      	ldr	r0, [r7, #4]
 800a738:	f7ff ffe3 	bl	800a702 <LL_RCC_SetCLK48ClockSource>
}
 800a73c:	bf00      	nop
 800a73e:	3708      	adds	r7, #8
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <LL_RCC_SetADCClockSource>:
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a74c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a754:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a758:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	4313      	orrs	r3, r2
 800a760:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a764:	bf00      	nop
 800a766:	370c      	adds	r7, #12
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <LL_RCC_SetRTCClockSource>:
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a77c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a784:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4313      	orrs	r3, r2
 800a78c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <LL_RCC_GetRTCClockSource>:
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a7a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <LL_RCC_ForceBackupDomainReset>:
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a7ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a7ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a7ce:	bf00      	nop
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a7dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a7f0:	bf00      	nop
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <LL_RCC_PLLSAI1_Enable>:
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a7fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a808:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a80c:	6013      	str	r3, [r2, #0]
}
 800a80e:	bf00      	nop
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <LL_RCC_PLLSAI1_Disable>:
{
 800a818:	b480      	push	{r7}
 800a81a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a81c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a82a:	6013      	str	r3, [r2, #0]
}
 800a82c:	bf00      	nop
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <LL_RCC_PLLSAI1_IsReady>:
{
 800a836:	b480      	push	{r7}
 800a838:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a83a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a844:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a848:	d101      	bne.n	800a84e <LL_RCC_PLLSAI1_IsReady+0x18>
 800a84a:	2301      	movs	r3, #1
 800a84c:	e000      	b.n	800a850 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a84e:	2300      	movs	r3, #0
}
 800a850:	4618      	mov	r0, r3
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr

0800a85a <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a85a:	b580      	push	{r7, lr}
 800a85c:	b088      	sub	sp, #32
 800a85e:	af00      	add	r7, sp, #0
 800a860:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a862:	2300      	movs	r3, #0
 800a864:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a866:	2300      	movs	r3, #0
 800a868:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a872:	2b00      	cmp	r3, #0
 800a874:	d033      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a87a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a87e:	d00c      	beq.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a880:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a884:	d802      	bhi.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a886:	2b00      	cmp	r3, #0
 800a888:	d010      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a88a:	e017      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x62>
 800a88c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a890:	d017      	beq.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800a892:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a896:	d016      	beq.n	800a8c6 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800a898:	e010      	b.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a89a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a8a8:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a8aa:	e00d      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 f947 	bl	800ab44 <RCCEx_PLLSAI1_ConfigNP>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a8ba:	e005      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a8bc:	2301      	movs	r3, #1
 800a8be:	77fb      	strb	r3, [r7, #31]
        break;
 800a8c0:	e002      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800a8c2:	bf00      	nop
 800a8c4:	e000      	b.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 800a8c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8c8:	7ffb      	ldrb	r3, [r7, #31]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff fee9 	bl	800a6aa <LL_RCC_SetSAIClockSource>
 800a8d8:	e001      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8da:	7ffb      	ldrb	r3, [r7, #31]
 800a8dc:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d046      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a8ea:	f7ff ff57 	bl	800a79c <LL_RCC_GetRTCClockSource>
 800a8ee:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f4:	69ba      	ldr	r2, [r7, #24]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d03c      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a8fa:	f7fe fc27 	bl	800914c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d105      	bne.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a908:	4618      	mov	r0, r3
 800a90a:	f7ff ff31 	bl	800a770 <LL_RCC_SetRTCClockSource>
 800a90e:	e02e      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a910:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a914:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a918:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a91a:	f7ff ff4c 	bl	800a7b6 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a91e:	f7ff ff5b 	bl	800a7d8 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92c:	4313      	orrs	r3, r2
 800a92e:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a930:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a934:	697b      	ldr	r3, [r7, #20]
 800a936:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a93a:	f7ff fdf1 	bl	800a520 <LL_RCC_LSE_IsEnabled>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b01      	cmp	r3, #1
 800a942:	d114      	bne.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a944:	f7fd f8c6 	bl	8007ad4 <HAL_GetTick>
 800a948:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a94a:	e00b      	b.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a94c:	f7fd f8c2 	bl	8007ad4 <HAL_GetTick>
 800a950:	4602      	mov	r2, r0
 800a952:	693b      	ldr	r3, [r7, #16]
 800a954:	1ad3      	subs	r3, r2, r3
 800a956:	f241 3288 	movw	r2, #5000	; 0x1388
 800a95a:	4293      	cmp	r3, r2
 800a95c:	d902      	bls.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	77fb      	strb	r3, [r7, #31]
              break;
 800a962:	e004      	b.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a964:	f7ff fdee 	bl	800a544 <LL_RCC_LSE_IsReady>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d1ee      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a96e:	7ffb      	ldrb	r3, [r7, #31]
 800a970:	77bb      	strb	r3, [r7, #30]
 800a972:	e001      	b.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a974:	7ffb      	ldrb	r3, [r7, #31]
 800a976:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 0301 	and.w	r3, r3, #1
 800a980:	2b00      	cmp	r3, #0
 800a982:	d004      	beq.n	800a98e <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	699b      	ldr	r3, [r3, #24]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7ff fe2b 	bl	800a5e4 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 0302 	and.w	r3, r3, #2
 800a996:	2b00      	cmp	r3, #0
 800a998:	d004      	beq.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	69db      	ldr	r3, [r3, #28]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f7ff fe36 	bl	800a610 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0310 	and.w	r3, r3, #16
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d004      	beq.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7ff fe5e 	bl	800a676 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f003 0320 	and.w	r3, r3, #32
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d004      	beq.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7ff fe53 	bl	800a676 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f003 0304 	and.w	r3, r3, #4
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d004      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a1b      	ldr	r3, [r3, #32]
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	f7ff fe2b 	bl	800a63c <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f003 0308 	and.w	r3, r3, #8
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d004      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	f7ff fe20 	bl	800a63c <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d022      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f7ff fe8e 	bl	800a72e <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800aa1a:	d107      	bne.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800aa1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa2a:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa34:	d10b      	bne.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	3304      	adds	r3, #4
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f000 f8dd 	bl	800abfa <RCCEx_PLLSAI1_ConfigNQ>
 800aa40:	4603      	mov	r3, r0
 800aa42:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800aa44:	7ffb      	ldrb	r3, [r7, #31]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d001      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 800aa4a:	7ffb      	ldrb	r3, [r7, #31]
 800aa4c:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d02b      	beq.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa62:	d008      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa6c:	d003      	beq.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d105      	bne.n	800aa82 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7ff fe2b 	bl	800a6d6 <LL_RCC_SetRNGClockSource>
 800aa80:	e00a      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa8a:	60fb      	str	r3, [r7, #12]
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	f7ff fe22 	bl	800a6d6 <LL_RCC_SetRNGClockSource>
 800aa92:	68f8      	ldr	r0, [r7, #12]
 800aa94:	f7ff fe35 	bl	800a702 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa9c:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800aaa0:	d107      	bne.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800aaa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aaac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aab0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d022      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7ff fe3e 	bl	800a744 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aacc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aad0:	d107      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800aad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aad6:	68db      	ldr	r3, [r3, #12]
 800aad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aadc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aae0:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aae6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aaea:	d10b      	bne.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3304      	adds	r3, #4
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f000 f8dd 	bl	800acb0 <RCCEx_PLLSAI1_ConfigNR>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800aafa:	7ffb      	ldrb	r3, [r7, #31]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d001      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 800ab00:	7ffb      	ldrb	r3, [r7, #31]
 800ab02:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d004      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fd27 	bl	800a568 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d009      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff fd46 	bl	800a5bc <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab34:	4618      	mov	r0, r3
 800ab36:	f7ff fd2d 	bl	800a594 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 800ab3a:	7fbb      	ldrb	r3, [r7, #30]
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3720      	adds	r7, #32
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}

0800ab44 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b084      	sub	sp, #16
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ab50:	f7ff fe62 	bl	800a818 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ab54:	f7fc ffbe 	bl	8007ad4 <HAL_GetTick>
 800ab58:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab5a:	e009      	b.n	800ab70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab5c:	f7fc ffba 	bl	8007ad4 <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d902      	bls.n	800ab70 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab6e:	e004      	b.n	800ab7a <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab70:	f7ff fe61 	bl	800a836 <LL_RCC_PLLSAI1_IsReady>
 800ab74:	4603      	mov	r3, r0
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1f0      	bne.n	800ab5c <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ab7a:	7bfb      	ldrb	r3, [r7, #15]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d137      	bne.n	800abf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ab80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	021b      	lsls	r3, r3, #8
 800ab90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab94:	4313      	orrs	r3, r2
 800ab96:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ab98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab9c:	691b      	ldr	r3, [r3, #16]
 800ab9e:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abaa:	4313      	orrs	r3, r2
 800abac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800abae:	f7ff fe24 	bl	800a7fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800abb2:	f7fc ff8f 	bl	8007ad4 <HAL_GetTick>
 800abb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800abb8:	e009      	b.n	800abce <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800abba:	f7fc ff8b 	bl	8007ad4 <HAL_GetTick>
 800abbe:	4602      	mov	r2, r0
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	d902      	bls.n	800abce <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800abc8:	2303      	movs	r3, #3
 800abca:	73fb      	strb	r3, [r7, #15]
        break;
 800abcc:	e004      	b.n	800abd8 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800abce:	f7ff fe32 	bl	800a836 <LL_RCC_PLLSAI1_IsReady>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d1f0      	bne.n	800abba <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800abd8:	7bfb      	ldrb	r3, [r7, #15]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d108      	bne.n	800abf0 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800abde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abe2:	691a      	ldr	r2, [r3, #16]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abec:	4313      	orrs	r3, r2
 800abee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800abf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	3710      	adds	r7, #16
 800abf6:	46bd      	mov	sp, r7
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac02:	2300      	movs	r3, #0
 800ac04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ac06:	f7ff fe07 	bl	800a818 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ac0a:	f7fc ff63 	bl	8007ad4 <HAL_GetTick>
 800ac0e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac10:	e009      	b.n	800ac26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac12:	f7fc ff5f 	bl	8007ad4 <HAL_GetTick>
 800ac16:	4602      	mov	r2, r0
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	1ad3      	subs	r3, r2, r3
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	d902      	bls.n	800ac26 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ac20:	2303      	movs	r3, #3
 800ac22:	73fb      	strb	r3, [r7, #15]
      break;
 800ac24:	e004      	b.n	800ac30 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac26:	f7ff fe06 	bl	800a836 <LL_RCC_PLLSAI1_IsReady>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d1f0      	bne.n	800ac12 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d137      	bne.n	800aca6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ac36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ac4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac60:	4313      	orrs	r3, r2
 800ac62:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ac64:	f7ff fdc9 	bl	800a7fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac68:	f7fc ff34 	bl	8007ad4 <HAL_GetTick>
 800ac6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac6e:	e009      	b.n	800ac84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac70:	f7fc ff30 	bl	8007ad4 <HAL_GetTick>
 800ac74:	4602      	mov	r2, r0
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	1ad3      	subs	r3, r2, r3
 800ac7a:	2b02      	cmp	r3, #2
 800ac7c:	d902      	bls.n	800ac84 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	73fb      	strb	r3, [r7, #15]
        break;
 800ac82:	e004      	b.n	800ac8e <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac84:	f7ff fdd7 	bl	800a836 <LL_RCC_PLLSAI1_IsReady>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b01      	cmp	r3, #1
 800ac8c:	d1f0      	bne.n	800ac70 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ac8e:	7bfb      	ldrb	r3, [r7, #15]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d108      	bne.n	800aca6 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ac94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac98:	691a      	ldr	r2, [r3, #16]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	691b      	ldr	r3, [r3, #16]
 800ac9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800aca2:	4313      	orrs	r3, r2
 800aca4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800aca6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3710      	adds	r7, #16
 800acac:	46bd      	mov	sp, r7
 800acae:	bd80      	pop	{r7, pc}

0800acb0 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800acb8:	2300      	movs	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800acbc:	f7ff fdac 	bl	800a818 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800acc0:	f7fc ff08 	bl	8007ad4 <HAL_GetTick>
 800acc4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800acc6:	e009      	b.n	800acdc <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800acc8:	f7fc ff04 	bl	8007ad4 <HAL_GetTick>
 800accc:	4602      	mov	r2, r0
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	1ad3      	subs	r3, r2, r3
 800acd2:	2b02      	cmp	r3, #2
 800acd4:	d902      	bls.n	800acdc <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800acd6:	2303      	movs	r3, #3
 800acd8:	73fb      	strb	r3, [r7, #15]
      break;
 800acda:	e004      	b.n	800ace6 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800acdc:	f7ff fdab 	bl	800a836 <LL_RCC_PLLSAI1_IsReady>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d1f0      	bne.n	800acc8 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d137      	bne.n	800ad5c <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800acec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acf0:	691b      	ldr	r3, [r3, #16]
 800acf2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	021b      	lsls	r3, r3, #8
 800acfc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad00:	4313      	orrs	r3, r2
 800ad02:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ad04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	68db      	ldr	r3, [r3, #12]
 800ad12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad16:	4313      	orrs	r3, r2
 800ad18:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ad1a:	f7ff fd6e 	bl	800a7fa <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad1e:	f7fc fed9 	bl	8007ad4 <HAL_GetTick>
 800ad22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ad24:	e009      	b.n	800ad3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ad26:	f7fc fed5 	bl	8007ad4 <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	2b02      	cmp	r3, #2
 800ad32:	d902      	bls.n	800ad3a <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ad34:	2303      	movs	r3, #3
 800ad36:	73fb      	strb	r3, [r7, #15]
        break;
 800ad38:	e004      	b.n	800ad44 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ad3a:	f7ff fd7c 	bl	800a836 <LL_RCC_PLLSAI1_IsReady>
 800ad3e:	4603      	mov	r3, r0
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d1f0      	bne.n	800ad26 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ad44:	7bfb      	ldrb	r3, [r7, #15]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d108      	bne.n	800ad5c <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ad4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad4e:	691a      	ldr	r2, [r3, #16]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad58:	4313      	orrs	r3, r2
 800ad5a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	3710      	adds	r7, #16
 800ad62:	46bd      	mov	sp, r7
 800ad64:	bd80      	pop	{r7, pc}

0800ad66 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ad66:	b580      	push	{r7, lr}
 800ad68:	b082      	sub	sp, #8
 800ad6a:	af00      	add	r7, sp, #0
 800ad6c:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d101      	bne.n	800ad78 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e090      	b.n	800ae9a <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ad7e:	b2db      	uxtb	r3, r3
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d106      	bne.n	800ad92 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f7fc f86b 	bl	8006e68 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2202      	movs	r2, #2
 800ad96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	22ca      	movs	r2, #202	; 0xca
 800ada0:	625a      	str	r2, [r3, #36]	; 0x24
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	2253      	movs	r2, #83	; 0x53
 800ada8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	f000 faba 	bl	800b324 <RTC_EnterInitMode>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d009      	beq.n	800adca <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	22ff      	movs	r2, #255	; 0xff
 800adbc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2204      	movs	r2, #4
 800adc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e067      	b.n	800ae9a <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	687a      	ldr	r2, [r7, #4]
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800add8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800addc:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	6899      	ldr	r1, [r3, #8]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685a      	ldr	r2, [r3, #4]
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	431a      	orrs	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	431a      	orrs	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	430a      	orrs	r2, r1
 800adfa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	687a      	ldr	r2, [r7, #4]
 800ae02:	68d2      	ldr	r2, [r2, #12]
 800ae04:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6919      	ldr	r1, [r3, #16]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	041a      	lsls	r2, r3, #16
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	430a      	orrs	r2, r1
 800ae18:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	68da      	ldr	r2, [r3, #12]
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae28:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	f022 0203 	bic.w	r2, r2, #3
 800ae38:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	69da      	ldr	r2, [r3, #28]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	431a      	orrs	r2, r3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	430a      	orrs	r2, r1
 800ae50:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f003 0320 	and.w	r3, r3, #32
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d113      	bne.n	800ae88 <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 fa39 	bl	800b2d8 <HAL_RTC_WaitForSynchro>
 800ae66:	4603      	mov	r3, r0
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00d      	beq.n	800ae88 <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	22ff      	movs	r2, #255	; 0xff
 800ae72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2204      	movs	r2, #4
 800ae78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	e008      	b.n	800ae9a <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	22ff      	movs	r2, #255	; 0xff
 800ae8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800ae98:	2300      	movs	r3, #0
  }
}
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	3708      	adds	r7, #8
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	bd80      	pop	{r7, pc}

0800aea2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800aea2:	b590      	push	{r4, r7, lr}
 800aea4:	b087      	sub	sp, #28
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	60f8      	str	r0, [r7, #12]
 800aeaa:	60b9      	str	r1, [r7, #8]
 800aeac:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */ 
  __HAL_LOCK(hrtc);
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d101      	bne.n	800aebc <HAL_RTC_SetTime+0x1a>
 800aeb8:	2302      	movs	r3, #2
 800aeba:	e0b2      	b.n	800b022 <HAL_RTC_SetTime+0x180>
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if(Format == RTC_FORMAT_BIN)
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d126      	bne.n	800af20 <HAL_RTC_SetTime+0x7e>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d102      	bne.n	800aee6 <HAL_RTC_SetTime+0x44>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800aee0:	68bb      	ldr	r3, [r7, #8]
 800aee2:	2200      	movs	r2, #0
 800aee4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800aee6:	68bb      	ldr	r3, [r7, #8]
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 fa44 	bl	800b378 <RTC_ByteToBcd2>
 800aef0:	4603      	mov	r3, r0
 800aef2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	785b      	ldrb	r3, [r3, #1]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f000 fa3d 	bl	800b378 <RTC_ByteToBcd2>
 800aefe:	4603      	mov	r3, r0
 800af00:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800af02:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800af04:	68bb      	ldr	r3, [r7, #8]
 800af06:	789b      	ldrb	r3, [r3, #2]
 800af08:	4618      	mov	r0, r3
 800af0a:	f000 fa35 	bl	800b378 <RTC_ByteToBcd2>
 800af0e:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800af10:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	78db      	ldrb	r3, [r3, #3]
 800af18:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800af1a:	4313      	orrs	r3, r2
 800af1c:	617b      	str	r3, [r7, #20]
 800af1e:	e018      	b.n	800af52 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	689b      	ldr	r3, [r3, #8]
 800af26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d102      	bne.n	800af34 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	2200      	movs	r2, #0
 800af32:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800af40:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800af42:	68ba      	ldr	r2, [r7, #8]
 800af44:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800af46:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	78db      	ldrb	r3, [r3, #3]
 800af4c:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800af4e:	4313      	orrs	r3, r2
 800af50:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	22ca      	movs	r2, #202	; 0xca
 800af58:	625a      	str	r2, [r3, #36]	; 0x24
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2253      	movs	r2, #83	; 0x53
 800af60:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f000 f9de 	bl	800b324 <RTC_EnterInitMode>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00d      	beq.n	800af8a <HAL_RTC_SetTime+0xe8>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	22ff      	movs	r2, #255	; 0xff
 800af74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2204      	movs	r2, #4
 800af7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e04b      	b.n	800b022 <HAL_RTC_SetTime+0x180>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800af94:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800af98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	689a      	ldr	r2, [r3, #8]
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800afa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	6899      	ldr	r1, [r3, #8]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	68da      	ldr	r2, [r3, #12]
 800afb4:	68bb      	ldr	r3, [r7, #8]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	431a      	orrs	r2, r3
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	430a      	orrs	r2, r1
 800afc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68da      	ldr	r2, [r3, #12]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800afd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	689b      	ldr	r3, [r3, #8]
 800afd8:	f003 0320 	and.w	r3, r3, #32
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d113      	bne.n	800b008 <HAL_RTC_SetTime+0x166>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800afe0:	68f8      	ldr	r0, [r7, #12]
 800afe2:	f000 f979 	bl	800b2d8 <HAL_RTC_WaitForSynchro>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d00d      	beq.n	800b008 <HAL_RTC_SetTime+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	22ff      	movs	r2, #255	; 0xff
 800aff2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2204      	movs	r2, #4
 800aff8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	2200      	movs	r2, #0
 800b000:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e00c      	b.n	800b022 <HAL_RTC_SetTime+0x180>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	22ff      	movs	r2, #255	; 0xff
 800b00e:	625a      	str	r2, [r3, #36]	; 0x24
    
   hrtc->State = HAL_RTC_STATE_READY;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2201      	movs	r2, #1
 800b014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

   __HAL_UNLOCK(hrtc); 
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2020 	strb.w	r2, [r3, #32]

   return HAL_OK;
 800b020:	2300      	movs	r3, #0
  }
}
 800b022:	4618      	mov	r0, r3
 800b024:	371c      	adds	r7, #28
 800b026:	46bd      	mov	sp, r7
 800b028:	bd90      	pop	{r4, r7, pc}

0800b02a <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b086      	sub	sp, #24
 800b02e:	af00      	add	r7, sp, #0
 800b030:	60f8      	str	r0, [r7, #12]
 800b032:	60b9      	str	r1, [r7, #8]
 800b034:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	691b      	ldr	r3, [r3, #16]
 800b046:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	609a      	str	r2, [r3, #8]
  
  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800b058:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800b05c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	0c1b      	lsrs	r3, r3, #16
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b068:	b2da      	uxtb	r2, r3
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	0a1b      	lsrs	r3, r3, #8
 800b072:	b2db      	uxtb	r3, r3
 800b074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b078:	b2da      	uxtb	r2, r3
 800b07a:	68bb      	ldr	r3, [r7, #8]
 800b07c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800b07e:	697b      	ldr	r3, [r7, #20]
 800b080:	b2db      	uxtb	r3, r3
 800b082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b086:	b2da      	uxtb	r2, r3
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	0c1b      	lsrs	r3, r3, #16
 800b090:	b2db      	uxtb	r3, r3
 800b092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b096:	b2da      	uxtb	r2, r3
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d11a      	bne.n	800b0d8 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	781b      	ldrb	r3, [r3, #0]
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f000 f986 	bl	800b3b8 <RTC_Bcd2ToByte>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	785b      	ldrb	r3, [r3, #1]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f000 f97d 	bl	800b3b8 <RTC_Bcd2ToByte>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	789b      	ldrb	r3, [r3, #2]
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 f974 	bl	800b3b8 <RTC_Bcd2ToByte>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3718      	adds	r7, #24
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format 
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b0e2:	b590      	push	{r4, r7, lr}
 800b0e4:	b087      	sub	sp, #28
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b0f4:	2b01      	cmp	r3, #1
 800b0f6:	d101      	bne.n	800b0fc <HAL_RTC_SetDate+0x1a>
 800b0f8:	2302      	movs	r3, #2
 800b0fa:	e09c      	b.n	800b236 <HAL_RTC_SetDate+0x154>
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	2201      	movs	r2, #1
 800b100:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2202      	movs	r2, #2
 800b108:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10e      	bne.n	800b130 <HAL_RTC_SetDate+0x4e>
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	785b      	ldrb	r3, [r3, #1]
 800b116:	f003 0310 	and.w	r3, r3, #16
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d008      	beq.n	800b130 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	785b      	ldrb	r3, [r3, #1]
 800b122:	f023 0310 	bic.w	r3, r3, #16
 800b126:	b2db      	uxtb	r3, r3
 800b128:	330a      	adds	r3, #10
 800b12a:	b2da      	uxtb	r2, r3
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d11c      	bne.n	800b170 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	78db      	ldrb	r3, [r3, #3]
 800b13a:	4618      	mov	r0, r3
 800b13c:	f000 f91c 	bl	800b378 <RTC_ByteToBcd2>
 800b140:	4603      	mov	r3, r0
 800b142:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	785b      	ldrb	r3, [r3, #1]
 800b148:	4618      	mov	r0, r3
 800b14a:	f000 f915 	bl	800b378 <RTC_ByteToBcd2>
 800b14e:	4603      	mov	r3, r0
 800b150:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b152:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	789b      	ldrb	r3, [r3, #2]
 800b158:	4618      	mov	r0, r3
 800b15a:	f000 f90d 	bl	800b378 <RTC_ByteToBcd2>
 800b15e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800b160:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	781b      	ldrb	r3, [r3, #0]
 800b168:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800b16a:	4313      	orrs	r3, r2
 800b16c:	617b      	str	r3, [r7, #20]
 800b16e:	e00e      	b.n	800b18e <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	78db      	ldrb	r3, [r3, #3]
 800b174:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	785b      	ldrb	r3, [r3, #1]
 800b17a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b17c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800b17e:	68ba      	ldr	r2, [r7, #8]
 800b180:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800b182:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800b18a:	4313      	orrs	r3, r2
 800b18c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	22ca      	movs	r2, #202	; 0xca
 800b194:	625a      	str	r2, [r3, #36]	; 0x24
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	2253      	movs	r2, #83	; 0x53
 800b19c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800b19e:	68f8      	ldr	r0, [r7, #12]
 800b1a0:	f000 f8c0 	bl	800b324 <RTC_EnterInitMode>
 800b1a4:	4603      	mov	r3, r0
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d00d      	beq.n	800b1c6 <HAL_RTC_SetDate+0xe4>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	22ff      	movs	r2, #255	; 0xff
 800b1b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	2204      	movs	r2, #4
 800b1b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2200      	movs	r2, #0
 800b1be:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	e037      	b.n	800b236 <HAL_RTC_SetDate+0x154>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681a      	ldr	r2, [r3, #0]
 800b1ca:	697b      	ldr	r3, [r7, #20]
 800b1cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b1d0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b1d4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68da      	ldr	r2, [r3, #12]
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1e4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	f003 0320 	and.w	r3, r3, #32
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d113      	bne.n	800b21c <HAL_RTC_SetDate+0x13a>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f000 f86f 	bl	800b2d8 <HAL_RTC_WaitForSynchro>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d00d      	beq.n	800b21c <HAL_RTC_SetDate+0x13a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	22ff      	movs	r2, #255	; 0xff
 800b206:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2204      	movs	r2, #4
 800b20c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2200      	movs	r2, #0
 800b214:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e00c      	b.n	800b236 <HAL_RTC_SetDate+0x154>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	22ff      	movs	r2, #255	; 0xff
 800b222:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */ 
    __HAL_UNLOCK(hrtc);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_OK;
 800b234:	2300      	movs	r3, #0
  }
}
 800b236:	4618      	mov	r0, r3
 800b238:	371c      	adds	r7, #28
 800b23a:	46bd      	mov	sp, r7
 800b23c:	bd90      	pop	{r4, r7, pc}

0800b23e <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800b23e:	b580      	push	{r7, lr}
 800b240:	b086      	sub	sp, #24
 800b242:	af00      	add	r7, sp, #0
 800b244:	60f8      	str	r0, [r7, #12]
 800b246:	60b9      	str	r1, [r7, #8]
 800b248:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b254:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b258:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	0c1b      	lsrs	r3, r3, #16
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	0a1b      	lsrs	r3, r3, #8
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	f003 031f 	and.w	r3, r3, #31
 800b26e:	b2da      	uxtb	r2, r3
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	b2db      	uxtb	r3, r3
 800b278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b27c:	b2da      	uxtb	r2, r3
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	0b5b      	lsrs	r3, r3, #13
 800b286:	b2db      	uxtb	r3, r3
 800b288:	f003 0307 	and.w	r3, r3, #7
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d11a      	bne.n	800b2ce <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	78db      	ldrb	r3, [r3, #3]
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 f88b 	bl	800b3b8 <RTC_Bcd2ToByte>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	68bb      	ldr	r3, [r7, #8]
 800b2a8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	785b      	ldrb	r3, [r3, #1]
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	f000 f882 	bl	800b3b8 <RTC_Bcd2ToByte>
 800b2b4:	4603      	mov	r3, r0
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800b2bc:	68bb      	ldr	r3, [r7, #8]
 800b2be:	789b      	ldrb	r3, [r3, #2]
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f000 f879 	bl	800b3b8 <RTC_Bcd2ToByte>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3718      	adds	r7, #24
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	68da      	ldr	r2, [r3, #12]
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b2ee:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b2f0:	f7fc fbf0 	bl	8007ad4 <HAL_GetTick>
 800b2f4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b2f6:	e009      	b.n	800b30c <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800b2f8:	f7fc fbec 	bl	8007ad4 <HAL_GetTick>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	1ad3      	subs	r3, r2, r3
 800b302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b306:	d901      	bls.n	800b30c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e007      	b.n	800b31c <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	68db      	ldr	r3, [r3, #12]
 800b312:	f003 0320 	and.w	r3, r3, #32
 800b316:	2b00      	cmp	r3, #0
 800b318:	d0ee      	beq.n	800b2f8 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800b31a:	2300      	movs	r3, #0
}
 800b31c:	4618      	mov	r0, r3
 800b31e:	3710      	adds	r7, #16
 800b320:	46bd      	mov	sp, r7
 800b322:	bd80      	pop	{r7, pc}

0800b324 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	68db      	ldr	r3, [r3, #12]
 800b332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b336:	2b00      	cmp	r3, #0
 800b338:	d119      	bne.n	800b36e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f04f 32ff 	mov.w	r2, #4294967295
 800b342:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800b344:	f7fc fbc6 	bl	8007ad4 <HAL_GetTick>
 800b348:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b34a:	e009      	b.n	800b360 <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 800b34c:	f7fc fbc2 	bl	8007ad4 <HAL_GetTick>
 800b350:	4602      	mov	r2, r0
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	1ad3      	subs	r3, r2, r3
 800b356:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b35a:	d901      	bls.n	800b360 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800b35c:	2303      	movs	r3, #3
 800b35e:	e007      	b.n	800b370 <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	68db      	ldr	r3, [r3, #12]
 800b366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d0ee      	beq.n	800b34c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3710      	adds	r7, #16
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	4603      	mov	r3, r0
 800b380:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800b382:	2300      	movs	r3, #0
 800b384:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 800b386:	79fb      	ldrb	r3, [r7, #7]
 800b388:	72fb      	strb	r3, [r7, #11]

  while(Param >= 10U)
 800b38a:	e005      	b.n	800b398 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	3301      	adds	r3, #1
 800b390:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800b392:	7afb      	ldrb	r3, [r7, #11]
 800b394:	3b0a      	subs	r3, #10
 800b396:	72fb      	strb	r3, [r7, #11]
  while(Param >= 10U)
 800b398:	7afb      	ldrb	r3, [r7, #11]
 800b39a:	2b09      	cmp	r3, #9
 800b39c:	d8f6      	bhi.n	800b38c <RTC_ByteToBcd2+0x14>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	011b      	lsls	r3, r3, #4
 800b3a4:	b2da      	uxtb	r2, r3
 800b3a6:	7afb      	ldrb	r3, [r7, #11]
 800b3a8:	4313      	orrs	r3, r2
 800b3aa:	b2db      	uxtb	r3, r3
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	4603      	mov	r3, r0
 800b3c0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 800b3c2:	79fb      	ldrb	r3, [r7, #7]
 800b3c4:	091b      	lsrs	r3, r3, #4
 800b3c6:	b2db      	uxtb	r3, r3
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4613      	mov	r3, r2
 800b3cc:	009b      	lsls	r3, r3, #2
 800b3ce:	4413      	add	r3, r2
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	f003 030f 	and.w	r3, r3, #15
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	4413      	add	r3, r2
 800b3e2:	b2db      	uxtb	r3, r3
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3714      	adds	r7, #20
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ee:	4770      	bx	lr

0800b3f0 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b083      	sub	sp, #12
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d101      	bne.n	800b406 <HAL_RTCEx_EnableBypassShadow+0x16>
 800b402:	2302      	movs	r3, #2
 800b404:	e024      	b.n	800b450 <HAL_RTCEx_EnableBypassShadow+0x60>
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	2202      	movs	r2, #2
 800b412:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	22ca      	movs	r2, #202	; 0xca
 800b41c:	625a      	str	r2, [r3, #36]	; 0x24
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2253      	movs	r2, #83	; 0x53
 800b424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	689a      	ldr	r2, [r3, #8]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f042 0220 	orr.w	r2, r2, #32
 800b434:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	22ff      	movs	r2, #255	; 0xff
 800b43c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	2201      	movs	r2, #1
 800b442:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d101      	bne.n	800b46e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b46a:	2301      	movs	r3, #1
 800b46c:	e095      	b.n	800b59a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b472:	2b00      	cmp	r3, #0
 800b474:	d108      	bne.n	800b488 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	685b      	ldr	r3, [r3, #4]
 800b47a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b47e:	d009      	beq.n	800b494 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2200      	movs	r2, #0
 800b484:	61da      	str	r2, [r3, #28]
 800b486:	e005      	b.n	800b494 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2200      	movs	r2, #0
 800b48c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d106      	bne.n	800b4b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2200      	movs	r2, #0
 800b4aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b4ae:	6878      	ldr	r0, [r7, #4]
 800b4b0:	f7fb fd2c 	bl	8006f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2202      	movs	r2, #2
 800b4b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681a      	ldr	r2, [r3, #0]
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4d4:	d902      	bls.n	800b4dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b4d6:	2300      	movs	r3, #0
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	e002      	b.n	800b4e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b4dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b4ea:	d007      	beq.n	800b4fc <HAL_SPI_Init+0xa0>
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	68db      	ldr	r3, [r3, #12]
 800b4f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b4f4:	d002      	beq.n	800b4fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	689b      	ldr	r3, [r3, #8]
 800b508:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800b50c:	431a      	orrs	r2, r3
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f003 0302 	and.w	r3, r3, #2
 800b516:	431a      	orrs	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	695b      	ldr	r3, [r3, #20]
 800b51c:	f003 0301 	and.w	r3, r3, #1
 800b520:	431a      	orrs	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	699b      	ldr	r3, [r3, #24]
 800b526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b52a:	431a      	orrs	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	69db      	ldr	r3, [r3, #28]
 800b530:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b534:	431a      	orrs	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6a1b      	ldr	r3, [r3, #32]
 800b53a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b53e:	ea42 0103 	orr.w	r1, r2, r3
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b546:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	430a      	orrs	r2, r1
 800b550:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	699b      	ldr	r3, [r3, #24]
 800b556:	0c1b      	lsrs	r3, r3, #16
 800b558:	f003 0204 	and.w	r2, r3, #4
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b560:	f003 0310 	and.w	r3, r3, #16
 800b564:	431a      	orrs	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56a:	f003 0308 	and.w	r3, r3, #8
 800b56e:	431a      	orrs	r2, r3
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	68db      	ldr	r3, [r3, #12]
 800b574:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b578:	ea42 0103 	orr.w	r1, r2, r3
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	430a      	orrs	r2, r1
 800b588:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2200      	movs	r2, #0
 800b58e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2201      	movs	r2, #1
 800b594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3710      	adds	r7, #16
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b088      	sub	sp, #32
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	60f8      	str	r0, [r7, #12]
 800b5aa:	60b9      	str	r1, [r7, #8]
 800b5ac:	603b      	str	r3, [r7, #0]
 800b5ae:	4613      	mov	r3, r2
 800b5b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d101      	bne.n	800b5c4 <HAL_SPI_Transmit+0x22>
 800b5c0:	2302      	movs	r3, #2
 800b5c2:	e158      	b.n	800b876 <HAL_SPI_Transmit+0x2d4>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2201      	movs	r2, #1
 800b5c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b5cc:	f7fc fa82 	bl	8007ad4 <HAL_GetTick>
 800b5d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800b5d2:	88fb      	ldrh	r3, [r7, #6]
 800b5d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b5dc:	b2db      	uxtb	r3, r3
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	d002      	beq.n	800b5e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800b5e2:	2302      	movs	r3, #2
 800b5e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5e6:	e13d      	b.n	800b864 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d002      	beq.n	800b5f4 <HAL_SPI_Transmit+0x52>
 800b5ee:	88fb      	ldrh	r3, [r7, #6]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d102      	bne.n	800b5fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800b5f8:	e134      	b.n	800b864 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2203      	movs	r2, #3
 800b5fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	2200      	movs	r2, #0
 800b606:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	88fa      	ldrh	r2, [r7, #6]
 800b612:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	88fa      	ldrh	r2, [r7, #6]
 800b618:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2200      	movs	r2, #0
 800b61e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	2200      	movs	r2, #0
 800b62c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2200      	movs	r2, #0
 800b634:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	2200      	movs	r2, #0
 800b63a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	689b      	ldr	r3, [r3, #8]
 800b640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b644:	d10f      	bne.n	800b666 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b664:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b670:	2b40      	cmp	r3, #64	; 0x40
 800b672:	d007      	beq.n	800b684 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b682:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b68c:	d94b      	bls.n	800b726 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d002      	beq.n	800b69c <HAL_SPI_Transmit+0xfa>
 800b696:	8afb      	ldrh	r3, [r7, #22]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	d13e      	bne.n	800b71a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a0:	881a      	ldrh	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ac:	1c9a      	adds	r2, r3, #2
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6b6:	b29b      	uxth	r3, r3
 800b6b8:	3b01      	subs	r3, #1
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b6c0:	e02b      	b.n	800b71a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	f003 0302 	and.w	r3, r3, #2
 800b6cc:	2b02      	cmp	r3, #2
 800b6ce:	d112      	bne.n	800b6f6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	881a      	ldrh	r2, [r3, #0]
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e0:	1c9a      	adds	r2, r3, #2
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	3b01      	subs	r3, #1
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b6f4:	e011      	b.n	800b71a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b6f6:	f7fc f9ed 	bl	8007ad4 <HAL_GetTick>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	69bb      	ldr	r3, [r7, #24]
 800b6fe:	1ad3      	subs	r3, r2, r3
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	429a      	cmp	r2, r3
 800b704:	d803      	bhi.n	800b70e <HAL_SPI_Transmit+0x16c>
 800b706:	683b      	ldr	r3, [r7, #0]
 800b708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b70c:	d102      	bne.n	800b714 <HAL_SPI_Transmit+0x172>
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	2b00      	cmp	r3, #0
 800b712:	d102      	bne.n	800b71a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800b714:	2303      	movs	r3, #3
 800b716:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b718:	e0a4      	b.n	800b864 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b71e:	b29b      	uxth	r3, r3
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1ce      	bne.n	800b6c2 <HAL_SPI_Transmit+0x120>
 800b724:	e07c      	b.n	800b820 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d002      	beq.n	800b734 <HAL_SPI_Transmit+0x192>
 800b72e:	8afb      	ldrh	r3, [r7, #22]
 800b730:	2b01      	cmp	r3, #1
 800b732:	d170      	bne.n	800b816 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b738:	b29b      	uxth	r3, r3
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d912      	bls.n	800b764 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b742:	881a      	ldrh	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74e:	1c9a      	adds	r2, r3, #2
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b758:	b29b      	uxth	r3, r3
 800b75a:	3b02      	subs	r3, #2
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b762:	e058      	b.n	800b816 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	330c      	adds	r3, #12
 800b76e:	7812      	ldrb	r2, [r2, #0]
 800b770:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b776:	1c5a      	adds	r2, r3, #1
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b780:	b29b      	uxth	r3, r3
 800b782:	3b01      	subs	r3, #1
 800b784:	b29a      	uxth	r2, r3
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800b78a:	e044      	b.n	800b816 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	689b      	ldr	r3, [r3, #8]
 800b792:	f003 0302 	and.w	r3, r3, #2
 800b796:	2b02      	cmp	r3, #2
 800b798:	d12b      	bne.n	800b7f2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b79e:	b29b      	uxth	r3, r3
 800b7a0:	2b01      	cmp	r3, #1
 800b7a2:	d912      	bls.n	800b7ca <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a8:	881a      	ldrh	r2, [r3, #0]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7b4:	1c9a      	adds	r2, r3, #2
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	3b02      	subs	r3, #2
 800b7c2:	b29a      	uxth	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7c8:	e025      	b.n	800b816 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	330c      	adds	r3, #12
 800b7d4:	7812      	ldrb	r2, [r2, #0]
 800b7d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7dc:	1c5a      	adds	r2, r3, #1
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	3b01      	subs	r3, #1
 800b7ea:	b29a      	uxth	r2, r3
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b7f0:	e011      	b.n	800b816 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b7f2:	f7fc f96f 	bl	8007ad4 <HAL_GetTick>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	69bb      	ldr	r3, [r7, #24]
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	683a      	ldr	r2, [r7, #0]
 800b7fe:	429a      	cmp	r2, r3
 800b800:	d803      	bhi.n	800b80a <HAL_SPI_Transmit+0x268>
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b808:	d102      	bne.n	800b810 <HAL_SPI_Transmit+0x26e>
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d102      	bne.n	800b816 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800b810:	2303      	movs	r3, #3
 800b812:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b814:	e026      	b.n	800b864 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1b5      	bne.n	800b78c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	6839      	ldr	r1, [r7, #0]
 800b824:	68f8      	ldr	r0, [r7, #12]
 800b826:	f000 f941 	bl	800baac <SPI_EndRxTxTransaction>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2220      	movs	r2, #32
 800b834:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d10a      	bne.n	800b854 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b83e:	2300      	movs	r3, #0
 800b840:	613b      	str	r3, [r7, #16]
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	68db      	ldr	r3, [r3, #12]
 800b848:	613b      	str	r3, [r7, #16]
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	689b      	ldr	r3, [r3, #8]
 800b850:	613b      	str	r3, [r7, #16]
 800b852:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d002      	beq.n	800b862 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	77fb      	strb	r3, [r7, #31]
 800b860:	e000      	b.n	800b864 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800b862:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800b874:	7ffb      	ldrb	r3, [r7, #31]
}
 800b876:	4618      	mov	r0, r3
 800b878:	3720      	adds	r7, #32
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
	...

0800b880 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b088      	sub	sp, #32
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	603b      	str	r3, [r7, #0]
 800b88c:	4613      	mov	r3, r2
 800b88e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b890:	f7fc f920 	bl	8007ad4 <HAL_GetTick>
 800b894:	4602      	mov	r2, r0
 800b896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b898:	1a9b      	subs	r3, r3, r2
 800b89a:	683a      	ldr	r2, [r7, #0]
 800b89c:	4413      	add	r3, r2
 800b89e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b8a0:	f7fc f918 	bl	8007ad4 <HAL_GetTick>
 800b8a4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b8a6:	4b39      	ldr	r3, [pc, #228]	; (800b98c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	015b      	lsls	r3, r3, #5
 800b8ac:	0d1b      	lsrs	r3, r3, #20
 800b8ae:	69fa      	ldr	r2, [r7, #28]
 800b8b0:	fb02 f303 	mul.w	r3, r2, r3
 800b8b4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b8b6:	e054      	b.n	800b962 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8be:	d050      	beq.n	800b962 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b8c0:	f7fc f908 	bl	8007ad4 <HAL_GetTick>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	1ad3      	subs	r3, r2, r3
 800b8ca:	69fa      	ldr	r2, [r7, #28]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d902      	bls.n	800b8d6 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d13d      	bne.n	800b952 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	685a      	ldr	r2, [r3, #4]
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b8e4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8ee:	d111      	bne.n	800b914 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8f8:	d004      	beq.n	800b904 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	689b      	ldr	r3, [r3, #8]
 800b8fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b902:	d107      	bne.n	800b914 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b912:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b91c:	d10f      	bne.n	800b93e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b92c:	601a      	str	r2, [r3, #0]
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	681a      	ldr	r2, [r3, #0]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b93c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	2201      	movs	r2, #1
 800b942:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	2200      	movs	r2, #0
 800b94a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b94e:	2303      	movs	r3, #3
 800b950:	e017      	b.n	800b982 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b958:	2300      	movs	r3, #0
 800b95a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	3b01      	subs	r3, #1
 800b960:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689a      	ldr	r2, [r3, #8]
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	4013      	ands	r3, r2
 800b96c:	68ba      	ldr	r2, [r7, #8]
 800b96e:	429a      	cmp	r2, r3
 800b970:	bf0c      	ite	eq
 800b972:	2301      	moveq	r3, #1
 800b974:	2300      	movne	r3, #0
 800b976:	b2db      	uxtb	r3, r3
 800b978:	461a      	mov	r2, r3
 800b97a:	79fb      	ldrb	r3, [r7, #7]
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d19b      	bne.n	800b8b8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b980:	2300      	movs	r3, #0
}
 800b982:	4618      	mov	r0, r3
 800b984:	3720      	adds	r7, #32
 800b986:	46bd      	mov	sp, r7
 800b988:	bd80      	pop	{r7, pc}
 800b98a:	bf00      	nop
 800b98c:	20000014 	.word	0x20000014

0800b990 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af00      	add	r7, sp, #0
 800b996:	60f8      	str	r0, [r7, #12]
 800b998:	60b9      	str	r1, [r7, #8]
 800b99a:	607a      	str	r2, [r7, #4]
 800b99c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b99e:	f7fc f899 	bl	8007ad4 <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9a6:	1a9b      	subs	r3, r3, r2
 800b9a8:	683a      	ldr	r2, [r7, #0]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b9ae:	f7fc f891 	bl	8007ad4 <HAL_GetTick>
 800b9b2:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b9b4:	4b3c      	ldr	r3, [pc, #240]	; (800baa8 <SPI_WaitFifoStateUntilTimeout+0x118>)
 800b9b6:	681a      	ldr	r2, [r3, #0]
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	009b      	lsls	r3, r3, #2
 800b9bc:	4413      	add	r3, r2
 800b9be:	00da      	lsls	r2, r3, #3
 800b9c0:	1ad3      	subs	r3, r2, r3
 800b9c2:	0d1b      	lsrs	r3, r3, #20
 800b9c4:	69fa      	ldr	r2, [r7, #28]
 800b9c6:	fb02 f303 	mul.w	r3, r2, r3
 800b9ca:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 800b9cc:	e05f      	b.n	800ba8e <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b9d4:	d106      	bne.n	800b9e4 <SPI_WaitFifoStateUntilTimeout+0x54>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d103      	bne.n	800b9e4 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	330c      	adds	r3, #12
 800b9e2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d050      	beq.n	800ba8e <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b9ec:	f7fc f872 	bl	8007ad4 <HAL_GetTick>
 800b9f0:	4602      	mov	r2, r0
 800b9f2:	69bb      	ldr	r3, [r7, #24]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	69fa      	ldr	r2, [r7, #28]
 800b9f8:	429a      	cmp	r2, r3
 800b9fa:	d902      	bls.n	800ba02 <SPI_WaitFifoStateUntilTimeout+0x72>
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d13d      	bne.n	800ba7e <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ba10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ba1a:	d111      	bne.n	800ba40 <SPI_WaitFifoStateUntilTimeout+0xb0>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba24:	d004      	beq.n	800ba30 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	689b      	ldr	r3, [r3, #8]
 800ba2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba2e:	d107      	bne.n	800ba40 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ba3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba48:	d10f      	bne.n	800ba6a <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ba58:	601a      	str	r2, [r3, #0]
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ba68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	2200      	movs	r2, #0
 800ba76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ba7a:	2303      	movs	r3, #3
 800ba7c:	e010      	b.n	800baa0 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d101      	bne.n	800ba88 <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	3b01      	subs	r3, #1
 800ba8c:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	689a      	ldr	r2, [r3, #8]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	4013      	ands	r3, r2
 800ba98:	687a      	ldr	r2, [r7, #4]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d197      	bne.n	800b9ce <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 800ba9e:	2300      	movs	r3, #0
}
 800baa0:	4618      	mov	r0, r3
 800baa2:	3720      	adds	r7, #32
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}
 800baa8:	20000014 	.word	0x20000014

0800baac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b086      	sub	sp, #24
 800bab0:	af02      	add	r7, sp, #8
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	9300      	str	r3, [sp, #0]
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	2200      	movs	r2, #0
 800bac0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f7ff ff63 	bl	800b990 <SPI_WaitFifoStateUntilTimeout>
 800baca:	4603      	mov	r3, r0
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d007      	beq.n	800bae0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bad4:	f043 0220 	orr.w	r2, r3, #32
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800badc:	2303      	movs	r3, #3
 800bade:	e027      	b.n	800bb30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	9300      	str	r3, [sp, #0]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	2200      	movs	r2, #0
 800bae8:	2180      	movs	r1, #128	; 0x80
 800baea:	68f8      	ldr	r0, [r7, #12]
 800baec:	f7ff fec8 	bl	800b880 <SPI_WaitFlagStateUntilTimeout>
 800baf0:	4603      	mov	r3, r0
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d007      	beq.n	800bb06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bafa:	f043 0220 	orr.w	r2, r3, #32
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e014      	b.n	800bb30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	9300      	str	r3, [sp, #0]
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2200      	movs	r2, #0
 800bb0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f7ff ff3c 	bl	800b990 <SPI_WaitFifoStateUntilTimeout>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d007      	beq.n	800bb2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb22:	f043 0220 	orr.w	r2, r3, #32
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bb2a:	2303      	movs	r3, #3
 800bb2c:	e000      	b.n	800bb30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800bb2e:	2300      	movs	r3, #0
}
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d101      	bne.n	800bb4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	e049      	b.n	800bbde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7fb fa04 	bl	8006f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2202      	movs	r2, #2
 800bb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3304      	adds	r3, #4
 800bb74:	4619      	mov	r1, r3
 800bb76:	4610      	mov	r0, r2
 800bb78:	f000 fd5a 	bl	800c630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2201      	movs	r2, #1
 800bbd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
	...

0800bbe8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b01      	cmp	r3, #1
 800bbfa:	d001      	beq.n	800bc00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	e036      	b.n	800bc6e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2202      	movs	r2, #2
 800bc04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	68da      	ldr	r2, [r3, #12]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	f042 0201 	orr.w	r2, r2, #1
 800bc16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a17      	ldr	r2, [pc, #92]	; (800bc7c <HAL_TIM_Base_Start_IT+0x94>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d004      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0x44>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc2a:	d115      	bne.n	800bc58 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	4b13      	ldr	r3, [pc, #76]	; (800bc80 <HAL_TIM_Base_Start_IT+0x98>)
 800bc34:	4013      	ands	r3, r2
 800bc36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b06      	cmp	r3, #6
 800bc3c:	d015      	beq.n	800bc6a <HAL_TIM_Base_Start_IT+0x82>
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc44:	d011      	beq.n	800bc6a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f042 0201 	orr.w	r2, r2, #1
 800bc54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc56:	e008      	b.n	800bc6a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f042 0201 	orr.w	r2, r2, #1
 800bc66:	601a      	str	r2, [r3, #0]
 800bc68:	e000      	b.n	800bc6c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc6a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr
 800bc7a:	bf00      	nop
 800bc7c:	40012c00 	.word	0x40012c00
 800bc80:	00010007 	.word	0x00010007

0800bc84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d101      	bne.n	800bc96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800bc92:	2301      	movs	r3, #1
 800bc94:	e049      	b.n	800bd2a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d106      	bne.n	800bcb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	2200      	movs	r2, #0
 800bca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bcaa:	6878      	ldr	r0, [r7, #4]
 800bcac:	f000 f841 	bl	800bd32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2202      	movs	r2, #2
 800bcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	f000 fcb4 	bl	800c630 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	2201      	movs	r2, #1
 800bcd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	2201      	movs	r2, #1
 800bd04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	2201      	movs	r2, #1
 800bd14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2201      	movs	r2, #1
 800bd24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
	...

0800bd48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d109      	bne.n	800bd6c <HAL_TIM_PWM_Start+0x24>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	bf14      	ite	ne
 800bd64:	2301      	movne	r3, #1
 800bd66:	2300      	moveq	r3, #0
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	e03c      	b.n	800bde6 <HAL_TIM_PWM_Start+0x9e>
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b04      	cmp	r3, #4
 800bd70:	d109      	bne.n	800bd86 <HAL_TIM_PWM_Start+0x3e>
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800bd78:	b2db      	uxtb	r3, r3
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	bf14      	ite	ne
 800bd7e:	2301      	movne	r3, #1
 800bd80:	2300      	moveq	r3, #0
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	e02f      	b.n	800bde6 <HAL_TIM_PWM_Start+0x9e>
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b08      	cmp	r3, #8
 800bd8a:	d109      	bne.n	800bda0 <HAL_TIM_PWM_Start+0x58>
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	bf14      	ite	ne
 800bd98:	2301      	movne	r3, #1
 800bd9a:	2300      	moveq	r3, #0
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	e022      	b.n	800bde6 <HAL_TIM_PWM_Start+0x9e>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	2b0c      	cmp	r3, #12
 800bda4:	d109      	bne.n	800bdba <HAL_TIM_PWM_Start+0x72>
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b01      	cmp	r3, #1
 800bdb0:	bf14      	ite	ne
 800bdb2:	2301      	movne	r3, #1
 800bdb4:	2300      	moveq	r3, #0
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	e015      	b.n	800bde6 <HAL_TIM_PWM_Start+0x9e>
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	2b10      	cmp	r3, #16
 800bdbe:	d109      	bne.n	800bdd4 <HAL_TIM_PWM_Start+0x8c>
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800bdc6:	b2db      	uxtb	r3, r3
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	bf14      	ite	ne
 800bdcc:	2301      	movne	r3, #1
 800bdce:	2300      	moveq	r3, #0
 800bdd0:	b2db      	uxtb	r3, r3
 800bdd2:	e008      	b.n	800bde6 <HAL_TIM_PWM_Start+0x9e>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	bf14      	ite	ne
 800bde0:	2301      	movne	r3, #1
 800bde2:	2300      	moveq	r3, #0
 800bde4:	b2db      	uxtb	r3, r3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d001      	beq.n	800bdee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bdea:	2301      	movs	r3, #1
 800bdec:	e079      	b.n	800bee2 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d104      	bne.n	800bdfe <HAL_TIM_PWM_Start+0xb6>
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2202      	movs	r2, #2
 800bdf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bdfc:	e023      	b.n	800be46 <HAL_TIM_PWM_Start+0xfe>
 800bdfe:	683b      	ldr	r3, [r7, #0]
 800be00:	2b04      	cmp	r3, #4
 800be02:	d104      	bne.n	800be0e <HAL_TIM_PWM_Start+0xc6>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2202      	movs	r2, #2
 800be08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800be0c:	e01b      	b.n	800be46 <HAL_TIM_PWM_Start+0xfe>
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	2b08      	cmp	r3, #8
 800be12:	d104      	bne.n	800be1e <HAL_TIM_PWM_Start+0xd6>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2202      	movs	r2, #2
 800be18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800be1c:	e013      	b.n	800be46 <HAL_TIM_PWM_Start+0xfe>
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	2b0c      	cmp	r3, #12
 800be22:	d104      	bne.n	800be2e <HAL_TIM_PWM_Start+0xe6>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2202      	movs	r2, #2
 800be28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800be2c:	e00b      	b.n	800be46 <HAL_TIM_PWM_Start+0xfe>
 800be2e:	683b      	ldr	r3, [r7, #0]
 800be30:	2b10      	cmp	r3, #16
 800be32:	d104      	bne.n	800be3e <HAL_TIM_PWM_Start+0xf6>
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2202      	movs	r2, #2
 800be38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800be3c:	e003      	b.n	800be46 <HAL_TIM_PWM_Start+0xfe>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2202      	movs	r2, #2
 800be42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	2201      	movs	r2, #1
 800be4c:	6839      	ldr	r1, [r7, #0]
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 ff6c 	bl	800cd2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	4a24      	ldr	r2, [pc, #144]	; (800beec <HAL_TIM_PWM_Start+0x1a4>)
 800be5a:	4293      	cmp	r3, r2
 800be5c:	d009      	beq.n	800be72 <HAL_TIM_PWM_Start+0x12a>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4a23      	ldr	r2, [pc, #140]	; (800bef0 <HAL_TIM_PWM_Start+0x1a8>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d004      	beq.n	800be72 <HAL_TIM_PWM_Start+0x12a>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a21      	ldr	r2, [pc, #132]	; (800bef4 <HAL_TIM_PWM_Start+0x1ac>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d101      	bne.n	800be76 <HAL_TIM_PWM_Start+0x12e>
 800be72:	2301      	movs	r3, #1
 800be74:	e000      	b.n	800be78 <HAL_TIM_PWM_Start+0x130>
 800be76:	2300      	movs	r3, #0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d007      	beq.n	800be8c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a16      	ldr	r2, [pc, #88]	; (800beec <HAL_TIM_PWM_Start+0x1a4>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d004      	beq.n	800bea0 <HAL_TIM_PWM_Start+0x158>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be9e:	d115      	bne.n	800becc <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	689a      	ldr	r2, [r3, #8]
 800bea6:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <HAL_TIM_PWM_Start+0x1b0>)
 800bea8:	4013      	ands	r3, r2
 800beaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	2b06      	cmp	r3, #6
 800beb0:	d015      	beq.n	800bede <HAL_TIM_PWM_Start+0x196>
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800beb8:	d011      	beq.n	800bede <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	f042 0201 	orr.w	r2, r2, #1
 800bec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800beca:	e008      	b.n	800bede <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681a      	ldr	r2, [r3, #0]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	f042 0201 	orr.w	r2, r2, #1
 800beda:	601a      	str	r2, [r3, #0]
 800bedc:	e000      	b.n	800bee0 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bede:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bee0:	2300      	movs	r3, #0
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3710      	adds	r7, #16
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	40012c00 	.word	0x40012c00
 800bef0:	40014400 	.word	0x40014400
 800bef4:	40014800 	.word	0x40014800
 800bef8:	00010007 	.word	0x00010007

0800befc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 ff0c 	bl	800cd2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	4a39      	ldr	r2, [pc, #228]	; (800c000 <HAL_TIM_PWM_Stop+0x104>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d009      	beq.n	800bf32 <HAL_TIM_PWM_Stop+0x36>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	4a38      	ldr	r2, [pc, #224]	; (800c004 <HAL_TIM_PWM_Stop+0x108>)
 800bf24:	4293      	cmp	r3, r2
 800bf26:	d004      	beq.n	800bf32 <HAL_TIM_PWM_Stop+0x36>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	4a36      	ldr	r2, [pc, #216]	; (800c008 <HAL_TIM_PWM_Stop+0x10c>)
 800bf2e:	4293      	cmp	r3, r2
 800bf30:	d101      	bne.n	800bf36 <HAL_TIM_PWM_Stop+0x3a>
 800bf32:	2301      	movs	r3, #1
 800bf34:	e000      	b.n	800bf38 <HAL_TIM_PWM_Stop+0x3c>
 800bf36:	2300      	movs	r3, #0
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d017      	beq.n	800bf6c <HAL_TIM_PWM_Stop+0x70>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6a1a      	ldr	r2, [r3, #32]
 800bf42:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf46:	4013      	ands	r3, r2
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d10f      	bne.n	800bf6c <HAL_TIM_PWM_Stop+0x70>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	6a1a      	ldr	r2, [r3, #32]
 800bf52:	f240 4344 	movw	r3, #1092	; 0x444
 800bf56:	4013      	ands	r3, r2
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d107      	bne.n	800bf6c <HAL_TIM_PWM_Stop+0x70>
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bf6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6a1a      	ldr	r2, [r3, #32]
 800bf72:	f241 1311 	movw	r3, #4369	; 0x1111
 800bf76:	4013      	ands	r3, r2
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d10f      	bne.n	800bf9c <HAL_TIM_PWM_Stop+0xa0>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6a1a      	ldr	r2, [r3, #32]
 800bf82:	f240 4344 	movw	r3, #1092	; 0x444
 800bf86:	4013      	ands	r3, r2
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d107      	bne.n	800bf9c <HAL_TIM_PWM_Stop+0xa0>
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	f022 0201 	bic.w	r2, r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d104      	bne.n	800bfac <HAL_TIM_PWM_Stop+0xb0>
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2201      	movs	r2, #1
 800bfa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bfaa:	e023      	b.n	800bff4 <HAL_TIM_PWM_Stop+0xf8>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d104      	bne.n	800bfbc <HAL_TIM_PWM_Stop+0xc0>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bfba:	e01b      	b.n	800bff4 <HAL_TIM_PWM_Stop+0xf8>
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	2b08      	cmp	r3, #8
 800bfc0:	d104      	bne.n	800bfcc <HAL_TIM_PWM_Stop+0xd0>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2201      	movs	r2, #1
 800bfc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bfca:	e013      	b.n	800bff4 <HAL_TIM_PWM_Stop+0xf8>
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	2b0c      	cmp	r3, #12
 800bfd0:	d104      	bne.n	800bfdc <HAL_TIM_PWM_Stop+0xe0>
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bfda:	e00b      	b.n	800bff4 <HAL_TIM_PWM_Stop+0xf8>
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	2b10      	cmp	r3, #16
 800bfe0:	d104      	bne.n	800bfec <HAL_TIM_PWM_Stop+0xf0>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bfea:	e003      	b.n	800bff4 <HAL_TIM_PWM_Stop+0xf8>
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2201      	movs	r2, #1
 800bff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800bff4:	2300      	movs	r3, #0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3708      	adds	r7, #8
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	40012c00 	.word	0x40012c00
 800c004:	40014400 	.word	0x40014400
 800c008:	40014800 	.word	0x40014800

0800c00c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b082      	sub	sp, #8
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	f003 0302 	and.w	r3, r3, #2
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d122      	bne.n	800c068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	68db      	ldr	r3, [r3, #12]
 800c028:	f003 0302 	and.w	r3, r3, #2
 800c02c:	2b02      	cmp	r3, #2
 800c02e:	d11b      	bne.n	800c068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	f06f 0202 	mvn.w	r2, #2
 800c038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2201      	movs	r2, #1
 800c03e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	699b      	ldr	r3, [r3, #24]
 800c046:	f003 0303 	and.w	r3, r3, #3
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c04e:	6878      	ldr	r0, [r7, #4]
 800c050:	f000 facf 	bl	800c5f2 <HAL_TIM_IC_CaptureCallback>
 800c054:	e005      	b.n	800c062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f000 fac1 	bl	800c5de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 fad2 	bl	800c606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2200      	movs	r2, #0
 800c066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	691b      	ldr	r3, [r3, #16]
 800c06e:	f003 0304 	and.w	r3, r3, #4
 800c072:	2b04      	cmp	r3, #4
 800c074:	d122      	bne.n	800c0bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	f003 0304 	and.w	r3, r3, #4
 800c080:	2b04      	cmp	r3, #4
 800c082:	d11b      	bne.n	800c0bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	f06f 0204 	mvn.w	r2, #4
 800c08c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2202      	movs	r2, #2
 800c092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f000 faa5 	bl	800c5f2 <HAL_TIM_IC_CaptureCallback>
 800c0a8:	e005      	b.n	800c0b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f000 fa97 	bl	800c5de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 faa8 	bl	800c606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	f003 0308 	and.w	r3, r3, #8
 800c0c6:	2b08      	cmp	r3, #8
 800c0c8:	d122      	bne.n	800c110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	f003 0308 	and.w	r3, r3, #8
 800c0d4:	2b08      	cmp	r3, #8
 800c0d6:	d11b      	bne.n	800c110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f06f 0208 	mvn.w	r2, #8
 800c0e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2204      	movs	r2, #4
 800c0e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	f003 0303 	and.w	r3, r3, #3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f000 fa7b 	bl	800c5f2 <HAL_TIM_IC_CaptureCallback>
 800c0fc:	e005      	b.n	800c10a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 fa6d 	bl	800c5de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fa7e 	bl	800c606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	691b      	ldr	r3, [r3, #16]
 800c116:	f003 0310 	and.w	r3, r3, #16
 800c11a:	2b10      	cmp	r3, #16
 800c11c:	d122      	bne.n	800c164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	68db      	ldr	r3, [r3, #12]
 800c124:	f003 0310 	and.w	r3, r3, #16
 800c128:	2b10      	cmp	r3, #16
 800c12a:	d11b      	bne.n	800c164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f06f 0210 	mvn.w	r2, #16
 800c134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2208      	movs	r2, #8
 800c13a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	69db      	ldr	r3, [r3, #28]
 800c142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c146:	2b00      	cmp	r3, #0
 800c148:	d003      	beq.n	800c152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fa51 	bl	800c5f2 <HAL_TIM_IC_CaptureCallback>
 800c150:	e005      	b.n	800c15e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 fa43 	bl	800c5de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fa54 	bl	800c606 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	691b      	ldr	r3, [r3, #16]
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	2b01      	cmp	r3, #1
 800c170:	d10e      	bne.n	800c190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	f003 0301 	and.w	r3, r3, #1
 800c17c:	2b01      	cmp	r3, #1
 800c17e:	d107      	bne.n	800c190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f06f 0201 	mvn.w	r2, #1
 800c188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f7fa fc7e 	bl	8006a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c19a:	2b80      	cmp	r3, #128	; 0x80
 800c19c:	d10e      	bne.n	800c1bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1a8:	2b80      	cmp	r3, #128	; 0x80
 800c1aa:	d107      	bne.n	800c1bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c1b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fed8 	bl	800cf6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ca:	d10e      	bne.n	800c1ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68db      	ldr	r3, [r3, #12]
 800c1d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1d6:	2b80      	cmp	r3, #128	; 0x80
 800c1d8:	d107      	bne.n	800c1ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f000 fecb 	bl	800cf80 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	681b      	ldr	r3, [r3, #0]
 800c1ee:	691b      	ldr	r3, [r3, #16]
 800c1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f4:	2b40      	cmp	r3, #64	; 0x40
 800c1f6:	d10e      	bne.n	800c216 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	68db      	ldr	r3, [r3, #12]
 800c1fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c202:	2b40      	cmp	r3, #64	; 0x40
 800c204:	d107      	bne.n	800c216 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c20e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 fa02 	bl	800c61a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	691b      	ldr	r3, [r3, #16]
 800c21c:	f003 0320 	and.w	r3, r3, #32
 800c220:	2b20      	cmp	r3, #32
 800c222:	d10e      	bne.n	800c242 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	f003 0320 	and.w	r3, r3, #32
 800c22e:	2b20      	cmp	r3, #32
 800c230:	d107      	bne.n	800c242 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f06f 0220 	mvn.w	r2, #32
 800c23a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fe8b 	bl	800cf58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
	...

0800c24c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c25e:	2b01      	cmp	r3, #1
 800c260:	d101      	bne.n	800c266 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c262:	2302      	movs	r3, #2
 800c264:	e0fd      	b.n	800c462 <HAL_TIM_PWM_ConfigChannel+0x216>
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	2201      	movs	r2, #1
 800c26a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b14      	cmp	r3, #20
 800c272:	f200 80f0 	bhi.w	800c456 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800c276:	a201      	add	r2, pc, #4	; (adr r2, 800c27c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800c278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c27c:	0800c2d1 	.word	0x0800c2d1
 800c280:	0800c457 	.word	0x0800c457
 800c284:	0800c457 	.word	0x0800c457
 800c288:	0800c457 	.word	0x0800c457
 800c28c:	0800c311 	.word	0x0800c311
 800c290:	0800c457 	.word	0x0800c457
 800c294:	0800c457 	.word	0x0800c457
 800c298:	0800c457 	.word	0x0800c457
 800c29c:	0800c353 	.word	0x0800c353
 800c2a0:	0800c457 	.word	0x0800c457
 800c2a4:	0800c457 	.word	0x0800c457
 800c2a8:	0800c457 	.word	0x0800c457
 800c2ac:	0800c393 	.word	0x0800c393
 800c2b0:	0800c457 	.word	0x0800c457
 800c2b4:	0800c457 	.word	0x0800c457
 800c2b8:	0800c457 	.word	0x0800c457
 800c2bc:	0800c3d5 	.word	0x0800c3d5
 800c2c0:	0800c457 	.word	0x0800c457
 800c2c4:	0800c457 	.word	0x0800c457
 800c2c8:	0800c457 	.word	0x0800c457
 800c2cc:	0800c415 	.word	0x0800c415
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f000 fa0e 	bl	800c6f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	699a      	ldr	r2, [r3, #24]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	f042 0208 	orr.w	r2, r2, #8
 800c2ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	699a      	ldr	r2, [r3, #24]
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f022 0204 	bic.w	r2, r2, #4
 800c2fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	6999      	ldr	r1, [r3, #24]
 800c302:	68bb      	ldr	r3, [r7, #8]
 800c304:	691a      	ldr	r2, [r3, #16]
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	430a      	orrs	r2, r1
 800c30c:	619a      	str	r2, [r3, #24]
      break;
 800c30e:	e0a3      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	68b9      	ldr	r1, [r7, #8]
 800c316:	4618      	mov	r0, r3
 800c318:	f000 fa6a 	bl	800c7f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	699a      	ldr	r2, [r3, #24]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c32a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	699a      	ldr	r2, [r3, #24]
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c33a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	6999      	ldr	r1, [r3, #24]
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	691b      	ldr	r3, [r3, #16]
 800c346:	021a      	lsls	r2, r3, #8
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	430a      	orrs	r2, r1
 800c34e:	619a      	str	r2, [r3, #24]
      break;
 800c350:	e082      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	68b9      	ldr	r1, [r7, #8]
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 fac3 	bl	800c8e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	69da      	ldr	r2, [r3, #28]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f042 0208 	orr.w	r2, r2, #8
 800c36c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	69da      	ldr	r2, [r3, #28]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f022 0204 	bic.w	r2, r2, #4
 800c37c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	69d9      	ldr	r1, [r3, #28]
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	691a      	ldr	r2, [r3, #16]
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	430a      	orrs	r2, r1
 800c38e:	61da      	str	r2, [r3, #28]
      break;
 800c390:	e062      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	68b9      	ldr	r1, [r7, #8]
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 fb1b 	bl	800c9d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	69da      	ldr	r2, [r3, #28]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c3ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	69da      	ldr	r2, [r3, #28]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c3bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	69d9      	ldr	r1, [r3, #28]
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	691b      	ldr	r3, [r3, #16]
 800c3c8:	021a      	lsls	r2, r3, #8
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	430a      	orrs	r2, r1
 800c3d0:	61da      	str	r2, [r3, #28]
      break;
 800c3d2:	e041      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	68b9      	ldr	r1, [r7, #8]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 fb58 	bl	800ca90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	f042 0208 	orr.w	r2, r2, #8
 800c3ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f022 0204 	bic.w	r2, r2, #4
 800c3fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	691a      	ldr	r2, [r3, #16]
 800c40a:	68fb      	ldr	r3, [r7, #12]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	430a      	orrs	r2, r1
 800c410:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c412:	e021      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68b9      	ldr	r1, [r7, #8]
 800c41a:	4618      	mov	r0, r3
 800c41c:	f000 fb90 	bl	800cb40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c42e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c43e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	021a      	lsls	r2, r3, #8
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	430a      	orrs	r2, r1
 800c452:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c454:	e000      	b.n	800c458 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800c456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	2200      	movs	r2, #0
 800c45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop

0800c46c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c47c:	2b01      	cmp	r3, #1
 800c47e:	d101      	bne.n	800c484 <HAL_TIM_ConfigClockSource+0x18>
 800c480:	2302      	movs	r3, #2
 800c482:	e0a8      	b.n	800c5d6 <HAL_TIM_ConfigClockSource+0x16a>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2202      	movs	r2, #2
 800c490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	689b      	ldr	r3, [r3, #8]
 800c49a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c4a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c4a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c4ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c4b8:	683b      	ldr	r3, [r7, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b40      	cmp	r3, #64	; 0x40
 800c4be:	d067      	beq.n	800c590 <HAL_TIM_ConfigClockSource+0x124>
 800c4c0:	2b40      	cmp	r3, #64	; 0x40
 800c4c2:	d80b      	bhi.n	800c4dc <HAL_TIM_ConfigClockSource+0x70>
 800c4c4:	2b10      	cmp	r3, #16
 800c4c6:	d073      	beq.n	800c5b0 <HAL_TIM_ConfigClockSource+0x144>
 800c4c8:	2b10      	cmp	r3, #16
 800c4ca:	d802      	bhi.n	800c4d2 <HAL_TIM_ConfigClockSource+0x66>
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d06f      	beq.n	800c5b0 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800c4d0:	e078      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c4d2:	2b20      	cmp	r3, #32
 800c4d4:	d06c      	beq.n	800c5b0 <HAL_TIM_ConfigClockSource+0x144>
 800c4d6:	2b30      	cmp	r3, #48	; 0x30
 800c4d8:	d06a      	beq.n	800c5b0 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800c4da:	e073      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c4dc:	2b70      	cmp	r3, #112	; 0x70
 800c4de:	d00d      	beq.n	800c4fc <HAL_TIM_ConfigClockSource+0x90>
 800c4e0:	2b70      	cmp	r3, #112	; 0x70
 800c4e2:	d804      	bhi.n	800c4ee <HAL_TIM_ConfigClockSource+0x82>
 800c4e4:	2b50      	cmp	r3, #80	; 0x50
 800c4e6:	d033      	beq.n	800c550 <HAL_TIM_ConfigClockSource+0xe4>
 800c4e8:	2b60      	cmp	r3, #96	; 0x60
 800c4ea:	d041      	beq.n	800c570 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800c4ec:	e06a      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800c4ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c4f2:	d066      	beq.n	800c5c2 <HAL_TIM_ConfigClockSource+0x156>
 800c4f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4f8:	d017      	beq.n	800c52a <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800c4fa:	e063      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6818      	ldr	r0, [r3, #0]
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	6899      	ldr	r1, [r3, #8]
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	f000 fbee 	bl	800ccec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	689b      	ldr	r3, [r3, #8]
 800c516:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c51e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	609a      	str	r2, [r3, #8]
      break;
 800c528:	e04c      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6818      	ldr	r0, [r3, #0]
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	6899      	ldr	r1, [r3, #8]
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	685a      	ldr	r2, [r3, #4]
 800c536:	683b      	ldr	r3, [r7, #0]
 800c538:	68db      	ldr	r3, [r3, #12]
 800c53a:	f000 fbd7 	bl	800ccec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	689a      	ldr	r2, [r3, #8]
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c54c:	609a      	str	r2, [r3, #8]
      break;
 800c54e:	e039      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6818      	ldr	r0, [r3, #0]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	6859      	ldr	r1, [r3, #4]
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	461a      	mov	r2, r3
 800c55e:	f000 fb49 	bl	800cbf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2150      	movs	r1, #80	; 0x50
 800c568:	4618      	mov	r0, r3
 800c56a:	f000 fba2 	bl	800ccb2 <TIM_ITRx_SetConfig>
      break;
 800c56e:	e029      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6818      	ldr	r0, [r3, #0]
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	6859      	ldr	r1, [r3, #4]
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	68db      	ldr	r3, [r3, #12]
 800c57c:	461a      	mov	r2, r3
 800c57e:	f000 fb68 	bl	800cc52 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	2160      	movs	r1, #96	; 0x60
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 fb92 	bl	800ccb2 <TIM_ITRx_SetConfig>
      break;
 800c58e:	e019      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6818      	ldr	r0, [r3, #0]
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	6859      	ldr	r1, [r3, #4]
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	68db      	ldr	r3, [r3, #12]
 800c59c:	461a      	mov	r2, r3
 800c59e:	f000 fb29 	bl	800cbf4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2140      	movs	r1, #64	; 0x40
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f000 fb82 	bl	800ccb2 <TIM_ITRx_SetConfig>
      break;
 800c5ae:	e009      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	4619      	mov	r1, r3
 800c5ba:	4610      	mov	r0, r2
 800c5bc:	f000 fb79 	bl	800ccb2 <TIM_ITRx_SetConfig>
        break;
 800c5c0:	e000      	b.n	800c5c4 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800c5c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3710      	adds	r7, #16
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}

0800c5de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c5de:	b480      	push	{r7}
 800c5e0:	b083      	sub	sp, #12
 800c5e2:	af00      	add	r7, sp, #0
 800c5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c5e6:	bf00      	nop
 800c5e8:	370c      	adds	r7, #12
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f0:	4770      	bx	lr

0800c5f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c5f2:	b480      	push	{r7}
 800c5f4:	b083      	sub	sp, #12
 800c5f6:	af00      	add	r7, sp, #0
 800c5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c5fa:	bf00      	nop
 800c5fc:	370c      	adds	r7, #12
 800c5fe:	46bd      	mov	sp, r7
 800c600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c604:	4770      	bx	lr

0800c606 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c606:	b480      	push	{r7}
 800c608:	b083      	sub	sp, #12
 800c60a:	af00      	add	r7, sp, #0
 800c60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c60e:	bf00      	nop
 800c610:	370c      	adds	r7, #12
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b083      	sub	sp, #12
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c622:	bf00      	nop
 800c624:	370c      	adds	r7, #12
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
	...

0800c630 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c630:	b480      	push	{r7}
 800c632:	b085      	sub	sp, #20
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
 800c638:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	4a2a      	ldr	r2, [pc, #168]	; (800c6ec <TIM_Base_SetConfig+0xbc>)
 800c644:	4293      	cmp	r3, r2
 800c646:	d003      	beq.n	800c650 <TIM_Base_SetConfig+0x20>
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c64e:	d108      	bne.n	800c662 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	685b      	ldr	r3, [r3, #4]
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	4313      	orrs	r3, r2
 800c660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	4a21      	ldr	r2, [pc, #132]	; (800c6ec <TIM_Base_SetConfig+0xbc>)
 800c666:	4293      	cmp	r3, r2
 800c668:	d00b      	beq.n	800c682 <TIM_Base_SetConfig+0x52>
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c670:	d007      	beq.n	800c682 <TIM_Base_SetConfig+0x52>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4a1e      	ldr	r2, [pc, #120]	; (800c6f0 <TIM_Base_SetConfig+0xc0>)
 800c676:	4293      	cmp	r3, r2
 800c678:	d003      	beq.n	800c682 <TIM_Base_SetConfig+0x52>
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4a1d      	ldr	r2, [pc, #116]	; (800c6f4 <TIM_Base_SetConfig+0xc4>)
 800c67e:	4293      	cmp	r3, r2
 800c680:	d108      	bne.n	800c694 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c688:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	68db      	ldr	r3, [r3, #12]
 800c68e:	68fa      	ldr	r2, [r7, #12]
 800c690:	4313      	orrs	r3, r2
 800c692:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	695b      	ldr	r3, [r3, #20]
 800c69e:	4313      	orrs	r3, r2
 800c6a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	68fa      	ldr	r2, [r7, #12]
 800c6a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	689a      	ldr	r2, [r3, #8]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a0c      	ldr	r2, [pc, #48]	; (800c6ec <TIM_Base_SetConfig+0xbc>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d007      	beq.n	800c6d0 <TIM_Base_SetConfig+0xa0>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a0b      	ldr	r2, [pc, #44]	; (800c6f0 <TIM_Base_SetConfig+0xc0>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d003      	beq.n	800c6d0 <TIM_Base_SetConfig+0xa0>
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	4a0a      	ldr	r2, [pc, #40]	; (800c6f4 <TIM_Base_SetConfig+0xc4>)
 800c6cc:	4293      	cmp	r3, r2
 800c6ce:	d103      	bne.n	800c6d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	691a      	ldr	r2, [r3, #16]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	615a      	str	r2, [r3, #20]
}
 800c6de:	bf00      	nop
 800c6e0:	3714      	adds	r7, #20
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	40012c00 	.word	0x40012c00
 800c6f0:	40014400 	.word	0x40014400
 800c6f4:	40014800 	.word	0x40014800

0800c6f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	6a1b      	ldr	r3, [r3, #32]
 800c706:	f023 0201 	bic.w	r2, r3, #1
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a1b      	ldr	r3, [r3, #32]
 800c712:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	699b      	ldr	r3, [r3, #24]
 800c71e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c72a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	f023 0303 	bic.w	r3, r3, #3
 800c732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c734:	683b      	ldr	r3, [r7, #0]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	68fa      	ldr	r2, [r7, #12]
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	f023 0302 	bic.w	r3, r3, #2
 800c744:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	689b      	ldr	r3, [r3, #8]
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a24      	ldr	r2, [pc, #144]	; (800c7e4 <TIM_OC1_SetConfig+0xec>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d007      	beq.n	800c768 <TIM_OC1_SetConfig+0x70>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	4a23      	ldr	r2, [pc, #140]	; (800c7e8 <TIM_OC1_SetConfig+0xf0>)
 800c75c:	4293      	cmp	r3, r2
 800c75e:	d003      	beq.n	800c768 <TIM_OC1_SetConfig+0x70>
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4a22      	ldr	r2, [pc, #136]	; (800c7ec <TIM_OC1_SetConfig+0xf4>)
 800c764:	4293      	cmp	r3, r2
 800c766:	d10c      	bne.n	800c782 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c768:	697b      	ldr	r3, [r7, #20]
 800c76a:	f023 0308 	bic.w	r3, r3, #8
 800c76e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c770:	683b      	ldr	r3, [r7, #0]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	697a      	ldr	r2, [r7, #20]
 800c776:	4313      	orrs	r3, r2
 800c778:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c77a:	697b      	ldr	r3, [r7, #20]
 800c77c:	f023 0304 	bic.w	r3, r3, #4
 800c780:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a17      	ldr	r2, [pc, #92]	; (800c7e4 <TIM_OC1_SetConfig+0xec>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d007      	beq.n	800c79a <TIM_OC1_SetConfig+0xa2>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a17      	ldr	r2, [pc, #92]	; (800c7ec <TIM_OC1_SetConfig+0xf4>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d003      	beq.n	800c79a <TIM_OC1_SetConfig+0xa2>
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	4a14      	ldr	r2, [pc, #80]	; (800c7e8 <TIM_OC1_SetConfig+0xf0>)
 800c796:	4293      	cmp	r3, r2
 800c798:	d111      	bne.n	800c7be <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c7a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	695b      	ldr	r3, [r3, #20]
 800c7ae:	693a      	ldr	r2, [r7, #16]
 800c7b0:	4313      	orrs	r3, r2
 800c7b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	699b      	ldr	r3, [r3, #24]
 800c7b8:	693a      	ldr	r2, [r7, #16]
 800c7ba:	4313      	orrs	r3, r2
 800c7bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	68fa      	ldr	r2, [r7, #12]
 800c7c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	685a      	ldr	r2, [r3, #4]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	697a      	ldr	r2, [r7, #20]
 800c7d6:	621a      	str	r2, [r3, #32]
}
 800c7d8:	bf00      	nop
 800c7da:	371c      	adds	r7, #28
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e2:	4770      	bx	lr
 800c7e4:	40012c00 	.word	0x40012c00
 800c7e8:	40014800 	.word	0x40014800
 800c7ec:	40014400 	.word	0x40014400

0800c7f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
 800c7f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6a1b      	ldr	r3, [r3, #32]
 800c7fe:	f023 0210 	bic.w	r2, r3, #16
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6a1b      	ldr	r3, [r3, #32]
 800c80a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	699b      	ldr	r3, [r3, #24]
 800c816:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c81e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c82a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	021b      	lsls	r3, r3, #8
 800c832:	68fa      	ldr	r2, [r7, #12]
 800c834:	4313      	orrs	r3, r2
 800c836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	f023 0320 	bic.w	r3, r3, #32
 800c83e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	689b      	ldr	r3, [r3, #8]
 800c844:	011b      	lsls	r3, r3, #4
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	4313      	orrs	r3, r2
 800c84a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a22      	ldr	r2, [pc, #136]	; (800c8d8 <TIM_OC2_SetConfig+0xe8>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d10d      	bne.n	800c870 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	011b      	lsls	r3, r3, #4
 800c862:	697a      	ldr	r2, [r7, #20]
 800c864:	4313      	orrs	r3, r2
 800c866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c868:	697b      	ldr	r3, [r7, #20]
 800c86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c86e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a19      	ldr	r2, [pc, #100]	; (800c8d8 <TIM_OC2_SetConfig+0xe8>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d007      	beq.n	800c888 <TIM_OC2_SetConfig+0x98>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4a18      	ldr	r2, [pc, #96]	; (800c8dc <TIM_OC2_SetConfig+0xec>)
 800c87c:	4293      	cmp	r3, r2
 800c87e:	d003      	beq.n	800c888 <TIM_OC2_SetConfig+0x98>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a17      	ldr	r2, [pc, #92]	; (800c8e0 <TIM_OC2_SetConfig+0xf0>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d113      	bne.n	800c8b0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c88e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c896:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c898:	683b      	ldr	r3, [r7, #0]
 800c89a:	695b      	ldr	r3, [r3, #20]
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	693a      	ldr	r2, [r7, #16]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	009b      	lsls	r3, r3, #2
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	693a      	ldr	r2, [r7, #16]
 800c8b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	68fa      	ldr	r2, [r7, #12]
 800c8ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	685a      	ldr	r2, [r3, #4]
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	697a      	ldr	r2, [r7, #20]
 800c8c8:	621a      	str	r2, [r3, #32]
}
 800c8ca:	bf00      	nop
 800c8cc:	371c      	adds	r7, #28
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	40012c00 	.word	0x40012c00
 800c8dc:	40014400 	.word	0x40014400
 800c8e0:	40014800 	.word	0x40014800

0800c8e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6a1b      	ldr	r3, [r3, #32]
 800c8f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a1b      	ldr	r3, [r3, #32]
 800c8fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	69db      	ldr	r3, [r3, #28]
 800c90a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f023 0303 	bic.w	r3, r3, #3
 800c91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68fa      	ldr	r2, [r7, #12]
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c932:	683b      	ldr	r3, [r7, #0]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	021b      	lsls	r3, r3, #8
 800c938:	697a      	ldr	r2, [r7, #20]
 800c93a:	4313      	orrs	r3, r2
 800c93c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	4a21      	ldr	r2, [pc, #132]	; (800c9c8 <TIM_OC3_SetConfig+0xe4>)
 800c942:	4293      	cmp	r3, r2
 800c944:	d10d      	bne.n	800c962 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c94c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	68db      	ldr	r3, [r3, #12]
 800c952:	021b      	lsls	r3, r3, #8
 800c954:	697a      	ldr	r2, [r7, #20]
 800c956:	4313      	orrs	r3, r2
 800c958:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800c960:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	4a18      	ldr	r2, [pc, #96]	; (800c9c8 <TIM_OC3_SetConfig+0xe4>)
 800c966:	4293      	cmp	r3, r2
 800c968:	d007      	beq.n	800c97a <TIM_OC3_SetConfig+0x96>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	4a17      	ldr	r2, [pc, #92]	; (800c9cc <TIM_OC3_SetConfig+0xe8>)
 800c96e:	4293      	cmp	r3, r2
 800c970:	d003      	beq.n	800c97a <TIM_OC3_SetConfig+0x96>
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	4a16      	ldr	r2, [pc, #88]	; (800c9d0 <TIM_OC3_SetConfig+0xec>)
 800c976:	4293      	cmp	r3, r2
 800c978:	d113      	bne.n	800c9a2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c97a:	693b      	ldr	r3, [r7, #16]
 800c97c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c980:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c982:	693b      	ldr	r3, [r7, #16]
 800c984:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c988:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	695b      	ldr	r3, [r3, #20]
 800c98e:	011b      	lsls	r3, r3, #4
 800c990:	693a      	ldr	r2, [r7, #16]
 800c992:	4313      	orrs	r3, r2
 800c994:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	011b      	lsls	r3, r3, #4
 800c99c:	693a      	ldr	r2, [r7, #16]
 800c99e:	4313      	orrs	r3, r2
 800c9a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	693a      	ldr	r2, [r7, #16]
 800c9a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	685a      	ldr	r2, [r3, #4]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	697a      	ldr	r2, [r7, #20]
 800c9ba:	621a      	str	r2, [r3, #32]
}
 800c9bc:	bf00      	nop
 800c9be:	371c      	adds	r7, #28
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c6:	4770      	bx	lr
 800c9c8:	40012c00 	.word	0x40012c00
 800c9cc:	40014400 	.word	0x40014400
 800c9d0:	40014800 	.word	0x40014800

0800c9d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c9d4:	b480      	push	{r7}
 800c9d6:	b087      	sub	sp, #28
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a1b      	ldr	r3, [r3, #32]
 800c9e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6a1b      	ldr	r3, [r3, #32]
 800c9ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	69db      	ldr	r3, [r3, #28]
 800c9fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ca06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ca0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	021b      	lsls	r3, r3, #8
 800ca16:	68fa      	ldr	r2, [r7, #12]
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ca22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ca24:	683b      	ldr	r3, [r7, #0]
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	031b      	lsls	r3, r3, #12
 800ca2a:	693a      	ldr	r2, [r7, #16]
 800ca2c:	4313      	orrs	r3, r2
 800ca2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	4a14      	ldr	r2, [pc, #80]	; (800ca84 <TIM_OC4_SetConfig+0xb0>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d007      	beq.n	800ca48 <TIM_OC4_SetConfig+0x74>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	4a13      	ldr	r2, [pc, #76]	; (800ca88 <TIM_OC4_SetConfig+0xb4>)
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d003      	beq.n	800ca48 <TIM_OC4_SetConfig+0x74>
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4a12      	ldr	r2, [pc, #72]	; (800ca8c <TIM_OC4_SetConfig+0xb8>)
 800ca44:	4293      	cmp	r3, r2
 800ca46:	d109      	bne.n	800ca5c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ca48:	697b      	ldr	r3, [r7, #20]
 800ca4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ca4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	695b      	ldr	r3, [r3, #20]
 800ca54:	019b      	lsls	r3, r3, #6
 800ca56:	697a      	ldr	r2, [r7, #20]
 800ca58:	4313      	orrs	r3, r2
 800ca5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	697a      	ldr	r2, [r7, #20]
 800ca60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	68fa      	ldr	r2, [r7, #12]
 800ca66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	693a      	ldr	r2, [r7, #16]
 800ca74:	621a      	str	r2, [r3, #32]
}
 800ca76:	bf00      	nop
 800ca78:	371c      	adds	r7, #28
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
 800ca82:	bf00      	nop
 800ca84:	40012c00 	.word	0x40012c00
 800ca88:	40014400 	.word	0x40014400
 800ca8c:	40014800 	.word	0x40014800

0800ca90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6a1b      	ldr	r3, [r3, #32]
 800caaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	685b      	ldr	r3, [r3, #4]
 800cab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cabe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	68fa      	ldr	r2, [r7, #12]
 800caca:	4313      	orrs	r3, r2
 800cacc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800cad4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	689b      	ldr	r3, [r3, #8]
 800cada:	041b      	lsls	r3, r3, #16
 800cadc:	693a      	ldr	r2, [r7, #16]
 800cade:	4313      	orrs	r3, r2
 800cae0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	4a13      	ldr	r2, [pc, #76]	; (800cb34 <TIM_OC5_SetConfig+0xa4>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d007      	beq.n	800cafa <TIM_OC5_SetConfig+0x6a>
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	4a12      	ldr	r2, [pc, #72]	; (800cb38 <TIM_OC5_SetConfig+0xa8>)
 800caee:	4293      	cmp	r3, r2
 800caf0:	d003      	beq.n	800cafa <TIM_OC5_SetConfig+0x6a>
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	4a11      	ldr	r2, [pc, #68]	; (800cb3c <TIM_OC5_SetConfig+0xac>)
 800caf6:	4293      	cmp	r3, r2
 800caf8:	d109      	bne.n	800cb0e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	021b      	lsls	r3, r3, #8
 800cb08:	697a      	ldr	r2, [r7, #20]
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	697a      	ldr	r2, [r7, #20]
 800cb12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cb1a:	683b      	ldr	r3, [r7, #0]
 800cb1c:	685a      	ldr	r2, [r3, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	693a      	ldr	r2, [r7, #16]
 800cb26:	621a      	str	r2, [r3, #32]
}
 800cb28:	bf00      	nop
 800cb2a:	371c      	adds	r7, #28
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr
 800cb34:	40012c00 	.word	0x40012c00
 800cb38:	40014400 	.word	0x40014400
 800cb3c:	40014800 	.word	0x40014800

0800cb40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800cb40:	b480      	push	{r7}
 800cb42:	b087      	sub	sp, #28
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	6a1b      	ldr	r3, [r3, #32]
 800cb4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cb72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb74:	683b      	ldr	r3, [r7, #0]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	68fa      	ldr	r2, [r7, #12]
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cb86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	689b      	ldr	r3, [r3, #8]
 800cb8c:	051b      	lsls	r3, r3, #20
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	4313      	orrs	r3, r2
 800cb92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a14      	ldr	r2, [pc, #80]	; (800cbe8 <TIM_OC6_SetConfig+0xa8>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d007      	beq.n	800cbac <TIM_OC6_SetConfig+0x6c>
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	4a13      	ldr	r2, [pc, #76]	; (800cbec <TIM_OC6_SetConfig+0xac>)
 800cba0:	4293      	cmp	r3, r2
 800cba2:	d003      	beq.n	800cbac <TIM_OC6_SetConfig+0x6c>
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	4a12      	ldr	r2, [pc, #72]	; (800cbf0 <TIM_OC6_SetConfig+0xb0>)
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	d109      	bne.n	800cbc0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800cbb2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	695b      	ldr	r3, [r3, #20]
 800cbb8:	029b      	lsls	r3, r3, #10
 800cbba:	697a      	ldr	r2, [r7, #20]
 800cbbc:	4313      	orrs	r3, r2
 800cbbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	697a      	ldr	r2, [r7, #20]
 800cbc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	68fa      	ldr	r2, [r7, #12]
 800cbca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	685a      	ldr	r2, [r3, #4]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	693a      	ldr	r2, [r7, #16]
 800cbd8:	621a      	str	r2, [r3, #32]
}
 800cbda:	bf00      	nop
 800cbdc:	371c      	adds	r7, #28
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	40012c00 	.word	0x40012c00
 800cbec:	40014400 	.word	0x40014400
 800cbf0:	40014800 	.word	0x40014800

0800cbf4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b087      	sub	sp, #28
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	60f8      	str	r0, [r7, #12]
 800cbfc:	60b9      	str	r1, [r7, #8]
 800cbfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	6a1b      	ldr	r3, [r3, #32]
 800cc04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6a1b      	ldr	r3, [r3, #32]
 800cc0a:	f023 0201 	bic.w	r2, r3, #1
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	699b      	ldr	r3, [r3, #24]
 800cc16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cc18:	693b      	ldr	r3, [r7, #16]
 800cc1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	011b      	lsls	r3, r3, #4
 800cc24:	693a      	ldr	r2, [r7, #16]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	f023 030a 	bic.w	r3, r3, #10
 800cc30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	68bb      	ldr	r3, [r7, #8]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	697a      	ldr	r2, [r7, #20]
 800cc44:	621a      	str	r2, [r3, #32]
}
 800cc46:	bf00      	nop
 800cc48:	371c      	adds	r7, #28
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc50:	4770      	bx	lr

0800cc52 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cc52:	b480      	push	{r7}
 800cc54:	b087      	sub	sp, #28
 800cc56:	af00      	add	r7, sp, #0
 800cc58:	60f8      	str	r0, [r7, #12]
 800cc5a:	60b9      	str	r1, [r7, #8]
 800cc5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	f023 0210 	bic.w	r2, r3, #16
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	699b      	ldr	r3, [r3, #24]
 800cc6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	6a1b      	ldr	r3, [r3, #32]
 800cc74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800cc76:	697b      	ldr	r3, [r7, #20]
 800cc78:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800cc7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	031b      	lsls	r3, r3, #12
 800cc82:	697a      	ldr	r2, [r7, #20]
 800cc84:	4313      	orrs	r3, r2
 800cc86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800cc88:	693b      	ldr	r3, [r7, #16]
 800cc8a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800cc8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	011b      	lsls	r3, r3, #4
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	693a      	ldr	r2, [r7, #16]
 800cca4:	621a      	str	r2, [r3, #32]
}
 800cca6:	bf00      	nop
 800cca8:	371c      	adds	r7, #28
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ccb2:	b480      	push	{r7}
 800ccb4:	b085      	sub	sp, #20
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
 800ccba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	689b      	ldr	r3, [r3, #8]
 800ccc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ccc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cccc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ccce:	683a      	ldr	r2, [r7, #0]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	f043 0307 	orr.w	r3, r3, #7
 800ccd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68fa      	ldr	r2, [r7, #12]
 800ccde:	609a      	str	r2, [r3, #8]
}
 800cce0:	bf00      	nop
 800cce2:	3714      	adds	r7, #20
 800cce4:	46bd      	mov	sp, r7
 800cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccea:	4770      	bx	lr

0800ccec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b087      	sub	sp, #28
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	60f8      	str	r0, [r7, #12]
 800ccf4:	60b9      	str	r1, [r7, #8]
 800ccf6:	607a      	str	r2, [r7, #4]
 800ccf8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	689b      	ldr	r3, [r3, #8]
 800ccfe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cd06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	021a      	lsls	r2, r3, #8
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	4313      	orrs	r3, r2
 800cd14:	697a      	ldr	r2, [r7, #20]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	609a      	str	r2, [r3, #8]
}
 800cd20:	bf00      	nop
 800cd22:	371c      	adds	r7, #28
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd2c:	b480      	push	{r7}
 800cd2e:	b087      	sub	sp, #28
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	f003 031f 	and.w	r3, r3, #31
 800cd3e:	2201      	movs	r2, #1
 800cd40:	fa02 f303 	lsl.w	r3, r2, r3
 800cd44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	6a1a      	ldr	r2, [r3, #32]
 800cd4a:	697b      	ldr	r3, [r7, #20]
 800cd4c:	43db      	mvns	r3, r3
 800cd4e:	401a      	ands	r2, r3
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6a1a      	ldr	r2, [r3, #32]
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	f003 031f 	and.w	r3, r3, #31
 800cd5e:	6879      	ldr	r1, [r7, #4]
 800cd60:	fa01 f303 	lsl.w	r3, r1, r3
 800cd64:	431a      	orrs	r2, r3
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	621a      	str	r2, [r3, #32]
}
 800cd6a:	bf00      	nop
 800cd6c:	371c      	adds	r7, #28
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd74:	4770      	bx	lr
	...

0800cd78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b085      	sub	sp, #20
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d101      	bne.n	800cd90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cd8c:	2302      	movs	r3, #2
 800cd8e:	e04a      	b.n	800ce26 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	685b      	ldr	r3, [r3, #4]
 800cda6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a1f      	ldr	r2, [pc, #124]	; (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d108      	bne.n	800cdcc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cdc0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	685b      	ldr	r3, [r3, #4]
 800cdc6:	68fa      	ldr	r2, [r7, #12]
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cdd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4313      	orrs	r3, r2
 800cddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	4a12      	ldr	r2, [pc, #72]	; (800ce34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d004      	beq.n	800cdfa <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	681b      	ldr	r3, [r3, #0]
 800cdf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdf8:	d10c      	bne.n	800ce14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce00:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	689b      	ldr	r3, [r3, #8]
 800ce06:	68ba      	ldr	r2, [r7, #8]
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	68ba      	ldr	r2, [r7, #8]
 800ce12:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2201      	movs	r2, #1
 800ce18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	2200      	movs	r2, #0
 800ce20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ce24:	2300      	movs	r3, #0
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3714      	adds	r7, #20
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr
 800ce32:	bf00      	nop
 800ce34:	40012c00 	.word	0x40012c00

0800ce38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ce38:	b480      	push	{r7}
 800ce3a:	b085      	sub	sp, #20
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ce42:	2300      	movs	r3, #0
 800ce44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	d101      	bne.n	800ce54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ce50:	2302      	movs	r3, #2
 800ce52:	e078      	b.n	800cf46 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2201      	movs	r2, #1
 800ce58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	4313      	orrs	r3, r2
 800ce68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	689b      	ldr	r3, [r3, #8]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	4313      	orrs	r3, r2
 800ce84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ce8c:	683b      	ldr	r3, [r7, #0]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	4313      	orrs	r3, r2
 800ce92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	691b      	ldr	r3, [r3, #16]
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	695b      	ldr	r3, [r3, #20]
 800ceac:	4313      	orrs	r3, r2
 800ceae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceba:	4313      	orrs	r3, r2
 800cebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	041b      	lsls	r3, r3, #16
 800ceca:	4313      	orrs	r3, r2
 800cecc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	4a20      	ldr	r2, [pc, #128]	; (800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d106      	bne.n	800cee6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800cede:	683b      	ldr	r3, [r7, #0]
 800cee0:	69db      	ldr	r3, [r3, #28]
 800cee2:	4313      	orrs	r3, r2
 800cee4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a1a      	ldr	r2, [pc, #104]	; (800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d121      	bne.n	800cf34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefa:	051b      	lsls	r3, r3, #20
 800cefc:	4313      	orrs	r3, r2
 800cefe:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	6a1b      	ldr	r3, [r3, #32]
 800cf0a:	4313      	orrs	r3, r2
 800cf0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf18:	4313      	orrs	r3, r2
 800cf1a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	4a0c      	ldr	r2, [pc, #48]	; (800cf54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800cf22:	4293      	cmp	r3, r2
 800cf24:	d106      	bne.n	800cf34 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cf2c:	683b      	ldr	r3, [r7, #0]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	4313      	orrs	r3, r2
 800cf32:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cf44:	2300      	movs	r3, #0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3714      	adds	r7, #20
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	40012c00 	.word	0x40012c00

0800cf58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cf60:	bf00      	nop
 800cf62:	370c      	adds	r7, #12
 800cf64:	46bd      	mov	sp, r7
 800cf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf6a:	4770      	bx	lr

0800cf6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	b083      	sub	sp, #12
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cf74:	bf00      	nop
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr

0800cf80 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cf80:	b480      	push	{r7}
 800cf82:	b083      	sub	sp, #12
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cf88:	bf00      	nop
 800cf8a:	370c      	adds	r7, #12
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 800cf94:	b480      	push	{r7}
 800cf96:	af00      	add	r7, sp, #0
  return;
 800cf98:	bf00      	nop
}
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa0:	4770      	bx	lr

0800cfa2 <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 800cfa2:	b480      	push	{r7}
 800cfa4:	af00      	add	r7, sp, #0
  return;
 800cfa6:	bf00      	nop
}
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr

0800cfb0 <EDS_STM_Init>:
__weak void DIS_Init( void )
{
  return;
}
__weak void EDS_STM_Init( void )
{
 800cfb0:	b480      	push	{r7}
 800cfb2:	af00      	add	r7, sp, #0
  return;
 800cfb4:	bf00      	nop
}
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbc:	4770      	bx	lr

0800cfbe <HIDS_Init>:
__weak void HIDS_Init( void )
{
 800cfbe:	b480      	push	{r7}
 800cfc0:	af00      	add	r7, sp, #0
  return;
 800cfc2:	bf00      	nop
}
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfca:	4770      	bx	lr

0800cfcc <HTS_Init>:
__weak void HRS_Init( void )
{
  return;
}
__weak void HTS_Init( void )
{
 800cfcc:	b480      	push	{r7}
 800cfce:	af00      	add	r7, sp, #0
  return;
 800cfd0:	bf00      	nop
}
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <IAS_Init>:
__weak void IAS_Init( void )
{
 800cfda:	b480      	push	{r7}
 800cfdc:	af00      	add	r7, sp, #0
  return;
 800cfde:	bf00      	nop
}
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe6:	4770      	bx	lr

0800cfe8 <LLS_Init>:
__weak void LLS_Init( void )
{
 800cfe8:	b480      	push	{r7}
 800cfea:	af00      	add	r7, sp, #0
  return;
 800cfec:	bf00      	nop
}
 800cfee:	46bd      	mov	sp, r7
 800cff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff4:	4770      	bx	lr

0800cff6 <TPS_Init>:
__weak void TPS_Init( void )
{
 800cff6:	b480      	push	{r7}
 800cff8:	af00      	add	r7, sp, #0
  return;
 800cffa:	bf00      	nop
}
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 800d004:	b480      	push	{r7}
 800d006:	af00      	add	r7, sp, #0
  return;
 800d008:	bf00      	nop
}
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 800d012:	b480      	push	{r7}
 800d014:	af00      	add	r7, sp, #0
  return;
 800d016:	bf00      	nop
}
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <MESH_Init>:
__weak void MESH_Init( void )
{
 800d020:	b480      	push	{r7}
 800d022:	af00      	add	r7, sp, #0
  return;
 800d024:	bf00      	nop
}
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 800d02e:	b480      	push	{r7}
 800d030:	af00      	add	r7, sp, #0
  return;
 800d032:	bf00      	nop
}
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 800d03c:	b480      	push	{r7}
 800d03e:	af00      	add	r7, sp, #0
  return;
 800d040:	bf00      	nop
}
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
	...

0800d04c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800d050:	4b04      	ldr	r3, [pc, #16]	; (800d064 <SVCCTL_Init+0x18>)
 800d052:	2200      	movs	r2, #0
 800d054:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800d056:	4b04      	ldr	r3, [pc, #16]	; (800d068 <SVCCTL_Init+0x1c>)
 800d058:	2200      	movs	r2, #0
 800d05a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800d05c:	f000 f806 	bl	800d06c <SVCCTL_SvcInit>

  return;
 800d060:	bf00      	nop
}
 800d062:	bd80      	pop	{r7, pc}
 800d064:	2000031c 	.word	0x2000031c
 800d068:	2000033c 	.word	0x2000033c

0800d06c <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	af00      	add	r7, sp, #0
  BLS_Init();
 800d070:	f7ff ff90 	bl	800cf94 <BLS_Init>

  CRS_STM_Init();
 800d074:	f7ff ff95 	bl	800cfa2 <CRS_STM_Init>

  //DIS_Init();

  EDS_STM_Init();
 800d078:	f7ff ff9a 	bl	800cfb0 <EDS_STM_Init>

  HIDS_Init();
 800d07c:	f7ff ff9f 	bl	800cfbe <HIDS_Init>

  //HRS_Init();

  HTS_Init();
 800d080:	f7ff ffa4 	bl	800cfcc <HTS_Init>

  IAS_Init();
 800d084:	f7ff ffa9 	bl	800cfda <IAS_Init>

  LLS_Init();
 800d088:	f7ff ffae 	bl	800cfe8 <LLS_Init>

  TPS_Init();
 800d08c:	f7ff ffb3 	bl	800cff6 <TPS_Init>

  MOTENV_STM_Init();
 800d090:	f7ff ffb8 	bl	800d004 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800d094:	f001 fdd4 	bl	800ec40 <P2PS_STM_Init>

  OTAS_STM_Init();
 800d098:	f7ff ffbb 	bl	800d012 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800d09c:	f7ff ffc7 	bl	800d02e <BVOPUS_STM_Init>

  MESH_Init();
 800d0a0:	f7ff ffbe 	bl	800d020 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800d0a4:	f7ff ffca 	bl	800d03c <SVCCTL_InitCustomSvc>
  
  return;
 800d0a8:	bf00      	nop
}
 800d0aa:	bd80      	pop	{r7, pc}

0800d0ac <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800d0b4:	4b09      	ldr	r3, [pc, #36]	; (800d0dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d0b6:	7f1b      	ldrb	r3, [r3, #28]
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	4a08      	ldr	r2, [pc, #32]	; (800d0dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800d0c2:	4b06      	ldr	r3, [pc, #24]	; (800d0dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d0c4:	7f1b      	ldrb	r3, [r3, #28]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	b2da      	uxtb	r2, r3
 800d0ca:	4b04      	ldr	r3, [pc, #16]	; (800d0dc <SVCCTL_RegisterSvcHandler+0x30>)
 800d0cc:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800d0ce:	bf00      	nop
}
 800d0d0:	370c      	adds	r7, #12
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	2000031c 	.word	0x2000031c

0800d0e0 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b086      	sub	sp, #24
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	781b      	ldrb	r3, [r3, #0]
 800d0f6:	2bff      	cmp	r3, #255	; 0xff
 800d0f8:	d000      	beq.n	800d0fc <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800d0fa:	e025      	b.n	800d148 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800d0fc:	693b      	ldr	r3, [r7, #16]
 800d0fe:	3302      	adds	r3, #2
 800d100:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	881b      	ldrh	r3, [r3, #0]
 800d106:	b29b      	uxth	r3, r3
 800d108:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d10c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d110:	d000      	beq.n	800d114 <SVCCTL_UserEvtRx+0x34>
          break;
 800d112:	e018      	b.n	800d146 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d114:	2300      	movs	r3, #0
 800d116:	757b      	strb	r3, [r7, #21]
 800d118:	e00d      	b.n	800d136 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800d11a:	7d7b      	ldrb	r3, [r7, #21]
 800d11c:	4a18      	ldr	r2, [pc, #96]	; (800d180 <SVCCTL_UserEvtRx+0xa0>)
 800d11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	4798      	blx	r3
 800d126:	4603      	mov	r3, r0
 800d128:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 800d12a:	7dfb      	ldrb	r3, [r7, #23]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d108      	bne.n	800d142 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800d130:	7d7b      	ldrb	r3, [r7, #21]
 800d132:	3301      	adds	r3, #1
 800d134:	757b      	strb	r3, [r7, #21]
 800d136:	4b12      	ldr	r3, [pc, #72]	; (800d180 <SVCCTL_UserEvtRx+0xa0>)
 800d138:	7f1b      	ldrb	r3, [r3, #28]
 800d13a:	7d7a      	ldrb	r2, [r7, #21]
 800d13c:	429a      	cmp	r2, r3
 800d13e:	d3ec      	bcc.n	800d11a <SVCCTL_UserEvtRx+0x3a>
          break;
 800d140:	e000      	b.n	800d144 <SVCCTL_UserEvtRx+0x64>
              break;
 800d142:	bf00      	nop
          break;
 800d144:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 800d146:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 800d148:	7dfb      	ldrb	r3, [r7, #23]
 800d14a:	2b01      	cmp	r3, #1
 800d14c:	d009      	beq.n	800d162 <SVCCTL_UserEvtRx+0x82>
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d00a      	beq.n	800d168 <SVCCTL_UserEvtRx+0x88>
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10b      	bne.n	800d16e <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800d156:	6878      	ldr	r0, [r7, #4]
 800d158:	f7f3 fde8 	bl	8000d2c <SVCCTL_App_Notification>
 800d15c:	4603      	mov	r3, r0
 800d15e:	75bb      	strb	r3, [r7, #22]
      break;
 800d160:	e008      	b.n	800d174 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d162:	2301      	movs	r3, #1
 800d164:	75bb      	strb	r3, [r7, #22]
      break;
 800d166:	e005      	b.n	800d174 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800d168:	2300      	movs	r3, #0
 800d16a:	75bb      	strb	r3, [r7, #22]
      break;
 800d16c:	e002      	b.n	800d174 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800d16e:	2301      	movs	r3, #1
 800d170:	75bb      	strb	r3, [r7, #22]
      break;
 800d172:	bf00      	nop
  }

  return (return_status);
 800d174:	7dbb      	ldrb	r3, [r7, #22]
}
 800d176:	4618      	mov	r0, r3
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	2000031c 	.word	0x2000031c

0800d184 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b088      	sub	sp, #32
 800d188:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d18a:	2300      	movs	r3, #0
 800d18c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d18e:	f107 0308 	add.w	r3, r7, #8
 800d192:	2218      	movs	r2, #24
 800d194:	2100      	movs	r1, #0
 800d196:	4618      	mov	r0, r3
 800d198:	f000 ff9c 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d19c:	233f      	movs	r3, #63	; 0x3f
 800d19e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800d1a0:	2381      	movs	r3, #129	; 0x81
 800d1a2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d1a4:	1dfb      	adds	r3, r7, #7
 800d1a6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d1ac:	f107 0308 	add.w	r3, r7, #8
 800d1b0:	2100      	movs	r1, #0
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	f001 f836 	bl	800e224 <hci_send_req>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	da01      	bge.n	800d1c2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d1be:	23ff      	movs	r3, #255	; 0xff
 800d1c0:	e000      	b.n	800d1c4 <aci_gap_set_non_discoverable+0x40>
  return status;
 800d1c2:	79fb      	ldrb	r3, [r7, #7]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3720      	adds	r7, #32
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 800d1cc:	b5b0      	push	{r4, r5, r7, lr}
 800d1ce:	b0ce      	sub	sp, #312	; 0x138
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	4605      	mov	r5, r0
 800d1d4:	460c      	mov	r4, r1
 800d1d6:	4610      	mov	r0, r2
 800d1d8:	4619      	mov	r1, r3
 800d1da:	1dfb      	adds	r3, r7, #7
 800d1dc:	462a      	mov	r2, r5
 800d1de:	701a      	strb	r2, [r3, #0]
 800d1e0:	1d3b      	adds	r3, r7, #4
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	801a      	strh	r2, [r3, #0]
 800d1e6:	1cbb      	adds	r3, r7, #2
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	801a      	strh	r2, [r3, #0]
 800d1ec:	1dbb      	adds	r3, r7, #6
 800d1ee:	460a      	mov	r2, r1
 800d1f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800d1f2:	f107 0310 	add.w	r3, r7, #16
 800d1f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800d1fa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800d1fe:	3308      	adds	r3, #8
 800d200:	f107 0210 	add.w	r2, r7, #16
 800d204:	4413      	add	r3, r2
 800d206:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800d20a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d20e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800d212:	4413      	add	r3, r2
 800d214:	3309      	adds	r3, #9
 800d216:	f107 0210 	add.w	r2, r7, #16
 800d21a:	4413      	add	r3, r2
 800d21c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d220:	f107 030f 	add.w	r3, r7, #15
 800d224:	2200      	movs	r2, #0
 800d226:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800d22e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d232:	1dfa      	adds	r2, r7, #7
 800d234:	7812      	ldrb	r2, [r2, #0]
 800d236:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d238:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d23c:	3301      	adds	r3, #1
 800d23e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800d242:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d246:	1d3a      	adds	r2, r7, #4
 800d248:	8812      	ldrh	r2, [r2, #0]
 800d24a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800d24e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d252:	3302      	adds	r3, #2
 800d254:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800d258:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d25c:	1cba      	adds	r2, r7, #2
 800d25e:	8812      	ldrh	r2, [r2, #0]
 800d260:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800d264:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d268:	3302      	adds	r3, #2
 800d26a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800d26e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d272:	1dba      	adds	r2, r7, #6
 800d274:	7812      	ldrb	r2, [r2, #0]
 800d276:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d278:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d27c:	3301      	adds	r3, #1
 800d27e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800d282:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d286:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800d28a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d28c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d290:	3301      	adds	r3, #1
 800d292:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800d296:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d29a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d29e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800d2a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d2a4:	3301      	adds	r3, #1
 800d2a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800d2aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800d2ae:	3308      	adds	r3, #8
 800d2b0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800d2b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	f000 fefb 	bl	800e0b4 <Osal_MemCpy>
    index_input += Local_Name_Length;
 800d2be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800d2c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d2c6:	4413      	add	r3, r2
 800d2c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800d2cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d2d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d2d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d2da:	3301      	adds	r3, #1
 800d2dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800d2e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d2e4:	3301      	adds	r3, #1
 800d2e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800d2ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800d2ee:	4618      	mov	r0, r3
 800d2f0:	f000 fee0 	bl	800e0b4 <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800d2f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800d2f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d2fc:	4413      	add	r3, r2
 800d2fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 800d302:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d306:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800d30a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800d30c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d310:	3302      	adds	r3, #2
 800d312:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 800d316:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d31a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800d31e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800d320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d324:	3302      	adds	r3, #2
 800d326:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d32a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d32e:	2218      	movs	r2, #24
 800d330:	2100      	movs	r1, #0
 800d332:	4618      	mov	r0, r3
 800d334:	f000 fece 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d338:	233f      	movs	r3, #63	; 0x3f
 800d33a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800d33e:	2383      	movs	r3, #131	; 0x83
 800d340:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d344:	f107 0310 	add.w	r3, r7, #16
 800d348:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d34c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d350:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d354:	f107 030f 	add.w	r3, r7, #15
 800d358:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d35c:	2301      	movs	r3, #1
 800d35e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d362:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d366:	2100      	movs	r1, #0
 800d368:	4618      	mov	r0, r3
 800d36a:	f000 ff5b 	bl	800e224 <hci_send_req>
 800d36e:	4603      	mov	r3, r0
 800d370:	2b00      	cmp	r3, #0
 800d372:	da01      	bge.n	800d378 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 800d374:	23ff      	movs	r3, #255	; 0xff
 800d376:	e002      	b.n	800d37e <aci_gap_set_discoverable+0x1b2>
  return status;
 800d378:	f107 030f 	add.w	r3, r7, #15
 800d37c:	781b      	ldrb	r3, [r3, #0]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800d384:	46bd      	mov	sp, r7
 800d386:	bdb0      	pop	{r4, r5, r7, pc}

0800d388 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b0cc      	sub	sp, #304	; 0x130
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	4602      	mov	r2, r0
 800d390:	1dfb      	adds	r3, r7, #7
 800d392:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800d394:	f107 0310 	add.w	r3, r7, #16
 800d398:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d39c:	f107 030f 	add.w	r3, r7, #15
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800d3aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d3ae:	1dfa      	adds	r2, r7, #7
 800d3b0:	7812      	ldrb	r2, [r2, #0]
 800d3b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d3b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d3be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3c2:	2218      	movs	r2, #24
 800d3c4:	2100      	movs	r1, #0
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 fe84 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d3cc:	233f      	movs	r3, #63	; 0x3f
 800d3ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800d3d2:	2385      	movs	r3, #133	; 0x85
 800d3d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d3d8:	f107 0310 	add.w	r3, r7, #16
 800d3dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d3e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d3e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d3e8:	f107 030f 	add.w	r3, r7, #15
 800d3ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d3f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d3fa:	2100      	movs	r1, #0
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 ff11 	bl	800e224 <hci_send_req>
 800d402:	4603      	mov	r3, r0
 800d404:	2b00      	cmp	r3, #0
 800d406:	da01      	bge.n	800d40c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 800d408:	23ff      	movs	r3, #255	; 0xff
 800d40a:	e002      	b.n	800d412 <aci_gap_set_io_capability+0x8a>
  return status;
 800d40c:	f107 030f 	add.w	r3, r7, #15
 800d410:	781b      	ldrb	r3, [r3, #0]
}
 800d412:	4618      	mov	r0, r3
 800d414:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d418:	46bd      	mov	sp, r7
 800d41a:	bd80      	pop	{r7, pc}

0800d41c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800d41c:	b5b0      	push	{r4, r5, r7, lr}
 800d41e:	b0cc      	sub	sp, #304	; 0x130
 800d420:	af00      	add	r7, sp, #0
 800d422:	4605      	mov	r5, r0
 800d424:	460c      	mov	r4, r1
 800d426:	4610      	mov	r0, r2
 800d428:	4619      	mov	r1, r3
 800d42a:	1dfb      	adds	r3, r7, #7
 800d42c:	462a      	mov	r2, r5
 800d42e:	701a      	strb	r2, [r3, #0]
 800d430:	1dbb      	adds	r3, r7, #6
 800d432:	4622      	mov	r2, r4
 800d434:	701a      	strb	r2, [r3, #0]
 800d436:	1d7b      	adds	r3, r7, #5
 800d438:	4602      	mov	r2, r0
 800d43a:	701a      	strb	r2, [r3, #0]
 800d43c:	1d3b      	adds	r3, r7, #4
 800d43e:	460a      	mov	r2, r1
 800d440:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800d442:	f107 0310 	add.w	r3, r7, #16
 800d446:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d44a:	f107 030f 	add.w	r3, r7, #15
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d452:	2300      	movs	r3, #0
 800d454:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800d458:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d45c:	1dfa      	adds	r2, r7, #7
 800d45e:	7812      	ldrb	r2, [r2, #0]
 800d460:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d462:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d466:	3301      	adds	r3, #1
 800d468:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800d46c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d470:	1dba      	adds	r2, r7, #6
 800d472:	7812      	ldrb	r2, [r2, #0]
 800d474:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d476:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d47a:	3301      	adds	r3, #1
 800d47c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800d480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d484:	1d7a      	adds	r2, r7, #5
 800d486:	7812      	ldrb	r2, [r2, #0]
 800d488:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d48a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d48e:	3301      	adds	r3, #1
 800d490:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800d494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d498:	1d3a      	adds	r2, r7, #4
 800d49a:	7812      	ldrb	r2, [r2, #0]
 800d49c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800d49e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800d4a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4ac:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800d4b0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800d4b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800d4bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4c0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800d4c4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800d4c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4ca:	3301      	adds	r3, #1
 800d4cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800d4d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4d4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800d4d8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800d4da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4de:	3301      	adds	r3, #1
 800d4e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800d4e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800d4ec:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800d4f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800d4fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d4fe:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800d502:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800d504:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d508:	3301      	adds	r3, #1
 800d50a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d50e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d512:	2218      	movs	r2, #24
 800d514:	2100      	movs	r1, #0
 800d516:	4618      	mov	r0, r3
 800d518:	f000 fddc 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d51c:	233f      	movs	r3, #63	; 0x3f
 800d51e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800d522:	2386      	movs	r3, #134	; 0x86
 800d524:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d528:	f107 0310 	add.w	r3, r7, #16
 800d52c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d530:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d534:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d538:	f107 030f 	add.w	r3, r7, #15
 800d53c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d540:	2301      	movs	r3, #1
 800d542:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d546:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d54a:	2100      	movs	r1, #0
 800d54c:	4618      	mov	r0, r3
 800d54e:	f000 fe69 	bl	800e224 <hci_send_req>
 800d552:	4603      	mov	r3, r0
 800d554:	2b00      	cmp	r3, #0
 800d556:	da01      	bge.n	800d55c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 800d558:	23ff      	movs	r3, #255	; 0xff
 800d55a:	e002      	b.n	800d562 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800d55c:	f107 030f 	add.w	r3, r7, #15
 800d560:	781b      	ldrb	r3, [r3, #0]
}
 800d562:	4618      	mov	r0, r3
 800d564:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d568:	46bd      	mov	sp, r7
 800d56a:	bdb0      	pop	{r4, r5, r7, pc}

0800d56c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800d56c:	b590      	push	{r4, r7, lr}
 800d56e:	b0cd      	sub	sp, #308	; 0x134
 800d570:	af00      	add	r7, sp, #0
 800d572:	4604      	mov	r4, r0
 800d574:	4608      	mov	r0, r1
 800d576:	4611      	mov	r1, r2
 800d578:	463a      	mov	r2, r7
 800d57a:	6013      	str	r3, [r2, #0]
 800d57c:	1dfb      	adds	r3, r7, #7
 800d57e:	4622      	mov	r2, r4
 800d580:	701a      	strb	r2, [r3, #0]
 800d582:	1dbb      	adds	r3, r7, #6
 800d584:	4602      	mov	r2, r0
 800d586:	701a      	strb	r2, [r3, #0]
 800d588:	1d7b      	adds	r3, r7, #5
 800d58a:	460a      	mov	r2, r1
 800d58c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800d58e:	f107 0310 	add.w	r3, r7, #16
 800d592:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d596:	f107 0308 	add.w	r3, r7, #8
 800d59a:	2207      	movs	r2, #7
 800d59c:	2100      	movs	r1, #0
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f000 fd98 	bl	800e0d4 <Osal_MemSet>
  int index_input = 0;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800d5aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5ae:	1dfa      	adds	r2, r7, #7
 800d5b0:	7812      	ldrb	r2, [r2, #0]
 800d5b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d5b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5b8:	3301      	adds	r3, #1
 800d5ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800d5be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5c2:	1dba      	adds	r2, r7, #6
 800d5c4:	7812      	ldrb	r2, [r2, #0]
 800d5c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800d5c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5cc:	3301      	adds	r3, #1
 800d5ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800d5d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d5d6:	1d7a      	adds	r2, r7, #5
 800d5d8:	7812      	ldrb	r2, [r2, #0]
 800d5da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d5dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d5e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d5ea:	2218      	movs	r2, #24
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f000 fd70 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d5f4:	233f      	movs	r3, #63	; 0x3f
 800d5f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800d5fa:	238a      	movs	r3, #138	; 0x8a
 800d5fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d600:	f107 0310 	add.w	r3, r7, #16
 800d604:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d608:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d60c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800d610:	f107 0308 	add.w	r3, r7, #8
 800d614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800d618:	2307      	movs	r3, #7
 800d61a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d61e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d622:	2100      	movs	r1, #0
 800d624:	4618      	mov	r0, r3
 800d626:	f000 fdfd 	bl	800e224 <hci_send_req>
 800d62a:	4603      	mov	r3, r0
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	da01      	bge.n	800d634 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 800d630:	23ff      	movs	r3, #255	; 0xff
 800d632:	e021      	b.n	800d678 <aci_gap_init+0x10c>
  if ( resp.Status )
 800d634:	f107 0308 	add.w	r3, r7, #8
 800d638:	781b      	ldrb	r3, [r3, #0]
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d003      	beq.n	800d646 <aci_gap_init+0xda>
    return resp.Status;
 800d63e:	f107 0308 	add.w	r3, r7, #8
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	e018      	b.n	800d678 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 800d646:	f107 0308 	add.w	r3, r7, #8
 800d64a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800d64e:	b29a      	uxth	r2, r3
 800d650:	463b      	mov	r3, r7
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800d656:	f107 0308 	add.w	r3, r7, #8
 800d65a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800d65e:	b29a      	uxth	r2, r3
 800d660:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800d664:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800d666:	f107 0308 	add.w	r3, r7, #8
 800d66a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800d66e:	b29a      	uxth	r2, r3
 800d670:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800d674:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800d676:	2300      	movs	r3, #0
}
 800d678:	4618      	mov	r0, r3
 800d67a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd90      	pop	{r4, r7, pc}

0800d682 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b0cc      	sub	sp, #304	; 0x130
 800d686:	af00      	add	r7, sp, #0
 800d688:	4602      	mov	r2, r0
 800d68a:	463b      	mov	r3, r7
 800d68c:	6019      	str	r1, [r3, #0]
 800d68e:	1dfb      	adds	r3, r7, #7
 800d690:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800d692:	f107 0310 	add.w	r3, r7, #16
 800d696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d69a:	f107 030f 	add.w	r3, r7, #15
 800d69e:	2200      	movs	r2, #0
 800d6a0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800d6a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6ac:	1dfa      	adds	r2, r7, #7
 800d6ae:	7812      	ldrb	r2, [r2, #0]
 800d6b0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d6b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d6b6:	3301      	adds	r3, #1
 800d6b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800d6bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d6c0:	1c58      	adds	r0, r3, #1
 800d6c2:	1dfb      	adds	r3, r7, #7
 800d6c4:	781a      	ldrb	r2, [r3, #0]
 800d6c6:	463b      	mov	r3, r7
 800d6c8:	6819      	ldr	r1, [r3, #0]
 800d6ca:	f000 fcf3 	bl	800e0b4 <Osal_MemCpy>
  index_input += AdvDataLen;
 800d6ce:	1dfb      	adds	r3, r7, #7
 800d6d0:	781b      	ldrb	r3, [r3, #0]
 800d6d2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d6d6:	4413      	add	r3, r2
 800d6d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d6dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d6e0:	2218      	movs	r2, #24
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	f000 fcf5 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d6ea:	233f      	movs	r3, #63	; 0x3f
 800d6ec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800d6f0:	238e      	movs	r3, #142	; 0x8e
 800d6f2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d6f6:	f107 0310 	add.w	r3, r7, #16
 800d6fa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d6fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d702:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d706:	f107 030f 	add.w	r3, r7, #15
 800d70a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d70e:	2301      	movs	r3, #1
 800d710:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d714:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d718:	2100      	movs	r1, #0
 800d71a:	4618      	mov	r0, r3
 800d71c:	f000 fd82 	bl	800e224 <hci_send_req>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	da01      	bge.n	800d72a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 800d726:	23ff      	movs	r3, #255	; 0xff
 800d728:	e002      	b.n	800d730 <aci_gap_update_adv_data+0xae>
  return status;
 800d72a:	f107 030f 	add.w	r3, r7, #15
 800d72e:	781b      	ldrb	r3, [r3, #0]
}
 800d730:	4618      	mov	r0, r3
 800d732:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b088      	sub	sp, #32
 800d73e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d740:	2300      	movs	r3, #0
 800d742:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d744:	f107 0308 	add.w	r3, r7, #8
 800d748:	2218      	movs	r2, #24
 800d74a:	2100      	movs	r1, #0
 800d74c:	4618      	mov	r0, r3
 800d74e:	f000 fcc1 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d752:	233f      	movs	r3, #63	; 0x3f
 800d754:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800d756:	2392      	movs	r3, #146	; 0x92
 800d758:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d75a:	1dfb      	adds	r3, r7, #7
 800d75c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d75e:	2301      	movs	r3, #1
 800d760:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d762:	f107 0308 	add.w	r3, r7, #8
 800d766:	2100      	movs	r1, #0
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fd5b 	bl	800e224 <hci_send_req>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	da01      	bge.n	800d778 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 800d774:	23ff      	movs	r3, #255	; 0xff
 800d776:	e000      	b.n	800d77a <aci_gap_configure_whitelist+0x40>
  return status;
 800d778:	79fb      	ldrb	r3, [r7, #7]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3720      	adds	r7, #32
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b0cc      	sub	sp, #304	; 0x130
 800d786:	af00      	add	r7, sp, #0
 800d788:	4602      	mov	r2, r0
 800d78a:	1dbb      	adds	r3, r7, #6
 800d78c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800d78e:	f107 0310 	add.w	r3, r7, #16
 800d792:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d796:	f107 030f 	add.w	r3, r7, #15
 800d79a:	2200      	movs	r2, #0
 800d79c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d7a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d7a8:	1dba      	adds	r2, r7, #6
 800d7aa:	8812      	ldrh	r2, [r2, #0]
 800d7ac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d7ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7b2:	3302      	adds	r3, #2
 800d7b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d7b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7bc:	2218      	movs	r2, #24
 800d7be:	2100      	movs	r1, #0
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f000 fc87 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d7c6:	233f      	movs	r3, #63	; 0x3f
 800d7c8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800d7cc:	2395      	movs	r3, #149	; 0x95
 800d7ce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d7d2:	f107 0310 	add.w	r3, r7, #16
 800d7d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d7da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d7de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d7e2:	f107 030f 	add.w	r3, r7, #15
 800d7e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d7ea:	2301      	movs	r3, #1
 800d7ec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d7f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d7f4:	2100      	movs	r1, #0
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 fd14 	bl	800e224 <hci_send_req>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	da01      	bge.n	800d806 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 800d802:	23ff      	movs	r3, #255	; 0xff
 800d804:	e002      	b.n	800d80c <aci_gap_allow_rebond+0x8a>
  return status;
 800d806:	f107 030f 	add.w	r3, r7, #15
 800d80a:	781b      	ldrb	r3, [r3, #0]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}

0800d816 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800d816:	b580      	push	{r7, lr}
 800d818:	b0cc      	sub	sp, #304	; 0x130
 800d81a:	af00      	add	r7, sp, #0
 800d81c:	4602      	mov	r2, r0
 800d81e:	1dbb      	adds	r3, r7, #6
 800d820:	801a      	strh	r2, [r3, #0]
 800d822:	1d7b      	adds	r3, r7, #5
 800d824:	460a      	mov	r2, r1
 800d826:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800d828:	f107 0310 	add.w	r3, r7, #16
 800d82c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800d830:	f107 030f 	add.w	r3, r7, #15
 800d834:	2200      	movs	r2, #0
 800d836:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800d838:	2300      	movs	r3, #0
 800d83a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800d83e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d842:	1dba      	adds	r2, r7, #6
 800d844:	8812      	ldrh	r2, [r2, #0]
 800d846:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800d848:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d84c:	3302      	adds	r3, #2
 800d84e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800d852:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d856:	1d7a      	adds	r2, r7, #5
 800d858:	7812      	ldrb	r2, [r2, #0]
 800d85a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800d85c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d860:	3301      	adds	r3, #1
 800d862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d866:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d86a:	2218      	movs	r2, #24
 800d86c:	2100      	movs	r1, #0
 800d86e:	4618      	mov	r0, r3
 800d870:	f000 fc30 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d874:	233f      	movs	r3, #63	; 0x3f
 800d876:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800d87a:	23a5      	movs	r3, #165	; 0xa5
 800d87c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800d880:	f107 0310 	add.w	r3, r7, #16
 800d884:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800d888:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d88c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800d890:	f107 030f 	add.w	r3, r7, #15
 800d894:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800d898:	2301      	movs	r3, #1
 800d89a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d89e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f000 fcbd 	bl	800e224 <hci_send_req>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	da01      	bge.n	800d8b4 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 800d8b0:	23ff      	movs	r3, #255	; 0xff
 800d8b2:	e002      	b.n	800d8ba <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 800d8b4:	f107 030f 	add.w	r3, r7, #15
 800d8b8:	781b      	ldrb	r3, [r3, #0]
}
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b088      	sub	sp, #32
 800d8c8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d8ce:	f107 0308 	add.w	r3, r7, #8
 800d8d2:	2218      	movs	r2, #24
 800d8d4:	2100      	movs	r1, #0
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f000 fbfc 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d8dc:	233f      	movs	r3, #63	; 0x3f
 800d8de:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800d8e0:	f240 1301 	movw	r3, #257	; 0x101
 800d8e4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800d8e6:	1dfb      	adds	r3, r7, #7
 800d8e8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800d8ee:	f107 0308 	add.w	r3, r7, #8
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 fc95 	bl	800e224 <hci_send_req>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	da01      	bge.n	800d904 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800d900:	23ff      	movs	r3, #255	; 0xff
 800d902:	e000      	b.n	800d906 <aci_gatt_init+0x42>
  return status;
 800d904:	79fb      	ldrb	r3, [r7, #7]
}
 800d906:	4618      	mov	r0, r3
 800d908:	3720      	adds	r7, #32
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}

0800d90e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800d90e:	b590      	push	{r4, r7, lr}
 800d910:	b0cf      	sub	sp, #316	; 0x13c
 800d912:	af00      	add	r7, sp, #0
 800d914:	4604      	mov	r4, r0
 800d916:	4638      	mov	r0, r7
 800d918:	6001      	str	r1, [r0, #0]
 800d91a:	4610      	mov	r0, r2
 800d91c:	4619      	mov	r1, r3
 800d91e:	1dfb      	adds	r3, r7, #7
 800d920:	4622      	mov	r2, r4
 800d922:	701a      	strb	r2, [r3, #0]
 800d924:	1dbb      	adds	r3, r7, #6
 800d926:	4602      	mov	r2, r0
 800d928:	701a      	strb	r2, [r3, #0]
 800d92a:	1d7b      	adds	r3, r7, #5
 800d92c:	460a      	mov	r2, r1
 800d92e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800d930:	f107 0310 	add.w	r3, r7, #16
 800d934:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800d938:	1dfb      	adds	r3, r7, #7
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d007      	beq.n	800d950 <aci_gatt_add_service+0x42>
 800d940:	1dfb      	adds	r3, r7, #7
 800d942:	781b      	ldrb	r3, [r3, #0]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d101      	bne.n	800d94c <aci_gatt_add_service+0x3e>
 800d948:	2311      	movs	r3, #17
 800d94a:	e002      	b.n	800d952 <aci_gatt_add_service+0x44>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e000      	b.n	800d952 <aci_gatt_add_service+0x44>
 800d950:	2303      	movs	r3, #3
 800d952:	f107 0210 	add.w	r2, r7, #16
 800d956:	4413      	add	r3, r2
 800d958:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800d95c:	f107 030c 	add.w	r3, r7, #12
 800d960:	2203      	movs	r2, #3
 800d962:	2100      	movs	r1, #0
 800d964:	4618      	mov	r0, r3
 800d966:	f000 fbb5 	bl	800e0d4 <Osal_MemSet>
  int index_input = 0;
 800d96a:	2300      	movs	r3, #0
 800d96c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800d970:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d974:	1dfa      	adds	r2, r7, #7
 800d976:	7812      	ldrb	r2, [r2, #0]
 800d978:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800d97a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d97e:	3301      	adds	r3, #1
 800d980:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800d984:	1dfb      	adds	r3, r7, #7
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	2b01      	cmp	r3, #1
 800d98a:	d002      	beq.n	800d992 <aci_gatt_add_service+0x84>
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d004      	beq.n	800d99a <aci_gatt_add_service+0x8c>
 800d990:	e007      	b.n	800d9a2 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 800d992:	2302      	movs	r3, #2
 800d994:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d998:	e005      	b.n	800d9a6 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 800d99a:	2310      	movs	r3, #16
 800d99c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800d9a0:	e001      	b.n	800d9a6 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 800d9a2:	2347      	movs	r3, #71	; 0x47
 800d9a4:	e05d      	b.n	800da62 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800d9a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800d9aa:	1c58      	adds	r0, r3, #1
 800d9ac:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800d9b0:	463b      	mov	r3, r7
 800d9b2:	6819      	ldr	r1, [r3, #0]
 800d9b4:	f000 fb7e 	bl	800e0b4 <Osal_MemCpy>
    index_input += size;
 800d9b8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800d9bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800d9c0:	4413      	add	r3, r2
 800d9c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800d9c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9ca:	1dba      	adds	r2, r7, #6
 800d9cc:	7812      	ldrb	r2, [r2, #0]
 800d9ce:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800d9d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9d4:	3301      	adds	r3, #1
 800d9d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800d9da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800d9de:	1d7a      	adds	r2, r7, #5
 800d9e0:	7812      	ldrb	r2, [r2, #0]
 800d9e2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800d9e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800d9e8:	3301      	adds	r3, #1
 800d9ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800d9ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800d9f2:	2218      	movs	r2, #24
 800d9f4:	2100      	movs	r1, #0
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f000 fb6c 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800d9fc:	233f      	movs	r3, #63	; 0x3f
 800d9fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800da02:	f44f 7381 	mov.w	r3, #258	; 0x102
 800da06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800da0a:	f107 0310 	add.w	r3, r7, #16
 800da0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800da12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800da16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800da1a:	f107 030c 	add.w	r3, r7, #12
 800da1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800da22:	2303      	movs	r3, #3
 800da24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800da28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800da2c:	2100      	movs	r1, #0
 800da2e:	4618      	mov	r0, r3
 800da30:	f000 fbf8 	bl	800e224 <hci_send_req>
 800da34:	4603      	mov	r3, r0
 800da36:	2b00      	cmp	r3, #0
 800da38:	da01      	bge.n	800da3e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800da3a:	23ff      	movs	r3, #255	; 0xff
 800da3c:	e011      	b.n	800da62 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 800da3e:	f107 030c 	add.w	r3, r7, #12
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d003      	beq.n	800da50 <aci_gatt_add_service+0x142>
    return resp.Status;
 800da48:	f107 030c 	add.w	r3, r7, #12
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	e008      	b.n	800da62 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 800da50:	f107 030c 	add.w	r3, r7, #12
 800da54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800da58:	b29a      	uxth	r2, r3
 800da5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800da5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd90      	pop	{r4, r7, pc}

0800da6c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800da6c:	b590      	push	{r4, r7, lr}
 800da6e:	b0d1      	sub	sp, #324	; 0x144
 800da70:	af00      	add	r7, sp, #0
 800da72:	4604      	mov	r4, r0
 800da74:	4608      	mov	r0, r1
 800da76:	f107 0108 	add.w	r1, r7, #8
 800da7a:	600a      	str	r2, [r1, #0]
 800da7c:	4619      	mov	r1, r3
 800da7e:	f107 030e 	add.w	r3, r7, #14
 800da82:	4622      	mov	r2, r4
 800da84:	801a      	strh	r2, [r3, #0]
 800da86:	f107 030d 	add.w	r3, r7, #13
 800da8a:	4602      	mov	r2, r0
 800da8c:	701a      	strb	r2, [r3, #0]
 800da8e:	1dbb      	adds	r3, r7, #6
 800da90:	460a      	mov	r2, r1
 800da92:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800da94:	f107 0318 	add.w	r3, r7, #24
 800da98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800da9c:	f107 030d 	add.w	r3, r7, #13
 800daa0:	781b      	ldrb	r3, [r3, #0]
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d008      	beq.n	800dab8 <aci_gatt_add_char+0x4c>
 800daa6:	f107 030d 	add.w	r3, r7, #13
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b02      	cmp	r3, #2
 800daae:	d101      	bne.n	800dab4 <aci_gatt_add_char+0x48>
 800dab0:	2313      	movs	r3, #19
 800dab2:	e002      	b.n	800daba <aci_gatt_add_char+0x4e>
 800dab4:	2303      	movs	r3, #3
 800dab6:	e000      	b.n	800daba <aci_gatt_add_char+0x4e>
 800dab8:	2305      	movs	r3, #5
 800daba:	f107 0218 	add.w	r2, r7, #24
 800dabe:	4413      	add	r3, r2
 800dac0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800dac4:	f107 0314 	add.w	r3, r7, #20
 800dac8:	2203      	movs	r2, #3
 800daca:	2100      	movs	r1, #0
 800dacc:	4618      	mov	r0, r3
 800dace:	f000 fb01 	bl	800e0d4 <Osal_MemSet>
  int index_input = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800dad8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800dadc:	f107 020e 	add.w	r2, r7, #14
 800dae0:	8812      	ldrh	r2, [r2, #0]
 800dae2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dae4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dae8:	3302      	adds	r3, #2
 800daea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800daee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800daf2:	f107 020d 	add.w	r2, r7, #13
 800daf6:	7812      	ldrb	r2, [r2, #0]
 800daf8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800dafa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dafe:	3301      	adds	r3, #1
 800db00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800db04:	f107 030d 	add.w	r3, r7, #13
 800db08:	781b      	ldrb	r3, [r3, #0]
 800db0a:	2b01      	cmp	r3, #1
 800db0c:	d002      	beq.n	800db14 <aci_gatt_add_char+0xa8>
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d004      	beq.n	800db1c <aci_gatt_add_char+0xb0>
 800db12:	e007      	b.n	800db24 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 800db14:	2302      	movs	r3, #2
 800db16:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800db1a:	e005      	b.n	800db28 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 800db1c:	2310      	movs	r3, #16
 800db1e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800db22:	e001      	b.n	800db28 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 800db24:	2347      	movs	r3, #71	; 0x47
 800db26:	e086      	b.n	800dc36 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800db28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800db2c:	1cd8      	adds	r0, r3, #3
 800db2e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800db32:	f107 0308 	add.w	r3, r7, #8
 800db36:	6819      	ldr	r1, [r3, #0]
 800db38:	f000 fabc 	bl	800e0b4 <Osal_MemCpy>
    index_input += size;
 800db3c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800db40:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800db44:	4413      	add	r3, r2
 800db46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800db4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db4e:	1dba      	adds	r2, r7, #6
 800db50:	8812      	ldrh	r2, [r2, #0]
 800db52:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800db54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800db58:	3302      	adds	r3, #2
 800db5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800db5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db62:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800db66:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800db68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800db6c:	3301      	adds	r3, #1
 800db6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800db72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db76:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800db7a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800db7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800db80:	3301      	adds	r3, #1
 800db82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800db86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db8a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800db8e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800db90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800db94:	3301      	adds	r3, #1
 800db96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800db9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800db9e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800dba2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800dba4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dba8:	3301      	adds	r3, #1
 800dbaa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800dbae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800dbb2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800dbb6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800dbb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dbc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dbc6:	2218      	movs	r2, #24
 800dbc8:	2100      	movs	r1, #0
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f000 fa82 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dbd0:	233f      	movs	r3, #63	; 0x3f
 800dbd2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800dbd6:	f44f 7382 	mov.w	r3, #260	; 0x104
 800dbda:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800dbde:	f107 0318 	add.w	r3, r7, #24
 800dbe2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800dbe6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800dbea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800dbee:	f107 0314 	add.w	r3, r7, #20
 800dbf2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800dbf6:	2303      	movs	r3, #3
 800dbf8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dbfc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800dc00:	2100      	movs	r1, #0
 800dc02:	4618      	mov	r0, r3
 800dc04:	f000 fb0e 	bl	800e224 <hci_send_req>
 800dc08:	4603      	mov	r3, r0
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	da01      	bge.n	800dc12 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800dc0e:	23ff      	movs	r3, #255	; 0xff
 800dc10:	e011      	b.n	800dc36 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 800dc12:	f107 0314 	add.w	r3, r7, #20
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d003      	beq.n	800dc24 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800dc1c:	f107 0314 	add.w	r3, r7, #20
 800dc20:	781b      	ldrb	r3, [r3, #0]
 800dc22:	e008      	b.n	800dc36 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 800dc24:	f107 0314 	add.w	r3, r7, #20
 800dc28:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800dc2c:	b29a      	uxth	r2, r3
 800dc2e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800dc32:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800dc34:	2300      	movs	r3, #0
}
 800dc36:	4618      	mov	r0, r3
 800dc38:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd90      	pop	{r4, r7, pc}

0800dc40 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800dc40:	b5b0      	push	{r4, r5, r7, lr}
 800dc42:	b0cc      	sub	sp, #304	; 0x130
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	4605      	mov	r5, r0
 800dc48:	460c      	mov	r4, r1
 800dc4a:	4610      	mov	r0, r2
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	1dbb      	adds	r3, r7, #6
 800dc50:	462a      	mov	r2, r5
 800dc52:	801a      	strh	r2, [r3, #0]
 800dc54:	1d3b      	adds	r3, r7, #4
 800dc56:	4622      	mov	r2, r4
 800dc58:	801a      	strh	r2, [r3, #0]
 800dc5a:	1cfb      	adds	r3, r7, #3
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	701a      	strb	r2, [r3, #0]
 800dc60:	1cbb      	adds	r3, r7, #2
 800dc62:	460a      	mov	r2, r1
 800dc64:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800dc66:	f107 0310 	add.w	r3, r7, #16
 800dc6a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dc6e:	f107 030f 	add.w	r3, r7, #15
 800dc72:	2200      	movs	r2, #0
 800dc74:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dc76:	2300      	movs	r3, #0
 800dc78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800dc7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dc80:	1dba      	adds	r2, r7, #6
 800dc82:	8812      	ldrh	r2, [r2, #0]
 800dc84:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800dc86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dc8a:	3302      	adds	r3, #2
 800dc8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800dc90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dc94:	1d3a      	adds	r2, r7, #4
 800dc96:	8812      	ldrh	r2, [r2, #0]
 800dc98:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800dc9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dc9e:	3302      	adds	r3, #2
 800dca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800dca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dca8:	1cfa      	adds	r2, r7, #3
 800dcaa:	7812      	ldrb	r2, [r2, #0]
 800dcac:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800dcae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800dcb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dcbc:	1cba      	adds	r2, r7, #2
 800dcbe:	7812      	ldrb	r2, [r2, #0]
 800dcc0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800dcc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dcc6:	3301      	adds	r3, #1
 800dcc8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800dccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dcd0:	1d98      	adds	r0, r3, #6
 800dcd2:	1cbb      	adds	r3, r7, #2
 800dcd4:	781b      	ldrb	r3, [r3, #0]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800dcdc:	f000 f9ea 	bl	800e0b4 <Osal_MemCpy>
  index_input += Char_Value_Length;
 800dce0:	1cbb      	adds	r3, r7, #2
 800dce2:	781b      	ldrb	r3, [r3, #0]
 800dce4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800dce8:	4413      	add	r3, r2
 800dcea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800dcee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dcf2:	2218      	movs	r2, #24
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	4618      	mov	r0, r3
 800dcf8:	f000 f9ec 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800dcfc:	233f      	movs	r3, #63	; 0x3f
 800dcfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800dd02:	f44f 7383 	mov.w	r3, #262	; 0x106
 800dd06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dd0a:	f107 0310 	add.w	r3, r7, #16
 800dd0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dd12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800dd1a:	f107 030f 	add.w	r3, r7, #15
 800dd1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dd22:	2301      	movs	r3, #1
 800dd24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dd28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800dd2c:	2100      	movs	r1, #0
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f000 fa78 	bl	800e224 <hci_send_req>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	da01      	bge.n	800dd3e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800dd3a:	23ff      	movs	r3, #255	; 0xff
 800dd3c:	e002      	b.n	800dd44 <aci_gatt_update_char_value+0x104>
  return status;
 800dd3e:	f107 030f 	add.w	r3, r7, #15
 800dd42:	781b      	ldrb	r3, [r3, #0]
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bdb0      	pop	{r4, r5, r7, pc}

0800dd4e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800dd4e:	b580      	push	{r7, lr}
 800dd50:	b0cc      	sub	sp, #304	; 0x130
 800dd52:	af00      	add	r7, sp, #0
 800dd54:	463b      	mov	r3, r7
 800dd56:	601a      	str	r2, [r3, #0]
 800dd58:	1dfb      	adds	r3, r7, #7
 800dd5a:	4602      	mov	r2, r0
 800dd5c:	701a      	strb	r2, [r3, #0]
 800dd5e:	1dbb      	adds	r3, r7, #6
 800dd60:	460a      	mov	r2, r1
 800dd62:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800dd64:	f107 0310 	add.w	r3, r7, #16
 800dd68:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800dd6c:	f107 030f 	add.w	r3, r7, #15
 800dd70:	2200      	movs	r2, #0
 800dd72:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800dd7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd7e:	1dfa      	adds	r2, r7, #7
 800dd80:	7812      	ldrb	r2, [r2, #0]
 800dd82:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800dd84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd88:	3301      	adds	r3, #1
 800dd8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800dd8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dd92:	1dba      	adds	r2, r7, #6
 800dd94:	7812      	ldrb	r2, [r2, #0]
 800dd96:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800dd98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800dda2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800dda6:	1c98      	adds	r0, r3, #2
 800dda8:	1dbb      	adds	r3, r7, #6
 800ddaa:	781a      	ldrb	r2, [r3, #0]
 800ddac:	463b      	mov	r3, r7
 800ddae:	6819      	ldr	r1, [r3, #0]
 800ddb0:	f000 f980 	bl	800e0b4 <Osal_MemCpy>
  index_input += Length;
 800ddb4:	1dbb      	adds	r3, r7, #6
 800ddb6:	781b      	ldrb	r3, [r3, #0]
 800ddb8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800ddbc:	4413      	add	r3, r2
 800ddbe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ddc2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ddc6:	2218      	movs	r2, #24
 800ddc8:	2100      	movs	r1, #0
 800ddca:	4618      	mov	r0, r3
 800ddcc:	f000 f982 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800ddd0:	233f      	movs	r3, #63	; 0x3f
 800ddd2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800ddd6:	230c      	movs	r3, #12
 800ddd8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800dddc:	f107 0310 	add.w	r3, r7, #16
 800dde0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800dde4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800dde8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ddec:	f107 030f 	add.w	r3, r7, #15
 800ddf0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ddf4:	2301      	movs	r3, #1
 800ddf6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ddfa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ddfe:	2100      	movs	r1, #0
 800de00:	4618      	mov	r0, r3
 800de02:	f000 fa0f 	bl	800e224 <hci_send_req>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	da01      	bge.n	800de10 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800de0c:	23ff      	movs	r3, #255	; 0xff
 800de0e:	e002      	b.n	800de16 <aci_hal_write_config_data+0xc8>
  return status;
 800de10:	f107 030f 	add.w	r3, r7, #15
 800de14:	781b      	ldrb	r3, [r3, #0]
}
 800de16:	4618      	mov	r0, r3
 800de18:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b0cc      	sub	sp, #304	; 0x130
 800de24:	af00      	add	r7, sp, #0
 800de26:	4602      	mov	r2, r0
 800de28:	1dfb      	adds	r3, r7, #7
 800de2a:	701a      	strb	r2, [r3, #0]
 800de2c:	1dbb      	adds	r3, r7, #6
 800de2e:	460a      	mov	r2, r1
 800de30:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800de32:	f107 0310 	add.w	r3, r7, #16
 800de36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800de3a:	f107 030f 	add.w	r3, r7, #15
 800de3e:	2200      	movs	r2, #0
 800de40:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800de42:	2300      	movs	r3, #0
 800de44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800de48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de4c:	1dfa      	adds	r2, r7, #7
 800de4e:	7812      	ldrb	r2, [r2, #0]
 800de50:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800de52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de56:	3301      	adds	r3, #1
 800de58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800de5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800de60:	1dba      	adds	r2, r7, #6
 800de62:	7812      	ldrb	r2, [r2, #0]
 800de64:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800de66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de6a:	3301      	adds	r3, #1
 800de6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800de70:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800de74:	2218      	movs	r2, #24
 800de76:	2100      	movs	r1, #0
 800de78:	4618      	mov	r0, r3
 800de7a:	f000 f92b 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x3f;
 800de7e:	233f      	movs	r3, #63	; 0x3f
 800de80:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800de84:	230f      	movs	r3, #15
 800de86:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800de8a:	f107 0310 	add.w	r3, r7, #16
 800de8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800de92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800de96:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800de9a:	f107 030f 	add.w	r3, r7, #15
 800de9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800dea2:	2301      	movs	r3, #1
 800dea4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800dea8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800deac:	2100      	movs	r1, #0
 800deae:	4618      	mov	r0, r3
 800deb0:	f000 f9b8 	bl	800e224 <hci_send_req>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	da01      	bge.n	800debe <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 800deba:	23ff      	movs	r3, #255	; 0xff
 800debc:	e002      	b.n	800dec4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 800debe:	f107 030f 	add.w	r3, r7, #15
 800dec2:	781b      	ldrb	r3, [r3, #0]
}
 800dec4:	4618      	mov	r0, r3
 800dec6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b088      	sub	sp, #32
 800ded2:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800ded4:	2300      	movs	r3, #0
 800ded6:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ded8:	f107 0308 	add.w	r3, r7, #8
 800dedc:	2218      	movs	r2, #24
 800dede:	2100      	movs	r1, #0
 800dee0:	4618      	mov	r0, r3
 800dee2:	f000 f8f7 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x03;
 800dee6:	2303      	movs	r3, #3
 800dee8:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800deea:	2303      	movs	r3, #3
 800deec:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800deee:	1dfb      	adds	r3, r7, #7
 800def0:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800def2:	2301      	movs	r3, #1
 800def4:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800def6:	f107 0308 	add.w	r3, r7, #8
 800defa:	2100      	movs	r1, #0
 800defc:	4618      	mov	r0, r3
 800defe:	f000 f991 	bl	800e224 <hci_send_req>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	da01      	bge.n	800df0c <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800df08:	23ff      	movs	r3, #255	; 0xff
 800df0a:	e000      	b.n	800df0e <hci_reset+0x40>
  return status;
 800df0c:	79fb      	ldrb	r3, [r7, #7]
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3720      	adds	r7, #32
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b0ce      	sub	sp, #312	; 0x138
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	f107 0308 	add.w	r3, r7, #8
 800df20:	6019      	str	r1, [r3, #0]
 800df22:	1d3b      	adds	r3, r7, #4
 800df24:	601a      	str	r2, [r3, #0]
 800df26:	f107 030e 	add.w	r3, r7, #14
 800df2a:	4602      	mov	r2, r0
 800df2c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800df2e:	f107 0318 	add.w	r3, r7, #24
 800df32:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800df36:	f107 0310 	add.w	r3, r7, #16
 800df3a:	2205      	movs	r2, #5
 800df3c:	2100      	movs	r1, #0
 800df3e:	4618      	mov	r0, r3
 800df40:	f000 f8c8 	bl	800e0d4 <Osal_MemSet>
  int index_input = 0;
 800df44:	2300      	movs	r3, #0
 800df46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800df4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800df4e:	f107 020e 	add.w	r2, r7, #14
 800df52:	8812      	ldrh	r2, [r2, #0]
 800df54:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800df56:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800df5a:	3302      	adds	r3, #2
 800df5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800df60:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800df64:	2218      	movs	r2, #24
 800df66:	2100      	movs	r1, #0
 800df68:	4618      	mov	r0, r3
 800df6a:	f000 f8b3 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x08;
 800df6e:	2308      	movs	r3, #8
 800df70:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800df74:	2330      	movs	r3, #48	; 0x30
 800df76:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800df7a:	f107 0318 	add.w	r3, r7, #24
 800df7e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800df82:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800df86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800df8a:	f107 0310 	add.w	r3, r7, #16
 800df8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800df92:	2305      	movs	r3, #5
 800df94:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800df98:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800df9c:	2100      	movs	r1, #0
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f000 f940 	bl	800e224 <hci_send_req>
 800dfa4:	4603      	mov	r3, r0
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	da01      	bge.n	800dfae <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800dfaa:	23ff      	movs	r3, #255	; 0xff
 800dfac:	e016      	b.n	800dfdc <hci_le_read_phy+0xc6>
  if ( resp.Status )
 800dfae:	f107 0310 	add.w	r3, r7, #16
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d003      	beq.n	800dfc0 <hci_le_read_phy+0xaa>
    return resp.Status;
 800dfb8:	f107 0310 	add.w	r3, r7, #16
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	e00d      	b.n	800dfdc <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 800dfc0:	f107 0310 	add.w	r3, r7, #16
 800dfc4:	78da      	ldrb	r2, [r3, #3]
 800dfc6:	f107 0308 	add.w	r3, r7, #8
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800dfce:	f107 0310 	add.w	r3, r7, #16
 800dfd2:	791a      	ldrb	r2, [r3, #4]
 800dfd4:	1d3b      	adds	r3, r7, #4
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800dfda:	2300      	movs	r3, #0
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	bd80      	pop	{r7, pc}

0800dfe6 <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800dfe6:	b590      	push	{r4, r7, lr}
 800dfe8:	b0cd      	sub	sp, #308	; 0x134
 800dfea:	af00      	add	r7, sp, #0
 800dfec:	4604      	mov	r4, r0
 800dfee:	4608      	mov	r0, r1
 800dff0:	4611      	mov	r1, r2
 800dff2:	1dfb      	adds	r3, r7, #7
 800dff4:	4622      	mov	r2, r4
 800dff6:	701a      	strb	r2, [r3, #0]
 800dff8:	1dbb      	adds	r3, r7, #6
 800dffa:	4602      	mov	r2, r0
 800dffc:	701a      	strb	r2, [r3, #0]
 800dffe:	1d7b      	adds	r3, r7, #5
 800e000:	460a      	mov	r2, r1
 800e002:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800e004:	f107 0310 	add.w	r3, r7, #16
 800e008:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800e00c:	f107 030f 	add.w	r3, r7, #15
 800e010:	2200      	movs	r2, #0
 800e012:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800e014:	2300      	movs	r3, #0
 800e016:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800e01a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e01e:	1dfa      	adds	r2, r7, #7
 800e020:	7812      	ldrb	r2, [r2, #0]
 800e022:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800e024:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e028:	3301      	adds	r3, #1
 800e02a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800e02e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e032:	1dba      	adds	r2, r7, #6
 800e034:	7812      	ldrb	r2, [r2, #0]
 800e036:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800e038:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e03c:	3301      	adds	r3, #1
 800e03e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800e042:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800e046:	1d7a      	adds	r2, r7, #5
 800e048:	7812      	ldrb	r2, [r2, #0]
 800e04a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800e04c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e050:	3301      	adds	r3, #1
 800e052:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800e056:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e05a:	2218      	movs	r2, #24
 800e05c:	2100      	movs	r1, #0
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 f838 	bl	800e0d4 <Osal_MemSet>
  rq.ogf = 0x08;
 800e064:	2308      	movs	r3, #8
 800e066:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800e06a:	2331      	movs	r3, #49	; 0x31
 800e06c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800e070:	f107 0310 	add.w	r3, r7, #16
 800e074:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800e078:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800e07c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800e080:	f107 030f 	add.w	r3, r7, #15
 800e084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800e088:	2301      	movs	r3, #1
 800e08a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800e08e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800e092:	2100      	movs	r1, #0
 800e094:	4618      	mov	r0, r3
 800e096:	f000 f8c5 	bl	800e224 <hci_send_req>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	da01      	bge.n	800e0a4 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 800e0a0:	23ff      	movs	r3, #255	; 0xff
 800e0a2:	e002      	b.n	800e0aa <hci_le_set_default_phy+0xc4>
  return status;
 800e0a4:	f107 030f 	add.w	r3, r7, #15
 800e0a8:	781b      	ldrb	r3, [r3, #0]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd90      	pop	{r4, r7, pc}

0800e0b4 <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	60f8      	str	r0, [r7, #12]
 800e0bc:	60b9      	str	r1, [r7, #8]
 800e0be:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800e0c0:	687a      	ldr	r2, [r7, #4]
 800e0c2:	68b9      	ldr	r1, [r7, #8]
 800e0c4:	68f8      	ldr	r0, [r7, #12]
 800e0c6:	f005 fe59 	bl	8013d7c <memcpy>
 800e0ca:	4603      	mov	r3, r0
}
 800e0cc:	4618      	mov	r0, r3
 800e0ce:	3710      	adds	r7, #16
 800e0d0:	46bd      	mov	sp, r7
 800e0d2:	bd80      	pop	{r7, pc}

0800e0d4 <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b084      	sub	sp, #16
 800e0d8:	af00      	add	r7, sp, #0
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800e0e0:	687a      	ldr	r2, [r7, #4]
 800e0e2:	68b9      	ldr	r1, [r7, #8]
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	f005 fe54 	bl	8013d92 <memset>
 800e0ea:	4603      	mov	r3, r0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b088      	sub	sp, #32
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e0fc:	f107 030c 	add.w	r3, r7, #12
 800e100:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800e108:	69fb      	ldr	r3, [r7, #28]
 800e10a:	2121      	movs	r1, #33	; 0x21
 800e10c:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800e110:	f000 fa1e 	bl	800e550 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e114:	69fb      	ldr	r3, [r7, #28]
 800e116:	330b      	adds	r3, #11
 800e118:	78db      	ldrb	r3, [r3, #3]
}
 800e11a:	4618      	mov	r0, r3
 800e11c:	3720      	adds	r7, #32
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}

0800e122 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800e122:	b580      	push	{r7, lr}
 800e124:	b088      	sub	sp, #32
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800e12a:	f107 030c 	add.w	r3, r7, #12
 800e12e:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800e136:	69fb      	ldr	r3, [r7, #28]
 800e138:	210f      	movs	r1, #15
 800e13a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800e13e:	f000 fa07 	bl	800e550 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800e142:	69fb      	ldr	r3, [r7, #28]
 800e144:	330b      	adds	r3, #11
 800e146:	78db      	ldrb	r3, [r3, #3]
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3720      	adds	r7, #32
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	685b      	ldr	r3, [r3, #4]
 800e15e:	4a08      	ldr	r2, [pc, #32]	; (800e180 <hci_init+0x30>)
 800e160:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800e162:	4a08      	ldr	r2, [pc, #32]	; (800e184 <hci_init+0x34>)
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800e168:	4806      	ldr	r0, [pc, #24]	; (800e184 <hci_init+0x34>)
 800e16a:	f000 f973 	bl	800e454 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	4618      	mov	r0, r3
 800e174:	f000 f8d4 	bl	800e320 <TlInit>

  return;
 800e178:	bf00      	nop
}
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	200003d0 	.word	0x200003d0
 800e184:	200003a8 	.word	0x200003a8

0800e188 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e18e:	4822      	ldr	r0, [pc, #136]	; (800e218 <hci_user_evt_proc+0x90>)
 800e190:	f000 ff04 	bl	800ef9c <LST_is_empty>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d12b      	bne.n	800e1f2 <hci_user_evt_proc+0x6a>
 800e19a:	4b20      	ldr	r3, [pc, #128]	; (800e21c <hci_user_evt_proc+0x94>)
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d027      	beq.n	800e1f2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e1a2:	f107 030c 	add.w	r3, r7, #12
 800e1a6:	4619      	mov	r1, r3
 800e1a8:	481b      	ldr	r0, [pc, #108]	; (800e218 <hci_user_evt_proc+0x90>)
 800e1aa:	f000 ff7e 	bl	800f0aa <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800e1ae:	4b1c      	ldr	r3, [pc, #112]	; (800e220 <hci_user_evt_proc+0x98>)
 800e1b0:	69db      	ldr	r3, [r3, #28]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d00c      	beq.n	800e1d0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e1be:	4b18      	ldr	r3, [pc, #96]	; (800e220 <hci_user_evt_proc+0x98>)
 800e1c0:	69db      	ldr	r3, [r3, #28]
 800e1c2:	1d3a      	adds	r2, r7, #4
 800e1c4:	4610      	mov	r0, r2
 800e1c6:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800e1c8:	793a      	ldrb	r2, [r7, #4]
 800e1ca:	4b14      	ldr	r3, [pc, #80]	; (800e21c <hci_user_evt_proc+0x94>)
 800e1cc:	701a      	strb	r2, [r3, #0]
 800e1ce:	e002      	b.n	800e1d6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e1d0:	4b12      	ldr	r3, [pc, #72]	; (800e21c <hci_user_evt_proc+0x94>)
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800e1d6:	4b11      	ldr	r3, [pc, #68]	; (800e21c <hci_user_evt_proc+0x94>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d004      	beq.n	800e1e8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f000 fc03 	bl	800e9ec <TL_MM_EvtDone>
 800e1e6:	e004      	b.n	800e1f2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	480a      	ldr	r0, [pc, #40]	; (800e218 <hci_user_evt_proc+0x90>)
 800e1ee:	f000 fef5 	bl	800efdc <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800e1f2:	4809      	ldr	r0, [pc, #36]	; (800e218 <hci_user_evt_proc+0x90>)
 800e1f4:	f000 fed2 	bl	800ef9c <LST_is_empty>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d107      	bne.n	800e20e <hci_user_evt_proc+0x86>
 800e1fe:	4b07      	ldr	r3, [pc, #28]	; (800e21c <hci_user_evt_proc+0x94>)
 800e200:	781b      	ldrb	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d003      	beq.n	800e20e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800e206:	4804      	ldr	r0, [pc, #16]	; (800e218 <hci_user_evt_proc+0x90>)
 800e208:	f7f3 f944 	bl	8001494 <hci_notify_asynch_evt>
  }


  return;
 800e20c:	bf00      	nop
 800e20e:	bf00      	nop
}
 800e210:	3710      	adds	r7, #16
 800e212:	46bd      	mov	sp, r7
 800e214:	bd80      	pop	{r7, pc}
 800e216:	bf00      	nop
 800e218:	20000344 	.word	0x20000344
 800e21c:	20000350 	.word	0x20000350
 800e220:	200003a8 	.word	0x200003a8

0800e224 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b088      	sub	sp, #32
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
 800e22c:	460b      	mov	r3, r1
 800e22e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800e230:	2000      	movs	r0, #0
 800e232:	f000 f8cb 	bl	800e3cc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800e236:	2300      	movs	r3, #0
 800e238:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	885b      	ldrh	r3, [r3, #2]
 800e23e:	b21b      	sxth	r3, r3
 800e240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800e244:	b21a      	sxth	r2, r3
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	881b      	ldrh	r3, [r3, #0]
 800e24a:	029b      	lsls	r3, r3, #10
 800e24c:	b21b      	sxth	r3, r3
 800e24e:	4313      	orrs	r3, r2
 800e250:	b21b      	sxth	r3, r3
 800e252:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	68db      	ldr	r3, [r3, #12]
 800e258:	b2d9      	uxtb	r1, r3
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	689a      	ldr	r2, [r3, #8]
 800e25e:	8bbb      	ldrh	r3, [r7, #28]
 800e260:	4618      	mov	r0, r3
 800e262:	f000 f88d 	bl	800e380 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800e266:	e04e      	b.n	800e306 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800e268:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e26c:	f7f3 f932 	bl	80014d4 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e270:	e043      	b.n	800e2fa <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800e272:	f107 030c 	add.w	r3, r7, #12
 800e276:	4619      	mov	r1, r3
 800e278:	4828      	ldr	r0, [pc, #160]	; (800e31c <hci_send_req+0xf8>)
 800e27a:	f000 ff16 	bl	800f0aa <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	7a5b      	ldrb	r3, [r3, #9]
 800e282:	2b0f      	cmp	r3, #15
 800e284:	d114      	bne.n	800e2b0 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	330b      	adds	r3, #11
 800e28a:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	885b      	ldrh	r3, [r3, #2]
 800e290:	b29b      	uxth	r3, r3
 800e292:	8bba      	ldrh	r2, [r7, #28]
 800e294:	429a      	cmp	r2, r3
 800e296:	d104      	bne.n	800e2a2 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	691b      	ldr	r3, [r3, #16]
 800e29c:	693a      	ldr	r2, [r7, #16]
 800e29e:	7812      	ldrb	r2, [r2, #0]
 800e2a0:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800e2a2:	693b      	ldr	r3, [r7, #16]
 800e2a4:	785b      	ldrb	r3, [r3, #1]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d027      	beq.n	800e2fa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	77fb      	strb	r3, [r7, #31]
 800e2ae:	e024      	b.n	800e2fa <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	330b      	adds	r3, #11
 800e2b4:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800e2bc:	b29b      	uxth	r3, r3
 800e2be:	8bba      	ldrh	r2, [r7, #28]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d114      	bne.n	800e2ee <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	7a9b      	ldrb	r3, [r3, #10]
 800e2c8:	3b03      	subs	r3, #3
 800e2ca:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	695a      	ldr	r2, [r3, #20]
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	bfa8      	it	ge
 800e2d6:	461a      	movge	r2, r3
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	6918      	ldr	r0, [r3, #16]
 800e2e0:	69bb      	ldr	r3, [r7, #24]
 800e2e2:	1cd9      	adds	r1, r3, #3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	695b      	ldr	r3, [r3, #20]
 800e2e8:	461a      	mov	r2, r3
 800e2ea:	f005 fd47 	bl	8013d7c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800e2ee:	69bb      	ldr	r3, [r7, #24]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d001      	beq.n	800e2fa <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800e2f6:	2301      	movs	r3, #1
 800e2f8:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800e2fa:	4808      	ldr	r0, [pc, #32]	; (800e31c <hci_send_req+0xf8>)
 800e2fc:	f000 fe4e 	bl	800ef9c <LST_is_empty>
 800e300:	4603      	mov	r3, r0
 800e302:	2b00      	cmp	r3, #0
 800e304:	d0b5      	beq.n	800e272 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800e306:	7ffb      	ldrb	r3, [r7, #31]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d0ad      	beq.n	800e268 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800e30c:	2001      	movs	r0, #1
 800e30e:	f000 f85d 	bl	800e3cc <NotifyCmdStatus>

  return 0;
 800e312:	2300      	movs	r3, #0
}
 800e314:	4618      	mov	r0, r3
 800e316:	3720      	adds	r7, #32
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	200003c8 	.word	0x200003c8

0800e320 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b086      	sub	sp, #24
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800e328:	480f      	ldr	r0, [pc, #60]	; (800e368 <TlInit+0x48>)
 800e32a:	f000 fe27 	bl	800ef7c <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800e32e:	4a0f      	ldr	r2, [pc, #60]	; (800e36c <TlInit+0x4c>)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800e334:	480e      	ldr	r0, [pc, #56]	; (800e370 <TlInit+0x50>)
 800e336:	f000 fe21 	bl	800ef7c <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800e33a:	4b0e      	ldr	r3, [pc, #56]	; (800e374 <TlInit+0x54>)
 800e33c:	2201      	movs	r2, #1
 800e33e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800e340:	4b0d      	ldr	r3, [pc, #52]	; (800e378 <TlInit+0x58>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00a      	beq.n	800e35e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800e34c:	4b0b      	ldr	r3, [pc, #44]	; (800e37c <TlInit+0x5c>)
 800e34e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800e350:	4b09      	ldr	r3, [pc, #36]	; (800e378 <TlInit+0x58>)
 800e352:	681b      	ldr	r3, [r3, #0]
 800e354:	f107 0208 	add.w	r2, r7, #8
 800e358:	4610      	mov	r0, r2
 800e35a:	4798      	blx	r3
  }

  return;
 800e35c:	bf00      	nop
 800e35e:	bf00      	nop
}
 800e360:	3718      	adds	r7, #24
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	200003c8 	.word	0x200003c8
 800e36c:	2000034c 	.word	0x2000034c
 800e370:	20000344 	.word	0x20000344
 800e374:	20000350 	.word	0x20000350
 800e378:	200003a8 	.word	0x200003a8
 800e37c:	0800e40d 	.word	0x0800e40d

0800e380 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	4603      	mov	r3, r0
 800e388:	603a      	str	r2, [r7, #0]
 800e38a:	80fb      	strh	r3, [r7, #6]
 800e38c:	460b      	mov	r3, r1
 800e38e:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800e390:	4b0c      	ldr	r3, [pc, #48]	; (800e3c4 <SendCmd+0x44>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	88fa      	ldrh	r2, [r7, #6]
 800e396:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800e39a:	4b0a      	ldr	r3, [pc, #40]	; (800e3c4 <SendCmd+0x44>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	797a      	ldrb	r2, [r7, #5]
 800e3a0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800e3a2:	4b08      	ldr	r3, [pc, #32]	; (800e3c4 <SendCmd+0x44>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	330c      	adds	r3, #12
 800e3a8:	797a      	ldrb	r2, [r7, #5]
 800e3aa:	6839      	ldr	r1, [r7, #0]
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f005 fce5 	bl	8013d7c <memcpy>

  hciContext.io.Send(0,0);
 800e3b2:	4b05      	ldr	r3, [pc, #20]	; (800e3c8 <SendCmd+0x48>)
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	2000      	movs	r0, #0
 800e3ba:	4798      	blx	r3

  return;
 800e3bc:	bf00      	nop
}
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	2000034c 	.word	0x2000034c
 800e3c8:	200003a8 	.word	0x200003a8

0800e3cc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800e3d6:	79fb      	ldrb	r3, [r7, #7]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d108      	bne.n	800e3ee <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800e3dc:	4b0a      	ldr	r3, [pc, #40]	; (800e408 <NotifyCmdStatus+0x3c>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d00d      	beq.n	800e400 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800e3e4:	4b08      	ldr	r3, [pc, #32]	; (800e408 <NotifyCmdStatus+0x3c>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	2000      	movs	r0, #0
 800e3ea:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800e3ec:	e008      	b.n	800e400 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800e3ee:	4b06      	ldr	r3, [pc, #24]	; (800e408 <NotifyCmdStatus+0x3c>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d004      	beq.n	800e400 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800e3f6:	4b04      	ldr	r3, [pc, #16]	; (800e408 <NotifyCmdStatus+0x3c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2001      	movs	r0, #1
 800e3fc:	4798      	blx	r3
  return;
 800e3fe:	bf00      	nop
 800e400:	bf00      	nop
}
 800e402:	3708      	adds	r7, #8
 800e404:	46bd      	mov	sp, r7
 800e406:	bd80      	pop	{r7, pc}
 800e408:	200003d0 	.word	0x200003d0

0800e40c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b082      	sub	sp, #8
 800e410:	af00      	add	r7, sp, #0
 800e412:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7a5b      	ldrb	r3, [r3, #9]
 800e418:	2b0f      	cmp	r3, #15
 800e41a:	d003      	beq.n	800e424 <TlEvtReceived+0x18>
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	7a5b      	ldrb	r3, [r3, #9]
 800e420:	2b0e      	cmp	r3, #14
 800e422:	d107      	bne.n	800e434 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800e424:	6879      	ldr	r1, [r7, #4]
 800e426:	4809      	ldr	r0, [pc, #36]	; (800e44c <TlEvtReceived+0x40>)
 800e428:	f000 fdfc 	bl	800f024 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800e42c:	2000      	movs	r0, #0
 800e42e:	f7f3 f841 	bl	80014b4 <hci_cmd_resp_release>
 800e432:	e006      	b.n	800e442 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800e434:	6879      	ldr	r1, [r7, #4]
 800e436:	4806      	ldr	r0, [pc, #24]	; (800e450 <TlEvtReceived+0x44>)
 800e438:	f000 fdf4 	bl	800f024 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e43c:	4804      	ldr	r0, [pc, #16]	; (800e450 <TlEvtReceived+0x44>)
 800e43e:	f7f3 f829 	bl	8001494 <hci_notify_asynch_evt>
  }

  return;
 800e442:	bf00      	nop
}
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	200003c8 	.word	0x200003c8
 800e450:	20000344 	.word	0x20000344

0800e454 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	4a05      	ldr	r2, [pc, #20]	; (800e474 <hci_register_io_bus+0x20>)
 800e460:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	4a04      	ldr	r2, [pc, #16]	; (800e478 <hci_register_io_bus+0x24>)
 800e466:	611a      	str	r2, [r3, #16]

  return;
 800e468:	bf00      	nop
}
 800e46a:	370c      	adds	r7, #12
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr
 800e474:	0800e765 	.word	0x0800e765
 800e478:	0800e7cd 	.word	0x0800e7cd

0800e47c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800e47c:	b580      	push	{r7, lr}
 800e47e:	b082      	sub	sp, #8
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800e486:	683b      	ldr	r3, [r7, #0]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	4a08      	ldr	r2, [pc, #32]	; (800e4ac <shci_init+0x30>)
 800e48c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800e48e:	4a08      	ldr	r2, [pc, #32]	; (800e4b0 <shci_init+0x34>)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800e494:	4806      	ldr	r0, [pc, #24]	; (800e4b0 <shci_init+0x34>)
 800e496:	f000 f911 	bl	800e6bc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	4618      	mov	r0, r3
 800e4a0:	f000 f894 	bl	800e5cc <TlInit>

  return;
 800e4a4:	bf00      	nop
}
 800e4a6:	3708      	adds	r7, #8
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	200003f4 	.word	0x200003f4
 800e4b0:	200003d4 	.word	0x200003d4

0800e4b4 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e4ba:	4822      	ldr	r0, [pc, #136]	; (800e544 <shci_user_evt_proc+0x90>)
 800e4bc:	f000 fd6e 	bl	800ef9c <LST_is_empty>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d12b      	bne.n	800e51e <shci_user_evt_proc+0x6a>
 800e4c6:	4b20      	ldr	r3, [pc, #128]	; (800e548 <shci_user_evt_proc+0x94>)
 800e4c8:	781b      	ldrb	r3, [r3, #0]
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d027      	beq.n	800e51e <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800e4ce:	f107 030c 	add.w	r3, r7, #12
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	481b      	ldr	r0, [pc, #108]	; (800e544 <shci_user_evt_proc+0x90>)
 800e4d6:	f000 fde8 	bl	800f0aa <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800e4da:	4b1c      	ldr	r3, [pc, #112]	; (800e54c <shci_user_evt_proc+0x98>)
 800e4dc:	69db      	ldr	r3, [r3, #28]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d00c      	beq.n	800e4fc <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800e4e6:	2301      	movs	r3, #1
 800e4e8:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800e4ea:	4b18      	ldr	r3, [pc, #96]	; (800e54c <shci_user_evt_proc+0x98>)
 800e4ec:	69db      	ldr	r3, [r3, #28]
 800e4ee:	1d3a      	adds	r2, r7, #4
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800e4f4:	793a      	ldrb	r2, [r7, #4]
 800e4f6:	4b14      	ldr	r3, [pc, #80]	; (800e548 <shci_user_evt_proc+0x94>)
 800e4f8:	701a      	strb	r2, [r3, #0]
 800e4fa:	e002      	b.n	800e502 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e4fc:	4b12      	ldr	r3, [pc, #72]	; (800e548 <shci_user_evt_proc+0x94>)
 800e4fe:	2201      	movs	r2, #1
 800e500:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800e502:	4b11      	ldr	r3, [pc, #68]	; (800e548 <shci_user_evt_proc+0x94>)
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d004      	beq.n	800e514 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	4618      	mov	r0, r3
 800e50e:	f000 fa6d 	bl	800e9ec <TL_MM_EvtDone>
 800e512:	e004      	b.n	800e51e <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	4619      	mov	r1, r3
 800e518:	480a      	ldr	r0, [pc, #40]	; (800e544 <shci_user_evt_proc+0x90>)
 800e51a:	f000 fd5f 	bl	800efdc <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800e51e:	4809      	ldr	r0, [pc, #36]	; (800e544 <shci_user_evt_proc+0x90>)
 800e520:	f000 fd3c 	bl	800ef9c <LST_is_empty>
 800e524:	4603      	mov	r3, r0
 800e526:	2b00      	cmp	r3, #0
 800e528:	d107      	bne.n	800e53a <shci_user_evt_proc+0x86>
 800e52a:	4b07      	ldr	r3, [pc, #28]	; (800e548 <shci_user_evt_proc+0x94>)
 800e52c:	781b      	ldrb	r3, [r3, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d003      	beq.n	800e53a <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800e532:	4804      	ldr	r0, [pc, #16]	; (800e544 <shci_user_evt_proc+0x90>)
 800e534:	f7f3 fd3c 	bl	8001fb0 <shci_notify_asynch_evt>
  }


  return;
 800e538:	bf00      	nop
 800e53a:	bf00      	nop
}
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop
 800e544:	2000035c 	.word	0x2000035c
 800e548:	2000036c 	.word	0x2000036c
 800e54c:	200003d4 	.word	0x200003d4

0800e550 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	60ba      	str	r2, [r7, #8]
 800e558:	607b      	str	r3, [r7, #4]
 800e55a:	4603      	mov	r3, r0
 800e55c:	81fb      	strh	r3, [r7, #14]
 800e55e:	460b      	mov	r3, r1
 800e560:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800e562:	2000      	movs	r0, #0
 800e564:	f000 f864 	bl	800e630 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800e568:	4b16      	ldr	r3, [pc, #88]	; (800e5c4 <shci_send+0x74>)
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	89fa      	ldrh	r2, [r7, #14]
 800e56e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800e572:	4b14      	ldr	r3, [pc, #80]	; (800e5c4 <shci_send+0x74>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	7b7a      	ldrb	r2, [r7, #13]
 800e578:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800e57a:	4b12      	ldr	r3, [pc, #72]	; (800e5c4 <shci_send+0x74>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	330c      	adds	r3, #12
 800e580:	7b7a      	ldrb	r2, [r7, #13]
 800e582:	68b9      	ldr	r1, [r7, #8]
 800e584:	4618      	mov	r0, r3
 800e586:	f005 fbf9 	bl	8013d7c <memcpy>

  shciContext.io.Send(0,0);
 800e58a:	4b0f      	ldr	r3, [pc, #60]	; (800e5c8 <shci_send+0x78>)
 800e58c:	691b      	ldr	r3, [r3, #16]
 800e58e:	2100      	movs	r1, #0
 800e590:	2000      	movs	r0, #0
 800e592:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800e594:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800e598:	f7f3 fd2a 	bl	8001ff0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f103 0008 	add.w	r0, r3, #8
 800e5a2:	4b08      	ldr	r3, [pc, #32]	; (800e5c4 <shci_send+0x74>)
 800e5a4:	6819      	ldr	r1, [r3, #0]
 800e5a6:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <shci_send+0x74>)
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	789b      	ldrb	r3, [r3, #2]
 800e5ac:	3303      	adds	r3, #3
 800e5ae:	461a      	mov	r2, r3
 800e5b0:	f005 fbe4 	bl	8013d7c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e5b4:	2001      	movs	r0, #1
 800e5b6:	f000 f83b 	bl	800e630 <Cmd_SetStatus>

  return;
 800e5ba:	bf00      	nop
}
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20000368 	.word	0x20000368
 800e5c8:	200003d4 	.word	0x200003d4

0800e5cc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800e5cc:	b580      	push	{r7, lr}
 800e5ce:	b086      	sub	sp, #24
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800e5d4:	4a10      	ldr	r2, [pc, #64]	; (800e618 <TlInit+0x4c>)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800e5da:	4810      	ldr	r0, [pc, #64]	; (800e61c <TlInit+0x50>)
 800e5dc:	f000 fcce 	bl	800ef7c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800e5e0:	2001      	movs	r0, #1
 800e5e2:	f000 f825 	bl	800e630 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800e5e6:	4b0e      	ldr	r3, [pc, #56]	; (800e620 <TlInit+0x54>)
 800e5e8:	2201      	movs	r2, #1
 800e5ea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800e5ec:	4b0d      	ldr	r3, [pc, #52]	; (800e624 <TlInit+0x58>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00c      	beq.n	800e60e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800e5f8:	4b0b      	ldr	r3, [pc, #44]	; (800e628 <TlInit+0x5c>)
 800e5fa:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800e5fc:	4b0b      	ldr	r3, [pc, #44]	; (800e62c <TlInit+0x60>)
 800e5fe:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800e600:	4b08      	ldr	r3, [pc, #32]	; (800e624 <TlInit+0x58>)
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	f107 020c 	add.w	r2, r7, #12
 800e608:	4610      	mov	r0, r2
 800e60a:	4798      	blx	r3
  }

  return;
 800e60c:	bf00      	nop
 800e60e:	bf00      	nop
}
 800e610:	3718      	adds	r7, #24
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
 800e616:	bf00      	nop
 800e618:	20000368 	.word	0x20000368
 800e61c:	2000035c 	.word	0x2000035c
 800e620:	2000036c 	.word	0x2000036c
 800e624:	200003d4 	.word	0x200003d4
 800e628:	0800e681 	.word	0x0800e681
 800e62c:	0800e699 	.word	0x0800e699

0800e630 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	4603      	mov	r3, r0
 800e638:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800e63a:	79fb      	ldrb	r3, [r7, #7]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d10b      	bne.n	800e658 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800e640:	4b0d      	ldr	r3, [pc, #52]	; (800e678 <Cmd_SetStatus+0x48>)
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d003      	beq.n	800e650 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800e648:	4b0b      	ldr	r3, [pc, #44]	; (800e678 <Cmd_SetStatus+0x48>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2000      	movs	r0, #0
 800e64e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800e650:	4b0a      	ldr	r3, [pc, #40]	; (800e67c <Cmd_SetStatus+0x4c>)
 800e652:	2200      	movs	r2, #0
 800e654:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800e656:	e00b      	b.n	800e670 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800e658:	4b08      	ldr	r3, [pc, #32]	; (800e67c <Cmd_SetStatus+0x4c>)
 800e65a:	2201      	movs	r2, #1
 800e65c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800e65e:	4b06      	ldr	r3, [pc, #24]	; (800e678 <Cmd_SetStatus+0x48>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d004      	beq.n	800e670 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800e666:	4b04      	ldr	r3, [pc, #16]	; (800e678 <Cmd_SetStatus+0x48>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	2001      	movs	r0, #1
 800e66c:	4798      	blx	r3
  return;
 800e66e:	bf00      	nop
 800e670:	bf00      	nop
}
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}
 800e678:	200003f4 	.word	0x200003f4
 800e67c:	20000364 	.word	0x20000364

0800e680 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b082      	sub	sp, #8
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800e688:	2000      	movs	r0, #0
 800e68a:	f7f3 fca1 	bl	8001fd0 <shci_cmd_resp_release>

  return;
 800e68e:	bf00      	nop
}
 800e690:	3708      	adds	r7, #8
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
	...

0800e698 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800e698:	b580      	push	{r7, lr}
 800e69a:	b082      	sub	sp, #8
 800e69c:	af00      	add	r7, sp, #0
 800e69e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800e6a0:	6879      	ldr	r1, [r7, #4]
 800e6a2:	4805      	ldr	r0, [pc, #20]	; (800e6b8 <TlUserEvtReceived+0x20>)
 800e6a4:	f000 fcbe 	bl	800f024 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800e6a8:	4803      	ldr	r0, [pc, #12]	; (800e6b8 <TlUserEvtReceived+0x20>)
 800e6aa:	f7f3 fc81 	bl	8001fb0 <shci_notify_asynch_evt>

  return;
 800e6ae:	bf00      	nop
}
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	2000035c 	.word	0x2000035c

0800e6bc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	4a05      	ldr	r2, [pc, #20]	; (800e6dc <shci_register_io_bus+0x20>)
 800e6c8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	4a04      	ldr	r2, [pc, #16]	; (800e6e0 <shci_register_io_bus+0x24>)
 800e6ce:	611a      	str	r2, [r3, #16]

  return;
 800e6d0:	bf00      	nop
}
 800e6d2:	370c      	adds	r7, #12
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	0800e879 	.word	0x0800e879
 800e6e0:	0800e8cd 	.word	0x0800e8cd

0800e6e4 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e6e8:	f7f3 f936 	bl	8001958 <HW_IPCC_Enable>

  return;
 800e6ec:	bf00      	nop
}
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <TL_Init>:


void TL_Init( void )
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e6f4:	4b10      	ldr	r3, [pc, #64]	; (800e738 <TL_Init+0x48>)
 800e6f6:	4a11      	ldr	r2, [pc, #68]	; (800e73c <TL_Init+0x4c>)
 800e6f8:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e6fa:	4b0f      	ldr	r3, [pc, #60]	; (800e738 <TL_Init+0x48>)
 800e6fc:	4a10      	ldr	r2, [pc, #64]	; (800e740 <TL_Init+0x50>)
 800e6fe:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e700:	4b0d      	ldr	r3, [pc, #52]	; (800e738 <TL_Init+0x48>)
 800e702:	4a10      	ldr	r2, [pc, #64]	; (800e744 <TL_Init+0x54>)
 800e704:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e706:	4b0c      	ldr	r3, [pc, #48]	; (800e738 <TL_Init+0x48>)
 800e708:	4a0f      	ldr	r2, [pc, #60]	; (800e748 <TL_Init+0x58>)
 800e70a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 800e70c:	4b0a      	ldr	r3, [pc, #40]	; (800e738 <TL_Init+0x48>)
 800e70e:	4a0f      	ldr	r2, [pc, #60]	; (800e74c <TL_Init+0x5c>)
 800e710:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e712:	4b09      	ldr	r3, [pc, #36]	; (800e738 <TL_Init+0x48>)
 800e714:	4a0e      	ldr	r2, [pc, #56]	; (800e750 <TL_Init+0x60>)
 800e716:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e718:	4b07      	ldr	r3, [pc, #28]	; (800e738 <TL_Init+0x48>)
 800e71a:	4a0e      	ldr	r2, [pc, #56]	; (800e754 <TL_Init+0x64>)
 800e71c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e71e:	4b06      	ldr	r3, [pc, #24]	; (800e738 <TL_Init+0x48>)
 800e720:	4a0d      	ldr	r2, [pc, #52]	; (800e758 <TL_Init+0x68>)
 800e722:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e724:	4b04      	ldr	r3, [pc, #16]	; (800e738 <TL_Init+0x48>)
 800e726:	4a0d      	ldr	r2, [pc, #52]	; (800e75c <TL_Init+0x6c>)
 800e728:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e72a:	4b03      	ldr	r3, [pc, #12]	; (800e738 <TL_Init+0x48>)
 800e72c:	4a0c      	ldr	r2, [pc, #48]	; (800e760 <TL_Init+0x70>)
 800e72e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e730:	f7f3 f926 	bl	8001980 <HW_IPCC_Init>

  return;
 800e734:	bf00      	nop
}
 800e736:	bd80      	pop	{r7, pc}
 800e738:	20030000 	.word	0x20030000
 800e73c:	20030134 	.word	0x20030134
 800e740:	20030154 	.word	0x20030154
 800e744:	20030164 	.word	0x20030164
 800e748:	20030170 	.word	0x20030170
 800e74c:	20030178 	.word	0x20030178
 800e750:	20030180 	.word	0x20030180
 800e754:	20030188 	.word	0x20030188
 800e758:	200301a4 	.word	0x200301a4
 800e75c:	200301a8 	.word	0x200301a8
 800e760:	200301b4 	.word	0x200301b4

0800e764 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b084      	sub	sp, #16
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e770:	4811      	ldr	r0, [pc, #68]	; (800e7b8 <TL_BLE_Init+0x54>)
 800e772:	f000 fc03 	bl	800ef7c <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e776:	4b11      	ldr	r3, [pc, #68]	; (800e7bc <TL_BLE_Init+0x58>)
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	689a      	ldr	r2, [r3, #8]
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	68da      	ldr	r2, [r3, #12]
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e78c:	68bb      	ldr	r3, [r7, #8]
 800e78e:	4a0c      	ldr	r2, [pc, #48]	; (800e7c0 <TL_BLE_Init+0x5c>)
 800e790:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	4a08      	ldr	r2, [pc, #32]	; (800e7b8 <TL_BLE_Init+0x54>)
 800e796:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e798:	f7f3 f908 	bl	80019ac <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	4a08      	ldr	r2, [pc, #32]	; (800e7c4 <TL_BLE_Init+0x60>)
 800e7a2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	685b      	ldr	r3, [r3, #4]
 800e7a8:	4a07      	ldr	r2, [pc, #28]	; (800e7c8 <TL_BLE_Init+0x64>)
 800e7aa:	6013      	str	r3, [r2, #0]

  return 0;
 800e7ac:	2300      	movs	r3, #0
}
 800e7ae:	4618      	mov	r0, r3
 800e7b0:	3710      	adds	r7, #16
 800e7b2:	46bd      	mov	sp, r7
 800e7b4:	bd80      	pop	{r7, pc}
 800e7b6:	bf00      	nop
 800e7b8:	200301d0 	.word	0x200301d0
 800e7bc:	20030000 	.word	0x20030000
 800e7c0:	20030a48 	.word	0x20030a48
 800e7c4:	20000400 	.word	0x20000400
 800e7c8:	20000404 	.word	0x20000404

0800e7cc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e7d8:	4b09      	ldr	r3, [pc, #36]	; (800e800 <TL_BLE_SendCmd+0x34>)
 800e7da:	685b      	ldr	r3, [r3, #4]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	2201      	movs	r2, #1
 800e7e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e7e2:	4b07      	ldr	r3, [pc, #28]	; (800e800 <TL_BLE_SendCmd+0x34>)
 800e7e4:	685b      	ldr	r3, [r3, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	2001      	movs	r0, #1
 800e7ec:	f000 f96c 	bl	800eac8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e7f0:	f7f3 f8e6 	bl	80019c0 <HW_IPCC_BLE_SendCmd>

  return 0;
 800e7f4:	2300      	movs	r3, #0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	20030000 	.word	0x20030000

0800e804 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e804:	b580      	push	{r7, lr}
 800e806:	b082      	sub	sp, #8
 800e808:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e80a:	e01c      	b.n	800e846 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e80c:	1d3b      	adds	r3, r7, #4
 800e80e:	4619      	mov	r1, r3
 800e810:	4812      	ldr	r0, [pc, #72]	; (800e85c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e812:	f000 fc4a 	bl	800f0aa <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	7a5b      	ldrb	r3, [r3, #9]
 800e81a:	2b0f      	cmp	r3, #15
 800e81c:	d003      	beq.n	800e826 <HW_IPCC_BLE_RxEvtNot+0x22>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	7a5b      	ldrb	r3, [r3, #9]
 800e822:	2b0e      	cmp	r3, #14
 800e824:	d105      	bne.n	800e832 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4619      	mov	r1, r3
 800e82a:	2002      	movs	r0, #2
 800e82c:	f000 f94c 	bl	800eac8 <OutputDbgTrace>
 800e830:	e004      	b.n	800e83c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	4619      	mov	r1, r3
 800e836:	2003      	movs	r0, #3
 800e838:	f000 f946 	bl	800eac8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e83c:	4b08      	ldr	r3, [pc, #32]	; (800e860 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	687a      	ldr	r2, [r7, #4]
 800e842:	4610      	mov	r0, r2
 800e844:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e846:	4805      	ldr	r0, [pc, #20]	; (800e85c <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e848:	f000 fba8 	bl	800ef9c <LST_is_empty>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d0dc      	beq.n	800e80c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e852:	bf00      	nop
}
 800e854:	3708      	adds	r7, #8
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
 800e85a:	bf00      	nop
 800e85c:	200301d0 	.word	0x200301d0
 800e860:	20000400 	.word	0x20000400

0800e864 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e868:	4b02      	ldr	r3, [pc, #8]	; (800e874 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4798      	blx	r3

  return;
 800e86e:	bf00      	nop
}
 800e870:	bd80      	pop	{r7, pc}
 800e872:	bf00      	nop
 800e874:	20000404 	.word	0x20000404

0800e878 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e878:	b580      	push	{r7, lr}
 800e87a:	b084      	sub	sp, #16
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e884:	480d      	ldr	r0, [pc, #52]	; (800e8bc <TL_SYS_Init+0x44>)
 800e886:	f000 fb79 	bl	800ef7c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e88a:	4b0d      	ldr	r3, [pc, #52]	; (800e8c0 <TL_SYS_Init+0x48>)
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	689a      	ldr	r2, [r3, #8]
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	4a08      	ldr	r2, [pc, #32]	; (800e8bc <TL_SYS_Init+0x44>)
 800e89c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e89e:	f7f3 f8b1 	bl	8001a04 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	4a07      	ldr	r2, [pc, #28]	; (800e8c4 <TL_SYS_Init+0x4c>)
 800e8a8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e8aa:	68fb      	ldr	r3, [r7, #12]
 800e8ac:	685b      	ldr	r3, [r3, #4]
 800e8ae:	4a06      	ldr	r2, [pc, #24]	; (800e8c8 <TL_SYS_Init+0x50>)
 800e8b0:	6013      	str	r3, [r2, #0]

  return 0;
 800e8b2:	2300      	movs	r3, #0
}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3710      	adds	r7, #16
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	200301d8 	.word	0x200301d8
 800e8c0:	20030000 	.word	0x20030000
 800e8c4:	20000408 	.word	0x20000408
 800e8c8:	2000040c 	.word	0x2000040c

0800e8cc <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b082      	sub	sp, #8
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e8d8:	4b09      	ldr	r3, [pc, #36]	; (800e900 <TL_SYS_SendCmd+0x34>)
 800e8da:	68db      	ldr	r3, [r3, #12]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	2210      	movs	r2, #16
 800e8e0:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e8e2:	4b07      	ldr	r3, [pc, #28]	; (800e900 <TL_SYS_SendCmd+0x34>)
 800e8e4:	68db      	ldr	r3, [r3, #12]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	2004      	movs	r0, #4
 800e8ec:	f000 f8ec 	bl	800eac8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e8f0:	f7f3 f892 	bl	8001a18 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e8f4:	2300      	movs	r3, #0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	20030000 	.word	0x20030000

0800e904 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e908:	4b07      	ldr	r3, [pc, #28]	; (800e928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	4619      	mov	r1, r3
 800e910:	2005      	movs	r0, #5
 800e912:	f000 f8d9 	bl	800eac8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e916:	4b05      	ldr	r3, [pc, #20]	; (800e92c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	4a03      	ldr	r2, [pc, #12]	; (800e928 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e91c:	68d2      	ldr	r2, [r2, #12]
 800e91e:	6812      	ldr	r2, [r2, #0]
 800e920:	4610      	mov	r0, r2
 800e922:	4798      	blx	r3

  return;
 800e924:	bf00      	nop
}
 800e926:	bd80      	pop	{r7, pc}
 800e928:	20030000 	.word	0x20030000
 800e92c:	20000408 	.word	0x20000408

0800e930 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e936:	e00e      	b.n	800e956 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e938:	1d3b      	adds	r3, r7, #4
 800e93a:	4619      	mov	r1, r3
 800e93c:	480b      	ldr	r0, [pc, #44]	; (800e96c <HW_IPCC_SYS_EvtNot+0x3c>)
 800e93e:	f000 fbb4 	bl	800f0aa <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4619      	mov	r1, r3
 800e946:	2006      	movs	r0, #6
 800e948:	f000 f8be 	bl	800eac8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e94c:	4b08      	ldr	r3, [pc, #32]	; (800e970 <HW_IPCC_SYS_EvtNot+0x40>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	687a      	ldr	r2, [r7, #4]
 800e952:	4610      	mov	r0, r2
 800e954:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e956:	4805      	ldr	r0, [pc, #20]	; (800e96c <HW_IPCC_SYS_EvtNot+0x3c>)
 800e958:	f000 fb20 	bl	800ef9c <LST_is_empty>
 800e95c:	4603      	mov	r3, r0
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d0ea      	beq.n	800e938 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e962:	bf00      	nop
}
 800e964:	3708      	adds	r7, #8
 800e966:	46bd      	mov	sp, r7
 800e968:	bd80      	pop	{r7, pc}
 800e96a:	bf00      	nop
 800e96c:	200301d8 	.word	0x200301d8
 800e970:	2000040c 	.word	0x2000040c

0800e974 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b082      	sub	sp, #8
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e97c:	4817      	ldr	r0, [pc, #92]	; (800e9dc <TL_MM_Init+0x68>)
 800e97e:	f000 fafd 	bl	800ef7c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e982:	4817      	ldr	r0, [pc, #92]	; (800e9e0 <TL_MM_Init+0x6c>)
 800e984:	f000 fafa 	bl	800ef7c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e988:	4b16      	ldr	r3, [pc, #88]	; (800e9e4 <TL_MM_Init+0x70>)
 800e98a:	691b      	ldr	r3, [r3, #16]
 800e98c:	4a16      	ldr	r2, [pc, #88]	; (800e9e8 <TL_MM_Init+0x74>)
 800e98e:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e990:	4b15      	ldr	r3, [pc, #84]	; (800e9e8 <TL_MM_Init+0x74>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	6892      	ldr	r2, [r2, #8]
 800e998:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e99a:	4b13      	ldr	r3, [pc, #76]	; (800e9e8 <TL_MM_Init+0x74>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	687a      	ldr	r2, [r7, #4]
 800e9a0:	68d2      	ldr	r2, [r2, #12]
 800e9a2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e9a4:	4b10      	ldr	r3, [pc, #64]	; (800e9e8 <TL_MM_Init+0x74>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a0c      	ldr	r2, [pc, #48]	; (800e9dc <TL_MM_Init+0x68>)
 800e9aa:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e9ac:	4b0e      	ldr	r3, [pc, #56]	; (800e9e8 <TL_MM_Init+0x74>)
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	6812      	ldr	r2, [r2, #0]
 800e9b4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e9b6:	4b0c      	ldr	r3, [pc, #48]	; (800e9e8 <TL_MM_Init+0x74>)
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	687a      	ldr	r2, [r7, #4]
 800e9bc:	6852      	ldr	r2, [r2, #4]
 800e9be:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e9c0:	4b09      	ldr	r3, [pc, #36]	; (800e9e8 <TL_MM_Init+0x74>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	6912      	ldr	r2, [r2, #16]
 800e9c8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e9ca:	4b07      	ldr	r3, [pc, #28]	; (800e9e8 <TL_MM_Init+0x74>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	687a      	ldr	r2, [r7, #4]
 800e9d0:	6952      	ldr	r2, [r2, #20]
 800e9d2:	619a      	str	r2, [r3, #24]

  return;
 800e9d4:	bf00      	nop
}
 800e9d6:	3708      	adds	r7, #8
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	200301c0 	.word	0x200301c0
 800e9e0:	200003f8 	.word	0x200003f8
 800e9e4:	20030000 	.word	0x20030000
 800e9e8:	20000410 	.word	0x20000410

0800e9ec <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e9ec:	b580      	push	{r7, lr}
 800e9ee:	b082      	sub	sp, #8
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e9f4:	6879      	ldr	r1, [r7, #4]
 800e9f6:	4807      	ldr	r0, [pc, #28]	; (800ea14 <TL_MM_EvtDone+0x28>)
 800e9f8:	f000 fb14 	bl	800f024 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e9fc:	6879      	ldr	r1, [r7, #4]
 800e9fe:	2000      	movs	r0, #0
 800ea00:	f000 f862 	bl	800eac8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800ea04:	4804      	ldr	r0, [pc, #16]	; (800ea18 <TL_MM_EvtDone+0x2c>)
 800ea06:	f7f3 f82d 	bl	8001a64 <HW_IPCC_MM_SendFreeBuf>

  return;
 800ea0a:	bf00      	nop
}
 800ea0c:	3708      	adds	r7, #8
 800ea0e:	46bd      	mov	sp, r7
 800ea10:	bd80      	pop	{r7, pc}
 800ea12:	bf00      	nop
 800ea14:	200003f8 	.word	0x200003f8
 800ea18:	0800ea1d 	.word	0x0800ea1d

0800ea1c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b082      	sub	sp, #8
 800ea20:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ea22:	e00c      	b.n	800ea3e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800ea24:	1d3b      	adds	r3, r7, #4
 800ea26:	4619      	mov	r1, r3
 800ea28:	480a      	ldr	r0, [pc, #40]	; (800ea54 <SendFreeBuf+0x38>)
 800ea2a:	f000 fb3e 	bl	800f0aa <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800ea2e:	4b0a      	ldr	r3, [pc, #40]	; (800ea58 <SendFreeBuf+0x3c>)
 800ea30:	691b      	ldr	r3, [r3, #16]
 800ea32:	691b      	ldr	r3, [r3, #16]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	4611      	mov	r1, r2
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f000 faf3 	bl	800f024 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800ea3e:	4805      	ldr	r0, [pc, #20]	; (800ea54 <SendFreeBuf+0x38>)
 800ea40:	f000 faac 	bl	800ef9c <LST_is_empty>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d0ec      	beq.n	800ea24 <SendFreeBuf+0x8>
  }

  return;
 800ea4a:	bf00      	nop
}
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}
 800ea52:	bf00      	nop
 800ea54:	200003f8 	.word	0x200003f8
 800ea58:	20030000 	.word	0x20030000

0800ea5c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800ea60:	4805      	ldr	r0, [pc, #20]	; (800ea78 <TL_TRACES_Init+0x1c>)
 800ea62:	f000 fa8b 	bl	800ef7c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800ea66:	4b05      	ldr	r3, [pc, #20]	; (800ea7c <TL_TRACES_Init+0x20>)
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	4a03      	ldr	r2, [pc, #12]	; (800ea78 <TL_TRACES_Init+0x1c>)
 800ea6c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800ea6e:	f7f3 f82f 	bl	8001ad0 <HW_IPCC_TRACES_Init>

  return;
 800ea72:	bf00      	nop
}
 800ea74:	bd80      	pop	{r7, pc}
 800ea76:	bf00      	nop
 800ea78:	200301c8 	.word	0x200301c8
 800ea7c:	20030000 	.word	0x20030000

0800ea80 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b082      	sub	sp, #8
 800ea84:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ea86:	e008      	b.n	800ea9a <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800ea88:	1d3b      	adds	r3, r7, #4
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	4808      	ldr	r0, [pc, #32]	; (800eab0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ea8e:	f000 fb0c 	bl	800f0aa <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	4618      	mov	r0, r3
 800ea96:	f000 f80d 	bl	800eab4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800ea9a:	4805      	ldr	r0, [pc, #20]	; (800eab0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800ea9c:	f000 fa7e 	bl	800ef9c <LST_is_empty>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d0f0      	beq.n	800ea88 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800eaa6:	bf00      	nop
}
 800eaa8:	3708      	adds	r7, #8
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}
 800eaae:	bf00      	nop
 800eab0:	200301c8 	.word	0x200301c8

0800eab4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b085      	sub	sp, #20
 800eacc:	af00      	add	r7, sp, #0
 800eace:	4603      	mov	r3, r0
 800ead0:	6039      	str	r1, [r7, #0]
 800ead2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800ead4:	79fb      	ldrb	r3, [r7, #7]
 800ead6:	2b06      	cmp	r3, #6
 800ead8:	d849      	bhi.n	800eb6e <OutputDbgTrace+0xa6>
 800eada:	a201      	add	r2, pc, #4	; (adr r2, 800eae0 <OutputDbgTrace+0x18>)
 800eadc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eae0:	0800eafd 	.word	0x0800eafd
 800eae4:	0800eb1f 	.word	0x0800eb1f
 800eae8:	0800eb25 	.word	0x0800eb25
 800eaec:	0800eb3f 	.word	0x0800eb3f
 800eaf0:	0800eb4b 	.word	0x0800eb4b
 800eaf4:	0800eb51 	.word	0x0800eb51
 800eaf8:	0800eb63 	.word	0x0800eb63
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eafc:	683b      	ldr	r3, [r7, #0]
 800eafe:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800eb00:	68fb      	ldr	r3, [r7, #12]
 800eb02:	7a5b      	ldrb	r3, [r3, #9]
 800eb04:	2b0f      	cmp	r3, #15
 800eb06:	d004      	beq.n	800eb12 <OutputDbgTrace+0x4a>
 800eb08:	2bff      	cmp	r3, #255	; 0xff
 800eb0a:	d004      	beq.n	800eb16 <OutputDbgTrace+0x4e>
 800eb0c:	2b0e      	cmp	r3, #14
 800eb0e:	d004      	beq.n	800eb1a <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800eb10:	e004      	b.n	800eb1c <OutputDbgTrace+0x54>
          break;
 800eb12:	bf00      	nop
 800eb14:	e02c      	b.n	800eb70 <OutputDbgTrace+0xa8>
          break;
 800eb16:	bf00      	nop
 800eb18:	e02a      	b.n	800eb70 <OutputDbgTrace+0xa8>
          break;
 800eb1a:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800eb1c:	e028      	b.n	800eb70 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800eb22:	e025      	b.n	800eb70 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eb24:	683b      	ldr	r3, [r7, #0]
 800eb26:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	7a5b      	ldrb	r3, [r3, #9]
 800eb2c:	2b0e      	cmp	r3, #14
 800eb2e:	d002      	beq.n	800eb36 <OutputDbgTrace+0x6e>
 800eb30:	2b0f      	cmp	r3, #15
 800eb32:	d002      	beq.n	800eb3a <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800eb34:	e002      	b.n	800eb3c <OutputDbgTrace+0x74>
          break;
 800eb36:	bf00      	nop
 800eb38:	e01a      	b.n	800eb70 <OutputDbgTrace+0xa8>
          break;
 800eb3a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eb3c:	e018      	b.n	800eb70 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	7a5b      	ldrb	r3, [r3, #9]
 800eb46:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eb48:	e012      	b.n	800eb70 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800eb4e:	e00f      	b.n	800eb70 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eb50:	683b      	ldr	r3, [r7, #0]
 800eb52:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	7a5b      	ldrb	r3, [r3, #9]
 800eb58:	2b0e      	cmp	r3, #14
 800eb5a:	d000      	beq.n	800eb5e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800eb5c:	e000      	b.n	800eb60 <OutputDbgTrace+0x98>
          break;
 800eb5e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eb60:	e006      	b.n	800eb70 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800eb62:	683b      	ldr	r3, [r7, #0]
 800eb64:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	7a5b      	ldrb	r3, [r3, #9]
 800eb6a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800eb6c:	e000      	b.n	800eb70 <OutputDbgTrace+0xa8>

    default:
      break;
 800eb6e:	bf00      	nop
  }

  return;
 800eb70:	bf00      	nop
}
 800eb72:	3714      	adds	r7, #20
 800eb74:	46bd      	mov	sp, r7
 800eb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7a:	4770      	bx	lr

0800eb7c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b08a      	sub	sp, #40	; 0x28
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800eb84:	2300      	movs	r3, #0
 800eb86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800eb90:	6a3b      	ldr	r3, [r7, #32]
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	2bff      	cmp	r3, #255	; 0xff
 800eb96:	d000      	beq.n	800eb9a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 800eb98:	e04a      	b.n	800ec30 <PeerToPeer_Event_Handler+0xb4>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 800eb9a:	6a3b      	ldr	r3, [r7, #32]
 800eb9c:	3302      	adds	r3, #2
 800eb9e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 800eba0:	69fb      	ldr	r3, [r7, #28]
 800eba2:	881b      	ldrh	r3, [r3, #0]
 800eba4:	b29b      	uxth	r3, r3
 800eba6:	461a      	mov	r2, r3
 800eba8:	f640 4301 	movw	r3, #3073	; 0xc01
 800ebac:	429a      	cmp	r2, r3
 800ebae:	d000      	beq.n	800ebb2 <PeerToPeer_Event_Handler+0x36>
          break;
 800ebb0:	e03d      	b.n	800ec2e <PeerToPeer_Event_Handler+0xb2>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 800ebb2:	69fb      	ldr	r3, [r7, #28]
 800ebb4:	3302      	adds	r3, #2
 800ebb6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	885b      	ldrh	r3, [r3, #2]
 800ebbc:	b29b      	uxth	r3, r3
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	4b1e      	ldr	r3, [pc, #120]	; (800ec3c <PeerToPeer_Event_Handler+0xc0>)
 800ebc2:	889b      	ldrh	r3, [r3, #4]
 800ebc4:	3302      	adds	r3, #2
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	d118      	bne.n	800ebfc <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800ebd0:	69bb      	ldr	r3, [r7, #24]
 800ebd2:	7a1b      	ldrb	r3, [r3, #8]
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d007      	beq.n	800ebec <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ebe0:	f107 0308 	add.w	r3, r7, #8
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	f7f2 fcc3 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800ebea:	e01f      	b.n	800ec2c <PeerToPeer_Event_Handler+0xb0>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800ebec:	2301      	movs	r3, #1
 800ebee:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800ebf0:	f107 0308 	add.w	r3, r7, #8
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f2 fcbb 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800ebfa:	e017      	b.n	800ec2c <PeerToPeer_Event_Handler+0xb0>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800ebfc:	69bb      	ldr	r3, [r7, #24]
 800ebfe:	885b      	ldrh	r3, [r3, #2]
 800ec00:	b29b      	uxth	r3, r3
 800ec02:	461a      	mov	r2, r3
 800ec04:	4b0d      	ldr	r3, [pc, #52]	; (800ec3c <PeerToPeer_Event_Handler+0xc0>)
 800ec06:	885b      	ldrh	r3, [r3, #2]
 800ec08:	3301      	adds	r3, #1
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d10e      	bne.n	800ec2c <PeerToPeer_Event_Handler+0xb0>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800ec0e:	2303      	movs	r3, #3
 800ec10:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800ec12:	69bb      	ldr	r3, [r7, #24]
 800ec14:	88db      	ldrh	r3, [r3, #6]
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800ec1c:	69bb      	ldr	r3, [r7, #24]
 800ec1e:	3308      	adds	r3, #8
 800ec20:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);
 800ec22:	f107 0308 	add.w	r3, r7, #8
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7f2 fca2 	bl	8001570 <P2PS_STM_App_Notification>
        break;
 800ec2c:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 800ec2e:	bf00      	nop
  }

  return(return_value);
 800ec30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800ec34:	4618      	mov	r0, r3
 800ec36:	3728      	adds	r7, #40	; 0x28
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	bd80      	pop	{r7, pc}
 800ec3c:	20000354 	.word	0x20000354

0800ec40 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08a      	sub	sp, #40	; 0x28
 800ec44:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800ec46:	484a      	ldr	r0, [pc, #296]	; (800ed70 <P2PS_STM_Init+0x130>)
 800ec48:	f7fe fa30 	bl	800d0ac <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800ec4c:	238f      	movs	r3, #143	; 0x8f
 800ec4e:	703b      	strb	r3, [r7, #0]
 800ec50:	23e5      	movs	r3, #229	; 0xe5
 800ec52:	707b      	strb	r3, [r7, #1]
 800ec54:	23b3      	movs	r3, #179	; 0xb3
 800ec56:	70bb      	strb	r3, [r7, #2]
 800ec58:	23d5      	movs	r3, #213	; 0xd5
 800ec5a:	70fb      	strb	r3, [r7, #3]
 800ec5c:	232e      	movs	r3, #46	; 0x2e
 800ec5e:	713b      	strb	r3, [r7, #4]
 800ec60:	237f      	movs	r3, #127	; 0x7f
 800ec62:	717b      	strb	r3, [r7, #5]
 800ec64:	234a      	movs	r3, #74	; 0x4a
 800ec66:	71bb      	strb	r3, [r7, #6]
 800ec68:	2398      	movs	r3, #152	; 0x98
 800ec6a:	71fb      	strb	r3, [r7, #7]
 800ec6c:	232a      	movs	r3, #42	; 0x2a
 800ec6e:	723b      	strb	r3, [r7, #8]
 800ec70:	2348      	movs	r3, #72	; 0x48
 800ec72:	727b      	strb	r3, [r7, #9]
 800ec74:	237a      	movs	r3, #122	; 0x7a
 800ec76:	72bb      	strb	r3, [r7, #10]
 800ec78:	23cc      	movs	r3, #204	; 0xcc
 800ec7a:	72fb      	strb	r3, [r7, #11]
 800ec7c:	2340      	movs	r3, #64	; 0x40
 800ec7e:	733b      	strb	r3, [r7, #12]
 800ec80:	23fe      	movs	r3, #254	; 0xfe
 800ec82:	737b      	strb	r3, [r7, #13]
 800ec84:	2300      	movs	r3, #0
 800ec86:	73bb      	strb	r3, [r7, #14]
 800ec88:	2300      	movs	r3, #0
 800ec8a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	4b39      	ldr	r3, [pc, #228]	; (800ed74 <P2PS_STM_Init+0x134>)
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	2308      	movs	r3, #8
 800ec94:	2201      	movs	r2, #1
 800ec96:	2002      	movs	r0, #2
 800ec98:	f7fe fe39 	bl	800d90e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800ec9c:	2319      	movs	r3, #25
 800ec9e:	703b      	strb	r3, [r7, #0]
 800eca0:	23ed      	movs	r3, #237	; 0xed
 800eca2:	707b      	strb	r3, [r7, #1]
 800eca4:	2382      	movs	r3, #130	; 0x82
 800eca6:	70bb      	strb	r3, [r7, #2]
 800eca8:	23ae      	movs	r3, #174	; 0xae
 800ecaa:	70fb      	strb	r3, [r7, #3]
 800ecac:	23ed      	movs	r3, #237	; 0xed
 800ecae:	713b      	strb	r3, [r7, #4]
 800ecb0:	2321      	movs	r3, #33	; 0x21
 800ecb2:	717b      	strb	r3, [r7, #5]
 800ecb4:	234c      	movs	r3, #76	; 0x4c
 800ecb6:	71bb      	strb	r3, [r7, #6]
 800ecb8:	239d      	movs	r3, #157	; 0x9d
 800ecba:	71fb      	strb	r3, [r7, #7]
 800ecbc:	2341      	movs	r3, #65	; 0x41
 800ecbe:	723b      	strb	r3, [r7, #8]
 800ecc0:	2345      	movs	r3, #69	; 0x45
 800ecc2:	727b      	strb	r3, [r7, #9]
 800ecc4:	2322      	movs	r3, #34	; 0x22
 800ecc6:	72bb      	strb	r3, [r7, #10]
 800ecc8:	238e      	movs	r3, #142	; 0x8e
 800ecca:	72fb      	strb	r3, [r7, #11]
 800eccc:	2341      	movs	r3, #65	; 0x41
 800ecce:	733b      	strb	r3, [r7, #12]
 800ecd0:	23fe      	movs	r3, #254	; 0xfe
 800ecd2:	737b      	strb	r3, [r7, #13]
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	73bb      	strb	r3, [r7, #14]
 800ecd8:	2300      	movs	r3, #0
 800ecda:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ecdc:	4b25      	ldr	r3, [pc, #148]	; (800ed74 <P2PS_STM_Init+0x134>)
 800ecde:	8818      	ldrh	r0, [r3, #0]
 800ece0:	463a      	mov	r2, r7
 800ece2:	4b25      	ldr	r3, [pc, #148]	; (800ed78 <P2PS_STM_Init+0x138>)
 800ece4:	9305      	str	r3, [sp, #20]
 800ece6:	2301      	movs	r3, #1
 800ece8:	9304      	str	r3, [sp, #16]
 800ecea:	230a      	movs	r3, #10
 800ecec:	9303      	str	r3, [sp, #12]
 800ecee:	2301      	movs	r3, #1
 800ecf0:	9302      	str	r3, [sp, #8]
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	9301      	str	r3, [sp, #4]
 800ecf6:	2306      	movs	r3, #6
 800ecf8:	9300      	str	r3, [sp, #0]
 800ecfa:	2314      	movs	r3, #20
 800ecfc:	2102      	movs	r1, #2
 800ecfe:	f7fe feb5 	bl	800da6c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800ed02:	2319      	movs	r3, #25
 800ed04:	703b      	strb	r3, [r7, #0]
 800ed06:	23ed      	movs	r3, #237	; 0xed
 800ed08:	707b      	strb	r3, [r7, #1]
 800ed0a:	2382      	movs	r3, #130	; 0x82
 800ed0c:	70bb      	strb	r3, [r7, #2]
 800ed0e:	23ae      	movs	r3, #174	; 0xae
 800ed10:	70fb      	strb	r3, [r7, #3]
 800ed12:	23ed      	movs	r3, #237	; 0xed
 800ed14:	713b      	strb	r3, [r7, #4]
 800ed16:	2321      	movs	r3, #33	; 0x21
 800ed18:	717b      	strb	r3, [r7, #5]
 800ed1a:	234c      	movs	r3, #76	; 0x4c
 800ed1c:	71bb      	strb	r3, [r7, #6]
 800ed1e:	239d      	movs	r3, #157	; 0x9d
 800ed20:	71fb      	strb	r3, [r7, #7]
 800ed22:	2341      	movs	r3, #65	; 0x41
 800ed24:	723b      	strb	r3, [r7, #8]
 800ed26:	2345      	movs	r3, #69	; 0x45
 800ed28:	727b      	strb	r3, [r7, #9]
 800ed2a:	2322      	movs	r3, #34	; 0x22
 800ed2c:	72bb      	strb	r3, [r7, #10]
 800ed2e:	238e      	movs	r3, #142	; 0x8e
 800ed30:	72fb      	strb	r3, [r7, #11]
 800ed32:	2342      	movs	r3, #66	; 0x42
 800ed34:	733b      	strb	r3, [r7, #12]
 800ed36:	23fe      	movs	r3, #254	; 0xfe
 800ed38:	737b      	strb	r3, [r7, #13]
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	73bb      	strb	r3, [r7, #14]
 800ed3e:	2300      	movs	r3, #0
 800ed40:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800ed42:	4b0c      	ldr	r3, [pc, #48]	; (800ed74 <P2PS_STM_Init+0x134>)
 800ed44:	8818      	ldrh	r0, [r3, #0]
 800ed46:	463a      	mov	r2, r7
 800ed48:	4b0c      	ldr	r3, [pc, #48]	; (800ed7c <P2PS_STM_Init+0x13c>)
 800ed4a:	9305      	str	r3, [sp, #20]
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	9304      	str	r3, [sp, #16]
 800ed50:	230a      	movs	r3, #10
 800ed52:	9303      	str	r3, [sp, #12]
 800ed54:	2301      	movs	r3, #1
 800ed56:	9302      	str	r3, [sp, #8]
 800ed58:	2300      	movs	r3, #0
 800ed5a:	9301      	str	r3, [sp, #4]
 800ed5c:	2310      	movs	r3, #16
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	2314      	movs	r3, #20
 800ed62:	2102      	movs	r1, #2
 800ed64:	f7fe fe82 	bl	800da6c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif


  return;
 800ed68:	bf00      	nop
}
 800ed6a:	3710      	adds	r7, #16
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	0800eb7d 	.word	0x0800eb7d
 800ed74:	20000354 	.word	0x20000354
 800ed78:	20000356 	.word	0x20000356
 800ed7c:	20000358 	.word	0x20000358

0800ed80 <P2PS_STM_App_Update_Int8>:

  return result;
}

tBleStatus P2PS_STM_App_Update_Int8(uint16_t UUID, uint8_t *pPayload, uint8_t num_bytes)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b086      	sub	sp, #24
 800ed84:	af02      	add	r7, sp, #8
 800ed86:	4603      	mov	r3, r0
 800ed88:	6039      	str	r1, [r7, #0]
 800ed8a:	80fb      	strh	r3, [r7, #6]
 800ed8c:	4613      	mov	r3, r2
 800ed8e:	717b      	strb	r3, [r7, #5]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800ed90:	2342      	movs	r3, #66	; 0x42
 800ed92:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800ed94:	88fb      	ldrh	r3, [r7, #6]
 800ed96:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800ed9a:	4293      	cmp	r3, r2
 800ed9c:	d000      	beq.n	800eda0 <P2PS_STM_App_Update_Int8+0x20>
                             (uint8_t *)  pPayload);

      break;

    default:
      break;
 800ed9e:	e00d      	b.n	800edbc <P2PS_STM_App_Update_Int8+0x3c>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800eda0:	4b09      	ldr	r3, [pc, #36]	; (800edc8 <P2PS_STM_App_Update_Int8+0x48>)
 800eda2:	8818      	ldrh	r0, [r3, #0]
 800eda4:	4b08      	ldr	r3, [pc, #32]	; (800edc8 <P2PS_STM_App_Update_Int8+0x48>)
 800eda6:	8899      	ldrh	r1, [r3, #4]
 800eda8:	797a      	ldrb	r2, [r7, #5]
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	9300      	str	r3, [sp, #0]
 800edae:	4613      	mov	r3, r2
 800edb0:	2200      	movs	r2, #0
 800edb2:	f7fe ff45 	bl	800dc40 <aci_gatt_update_char_value>
 800edb6:	4603      	mov	r3, r0
 800edb8:	73fb      	strb	r3, [r7, #15]
      break;
 800edba:	bf00      	nop
  }

  return result;
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800edbe:	4618      	mov	r0, r3
 800edc0:	3710      	adds	r7, #16
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	20000354 	.word	0x20000354

0800edcc <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b086      	sub	sp, #24
 800edd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edd2:	f3ef 8310 	mrs	r3, PRIMASK
 800edd6:	60fb      	str	r3, [r7, #12]
  return(result);
 800edd8:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800edda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eddc:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800edde:	1cbb      	adds	r3, r7, #2
 800ede0:	4619      	mov	r1, r3
 800ede2:	4812      	ldr	r0, [pc, #72]	; (800ee2c <DbgTrace_TxCpltCallback+0x60>)
 800ede4:	f000 fbd7 	bl	800f596 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800ede8:	1cbb      	adds	r3, r7, #2
 800edea:	4619      	mov	r1, r3
 800edec:	480f      	ldr	r0, [pc, #60]	; (800ee2c <DbgTrace_TxCpltCallback+0x60>)
 800edee:	f000 fcc6 	bl	800f77e <CircularQueue_Sense>
 800edf2:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800edf4:	693b      	ldr	r3, [r7, #16]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d00b      	beq.n	800ee12 <DbgTrace_TxCpltCallback+0x46>
 800edfa:	697b      	ldr	r3, [r7, #20]
 800edfc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edfe:	68bb      	ldr	r3, [r7, #8]
 800ee00:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800ee04:	887b      	ldrh	r3, [r7, #2]
 800ee06:	4a0a      	ldr	r2, [pc, #40]	; (800ee30 <DbgTrace_TxCpltCallback+0x64>)
 800ee08:	4619      	mov	r1, r3
 800ee0a:	6938      	ldr	r0, [r7, #16]
 800ee0c:	f7f2 ffd4 	bl	8001db8 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800ee10:	e007      	b.n	800ee22 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 800ee12:	4b08      	ldr	r3, [pc, #32]	; (800ee34 <DbgTrace_TxCpltCallback+0x68>)
 800ee14:	2201      	movs	r2, #1
 800ee16:	701a      	strb	r2, [r3, #0]
 800ee18:	697b      	ldr	r3, [r7, #20]
 800ee1a:	607b      	str	r3, [r7, #4]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f383 8810 	msr	PRIMASK, r3
}
 800ee22:	bf00      	nop
 800ee24:	3718      	adds	r7, #24
 800ee26:	46bd      	mov	sp, r7
 800ee28:	bd80      	pop	{r7, pc}
 800ee2a:	bf00      	nop
 800ee2c:	20000414 	.word	0x20000414
 800ee30:	0800edcd 	.word	0x0800edcd
 800ee34:	2000001d 	.word	0x2000001d

0800ee38 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b082      	sub	sp, #8
 800ee3c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800ee3e:	f7f2 ffb4 	bl	8001daa <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800ee42:	2302      	movs	r3, #2
 800ee44:	9300      	str	r3, [sp, #0]
 800ee46:	2300      	movs	r3, #0
 800ee48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ee4c:	4903      	ldr	r1, [pc, #12]	; (800ee5c <DbgTraceInit+0x24>)
 800ee4e:	4804      	ldr	r0, [pc, #16]	; (800ee60 <DbgTraceInit+0x28>)
 800ee50:	f000 f948 	bl	800f0e4 <CircularQueue_Init>
#endif 
#endif
  return;
 800ee54:	bf00      	nop
}
 800ee56:	46bd      	mov	sp, r7
 800ee58:	bd80      	pop	{r7, pc}
 800ee5a:	bf00      	nop
 800ee5c:	20000434 	.word	0x20000434
 800ee60:	20000414 	.word	0x20000414

0800ee64 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b084      	sub	sp, #16
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	60f8      	str	r0, [r7, #12]
 800ee6c:	60b9      	str	r1, [r7, #8]
 800ee6e:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	68b9      	ldr	r1, [r7, #8]
 800ee74:	68f8      	ldr	r0, [r7, #12]
 800ee76:	f000 f805 	bl	800ee84 <DbgTraceWrite>
 800ee7a:	4603      	mov	r3, r0
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b08a      	sub	sp, #40	; 0x28
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ee90:	2300      	movs	r3, #0
 800ee92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee94:	f3ef 8310 	mrs	r3, PRIMASK
 800ee98:	61bb      	str	r3, [r7, #24]
  return(result);
 800ee9a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ee9c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eea4:	d102      	bne.n	800eeac <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800eea6:	2300      	movs	r3, #0
 800eea8:	627b      	str	r3, [r7, #36]	; 0x24
 800eeaa:	e034      	b.n	800ef16 <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	2b01      	cmp	r3, #1
 800eeb0:	d006      	beq.n	800eec0 <DbgTraceWrite+0x3c>
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	2b02      	cmp	r3, #2
 800eeb6:	d003      	beq.n	800eec0 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800eeb8:	f04f 33ff 	mov.w	r3, #4294967295
 800eebc:	627b      	str	r3, [r7, #36]	; 0x24
 800eebe:	e02a      	b.n	800ef16 <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d027      	beq.n	800ef16 <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800eeca:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	b29a      	uxth	r2, r3
 800eed0:	2301      	movs	r3, #1
 800eed2:	68b9      	ldr	r1, [r7, #8]
 800eed4:	4812      	ldr	r0, [pc, #72]	; (800ef20 <DbgTraceWrite+0x9c>)
 800eed6:	f000 f937 	bl	800f148 <CircularQueue_Add>
 800eeda:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800eedc:	69fb      	ldr	r3, [r7, #28]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d014      	beq.n	800ef0c <DbgTraceWrite+0x88>
 800eee2:	4b10      	ldr	r3, [pc, #64]	; (800ef24 <DbgTraceWrite+0xa0>)
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	b2db      	uxtb	r3, r3
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d00f      	beq.n	800ef0c <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 800eeec:	4b0d      	ldr	r3, [pc, #52]	; (800ef24 <DbgTraceWrite+0xa0>)
 800eeee:	2200      	movs	r2, #0
 800eef0:	701a      	strb	r2, [r3, #0]
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	4a09      	ldr	r2, [pc, #36]	; (800ef28 <DbgTraceWrite+0xa4>)
 800ef02:	4619      	mov	r1, r3
 800ef04:	69f8      	ldr	r0, [r7, #28]
 800ef06:	f7f2 ff57 	bl	8001db8 <DbgOutputTraces>
 800ef0a:	e004      	b.n	800ef16 <DbgTraceWrite+0x92>
 800ef0c:	6a3b      	ldr	r3, [r7, #32]
 800ef0e:	613b      	str	r3, [r7, #16]
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ef18:	4618      	mov	r0, r3
 800ef1a:	3728      	adds	r7, #40	; 0x28
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}
 800ef20:	20000414 	.word	0x20000414
 800ef24:	2000001d 	.word	0x2000001d
 800ef28:	0800edcd 	.word	0x0800edcd

0800ef2c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b085      	sub	sp, #20
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	4603      	mov	r3, r0
 800ef34:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800ef36:	4b0f      	ldr	r3, [pc, #60]	; (800ef74 <OTP_Read+0x48>)
 800ef38:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ef3a:	e002      	b.n	800ef42 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	3b08      	subs	r3, #8
 800ef40:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3307      	adds	r3, #7
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	79fa      	ldrb	r2, [r7, #7]
 800ef4a:	429a      	cmp	r2, r3
 800ef4c:	d003      	beq.n	800ef56 <OTP_Read+0x2a>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	4a09      	ldr	r2, [pc, #36]	; (800ef78 <OTP_Read+0x4c>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d1f2      	bne.n	800ef3c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	3307      	adds	r3, #7
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	79fa      	ldrb	r2, [r7, #7]
 800ef5e:	429a      	cmp	r2, r3
 800ef60:	d001      	beq.n	800ef66 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800ef62:	2300      	movs	r3, #0
 800ef64:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800ef66:	68fb      	ldr	r3, [r7, #12]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr
 800ef74:	1fff73f8 	.word	0x1fff73f8
 800ef78:	1fff7000 	.word	0x1fff7000

0800ef7c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b083      	sub	sp, #12
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	687a      	ldr	r2, [r7, #4]
 800ef88:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	687a      	ldr	r2, [r7, #4]
 800ef8e:	605a      	str	r2, [r3, #4]
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b087      	sub	sp, #28
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efa4:	f3ef 8310 	mrs	r3, PRIMASK
 800efa8:	60fb      	str	r3, [r7, #12]
  return(result);
 800efaa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800efac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800efae:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d102      	bne.n	800efc0 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 800efba:	2301      	movs	r3, #1
 800efbc:	75fb      	strb	r3, [r7, #23]
 800efbe:	e001      	b.n	800efc4 <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 800efc0:	2300      	movs	r3, #0
 800efc2:	75fb      	strb	r3, [r7, #23]
 800efc4:	693b      	ldr	r3, [r7, #16]
 800efc6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800efce:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd0:	4618      	mov	r0, r3
 800efd2:	371c      	adds	r7, #28
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800efdc:	b480      	push	{r7}
 800efde:	b087      	sub	sp, #28
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efe6:	f3ef 8310 	mrs	r3, PRIMASK
 800efea:	60fb      	str	r3, [r7, #12]
  return(result);
 800efec:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800efee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eff0:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	681a      	ldr	r2, [r3, #0]
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	687a      	ldr	r2, [r7, #4]
 800effe:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	683a      	ldr	r2, [r7, #0]
 800f004:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	683a      	ldr	r2, [r7, #0]
 800f00c:	605a      	str	r2, [r3, #4]
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f018:	bf00      	nop
 800f01a:	371c      	adds	r7, #28
 800f01c:	46bd      	mov	sp, r7
 800f01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f022:	4770      	bx	lr

0800f024 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800f024:	b480      	push	{r7}
 800f026:	b087      	sub	sp, #28
 800f028:	af00      	add	r7, sp, #0
 800f02a:	6078      	str	r0, [r7, #4]
 800f02c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f02e:	f3ef 8310 	mrs	r3, PRIMASK
 800f032:	60fb      	str	r3, [r7, #12]
  return(result);
 800f034:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f036:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f038:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800f03a:	683b      	ldr	r3, [r7, #0]
 800f03c:	687a      	ldr	r2, [r7, #4]
 800f03e:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	685a      	ldr	r2, [r3, #4]
 800f044:	683b      	ldr	r3, [r7, #0]
 800f046:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	683a      	ldr	r2, [r7, #0]
 800f04c:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	683a      	ldr	r2, [r7, #0]
 800f054:	601a      	str	r2, [r3, #0]
 800f056:	697b      	ldr	r3, [r7, #20]
 800f058:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f05a:	693b      	ldr	r3, [r7, #16]
 800f05c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f060:	bf00      	nop
 800f062:	371c      	adds	r7, #28
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b087      	sub	sp, #28
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f074:	f3ef 8310 	mrs	r3, PRIMASK
 800f078:	60fb      	str	r3, [r7, #12]
  return(result);
 800f07a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f07c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f07e:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	687a      	ldr	r2, [r7, #4]
 800f086:	6812      	ldr	r2, [r2, #0]
 800f088:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	6852      	ldr	r2, [r2, #4]
 800f092:	605a      	str	r2, [r3, #4]
 800f094:	697b      	ldr	r3, [r7, #20]
 800f096:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f09e:	bf00      	nop
 800f0a0:	371c      	adds	r7, #28
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a8:	4770      	bx	lr

0800f0aa <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800f0aa:	b580      	push	{r7, lr}
 800f0ac:	b086      	sub	sp, #24
 800f0ae:	af00      	add	r7, sp, #0
 800f0b0:	6078      	str	r0, [r7, #4]
 800f0b2:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0b4:	f3ef 8310 	mrs	r3, PRIMASK
 800f0b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800f0bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800f0be:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f7ff ffcd 	bl	800f06c <LST_remove_node>
 800f0d2:	697b      	ldr	r3, [r7, #20]
 800f0d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800f0dc:	bf00      	nop
 800f0de:	3718      	adds	r7, #24
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800f0e4:	b480      	push	{r7}
 800f0e6:	b085      	sub	sp, #20
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	60f8      	str	r0, [r7, #12]
 800f0ec:	60b9      	str	r1, [r7, #8]
 800f0ee:	607a      	str	r2, [r7, #4]
 800f0f0:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	68ba      	ldr	r2, [r7, #8]
 800f0f6:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2200      	movs	r2, #0
 800f102:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	2200      	movs	r2, #0
 800f108:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	687a      	ldr	r2, [r7, #4]
 800f114:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	887a      	ldrh	r2, [r7, #2]
 800f11a:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	7e3a      	ldrb	r2, [r7, #24]
 800f120:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800f122:	7e3b      	ldrb	r3, [r7, #24]
 800f124:	f003 0302 	and.w	r3, r3, #2
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d006      	beq.n	800f13a <CircularQueue_Init+0x56>
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	891b      	ldrh	r3, [r3, #8]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d002      	beq.n	800f13a <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800f134:	f04f 33ff 	mov.w	r3, #4294967295
 800f138:	e000      	b.n	800f13c <CircularQueue_Init+0x58>
  }
  return 0;
 800f13a:	2300      	movs	r3, #0
}
 800f13c:	4618      	mov	r0, r3
 800f13e:	3714      	adds	r7, #20
 800f140:	46bd      	mov	sp, r7
 800f142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f146:	4770      	bx	lr

0800f148 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08e      	sub	sp, #56	; 0x38
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	603b      	str	r3, [r7, #0]
 800f154:	4613      	mov	r3, r2
 800f156:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800f158:	2300      	movs	r3, #0
 800f15a:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800f15c:	2300      	movs	r3, #0
 800f15e:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 800f160:	2300      	movs	r3, #0
 800f162:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800f164:	2300      	movs	r3, #0
 800f166:	62bb      	str	r3, [r7, #40]	; 0x28
 800f168:	2300      	movs	r3, #0
 800f16a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800f16c:	2300      	movs	r3, #0
 800f16e:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800f170:	2300      	movs	r3, #0
 800f172:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	891b      	ldrh	r3, [r3, #8]
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d101      	bne.n	800f180 <CircularQueue_Add+0x38>
 800f17c:	2302      	movs	r3, #2
 800f17e:	e000      	b.n	800f182 <CircularQueue_Add+0x3a>
 800f180:	2300      	movs	r3, #0
 800f182:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	695b      	ldr	r3, [r3, #20]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d02a      	beq.n	800f1e2 <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	891b      	ldrh	r3, [r3, #8]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d123      	bne.n	800f1dc <CircularQueue_Add+0x94>
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	681a      	ldr	r2, [r3, #0]
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	691b      	ldr	r3, [r3, #16]
 800f19c:	4413      	add	r3, r2
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	b29a      	uxth	r2, r3
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	6819      	ldr	r1, [r3, #0]
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	691b      	ldr	r3, [r3, #16]
 800f1aa:	1c58      	adds	r0, r3, #1
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	4298      	cmp	r0, r3
 800f1b2:	d306      	bcc.n	800f1c2 <CircularQueue_Add+0x7a>
 800f1b4:	68fb      	ldr	r3, [r7, #12]
 800f1b6:	6918      	ldr	r0, [r3, #16]
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	685b      	ldr	r3, [r3, #4]
 800f1bc:	1ac3      	subs	r3, r0, r3
 800f1be:	3301      	adds	r3, #1
 800f1c0:	e002      	b.n	800f1c8 <CircularQueue_Add+0x80>
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	691b      	ldr	r3, [r3, #16]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	440b      	add	r3, r1
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	b29b      	uxth	r3, r3
 800f1ce:	021b      	lsls	r3, r3, #8
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	4413      	add	r3, r2
 800f1d4:	b29b      	uxth	r3, r3
 800f1d6:	3302      	adds	r3, #2
 800f1d8:	b29b      	uxth	r3, r3
 800f1da:	e001      	b.n	800f1e0 <CircularQueue_Add+0x98>
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	891b      	ldrh	r3, [r3, #8]
 800f1e0:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	891b      	ldrh	r3, [r3, #8]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	891b      	ldrh	r3, [r3, #8]
 800f1ee:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	691a      	ldr	r2, [r3, #16]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	68db      	ldr	r3, [r3, #12]
 800f1f8:	429a      	cmp	r2, r3
 800f1fa:	d307      	bcc.n	800f20c <CircularQueue_Add+0xc4>
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	685a      	ldr	r2, [r3, #4]
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	6919      	ldr	r1, [r3, #16]
 800f204:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f206:	440b      	add	r3, r1
 800f208:	1ad3      	subs	r3, r2, r3
 800f20a:	e000      	b.n	800f20e <CircularQueue_Add+0xc6>
 800f20c:	2300      	movs	r3, #0
 800f20e:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800f210:	88fa      	ldrh	r2, [r7, #6]
 800f212:	7ffb      	ldrb	r3, [r7, #31]
 800f214:	4413      	add	r3, r2
 800f216:	461a      	mov	r2, r3
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	fb03 f302 	mul.w	r3, r3, r2
 800f21e:	69ba      	ldr	r2, [r7, #24]
 800f220:	429a      	cmp	r2, r3
 800f222:	d80b      	bhi.n	800f23c <CircularQueue_Add+0xf4>
 800f224:	88fa      	ldrh	r2, [r7, #6]
 800f226:	7ffb      	ldrb	r3, [r7, #31]
 800f228:	4413      	add	r3, r2
 800f22a:	461a      	mov	r2, r3
 800f22c:	69bb      	ldr	r3, [r7, #24]
 800f22e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f232:	fb02 f201 	mul.w	r2, r2, r1
 800f236:	1a9b      	subs	r3, r3, r2
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	e000      	b.n	800f23e <CircularQueue_Add+0xf6>
 800f23c:	2300      	movs	r3, #0
 800f23e:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800f240:	7dfa      	ldrb	r2, [r7, #23]
 800f242:	7ffb      	ldrb	r3, [r7, #31]
 800f244:	429a      	cmp	r2, r3
 800f246:	bf8c      	ite	hi
 800f248:	2301      	movhi	r3, #1
 800f24a:	2300      	movls	r3, #0
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800f250:	7fbb      	ldrb	r3, [r7, #30]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d008      	beq.n	800f268 <CircularQueue_Add+0x120>
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	7f1b      	ldrb	r3, [r3, #28]
 800f25a:	f003 0301 	and.w	r3, r3, #1
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d002      	beq.n	800f268 <CircularQueue_Add+0x120>
 800f262:	7dfb      	ldrb	r3, [r7, #23]
 800f264:	b29b      	uxth	r3, r3
 800f266:	e000      	b.n	800f26a <CircularQueue_Add+0x122>
 800f268:	8bbb      	ldrh	r3, [r7, #28]
 800f26a:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800f26c:	7fbb      	ldrb	r3, [r7, #30]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d008      	beq.n	800f284 <CircularQueue_Add+0x13c>
 800f272:	68fb      	ldr	r3, [r7, #12]
 800f274:	7f1b      	ldrb	r3, [r3, #28]
 800f276:	f003 0302 	and.w	r3, r3, #2
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d002      	beq.n	800f284 <CircularQueue_Add+0x13c>
 800f27e:	7ffb      	ldrb	r3, [r7, #31]
 800f280:	b29b      	uxth	r3, r3
 800f282:	e000      	b.n	800f286 <CircularQueue_Add+0x13e>
 800f284:	8bbb      	ldrh	r3, [r7, #28]
 800f286:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800f288:	88fb      	ldrh	r3, [r7, #6]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	f000 817e 	beq.w	800f58c <CircularQueue_Add+0x444>
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	695a      	ldr	r2, [r3, #20]
 800f294:	88f9      	ldrh	r1, [r7, #6]
 800f296:	7ffb      	ldrb	r3, [r7, #31]
 800f298:	440b      	add	r3, r1
 800f29a:	4619      	mov	r1, r3
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	fb03 f301 	mul.w	r3, r3, r1
 800f2a2:	441a      	add	r2, r3
 800f2a4:	8bbb      	ldrh	r3, [r7, #28]
 800f2a6:	441a      	add	r2, r3
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	685b      	ldr	r3, [r3, #4]
 800f2ac:	429a      	cmp	r2, r3
 800f2ae:	f200 816d 	bhi.w	800f58c <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2b6:	e14a      	b.n	800f54e <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	691a      	ldr	r2, [r3, #16]
 800f2bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2be:	441a      	add	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d307      	bcc.n	800f2d8 <CircularQueue_Add+0x190>
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	691a      	ldr	r2, [r3, #16]
 800f2cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2ce:	441a      	add	r2, r3
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	685b      	ldr	r3, [r3, #4]
 800f2d4:	1ad3      	subs	r3, r2, r3
 800f2d6:	e003      	b.n	800f2e0 <CircularQueue_Add+0x198>
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	691a      	ldr	r2, [r3, #16]
 800f2dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f2de:	4413      	add	r3, r2
 800f2e0:	68fa      	ldr	r2, [r7, #12]
 800f2e2:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	691b      	ldr	r3, [r3, #16]
 800f2e8:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	891b      	ldrh	r3, [r3, #8]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d130      	bne.n	800f354 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681a      	ldr	r2, [r3, #0]
 800f2f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2f8:	1c59      	adds	r1, r3, #1
 800f2fa:	6339      	str	r1, [r7, #48]	; 0x30
 800f2fc:	4413      	add	r3, r2
 800f2fe:	88fa      	ldrh	r2, [r7, #6]
 800f300:	b2d2      	uxtb	r2, r2
 800f302:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d304      	bcc.n	800f318 <CircularQueue_Add+0x1d0>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	e000      	b.n	800f31a <CircularQueue_Add+0x1d2>
 800f318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f31a:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800f31c:	88fb      	ldrh	r3, [r7, #6]
 800f31e:	0a1b      	lsrs	r3, r3, #8
 800f320:	b298      	uxth	r0, r3
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681a      	ldr	r2, [r3, #0]
 800f326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f328:	1c59      	adds	r1, r3, #1
 800f32a:	6339      	str	r1, [r7, #48]	; 0x30
 800f32c:	4413      	add	r3, r2
 800f32e:	b2c2      	uxtb	r2, r0
 800f330:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f338:	429a      	cmp	r2, r3
 800f33a:	d304      	bcc.n	800f346 <CircularQueue_Add+0x1fe>
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f342:	1ad3      	subs	r3, r2, r3
 800f344:	e000      	b.n	800f348 <CircularQueue_Add+0x200>
 800f346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f348:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	695b      	ldr	r3, [r3, #20]
 800f34e:	1c9a      	adds	r2, r3, #2
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800f354:	88fa      	ldrh	r2, [r7, #6]
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	6859      	ldr	r1, [r3, #4]
 800f35a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35c:	1acb      	subs	r3, r1, r3
 800f35e:	4293      	cmp	r3, r2
 800f360:	bf28      	it	cs
 800f362:	4613      	movcs	r3, r2
 800f364:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800f366:	88fb      	ldrh	r3, [r7, #6]
 800f368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d007      	beq.n	800f37e <CircularQueue_Add+0x236>
 800f36e:	88fb      	ldrh	r3, [r7, #6]
 800f370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f372:	429a      	cmp	r2, r3
 800f374:	d225      	bcs.n	800f3c2 <CircularQueue_Add+0x27a>
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	7f1b      	ldrb	r3, [r3, #28]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d121      	bne.n	800f3c2 <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f37e:	68fb      	ldr	r3, [r7, #12]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f384:	18d0      	adds	r0, r2, r3
 800f386:	88fb      	ldrh	r3, [r7, #6]
 800f388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f38a:	fb02 f303 	mul.w	r3, r2, r3
 800f38e:	68ba      	ldr	r2, [r7, #8]
 800f390:	4413      	add	r3, r2
 800f392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f394:	4619      	mov	r1, r3
 800f396:	f004 fcf1 	bl	8013d7c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	695a      	ldr	r2, [r3, #20]
 800f39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a0:	441a      	add	r2, r3
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800f3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3ac:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800f3ae:	88fa      	ldrh	r2, [r7, #6]
 800f3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800f3b6:	7ffb      	ldrb	r3, [r7, #31]
 800f3b8:	b29a      	uxth	r2, r3
 800f3ba:	88fb      	ldrh	r3, [r7, #6]
 800f3bc:	4413      	add	r3, r2
 800f3be:	86fb      	strh	r3, [r7, #54]	; 0x36
 800f3c0:	e0a4      	b.n	800f50c <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800f3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	f000 80a1 	beq.w	800f50c <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	7f1b      	ldrb	r3, [r3, #28]
 800f3ce:	f003 0301 	and.w	r3, r3, #1
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d03a      	beq.n	800f44c <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	891b      	ldrh	r3, [r3, #8]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d10d      	bne.n	800f3fa <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	681a      	ldr	r2, [r3, #0]
 800f3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e4:	3b02      	subs	r3, #2
 800f3e6:	4413      	add	r3, r2
 800f3e8:	22ff      	movs	r2, #255	; 0xff
 800f3ea:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	681a      	ldr	r2, [r3, #0]
 800f3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3f2:	3b01      	subs	r3, #1
 800f3f4:	4413      	add	r3, r2
 800f3f6:	22ff      	movs	r2, #255	; 0xff
 800f3f8:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	695a      	ldr	r2, [r3, #20]
 800f3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f400:	441a      	add	r2, r3
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800f406:	2300      	movs	r3, #0
 800f408:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800f40a:	88fb      	ldrh	r3, [r7, #6]
 800f40c:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800f40e:	2300      	movs	r3, #0
 800f410:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	891b      	ldrh	r3, [r3, #8]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d16f      	bne.n	800f4fa <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	681a      	ldr	r2, [r3, #0]
 800f41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f420:	1c59      	adds	r1, r3, #1
 800f422:	6339      	str	r1, [r7, #48]	; 0x30
 800f424:	4413      	add	r3, r2
 800f426:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f428:	b2d2      	uxtb	r2, r2
 800f42a:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42e:	0a18      	lsrs	r0, r3, #8
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f436:	1c59      	adds	r1, r3, #1
 800f438:	6339      	str	r1, [r7, #48]	; 0x30
 800f43a:	4413      	add	r3, r2
 800f43c:	b2c2      	uxtb	r2, r0
 800f43e:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	695b      	ldr	r3, [r3, #20]
 800f444:	1c9a      	adds	r2, r3, #2
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	615a      	str	r2, [r3, #20]
 800f44a:	e056      	b.n	800f4fa <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	7f1b      	ldrb	r3, [r3, #28]
 800f450:	f003 0302 	and.w	r3, r3, #2
 800f454:	2b00      	cmp	r3, #0
 800f456:	d050      	beq.n	800f4fa <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	891b      	ldrh	r3, [r3, #8]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d14a      	bne.n	800f4f6 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	681a      	ldr	r2, [r3, #0]
 800f464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f466:	3b02      	subs	r3, #2
 800f468:	4413      	add	r3, r2
 800f46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f46c:	b2d2      	uxtb	r2, r2
 800f46e:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f472:	0a19      	lsrs	r1, r3, #8
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681a      	ldr	r2, [r3, #0]
 800f478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f47a:	3b01      	subs	r3, #1
 800f47c:	4413      	add	r3, r2
 800f47e:	b2ca      	uxtb	r2, r1
 800f480:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	681a      	ldr	r2, [r3, #0]
 800f486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f488:	18d0      	adds	r0, r2, r3
 800f48a:	88fb      	ldrh	r3, [r7, #6]
 800f48c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f48e:	fb02 f303 	mul.w	r3, r2, r3
 800f492:	68ba      	ldr	r2, [r7, #8]
 800f494:	4413      	add	r3, r2
 800f496:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f498:	4619      	mov	r1, r3
 800f49a:	f004 fc6f 	bl	8013d7c <memcpy>
             q->byteCount += NbBytesToCopy; 
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	695a      	ldr	r2, [r3, #20]
 800f4a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a4:	441a      	add	r2, r3
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800f4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ac:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800f4ae:	88fa      	ldrh	r2, [r7, #6]
 800f4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	699b      	ldr	r3, [r3, #24]
 800f4ba:	1c5a      	adds	r2, r3, #1
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	1c59      	adds	r1, r3, #1
 800f4cc:	6339      	str	r1, [r7, #48]	; 0x30
 800f4ce:	4413      	add	r3, r2
 800f4d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f4d2:	b2d2      	uxtb	r2, r2
 800f4d4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800f4d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4d8:	0a18      	lsrs	r0, r3, #8
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681a      	ldr	r2, [r3, #0]
 800f4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e0:	1c59      	adds	r1, r3, #1
 800f4e2:	6339      	str	r1, [r7, #48]	; 0x30
 800f4e4:	4413      	add	r3, r2
 800f4e6:	b2c2      	uxtb	r2, r0
 800f4e8:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	695b      	ldr	r3, [r3, #20]
 800f4ee:	1c9a      	adds	r2, r3, #2
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	615a      	str	r2, [r3, #20]
 800f4f4:	e001      	b.n	800f4fa <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	e049      	b.n	800f58e <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800f4fa:	7ffb      	ldrb	r3, [r7, #31]
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f500:	b29b      	uxth	r3, r3
 800f502:	4413      	add	r3, r2
 800f504:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800f506:	68fb      	ldr	r3, [r7, #12]
 800f508:	2200      	movs	r2, #0
 800f50a:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 800f50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d015      	beq.n	800f53e <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	681a      	ldr	r2, [r3, #0]
 800f516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f518:	18d0      	adds	r0, r2, r3
 800f51a:	88fb      	ldrh	r3, [r7, #6]
 800f51c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f51e:	fb02 f203 	mul.w	r2, r2, r3
 800f522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f524:	4413      	add	r3, r2
 800f526:	68ba      	ldr	r2, [r7, #8]
 800f528:	4413      	add	r3, r2
 800f52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f52c:	4619      	mov	r1, r3
 800f52e:	f004 fc25 	bl	8013d7c <memcpy>
        q->byteCount += NbBytesToCopy;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	695a      	ldr	r2, [r3, #20]
 800f536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f538:	441a      	add	r2, r3
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	699b      	ldr	r3, [r3, #24]
 800f542:	1c5a      	adds	r2, r3, #1
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800f548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f54a:	3301      	adds	r3, #1
 800f54c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	429a      	cmp	r2, r3
 800f554:	f4ff aeb0 	bcc.w	800f2b8 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6919      	ldr	r1, [r3, #16]
 800f560:	7ffb      	ldrb	r3, [r7, #31]
 800f562:	4419      	add	r1, r3
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	685b      	ldr	r3, [r3, #4]
 800f568:	4299      	cmp	r1, r3
 800f56a:	d307      	bcc.n	800f57c <CircularQueue_Add+0x434>
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6919      	ldr	r1, [r3, #16]
 800f570:	7ffb      	ldrb	r3, [r7, #31]
 800f572:	4419      	add	r1, r3
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	685b      	ldr	r3, [r3, #4]
 800f578:	1acb      	subs	r3, r1, r3
 800f57a:	e003      	b.n	800f584 <CircularQueue_Add+0x43c>
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	6919      	ldr	r1, [r3, #16]
 800f580:	7ffb      	ldrb	r3, [r7, #31]
 800f582:	440b      	add	r3, r1
 800f584:	4413      	add	r3, r2
 800f586:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800f588:	6a3b      	ldr	r3, [r7, #32]
 800f58a:	e000      	b.n	800f58e <CircularQueue_Add+0x446>
    return NULL;
 800f58c:	2300      	movs	r3, #0
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3738      	adds	r7, #56	; 0x38
 800f592:	46bd      	mov	sp, r7
 800f594:	bd80      	pop	{r7, pc}

0800f596 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800f596:	b480      	push	{r7}
 800f598:	b085      	sub	sp, #20
 800f59a:	af00      	add	r7, sp, #0
 800f59c:	6078      	str	r0, [r7, #4]
 800f59e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	891b      	ldrh	r3, [r3, #8]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d101      	bne.n	800f5b4 <CircularQueue_Remove+0x1e>
 800f5b0:	2302      	movs	r3, #2
 800f5b2:	e000      	b.n	800f5b6 <CircularQueue_Remove+0x20>
 800f5b4:	2300      	movs	r3, #0
 800f5b6:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	695b      	ldr	r3, [r3, #20]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f000 80d4 	beq.w	800f770 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	891b      	ldrh	r3, [r3, #8]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d121      	bne.n	800f614 <CircularQueue_Remove+0x7e>
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681a      	ldr	r2, [r3, #0]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	4413      	add	r3, r2
 800f5da:	781b      	ldrb	r3, [r3, #0]
 800f5dc:	b29a      	uxth	r2, r3
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	6819      	ldr	r1, [r3, #0]
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	1c58      	adds	r0, r3, #1
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	685b      	ldr	r3, [r3, #4]
 800f5ec:	4298      	cmp	r0, r3
 800f5ee:	d306      	bcc.n	800f5fe <CircularQueue_Remove+0x68>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	68d8      	ldr	r0, [r3, #12]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	685b      	ldr	r3, [r3, #4]
 800f5f8:	1ac3      	subs	r3, r0, r3
 800f5fa:	3301      	adds	r3, #1
 800f5fc:	e002      	b.n	800f604 <CircularQueue_Remove+0x6e>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	3301      	adds	r3, #1
 800f604:	440b      	add	r3, r1
 800f606:	781b      	ldrb	r3, [r3, #0]
 800f608:	b29b      	uxth	r3, r3
 800f60a:	021b      	lsls	r3, r3, #8
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	4413      	add	r3, r2
 800f610:	b29b      	uxth	r3, r3
 800f612:	e001      	b.n	800f618 <CircularQueue_Remove+0x82>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	891b      	ldrh	r3, [r3, #8]
 800f618:	683a      	ldr	r2, [r7, #0]
 800f61a:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	7f1b      	ldrb	r3, [r3, #28]
 800f620:	f003 0301 	and.w	r3, r3, #1
 800f624:	2b00      	cmp	r3, #0
 800f626:	d059      	beq.n	800f6dc <CircularQueue_Remove+0x146>
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	7f1b      	ldrb	r3, [r3, #28]
 800f62c:	f003 0302 	and.w	r3, r3, #2
 800f630:	2b00      	cmp	r3, #0
 800f632:	d153      	bne.n	800f6dc <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	881b      	ldrh	r3, [r3, #0]
 800f638:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d103      	bne.n	800f648 <CircularQueue_Remove+0xb2>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	891b      	ldrh	r3, [r3, #8]
 800f644:	2b00      	cmp	r3, #0
 800f646:	d012      	beq.n	800f66e <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	68da      	ldr	r2, [r3, #12]
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f650:	429a      	cmp	r2, r3
 800f652:	d943      	bls.n	800f6dc <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	891b      	ldrh	r3, [r3, #8]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d03f      	beq.n	800f6dc <CircularQueue_Remove+0x146>
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	685a      	ldr	r2, [r3, #4]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	68db      	ldr	r3, [r3, #12]
 800f664:	1ad3      	subs	r3, r2, r3
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	8912      	ldrh	r2, [r2, #8]
 800f66a:	4293      	cmp	r3, r2
 800f66c:	d236      	bcs.n	800f6dc <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	695a      	ldr	r2, [r3, #20]
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68d9      	ldr	r1, [r3, #12]
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	1acb      	subs	r3, r1, r3
 800f67c:	441a      	add	r2, r3
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	2200      	movs	r2, #0
 800f686:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	891b      	ldrh	r3, [r3, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d121      	bne.n	800f6d4 <CircularQueue_Remove+0x13e>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681a      	ldr	r2, [r3, #0]
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	68db      	ldr	r3, [r3, #12]
 800f698:	4413      	add	r3, r2
 800f69a:	781b      	ldrb	r3, [r3, #0]
 800f69c:	b29a      	uxth	r2, r3
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6819      	ldr	r1, [r3, #0]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	68db      	ldr	r3, [r3, #12]
 800f6a6:	1c58      	adds	r0, r3, #1
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	685b      	ldr	r3, [r3, #4]
 800f6ac:	4298      	cmp	r0, r3
 800f6ae:	d306      	bcc.n	800f6be <CircularQueue_Remove+0x128>
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	68d8      	ldr	r0, [r3, #12]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	685b      	ldr	r3, [r3, #4]
 800f6b8:	1ac3      	subs	r3, r0, r3
 800f6ba:	3301      	adds	r3, #1
 800f6bc:	e002      	b.n	800f6c4 <CircularQueue_Remove+0x12e>
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	68db      	ldr	r3, [r3, #12]
 800f6c2:	3301      	adds	r3, #1
 800f6c4:	440b      	add	r3, r1
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	b29b      	uxth	r3, r3
 800f6ca:	021b      	lsls	r3, r3, #8
 800f6cc:	b29b      	uxth	r3, r3
 800f6ce:	4413      	add	r3, r2
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	e001      	b.n	800f6d8 <CircularQueue_Remove+0x142>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	891b      	ldrh	r3, [r3, #8]
 800f6d8:	683a      	ldr	r2, [r7, #0]
 800f6da:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	681a      	ldr	r2, [r3, #0]
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	68d9      	ldr	r1, [r3, #12]
 800f6e4:	7afb      	ldrb	r3, [r7, #11]
 800f6e6:	4419      	add	r1, r3
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4299      	cmp	r1, r3
 800f6ee:	d307      	bcc.n	800f700 <CircularQueue_Remove+0x16a>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	68d9      	ldr	r1, [r3, #12]
 800f6f4:	7afb      	ldrb	r3, [r7, #11]
 800f6f6:	4419      	add	r1, r3
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	685b      	ldr	r3, [r3, #4]
 800f6fc:	1acb      	subs	r3, r1, r3
 800f6fe:	e003      	b.n	800f708 <CircularQueue_Remove+0x172>
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	68d9      	ldr	r1, [r3, #12]
 800f704:	7afb      	ldrb	r3, [r7, #11]
 800f706:	440b      	add	r3, r1
 800f708:	4413      	add	r3, r2
 800f70a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	695b      	ldr	r3, [r3, #20]
 800f710:	683a      	ldr	r2, [r7, #0]
 800f712:	8812      	ldrh	r2, [r2, #0]
 800f714:	4611      	mov	r1, r2
 800f716:	7afa      	ldrb	r2, [r7, #11]
 800f718:	440a      	add	r2, r1
 800f71a:	1a9a      	subs	r2, r3, r2
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	695b      	ldr	r3, [r3, #20]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d01e      	beq.n	800f766 <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	68db      	ldr	r3, [r3, #12]
 800f72c:	683a      	ldr	r2, [r7, #0]
 800f72e:	8812      	ldrh	r2, [r2, #0]
 800f730:	441a      	add	r2, r3
 800f732:	7afb      	ldrb	r3, [r7, #11]
 800f734:	441a      	add	r2, r3
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	685b      	ldr	r3, [r3, #4]
 800f73a:	429a      	cmp	r2, r3
 800f73c:	d30a      	bcc.n	800f754 <CircularQueue_Remove+0x1be>
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	68db      	ldr	r3, [r3, #12]
 800f742:	683a      	ldr	r2, [r7, #0]
 800f744:	8812      	ldrh	r2, [r2, #0]
 800f746:	441a      	add	r2, r3
 800f748:	7afb      	ldrb	r3, [r7, #11]
 800f74a:	441a      	add	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	e006      	b.n	800f762 <CircularQueue_Remove+0x1cc>
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	68db      	ldr	r3, [r3, #12]
 800f758:	683a      	ldr	r2, [r7, #0]
 800f75a:	8812      	ldrh	r2, [r2, #0]
 800f75c:	441a      	add	r2, r3
 800f75e:	7afb      	ldrb	r3, [r7, #11]
 800f760:	4413      	add	r3, r2
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	699b      	ldr	r3, [r3, #24]
 800f76a:	1e5a      	subs	r2, r3, #1
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 800f770:	68fb      	ldr	r3, [r7, #12]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3714      	adds	r7, #20
 800f776:	46bd      	mov	sp, r7
 800f778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f77c:	4770      	bx	lr

0800f77e <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800f77e:	b480      	push	{r7}
 800f780:	b087      	sub	sp, #28
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800f788:	2300      	movs	r3, #0
 800f78a:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 800f78c:	2300      	movs	r3, #0
 800f78e:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	891b      	ldrh	r3, [r3, #8]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d101      	bne.n	800f79c <CircularQueue_Sense+0x1e>
 800f798:	2302      	movs	r3, #2
 800f79a:	e000      	b.n	800f79e <CircularQueue_Sense+0x20>
 800f79c:	2300      	movs	r3, #0
 800f79e:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	695b      	ldr	r3, [r3, #20]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	f000 8093 	beq.w	800f8da <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	68db      	ldr	r3, [r3, #12]
 800f7b8:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	891b      	ldrh	r3, [r3, #8]
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d121      	bne.n	800f806 <CircularQueue_Sense+0x88>
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	681a      	ldr	r2, [r3, #0]
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	781b      	ldrb	r3, [r3, #0]
 800f7ce:	b29a      	uxth	r2, r3
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6819      	ldr	r1, [r3, #0]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	68db      	ldr	r3, [r3, #12]
 800f7d8:	1c58      	adds	r0, r3, #1
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	4298      	cmp	r0, r3
 800f7e0:	d306      	bcc.n	800f7f0 <CircularQueue_Sense+0x72>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	68d8      	ldr	r0, [r3, #12]
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	1ac3      	subs	r3, r0, r3
 800f7ec:	3301      	adds	r3, #1
 800f7ee:	e002      	b.n	800f7f6 <CircularQueue_Sense+0x78>
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	68db      	ldr	r3, [r3, #12]
 800f7f4:	3301      	adds	r3, #1
 800f7f6:	440b      	add	r3, r1
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	021b      	lsls	r3, r3, #8
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	4413      	add	r3, r2
 800f802:	b29b      	uxth	r3, r3
 800f804:	e001      	b.n	800f80a <CircularQueue_Sense+0x8c>
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	891b      	ldrh	r3, [r3, #8]
 800f80a:	683a      	ldr	r2, [r7, #0]
 800f80c:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	7f1b      	ldrb	r3, [r3, #28]
 800f812:	f003 0301 	and.w	r3, r3, #1
 800f816:	2b00      	cmp	r3, #0
 800f818:	d04a      	beq.n	800f8b0 <CircularQueue_Sense+0x132>
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	7f1b      	ldrb	r3, [r3, #28]
 800f81e:	f003 0302 	and.w	r3, r3, #2
 800f822:	2b00      	cmp	r3, #0
 800f824:	d144      	bne.n	800f8b0 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	881b      	ldrh	r3, [r3, #0]
 800f82a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f82e:	4293      	cmp	r3, r2
 800f830:	d103      	bne.n	800f83a <CircularQueue_Sense+0xbc>
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	891b      	ldrh	r3, [r3, #8]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d012      	beq.n	800f860 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	68da      	ldr	r2, [r3, #12]
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800f842:	429a      	cmp	r2, r3
 800f844:	d934      	bls.n	800f8b0 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	891b      	ldrh	r3, [r3, #8]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d030      	beq.n	800f8b0 <CircularQueue_Sense+0x132>
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	685a      	ldr	r2, [r3, #4]
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	68db      	ldr	r3, [r3, #12]
 800f856:	1ad3      	subs	r3, r2, r3
 800f858:	687a      	ldr	r2, [r7, #4]
 800f85a:	8912      	ldrh	r2, [r2, #8]
 800f85c:	4293      	cmp	r3, r2
 800f85e:	d227      	bcs.n	800f8b0 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800f860:	2300      	movs	r3, #0
 800f862:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	891b      	ldrh	r3, [r3, #8]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d11d      	bne.n	800f8a8 <CircularQueue_Sense+0x12a>
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681a      	ldr	r2, [r3, #0]
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	4413      	add	r3, r2
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	b29a      	uxth	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	6819      	ldr	r1, [r3, #0]
 800f87c:	693b      	ldr	r3, [r7, #16]
 800f87e:	1c58      	adds	r0, r3, #1
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	4298      	cmp	r0, r3
 800f886:	d305      	bcc.n	800f894 <CircularQueue_Sense+0x116>
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	6938      	ldr	r0, [r7, #16]
 800f88e:	1ac3      	subs	r3, r0, r3
 800f890:	3301      	adds	r3, #1
 800f892:	e001      	b.n	800f898 <CircularQueue_Sense+0x11a>
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	3301      	adds	r3, #1
 800f898:	440b      	add	r3, r1
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	b29b      	uxth	r3, r3
 800f89e:	021b      	lsls	r3, r3, #8
 800f8a0:	b29b      	uxth	r3, r3
 800f8a2:	4413      	add	r3, r2
 800f8a4:	b29b      	uxth	r3, r3
 800f8a6:	e001      	b.n	800f8ac <CircularQueue_Sense+0x12e>
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	891b      	ldrh	r3, [r3, #8]
 800f8ac:	683a      	ldr	r2, [r7, #0]
 800f8ae:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	7bf9      	ldrb	r1, [r7, #15]
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	4419      	add	r1, r3
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	4299      	cmp	r1, r3
 800f8c0:	d306      	bcc.n	800f8d0 <CircularQueue_Sense+0x152>
 800f8c2:	7bf9      	ldrb	r1, [r7, #15]
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	4419      	add	r1, r3
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	1acb      	subs	r3, r1, r3
 800f8ce:	e002      	b.n	800f8d6 <CircularQueue_Sense+0x158>
 800f8d0:	7bf9      	ldrb	r1, [r7, #15]
 800f8d2:	693b      	ldr	r3, [r7, #16]
 800f8d4:	440b      	add	r3, r1
 800f8d6:	4413      	add	r3, r2
 800f8d8:	617b      	str	r3, [r7, #20]
  }
  return x;
 800f8da:	697b      	ldr	r3, [r7, #20]
}
 800f8dc:	4618      	mov	r0, r3
 800f8de:	371c      	adds	r7, #28
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f8e8:	b480      	push	{r7}
 800f8ea:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f8ec:	bf00      	nop
 800f8ee:	46bd      	mov	sp, r7
 800f8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f4:	4770      	bx	lr
	...

0800f8f8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f8fe:	f3ef 8305 	mrs	r3, IPSR
 800f902:	60bb      	str	r3, [r7, #8]
  return(result);
 800f904:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f906:	2b00      	cmp	r3, #0
 800f908:	d10f      	bne.n	800f92a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f90a:	f3ef 8310 	mrs	r3, PRIMASK
 800f90e:	607b      	str	r3, [r7, #4]
  return(result);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d105      	bne.n	800f922 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f916:	f3ef 8311 	mrs	r3, BASEPRI
 800f91a:	603b      	str	r3, [r7, #0]
  return(result);
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d007      	beq.n	800f932 <osKernelInitialize+0x3a>
 800f922:	4b0e      	ldr	r3, [pc, #56]	; (800f95c <osKernelInitialize+0x64>)
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	2b02      	cmp	r3, #2
 800f928:	d103      	bne.n	800f932 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f92a:	f06f 0305 	mvn.w	r3, #5
 800f92e:	60fb      	str	r3, [r7, #12]
 800f930:	e00c      	b.n	800f94c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f932:	4b0a      	ldr	r3, [pc, #40]	; (800f95c <osKernelInitialize+0x64>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d105      	bne.n	800f946 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f93a:	4b08      	ldr	r3, [pc, #32]	; (800f95c <osKernelInitialize+0x64>)
 800f93c:	2201      	movs	r2, #1
 800f93e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f940:	2300      	movs	r3, #0
 800f942:	60fb      	str	r3, [r7, #12]
 800f944:	e002      	b.n	800f94c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f946:	f04f 33ff 	mov.w	r3, #4294967295
 800f94a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f94c:	68fb      	ldr	r3, [r7, #12]
}
 800f94e:	4618      	mov	r0, r3
 800f950:	3714      	adds	r7, #20
 800f952:	46bd      	mov	sp, r7
 800f954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f958:	4770      	bx	lr
 800f95a:	bf00      	nop
 800f95c:	20001434 	.word	0x20001434

0800f960 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f960:	b580      	push	{r7, lr}
 800f962:	b084      	sub	sp, #16
 800f964:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f966:	f3ef 8305 	mrs	r3, IPSR
 800f96a:	60bb      	str	r3, [r7, #8]
  return(result);
 800f96c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d10f      	bne.n	800f992 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f972:	f3ef 8310 	mrs	r3, PRIMASK
 800f976:	607b      	str	r3, [r7, #4]
  return(result);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d105      	bne.n	800f98a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f97e:	f3ef 8311 	mrs	r3, BASEPRI
 800f982:	603b      	str	r3, [r7, #0]
  return(result);
 800f984:	683b      	ldr	r3, [r7, #0]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d007      	beq.n	800f99a <osKernelStart+0x3a>
 800f98a:	4b0f      	ldr	r3, [pc, #60]	; (800f9c8 <osKernelStart+0x68>)
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	2b02      	cmp	r3, #2
 800f990:	d103      	bne.n	800f99a <osKernelStart+0x3a>
    stat = osErrorISR;
 800f992:	f06f 0305 	mvn.w	r3, #5
 800f996:	60fb      	str	r3, [r7, #12]
 800f998:	e010      	b.n	800f9bc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f99a:	4b0b      	ldr	r3, [pc, #44]	; (800f9c8 <osKernelStart+0x68>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	2b01      	cmp	r3, #1
 800f9a0:	d109      	bne.n	800f9b6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f9a2:	f7ff ffa1 	bl	800f8e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f9a6:	4b08      	ldr	r3, [pc, #32]	; (800f9c8 <osKernelStart+0x68>)
 800f9a8:	2202      	movs	r2, #2
 800f9aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f9ac:	f002 fd60 	bl	8012470 <vTaskStartScheduler>
      stat = osOK;
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	60fb      	str	r3, [r7, #12]
 800f9b4:	e002      	b.n	800f9bc <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f9b6:	f04f 33ff 	mov.w	r3, #4294967295
 800f9ba:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f9bc:	68fb      	ldr	r3, [r7, #12]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3710      	adds	r7, #16
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	20001434 	.word	0x20001434

0800f9cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b090      	sub	sp, #64	; 0x40
 800f9d0:	af04      	add	r7, sp, #16
 800f9d2:	60f8      	str	r0, [r7, #12]
 800f9d4:	60b9      	str	r1, [r7, #8]
 800f9d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f9d8:	2300      	movs	r3, #0
 800f9da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f9dc:	f3ef 8305 	mrs	r3, IPSR
 800f9e0:	61fb      	str	r3, [r7, #28]
  return(result);
 800f9e2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f040 808f 	bne.w	800fb08 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9ea:	f3ef 8310 	mrs	r3, PRIMASK
 800f9ee:	61bb      	str	r3, [r7, #24]
  return(result);
 800f9f0:	69bb      	ldr	r3, [r7, #24]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d105      	bne.n	800fa02 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f9f6:	f3ef 8311 	mrs	r3, BASEPRI
 800f9fa:	617b      	str	r3, [r7, #20]
  return(result);
 800f9fc:	697b      	ldr	r3, [r7, #20]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d003      	beq.n	800fa0a <osThreadNew+0x3e>
 800fa02:	4b44      	ldr	r3, [pc, #272]	; (800fb14 <osThreadNew+0x148>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	2b02      	cmp	r3, #2
 800fa08:	d07e      	beq.n	800fb08 <osThreadNew+0x13c>
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d07b      	beq.n	800fb08 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800fa10:	2380      	movs	r3, #128	; 0x80
 800fa12:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800fa14:	2318      	movs	r3, #24
 800fa16:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800fa1c:	f04f 33ff 	mov.w	r3, #4294967295
 800fa20:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d045      	beq.n	800fab4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <osThreadNew+0x6a>
        name = attr->name;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	699b      	ldr	r3, [r3, #24]
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d002      	beq.n	800fa44 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	699b      	ldr	r3, [r3, #24]
 800fa42:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800fa44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d008      	beq.n	800fa5c <osThreadNew+0x90>
 800fa4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4c:	2b38      	cmp	r3, #56	; 0x38
 800fa4e:	d805      	bhi.n	800fa5c <osThreadNew+0x90>
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	f003 0301 	and.w	r3, r3, #1
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d001      	beq.n	800fa60 <osThreadNew+0x94>
        return (NULL);
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	e054      	b.n	800fb0a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	695b      	ldr	r3, [r3, #20]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d003      	beq.n	800fa70 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	695b      	ldr	r3, [r3, #20]
 800fa6c:	089b      	lsrs	r3, r3, #2
 800fa6e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	689b      	ldr	r3, [r3, #8]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d00e      	beq.n	800fa96 <osThreadNew+0xca>
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	68db      	ldr	r3, [r3, #12]
 800fa7c:	2b5b      	cmp	r3, #91	; 0x5b
 800fa7e:	d90a      	bls.n	800fa96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d006      	beq.n	800fa96 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	695b      	ldr	r3, [r3, #20]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d002      	beq.n	800fa96 <osThreadNew+0xca>
        mem = 1;
 800fa90:	2301      	movs	r3, #1
 800fa92:	623b      	str	r3, [r7, #32]
 800fa94:	e010      	b.n	800fab8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d10c      	bne.n	800fab8 <osThreadNew+0xec>
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	68db      	ldr	r3, [r3, #12]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d108      	bne.n	800fab8 <osThreadNew+0xec>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	691b      	ldr	r3, [r3, #16]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d104      	bne.n	800fab8 <osThreadNew+0xec>
          mem = 0;
 800faae:	2300      	movs	r3, #0
 800fab0:	623b      	str	r3, [r7, #32]
 800fab2:	e001      	b.n	800fab8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800fab4:	2300      	movs	r3, #0
 800fab6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800fab8:	6a3b      	ldr	r3, [r7, #32]
 800faba:	2b01      	cmp	r3, #1
 800fabc:	d110      	bne.n	800fae0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800fac2:	687a      	ldr	r2, [r7, #4]
 800fac4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800fac6:	9202      	str	r2, [sp, #8]
 800fac8:	9301      	str	r3, [sp, #4]
 800faca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800facc:	9300      	str	r3, [sp, #0]
 800face:	68bb      	ldr	r3, [r7, #8]
 800fad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f002 faf9 	bl	80120cc <xTaskCreateStatic>
 800fada:	4603      	mov	r3, r0
 800fadc:	613b      	str	r3, [r7, #16]
 800fade:	e013      	b.n	800fb08 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800fae0:	6a3b      	ldr	r3, [r7, #32]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d110      	bne.n	800fb08 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800fae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fae8:	b29a      	uxth	r2, r3
 800faea:	f107 0310 	add.w	r3, r7, #16
 800faee:	9301      	str	r3, [sp, #4]
 800faf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faf2:	9300      	str	r3, [sp, #0]
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f002 fb41 	bl	8012180 <xTaskCreate>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b01      	cmp	r3, #1
 800fb02:	d001      	beq.n	800fb08 <osThreadNew+0x13c>
          hTask = NULL;
 800fb04:	2300      	movs	r3, #0
 800fb06:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800fb08:	693b      	ldr	r3, [r7, #16]
}
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	3730      	adds	r7, #48	; 0x30
 800fb0e:	46bd      	mov	sp, r7
 800fb10:	bd80      	pop	{r7, pc}
 800fb12:	bf00      	nop
 800fb14:	20001434 	.word	0x20001434

0800fb18 <osThreadFlagsSet>:
  }

  return (count);
}

uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b08a      	sub	sp, #40	; 0x28
 800fb1c:	af02      	add	r7, sp, #8
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	61fb      	str	r3, [r7, #28]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 800fb26:	69fb      	ldr	r3, [r7, #28]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d002      	beq.n	800fb32 <osThreadFlagsSet+0x1a>
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	da03      	bge.n	800fb3a <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 800fb32:	f06f 0303 	mvn.w	r3, #3
 800fb36:	60fb      	str	r3, [r7, #12]
 800fb38:	e046      	b.n	800fbc8 <osThreadFlagsSet+0xb0>
  }
  else {
    rflags = (uint32_t)osError;
 800fb3a:	f04f 33ff 	mov.w	r3, #4294967295
 800fb3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fb40:	f3ef 8305 	mrs	r3, IPSR
 800fb44:	61bb      	str	r3, [r7, #24]
  return(result);
 800fb46:	69bb      	ldr	r3, [r7, #24]

    if (IS_IRQ()) {
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d10f      	bne.n	800fb6c <osThreadFlagsSet+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fb4c:	f3ef 8310 	mrs	r3, PRIMASK
 800fb50:	617b      	str	r3, [r7, #20]
  return(result);
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d105      	bne.n	800fb64 <osThreadFlagsSet+0x4c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fb58:	f3ef 8311 	mrs	r3, BASEPRI
 800fb5c:	613b      	str	r3, [r7, #16]
  return(result);
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d024      	beq.n	800fbae <osThreadFlagsSet+0x96>
 800fb64:	4b1b      	ldr	r3, [pc, #108]	; (800fbd4 <osThreadFlagsSet+0xbc>)
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	2b02      	cmp	r3, #2
 800fb6a:	d120      	bne.n	800fbae <osThreadFlagsSet+0x96>
      yield = pdFALSE;
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 800fb70:	f107 0308 	add.w	r3, r7, #8
 800fb74:	9300      	str	r3, [sp, #0]
 800fb76:	2300      	movs	r3, #0
 800fb78:	2201      	movs	r2, #1
 800fb7a:	6839      	ldr	r1, [r7, #0]
 800fb7c:	69f8      	ldr	r0, [r7, #28]
 800fb7e:	f003 fbfb 	bl	8013378 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 800fb82:	f107 020c 	add.w	r2, r7, #12
 800fb86:	2300      	movs	r3, #0
 800fb88:	9300      	str	r3, [sp, #0]
 800fb8a:	4613      	mov	r3, r2
 800fb8c:	2200      	movs	r2, #0
 800fb8e:	2100      	movs	r1, #0
 800fb90:	69f8      	ldr	r0, [r7, #28]
 800fb92:	f003 fbf1 	bl	8013378 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 800fb96:	68bb      	ldr	r3, [r7, #8]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d015      	beq.n	800fbc8 <osThreadFlagsSet+0xb0>
 800fb9c:	4b0e      	ldr	r3, [pc, #56]	; (800fbd8 <osThreadFlagsSet+0xc0>)
 800fb9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fba2:	601a      	str	r2, [r3, #0]
 800fba4:	f3bf 8f4f 	dsb	sy
 800fba8:	f3bf 8f6f 	isb	sy
 800fbac:	e00c      	b.n	800fbc8 <osThreadFlagsSet+0xb0>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 800fbae:	2300      	movs	r3, #0
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	6839      	ldr	r1, [r7, #0]
 800fbb4:	69f8      	ldr	r0, [r7, #28]
 800fbb6:	f003 fb29 	bl	801320c <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 800fbba:	f107 030c 	add.w	r3, r7, #12
 800fbbe:	2200      	movs	r2, #0
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	69f8      	ldr	r0, [r7, #28]
 800fbc4:	f003 fb22 	bl	801320c <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
}
 800fbca:	4618      	mov	r0, r3
 800fbcc:	3720      	adds	r7, #32
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	bd80      	pop	{r7, pc}
 800fbd2:	bf00      	nop
 800fbd4:	20001434 	.word	0x20001434
 800fbd8:	e000ed04 	.word	0xe000ed04

0800fbdc <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08e      	sub	sp, #56	; 0x38
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fbe8:	f3ef 8305 	mrs	r3, IPSR
 800fbec:	61fb      	str	r3, [r7, #28]
  return(result);
 800fbee:	69fb      	ldr	r3, [r7, #28]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d10f      	bne.n	800fc14 <osThreadFlagsWait+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fbf4:	f3ef 8310 	mrs	r3, PRIMASK
 800fbf8:	61bb      	str	r3, [r7, #24]
  return(result);
 800fbfa:	69bb      	ldr	r3, [r7, #24]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d105      	bne.n	800fc0c <osThreadFlagsWait+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fc00:	f3ef 8311 	mrs	r3, BASEPRI
 800fc04:	617b      	str	r3, [r7, #20]
  return(result);
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d007      	beq.n	800fc1c <osThreadFlagsWait+0x40>
 800fc0c:	4b3c      	ldr	r3, [pc, #240]	; (800fd00 <osThreadFlagsWait+0x124>)
 800fc0e:	681b      	ldr	r3, [r3, #0]
 800fc10:	2b02      	cmp	r3, #2
 800fc12:	d103      	bne.n	800fc1c <osThreadFlagsWait+0x40>
    rflags = (uint32_t)osErrorISR;
 800fc14:	f06f 0305 	mvn.w	r3, #5
 800fc18:	637b      	str	r3, [r7, #52]	; 0x34
 800fc1a:	e06b      	b.n	800fcf4 <osThreadFlagsWait+0x118>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	da03      	bge.n	800fc2a <osThreadFlagsWait+0x4e>
    rflags = (uint32_t)osErrorParameter;
 800fc22:	f06f 0303 	mvn.w	r3, #3
 800fc26:	637b      	str	r3, [r7, #52]	; 0x34
 800fc28:	e064      	b.n	800fcf4 <osThreadFlagsWait+0x118>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 800fc2a:	68bb      	ldr	r3, [r7, #8]
 800fc2c:	f003 0302 	and.w	r3, r3, #2
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d002      	beq.n	800fc3a <osThreadFlagsWait+0x5e>
      clear = 0U;
 800fc34:	2300      	movs	r3, #0
 800fc36:	633b      	str	r3, [r7, #48]	; 0x30
 800fc38:	e001      	b.n	800fc3e <osThreadFlagsWait+0x62>
    } else {
      clear = flags;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	633b      	str	r3, [r7, #48]	; 0x30
    }

    rflags = 0U;
 800fc3e:	2300      	movs	r3, #0
 800fc40:	637b      	str	r3, [r7, #52]	; 0x34
    tout   = timeout;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	62fb      	str	r3, [r7, #44]	; 0x2c

    t0 = xTaskGetTickCount();
 800fc46:	f002 fd59 	bl	80126fc <xTaskGetTickCount>
 800fc4a:	62b8      	str	r0, [r7, #40]	; 0x28
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 800fc4c:	f107 0210 	add.w	r2, r7, #16
 800fc50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fc54:	2000      	movs	r0, #0
 800fc56:	f003 fa7f 	bl	8013158 <xTaskNotifyWait>
 800fc5a:	6278      	str	r0, [r7, #36]	; 0x24

      if (rval == pdPASS) {
 800fc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc5e:	2b01      	cmp	r3, #1
 800fc60:	d137      	bne.n	800fcd2 <osThreadFlagsWait+0xf6>
        rflags &= flags;
 800fc62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	4013      	ands	r3, r2
 800fc68:	637b      	str	r3, [r7, #52]	; 0x34
        rflags |= nval;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fc6e:	4313      	orrs	r3, r2
 800fc70:	637b      	str	r3, [r7, #52]	; 0x34

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	f003 0301 	and.w	r3, r3, #1
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d00c      	beq.n	800fc96 <osThreadFlagsWait+0xba>
          if ((flags & rflags) == flags) {
 800fc7c:	68fa      	ldr	r2, [r7, #12]
 800fc7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc80:	4013      	ands	r3, r2
 800fc82:	68fa      	ldr	r2, [r7, #12]
 800fc84:	429a      	cmp	r2, r3
 800fc86:	d032      	beq.n	800fcee <osThreadFlagsWait+0x112>
            break;
          } else {
            if (timeout == 0U) {
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d10f      	bne.n	800fcae <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800fc8e:	f06f 0302 	mvn.w	r3, #2
 800fc92:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800fc94:	e02e      	b.n	800fcf4 <osThreadFlagsWait+0x118>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 800fc96:	68fa      	ldr	r2, [r7, #12]
 800fc98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc9a:	4013      	ands	r3, r2
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d128      	bne.n	800fcf2 <osThreadFlagsWait+0x116>
            break;
          } else {
            if (timeout == 0U) {
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d103      	bne.n	800fcae <osThreadFlagsWait+0xd2>
              rflags = (uint32_t)osErrorResource;
 800fca6:	f06f 0302 	mvn.w	r3, #2
 800fcaa:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800fcac:	e022      	b.n	800fcf4 <osThreadFlagsWait+0x118>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 800fcae:	f002 fd25 	bl	80126fc <xTaskGetTickCount>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	623b      	str	r3, [r7, #32]

        if (td > tout) {
 800fcba:	6a3a      	ldr	r2, [r7, #32]
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	429a      	cmp	r2, r3
 800fcc0:	d902      	bls.n	800fcc8 <osThreadFlagsWait+0xec>
          tout  = 0;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcc6:	e00e      	b.n	800fce6 <osThreadFlagsWait+0x10a>
        } else {
          tout -= td;
 800fcc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcca:	6a3b      	ldr	r3, [r7, #32]
 800fccc:	1ad3      	subs	r3, r2, r3
 800fcce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcd0:	e009      	b.n	800fce6 <osThreadFlagsWait+0x10a>
        }
      }
      else {
        if (timeout == 0) {
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d103      	bne.n	800fce0 <osThreadFlagsWait+0x104>
          rflags = (uint32_t)osErrorResource;
 800fcd8:	f06f 0302 	mvn.w	r3, #2
 800fcdc:	637b      	str	r3, [r7, #52]	; 0x34
 800fcde:	e002      	b.n	800fce6 <osThreadFlagsWait+0x10a>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 800fce0:	f06f 0301 	mvn.w	r3, #1
 800fce4:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
    }
    while (rval != pdFAIL);
 800fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d1af      	bne.n	800fc4c <osThreadFlagsWait+0x70>
 800fcec:	e002      	b.n	800fcf4 <osThreadFlagsWait+0x118>
            break;
 800fcee:	bf00      	nop
 800fcf0:	e000      	b.n	800fcf4 <osThreadFlagsWait+0x118>
            break;
 800fcf2:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 800fcf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3738      	adds	r7, #56	; 0x38
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	20001434 	.word	0x20001434

0800fd04 <osDelay>:

osStatus_t osDelay (uint32_t ticks) {
 800fd04:	b580      	push	{r7, lr}
 800fd06:	b086      	sub	sp, #24
 800fd08:	af00      	add	r7, sp, #0
 800fd0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd0c:	f3ef 8305 	mrs	r3, IPSR
 800fd10:	613b      	str	r3, [r7, #16]
  return(result);
 800fd12:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10f      	bne.n	800fd38 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd18:	f3ef 8310 	mrs	r3, PRIMASK
 800fd1c:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d105      	bne.n	800fd30 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd24:	f3ef 8311 	mrs	r3, BASEPRI
 800fd28:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d007      	beq.n	800fd40 <osDelay+0x3c>
 800fd30:	4b0a      	ldr	r3, [pc, #40]	; (800fd5c <osDelay+0x58>)
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	2b02      	cmp	r3, #2
 800fd36:	d103      	bne.n	800fd40 <osDelay+0x3c>
    stat = osErrorISR;
 800fd38:	f06f 0305 	mvn.w	r3, #5
 800fd3c:	617b      	str	r3, [r7, #20]
 800fd3e:	e007      	b.n	800fd50 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800fd40:	2300      	movs	r3, #0
 800fd42:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d002      	beq.n	800fd50 <osDelay+0x4c>
      vTaskDelay(ticks);
 800fd4a:	6878      	ldr	r0, [r7, #4]
 800fd4c:	f002 fb5c 	bl	8012408 <vTaskDelay>
    }
  }

  return (stat);
 800fd50:	697b      	ldr	r3, [r7, #20]
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3718      	adds	r7, #24
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	20001434 	.word	0x20001434

0800fd60 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800fd60:	b580      	push	{r7, lr}
 800fd62:	b08a      	sub	sp, #40	; 0x28
 800fd64:	af00      	add	r7, sp, #0
 800fd66:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800fd68:	2300      	movs	r3, #0
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fd6c:	f3ef 8305 	mrs	r3, IPSR
 800fd70:	613b      	str	r3, [r7, #16]
  return(result);
 800fd72:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	f040 8085 	bne.w	800fe84 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd7a:	f3ef 8310 	mrs	r3, PRIMASK
 800fd7e:	60fb      	str	r3, [r7, #12]
  return(result);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d105      	bne.n	800fd92 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800fd86:	f3ef 8311 	mrs	r3, BASEPRI
 800fd8a:	60bb      	str	r3, [r7, #8]
  return(result);
 800fd8c:	68bb      	ldr	r3, [r7, #8]
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d003      	beq.n	800fd9a <osMutexNew+0x3a>
 800fd92:	4b3f      	ldr	r3, [pc, #252]	; (800fe90 <osMutexNew+0x130>)
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b02      	cmp	r3, #2
 800fd98:	d074      	beq.n	800fe84 <osMutexNew+0x124>
    if (attr != NULL) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d003      	beq.n	800fda8 <osMutexNew+0x48>
      type = attr->attr_bits;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	623b      	str	r3, [r7, #32]
 800fda6:	e001      	b.n	800fdac <osMutexNew+0x4c>
    } else {
      type = 0U;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800fdac:	6a3b      	ldr	r3, [r7, #32]
 800fdae:	f003 0301 	and.w	r3, r3, #1
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d002      	beq.n	800fdbc <osMutexNew+0x5c>
      rmtx = 1U;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	61fb      	str	r3, [r7, #28]
 800fdba:	e001      	b.n	800fdc0 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800fdc0:	6a3b      	ldr	r3, [r7, #32]
 800fdc2:	f003 0308 	and.w	r3, r3, #8
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d15c      	bne.n	800fe84 <osMutexNew+0x124>
      mem = -1;
 800fdca:	f04f 33ff 	mov.w	r3, #4294967295
 800fdce:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d015      	beq.n	800fe02 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	689b      	ldr	r3, [r3, #8]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d006      	beq.n	800fdec <osMutexNew+0x8c>
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	68db      	ldr	r3, [r3, #12]
 800fde2:	2b4f      	cmp	r3, #79	; 0x4f
 800fde4:	d902      	bls.n	800fdec <osMutexNew+0x8c>
          mem = 1;
 800fde6:	2301      	movs	r3, #1
 800fde8:	61bb      	str	r3, [r7, #24]
 800fdea:	e00c      	b.n	800fe06 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	689b      	ldr	r3, [r3, #8]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d108      	bne.n	800fe06 <osMutexNew+0xa6>
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	68db      	ldr	r3, [r3, #12]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d104      	bne.n	800fe06 <osMutexNew+0xa6>
            mem = 0;
 800fdfc:	2300      	movs	r3, #0
 800fdfe:	61bb      	str	r3, [r7, #24]
 800fe00:	e001      	b.n	800fe06 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800fe02:	2300      	movs	r3, #0
 800fe04:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	2b01      	cmp	r3, #1
 800fe0a:	d112      	bne.n	800fe32 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800fe0c:	69fb      	ldr	r3, [r7, #28]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d007      	beq.n	800fe22 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	689b      	ldr	r3, [r3, #8]
 800fe16:	4619      	mov	r1, r3
 800fe18:	2004      	movs	r0, #4
 800fe1a:	f001 fa24 	bl	8011266 <xQueueCreateMutexStatic>
 800fe1e:	6278      	str	r0, [r7, #36]	; 0x24
 800fe20:	e016      	b.n	800fe50 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	689b      	ldr	r3, [r3, #8]
 800fe26:	4619      	mov	r1, r3
 800fe28:	2001      	movs	r0, #1
 800fe2a:	f001 fa1c 	bl	8011266 <xQueueCreateMutexStatic>
 800fe2e:	6278      	str	r0, [r7, #36]	; 0x24
 800fe30:	e00e      	b.n	800fe50 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800fe32:	69bb      	ldr	r3, [r7, #24]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d10b      	bne.n	800fe50 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800fe38:	69fb      	ldr	r3, [r7, #28]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d004      	beq.n	800fe48 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800fe3e:	2004      	movs	r0, #4
 800fe40:	f001 f9f9 	bl	8011236 <xQueueCreateMutex>
 800fe44:	6278      	str	r0, [r7, #36]	; 0x24
 800fe46:	e003      	b.n	800fe50 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800fe48:	2001      	movs	r0, #1
 800fe4a:	f001 f9f4 	bl	8011236 <xQueueCreateMutex>
 800fe4e:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800fe50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d00c      	beq.n	800fe70 <osMutexNew+0x110>
        if (attr != NULL) {
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d003      	beq.n	800fe64 <osMutexNew+0x104>
          name = attr->name;
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	681b      	ldr	r3, [r3, #0]
 800fe60:	617b      	str	r3, [r7, #20]
 800fe62:	e001      	b.n	800fe68 <osMutexNew+0x108>
        } else {
          name = NULL;
 800fe64:	2300      	movs	r3, #0
 800fe66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800fe68:	6979      	ldr	r1, [r7, #20]
 800fe6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe6c:	f002 f8a8 	bl	8011fc0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d006      	beq.n	800fe84 <osMutexNew+0x124>
 800fe76:	69fb      	ldr	r3, [r7, #28]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d003      	beq.n	800fe84 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800fe7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7e:	f043 0301 	orr.w	r3, r3, #1
 800fe82:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800fe84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fe86:	4618      	mov	r0, r3
 800fe88:	3728      	adds	r7, #40	; 0x28
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
 800fe8e:	bf00      	nop
 800fe90:	20001434 	.word	0x20001434

0800fe94 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b088      	sub	sp, #32
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
 800fe9c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	f023 0301 	bic.w	r3, r3, #1
 800fea4:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f003 0301 	and.w	r3, r3, #1
 800feac:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800feae:	2300      	movs	r3, #0
 800feb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800feb2:	f3ef 8305 	mrs	r3, IPSR
 800feb6:	613b      	str	r3, [r7, #16]
  return(result);
 800feb8:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800feba:	2b00      	cmp	r3, #0
 800febc:	d10f      	bne.n	800fede <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800febe:	f3ef 8310 	mrs	r3, PRIMASK
 800fec2:	60fb      	str	r3, [r7, #12]
  return(result);
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d105      	bne.n	800fed6 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800feca:	f3ef 8311 	mrs	r3, BASEPRI
 800fece:	60bb      	str	r3, [r7, #8]
  return(result);
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d007      	beq.n	800fee6 <osMutexAcquire+0x52>
 800fed6:	4b1d      	ldr	r3, [pc, #116]	; (800ff4c <osMutexAcquire+0xb8>)
 800fed8:	681b      	ldr	r3, [r3, #0]
 800feda:	2b02      	cmp	r3, #2
 800fedc:	d103      	bne.n	800fee6 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800fede:	f06f 0305 	mvn.w	r3, #5
 800fee2:	61fb      	str	r3, [r7, #28]
 800fee4:	e02c      	b.n	800ff40 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800fee6:	69bb      	ldr	r3, [r7, #24]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d103      	bne.n	800fef4 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 800feec:	f06f 0303 	mvn.w	r3, #3
 800fef0:	61fb      	str	r3, [r7, #28]
 800fef2:	e025      	b.n	800ff40 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d011      	beq.n	800ff1e <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800fefa:	6839      	ldr	r1, [r7, #0]
 800fefc:	69b8      	ldr	r0, [r7, #24]
 800fefe:	f001 fa00 	bl	8011302 <xQueueTakeMutexRecursive>
 800ff02:	4603      	mov	r3, r0
 800ff04:	2b01      	cmp	r3, #1
 800ff06:	d01b      	beq.n	800ff40 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d003      	beq.n	800ff16 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 800ff0e:	f06f 0301 	mvn.w	r3, #1
 800ff12:	61fb      	str	r3, [r7, #28]
 800ff14:	e014      	b.n	800ff40 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ff16:	f06f 0302 	mvn.w	r3, #2
 800ff1a:	61fb      	str	r3, [r7, #28]
 800ff1c:	e010      	b.n	800ff40 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800ff1e:	6839      	ldr	r1, [r7, #0]
 800ff20:	69b8      	ldr	r0, [r7, #24]
 800ff22:	f001 fd7d 	bl	8011a20 <xQueueSemaphoreTake>
 800ff26:	4603      	mov	r3, r0
 800ff28:	2b01      	cmp	r3, #1
 800ff2a:	d009      	beq.n	800ff40 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800ff2c:	683b      	ldr	r3, [r7, #0]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d003      	beq.n	800ff3a <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 800ff32:	f06f 0301 	mvn.w	r3, #1
 800ff36:	61fb      	str	r3, [r7, #28]
 800ff38:	e002      	b.n	800ff40 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800ff3a:	f06f 0302 	mvn.w	r3, #2
 800ff3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ff40:	69fb      	ldr	r3, [r7, #28]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3720      	adds	r7, #32
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	20001434 	.word	0x20001434

0800ff50 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b088      	sub	sp, #32
 800ff54:	af00      	add	r7, sp, #0
 800ff56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	f023 0301 	bic.w	r3, r3, #1
 800ff5e:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	f003 0301 	and.w	r3, r3, #1
 800ff66:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ff6c:	f3ef 8305 	mrs	r3, IPSR
 800ff70:	613b      	str	r3, [r7, #16]
  return(result);
 800ff72:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d10f      	bne.n	800ff98 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ff78:	f3ef 8310 	mrs	r3, PRIMASK
 800ff7c:	60fb      	str	r3, [r7, #12]
  return(result);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d105      	bne.n	800ff90 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ff84:	f3ef 8311 	mrs	r3, BASEPRI
 800ff88:	60bb      	str	r3, [r7, #8]
  return(result);
 800ff8a:	68bb      	ldr	r3, [r7, #8]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d007      	beq.n	800ffa0 <osMutexRelease+0x50>
 800ff90:	4b16      	ldr	r3, [pc, #88]	; (800ffec <osMutexRelease+0x9c>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	2b02      	cmp	r3, #2
 800ff96:	d103      	bne.n	800ffa0 <osMutexRelease+0x50>
    stat = osErrorISR;
 800ff98:	f06f 0305 	mvn.w	r3, #5
 800ff9c:	61fb      	str	r3, [r7, #28]
 800ff9e:	e01f      	b.n	800ffe0 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800ffa0:	69bb      	ldr	r3, [r7, #24]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d103      	bne.n	800ffae <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800ffa6:	f06f 0303 	mvn.w	r3, #3
 800ffaa:	61fb      	str	r3, [r7, #28]
 800ffac:	e018      	b.n	800ffe0 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800ffae:	697b      	ldr	r3, [r7, #20]
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d009      	beq.n	800ffc8 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ffb4:	69b8      	ldr	r0, [r7, #24]
 800ffb6:	f001 f971 	bl	801129c <xQueueGiveMutexRecursive>
 800ffba:	4603      	mov	r3, r0
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d00f      	beq.n	800ffe0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ffc0:	f06f 0302 	mvn.w	r3, #2
 800ffc4:	61fb      	str	r3, [r7, #28]
 800ffc6:	e00b      	b.n	800ffe0 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ffc8:	2300      	movs	r3, #0
 800ffca:	2200      	movs	r2, #0
 800ffcc:	2100      	movs	r1, #0
 800ffce:	69b8      	ldr	r0, [r7, #24]
 800ffd0:	f001 fa32 	bl	8011438 <xQueueGenericSend>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b01      	cmp	r3, #1
 800ffd8:	d002      	beq.n	800ffe0 <osMutexRelease+0x90>
        stat = osErrorResource;
 800ffda:	f06f 0302 	mvn.w	r3, #2
 800ffde:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800ffe0:	69fb      	ldr	r3, [r7, #28]
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3720      	adds	r7, #32
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	20001434 	.word	0x20001434

0800fff0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b08c      	sub	sp, #48	; 0x30
 800fff4:	af02      	add	r7, sp, #8
 800fff6:	60f8      	str	r0, [r7, #12]
 800fff8:	60b9      	str	r1, [r7, #8]
 800fffa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800fffc:	2300      	movs	r3, #0
 800fffe:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010000:	f3ef 8305 	mrs	r3, IPSR
 8010004:	61bb      	str	r3, [r7, #24]
  return(result);
 8010006:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010008:	2b00      	cmp	r3, #0
 801000a:	f040 8087 	bne.w	801011c <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801000e:	f3ef 8310 	mrs	r3, PRIMASK
 8010012:	617b      	str	r3, [r7, #20]
  return(result);
 8010014:	697b      	ldr	r3, [r7, #20]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d105      	bne.n	8010026 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801001a:	f3ef 8311 	mrs	r3, BASEPRI
 801001e:	613b      	str	r3, [r7, #16]
  return(result);
 8010020:	693b      	ldr	r3, [r7, #16]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d003      	beq.n	801002e <osSemaphoreNew+0x3e>
 8010026:	4b40      	ldr	r3, [pc, #256]	; (8010128 <osSemaphoreNew+0x138>)
 8010028:	681b      	ldr	r3, [r3, #0]
 801002a:	2b02      	cmp	r3, #2
 801002c:	d076      	beq.n	801011c <osSemaphoreNew+0x12c>
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d073      	beq.n	801011c <osSemaphoreNew+0x12c>
 8010034:	68ba      	ldr	r2, [r7, #8]
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	429a      	cmp	r2, r3
 801003a:	d86f      	bhi.n	801011c <osSemaphoreNew+0x12c>
    mem = -1;
 801003c:	f04f 33ff 	mov.w	r3, #4294967295
 8010040:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d015      	beq.n	8010074 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	689b      	ldr	r3, [r3, #8]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d006      	beq.n	801005e <osSemaphoreNew+0x6e>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	68db      	ldr	r3, [r3, #12]
 8010054:	2b4f      	cmp	r3, #79	; 0x4f
 8010056:	d902      	bls.n	801005e <osSemaphoreNew+0x6e>
        mem = 1;
 8010058:	2301      	movs	r3, #1
 801005a:	623b      	str	r3, [r7, #32]
 801005c:	e00c      	b.n	8010078 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	689b      	ldr	r3, [r3, #8]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d108      	bne.n	8010078 <osSemaphoreNew+0x88>
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	68db      	ldr	r3, [r3, #12]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d104      	bne.n	8010078 <osSemaphoreNew+0x88>
          mem = 0;
 801006e:	2300      	movs	r3, #0
 8010070:	623b      	str	r3, [r7, #32]
 8010072:	e001      	b.n	8010078 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8010074:	2300      	movs	r3, #0
 8010076:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8010078:	6a3b      	ldr	r3, [r7, #32]
 801007a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801007e:	d04d      	beq.n	801011c <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	2b01      	cmp	r3, #1
 8010084:	d129      	bne.n	80100da <osSemaphoreNew+0xea>
        if (mem == 1) {
 8010086:	6a3b      	ldr	r3, [r7, #32]
 8010088:	2b01      	cmp	r3, #1
 801008a:	d10b      	bne.n	80100a4 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	689a      	ldr	r2, [r3, #8]
 8010090:	2303      	movs	r3, #3
 8010092:	9300      	str	r3, [sp, #0]
 8010094:	4613      	mov	r3, r2
 8010096:	2200      	movs	r2, #0
 8010098:	2100      	movs	r1, #0
 801009a:	2001      	movs	r0, #1
 801009c:	f000 ffdc 	bl	8011058 <xQueueGenericCreateStatic>
 80100a0:	6278      	str	r0, [r7, #36]	; 0x24
 80100a2:	e005      	b.n	80100b0 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80100a4:	2203      	movs	r2, #3
 80100a6:	2100      	movs	r1, #0
 80100a8:	2001      	movs	r0, #1
 80100aa:	f001 f848 	bl	801113e <xQueueGenericCreate>
 80100ae:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80100b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d022      	beq.n	80100fc <osSemaphoreNew+0x10c>
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d01f      	beq.n	80100fc <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80100bc:	2300      	movs	r3, #0
 80100be:	2200      	movs	r2, #0
 80100c0:	2100      	movs	r1, #0
 80100c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100c4:	f001 f9b8 	bl	8011438 <xQueueGenericSend>
 80100c8:	4603      	mov	r3, r0
 80100ca:	2b01      	cmp	r3, #1
 80100cc:	d016      	beq.n	80100fc <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 80100ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80100d0:	f001 fe2b 	bl	8011d2a <vQueueDelete>
            hSemaphore = NULL;
 80100d4:	2300      	movs	r3, #0
 80100d6:	627b      	str	r3, [r7, #36]	; 0x24
 80100d8:	e010      	b.n	80100fc <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 80100da:	6a3b      	ldr	r3, [r7, #32]
 80100dc:	2b01      	cmp	r3, #1
 80100de:	d108      	bne.n	80100f2 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	461a      	mov	r2, r3
 80100e6:	68b9      	ldr	r1, [r7, #8]
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f001 f93f 	bl	801136c <xQueueCreateCountingSemaphoreStatic>
 80100ee:	6278      	str	r0, [r7, #36]	; 0x24
 80100f0:	e004      	b.n	80100fc <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80100f2:	68b9      	ldr	r1, [r7, #8]
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f001 f96e 	bl	80113d6 <xQueueCreateCountingSemaphore>
 80100fa:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80100fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d00c      	beq.n	801011c <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d003      	beq.n	8010110 <osSemaphoreNew+0x120>
          name = attr->name;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	61fb      	str	r3, [r7, #28]
 801010e:	e001      	b.n	8010114 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8010110:	2300      	movs	r3, #0
 8010112:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010114:	69f9      	ldr	r1, [r7, #28]
 8010116:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010118:	f001 ff52 	bl	8011fc0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801011c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801011e:	4618      	mov	r0, r3
 8010120:	3728      	adds	r7, #40	; 0x28
 8010122:	46bd      	mov	sp, r7
 8010124:	bd80      	pop	{r7, pc}
 8010126:	bf00      	nop
 8010128:	20001434 	.word	0x20001434

0801012c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 801012c:	b580      	push	{r7, lr}
 801012e:	b088      	sub	sp, #32
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
 8010134:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801013a:	2300      	movs	r3, #0
 801013c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801013e:	69bb      	ldr	r3, [r7, #24]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d103      	bne.n	801014c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010144:	f06f 0303 	mvn.w	r3, #3
 8010148:	61fb      	str	r3, [r7, #28]
 801014a:	e04b      	b.n	80101e4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801014c:	f3ef 8305 	mrs	r3, IPSR
 8010150:	617b      	str	r3, [r7, #20]
  return(result);
 8010152:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8010154:	2b00      	cmp	r3, #0
 8010156:	d10f      	bne.n	8010178 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010158:	f3ef 8310 	mrs	r3, PRIMASK
 801015c:	613b      	str	r3, [r7, #16]
  return(result);
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	2b00      	cmp	r3, #0
 8010162:	d105      	bne.n	8010170 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010164:	f3ef 8311 	mrs	r3, BASEPRI
 8010168:	60fb      	str	r3, [r7, #12]
  return(result);
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d026      	beq.n	80101be <osSemaphoreAcquire+0x92>
 8010170:	4b1f      	ldr	r3, [pc, #124]	; (80101f0 <osSemaphoreAcquire+0xc4>)
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2b02      	cmp	r3, #2
 8010176:	d122      	bne.n	80101be <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 801017e:	f06f 0303 	mvn.w	r3, #3
 8010182:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8010184:	e02d      	b.n	80101e2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8010186:	2300      	movs	r3, #0
 8010188:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801018a:	f107 0308 	add.w	r3, r7, #8
 801018e:	461a      	mov	r2, r3
 8010190:	2100      	movs	r1, #0
 8010192:	69b8      	ldr	r0, [r7, #24]
 8010194:	f001 fd4c 	bl	8011c30 <xQueueReceiveFromISR>
 8010198:	4603      	mov	r3, r0
 801019a:	2b01      	cmp	r3, #1
 801019c:	d003      	beq.n	80101a6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 801019e:	f06f 0302 	mvn.w	r3, #2
 80101a2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80101a4:	e01d      	b.n	80101e2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80101a6:	68bb      	ldr	r3, [r7, #8]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01a      	beq.n	80101e2 <osSemaphoreAcquire+0xb6>
 80101ac:	4b11      	ldr	r3, [pc, #68]	; (80101f4 <osSemaphoreAcquire+0xc8>)
 80101ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101b2:	601a      	str	r2, [r3, #0]
 80101b4:	f3bf 8f4f 	dsb	sy
 80101b8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 80101bc:	e011      	b.n	80101e2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80101be:	6839      	ldr	r1, [r7, #0]
 80101c0:	69b8      	ldr	r0, [r7, #24]
 80101c2:	f001 fc2d 	bl	8011a20 <xQueueSemaphoreTake>
 80101c6:	4603      	mov	r3, r0
 80101c8:	2b01      	cmp	r3, #1
 80101ca:	d00b      	beq.n	80101e4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d003      	beq.n	80101da <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 80101d2:	f06f 0301 	mvn.w	r3, #1
 80101d6:	61fb      	str	r3, [r7, #28]
 80101d8:	e004      	b.n	80101e4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 80101da:	f06f 0302 	mvn.w	r3, #2
 80101de:	61fb      	str	r3, [r7, #28]
 80101e0:	e000      	b.n	80101e4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80101e2:	bf00      	nop
      }
    }
  }

  return (stat);
 80101e4:	69fb      	ldr	r3, [r7, #28]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3720      	adds	r7, #32
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
 80101ee:	bf00      	nop
 80101f0:	20001434 	.word	0x20001434
 80101f4:	e000ed04 	.word	0xe000ed04

080101f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b088      	sub	sp, #32
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010204:	2300      	movs	r3, #0
 8010206:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8010208:	69bb      	ldr	r3, [r7, #24]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d103      	bne.n	8010216 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801020e:	f06f 0303 	mvn.w	r3, #3
 8010212:	61fb      	str	r3, [r7, #28]
 8010214:	e03e      	b.n	8010294 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010216:	f3ef 8305 	mrs	r3, IPSR
 801021a:	617b      	str	r3, [r7, #20]
  return(result);
 801021c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 801021e:	2b00      	cmp	r3, #0
 8010220:	d10f      	bne.n	8010242 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010222:	f3ef 8310 	mrs	r3, PRIMASK
 8010226:	613b      	str	r3, [r7, #16]
  return(result);
 8010228:	693b      	ldr	r3, [r7, #16]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d105      	bne.n	801023a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801022e:	f3ef 8311 	mrs	r3, BASEPRI
 8010232:	60fb      	str	r3, [r7, #12]
  return(result);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d01e      	beq.n	8010278 <osSemaphoreRelease+0x80>
 801023a:	4b19      	ldr	r3, [pc, #100]	; (80102a0 <osSemaphoreRelease+0xa8>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	2b02      	cmp	r3, #2
 8010240:	d11a      	bne.n	8010278 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8010242:	2300      	movs	r3, #0
 8010244:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010246:	f107 0308 	add.w	r3, r7, #8
 801024a:	4619      	mov	r1, r3
 801024c:	69b8      	ldr	r0, [r7, #24]
 801024e:	f001 fa81 	bl	8011754 <xQueueGiveFromISR>
 8010252:	4603      	mov	r3, r0
 8010254:	2b01      	cmp	r3, #1
 8010256:	d003      	beq.n	8010260 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8010258:	f06f 0302 	mvn.w	r3, #2
 801025c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801025e:	e018      	b.n	8010292 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d015      	beq.n	8010292 <osSemaphoreRelease+0x9a>
 8010266:	4b0f      	ldr	r3, [pc, #60]	; (80102a4 <osSemaphoreRelease+0xac>)
 8010268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026c:	601a      	str	r2, [r3, #0]
 801026e:	f3bf 8f4f 	dsb	sy
 8010272:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010276:	e00c      	b.n	8010292 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010278:	2300      	movs	r3, #0
 801027a:	2200      	movs	r2, #0
 801027c:	2100      	movs	r1, #0
 801027e:	69b8      	ldr	r0, [r7, #24]
 8010280:	f001 f8da 	bl	8011438 <xQueueGenericSend>
 8010284:	4603      	mov	r3, r0
 8010286:	2b01      	cmp	r3, #1
 8010288:	d004      	beq.n	8010294 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801028a:	f06f 0302 	mvn.w	r3, #2
 801028e:	61fb      	str	r3, [r7, #28]
 8010290:	e000      	b.n	8010294 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8010292:	bf00      	nop
    }
  }

  return (stat);
 8010294:	69fb      	ldr	r3, [r7, #28]
}
 8010296:	4618      	mov	r0, r3
 8010298:	3720      	adds	r7, #32
 801029a:	46bd      	mov	sp, r7
 801029c:	bd80      	pop	{r7, pc}
 801029e:	bf00      	nop
 80102a0:	20001434 	.word	0x20001434
 80102a4:	e000ed04 	.word	0xe000ed04

080102a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b08c      	sub	sp, #48	; 0x30
 80102ac:	af02      	add	r7, sp, #8
 80102ae:	60f8      	str	r0, [r7, #12]
 80102b0:	60b9      	str	r1, [r7, #8]
 80102b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80102b4:	2300      	movs	r3, #0
 80102b6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80102b8:	f3ef 8305 	mrs	r3, IPSR
 80102bc:	61bb      	str	r3, [r7, #24]
  return(result);
 80102be:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d170      	bne.n	80103a6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102c4:	f3ef 8310 	mrs	r3, PRIMASK
 80102c8:	617b      	str	r3, [r7, #20]
  return(result);
 80102ca:	697b      	ldr	r3, [r7, #20]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d105      	bne.n	80102dc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80102d0:	f3ef 8311 	mrs	r3, BASEPRI
 80102d4:	613b      	str	r3, [r7, #16]
  return(result);
 80102d6:	693b      	ldr	r3, [r7, #16]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d003      	beq.n	80102e4 <osMessageQueueNew+0x3c>
 80102dc:	4b34      	ldr	r3, [pc, #208]	; (80103b0 <osMessageQueueNew+0x108>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2b02      	cmp	r3, #2
 80102e2:	d060      	beq.n	80103a6 <osMessageQueueNew+0xfe>
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d05d      	beq.n	80103a6 <osMessageQueueNew+0xfe>
 80102ea:	68bb      	ldr	r3, [r7, #8]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d05a      	beq.n	80103a6 <osMessageQueueNew+0xfe>
    mem = -1;
 80102f0:	f04f 33ff 	mov.w	r3, #4294967295
 80102f4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d029      	beq.n	8010350 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	689b      	ldr	r3, [r3, #8]
 8010300:	2b00      	cmp	r3, #0
 8010302:	d012      	beq.n	801032a <osMessageQueueNew+0x82>
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68db      	ldr	r3, [r3, #12]
 8010308:	2b4f      	cmp	r3, #79	; 0x4f
 801030a:	d90e      	bls.n	801032a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00a      	beq.n	801032a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	695a      	ldr	r2, [r3, #20]
 8010318:	68fb      	ldr	r3, [r7, #12]
 801031a:	68b9      	ldr	r1, [r7, #8]
 801031c:	fb01 f303 	mul.w	r3, r1, r3
 8010320:	429a      	cmp	r2, r3
 8010322:	d302      	bcc.n	801032a <osMessageQueueNew+0x82>
        mem = 1;
 8010324:	2301      	movs	r3, #1
 8010326:	623b      	str	r3, [r7, #32]
 8010328:	e014      	b.n	8010354 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	689b      	ldr	r3, [r3, #8]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d110      	bne.n	8010354 <osMessageQueueNew+0xac>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	68db      	ldr	r3, [r3, #12]
 8010336:	2b00      	cmp	r3, #0
 8010338:	d10c      	bne.n	8010354 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801033e:	2b00      	cmp	r3, #0
 8010340:	d108      	bne.n	8010354 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	695b      	ldr	r3, [r3, #20]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d104      	bne.n	8010354 <osMessageQueueNew+0xac>
          mem = 0;
 801034a:	2300      	movs	r3, #0
 801034c:	623b      	str	r3, [r7, #32]
 801034e:	e001      	b.n	8010354 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8010350:	2300      	movs	r3, #0
 8010352:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010354:	6a3b      	ldr	r3, [r7, #32]
 8010356:	2b01      	cmp	r3, #1
 8010358:	d10c      	bne.n	8010374 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	691a      	ldr	r2, [r3, #16]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	6899      	ldr	r1, [r3, #8]
 8010362:	2300      	movs	r3, #0
 8010364:	9300      	str	r3, [sp, #0]
 8010366:	460b      	mov	r3, r1
 8010368:	68b9      	ldr	r1, [r7, #8]
 801036a:	68f8      	ldr	r0, [r7, #12]
 801036c:	f000 fe74 	bl	8011058 <xQueueGenericCreateStatic>
 8010370:	6278      	str	r0, [r7, #36]	; 0x24
 8010372:	e008      	b.n	8010386 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d105      	bne.n	8010386 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801037a:	2200      	movs	r2, #0
 801037c:	68b9      	ldr	r1, [r7, #8]
 801037e:	68f8      	ldr	r0, [r7, #12]
 8010380:	f000 fedd 	bl	801113e <xQueueGenericCreate>
 8010384:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00c      	beq.n	80103a6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d003      	beq.n	801039a <osMessageQueueNew+0xf2>
        name = attr->name;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	681b      	ldr	r3, [r3, #0]
 8010396:	61fb      	str	r3, [r7, #28]
 8010398:	e001      	b.n	801039e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801039a:	2300      	movs	r3, #0
 801039c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801039e:	69f9      	ldr	r1, [r7, #28]
 80103a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103a2:	f001 fe0d 	bl	8011fc0 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80103a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3728      	adds	r7, #40	; 0x28
 80103ac:	46bd      	mov	sp, r7
 80103ae:	bd80      	pop	{r7, pc}
 80103b0:	20001434 	.word	0x20001434

080103b4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b08a      	sub	sp, #40	; 0x28
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	60f8      	str	r0, [r7, #12]
 80103bc:	60b9      	str	r1, [r7, #8]
 80103be:	603b      	str	r3, [r7, #0]
 80103c0:	4613      	mov	r3, r2
 80103c2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80103c8:	2300      	movs	r3, #0
 80103ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80103cc:	f3ef 8305 	mrs	r3, IPSR
 80103d0:	61fb      	str	r3, [r7, #28]
  return(result);
 80103d2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d10f      	bne.n	80103f8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103d8:	f3ef 8310 	mrs	r3, PRIMASK
 80103dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80103de:	69bb      	ldr	r3, [r7, #24]
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d105      	bne.n	80103f0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80103e4:	f3ef 8311 	mrs	r3, BASEPRI
 80103e8:	617b      	str	r3, [r7, #20]
  return(result);
 80103ea:	697b      	ldr	r3, [r7, #20]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d02c      	beq.n	801044a <osMessageQueuePut+0x96>
 80103f0:	4b28      	ldr	r3, [pc, #160]	; (8010494 <osMessageQueuePut+0xe0>)
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	2b02      	cmp	r3, #2
 80103f6:	d128      	bne.n	801044a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80103f8:	6a3b      	ldr	r3, [r7, #32]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	d005      	beq.n	801040a <osMessageQueuePut+0x56>
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <osMessageQueuePut+0x56>
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d003      	beq.n	8010412 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801040a:	f06f 0303 	mvn.w	r3, #3
 801040e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010410:	e039      	b.n	8010486 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8010412:	2300      	movs	r3, #0
 8010414:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8010416:	f107 0210 	add.w	r2, r7, #16
 801041a:	2300      	movs	r3, #0
 801041c:	68b9      	ldr	r1, [r7, #8]
 801041e:	6a38      	ldr	r0, [r7, #32]
 8010420:	f001 f904 	bl	801162c <xQueueGenericSendFromISR>
 8010424:	4603      	mov	r3, r0
 8010426:	2b01      	cmp	r3, #1
 8010428:	d003      	beq.n	8010432 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801042a:	f06f 0302 	mvn.w	r3, #2
 801042e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010430:	e029      	b.n	8010486 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8010432:	693b      	ldr	r3, [r7, #16]
 8010434:	2b00      	cmp	r3, #0
 8010436:	d026      	beq.n	8010486 <osMessageQueuePut+0xd2>
 8010438:	4b17      	ldr	r3, [pc, #92]	; (8010498 <osMessageQueuePut+0xe4>)
 801043a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801043e:	601a      	str	r2, [r3, #0]
 8010440:	f3bf 8f4f 	dsb	sy
 8010444:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010448:	e01d      	b.n	8010486 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	2b00      	cmp	r3, #0
 801044e:	d002      	beq.n	8010456 <osMessageQueuePut+0xa2>
 8010450:	68bb      	ldr	r3, [r7, #8]
 8010452:	2b00      	cmp	r3, #0
 8010454:	d103      	bne.n	801045e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8010456:	f06f 0303 	mvn.w	r3, #3
 801045a:	627b      	str	r3, [r7, #36]	; 0x24
 801045c:	e014      	b.n	8010488 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801045e:	2300      	movs	r3, #0
 8010460:	683a      	ldr	r2, [r7, #0]
 8010462:	68b9      	ldr	r1, [r7, #8]
 8010464:	6a38      	ldr	r0, [r7, #32]
 8010466:	f000 ffe7 	bl	8011438 <xQueueGenericSend>
 801046a:	4603      	mov	r3, r0
 801046c:	2b01      	cmp	r3, #1
 801046e:	d00b      	beq.n	8010488 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	2b00      	cmp	r3, #0
 8010474:	d003      	beq.n	801047e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8010476:	f06f 0301 	mvn.w	r3, #1
 801047a:	627b      	str	r3, [r7, #36]	; 0x24
 801047c:	e004      	b.n	8010488 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801047e:	f06f 0302 	mvn.w	r3, #2
 8010482:	627b      	str	r3, [r7, #36]	; 0x24
 8010484:	e000      	b.n	8010488 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010486:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8010488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801048a:	4618      	mov	r0, r3
 801048c:	3728      	adds	r7, #40	; 0x28
 801048e:	46bd      	mov	sp, r7
 8010490:	bd80      	pop	{r7, pc}
 8010492:	bf00      	nop
 8010494:	20001434 	.word	0x20001434
 8010498:	e000ed04 	.word	0xe000ed04

0801049c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801049c:	b580      	push	{r7, lr}
 801049e:	b08a      	sub	sp, #40	; 0x28
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	60f8      	str	r0, [r7, #12]
 80104a4:	60b9      	str	r1, [r7, #8]
 80104a6:	607a      	str	r2, [r7, #4]
 80104a8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80104ae:	2300      	movs	r3, #0
 80104b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80104b2:	f3ef 8305 	mrs	r3, IPSR
 80104b6:	61fb      	str	r3, [r7, #28]
  return(result);
 80104b8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10f      	bne.n	80104de <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104be:	f3ef 8310 	mrs	r3, PRIMASK
 80104c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80104c4:	69bb      	ldr	r3, [r7, #24]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	d105      	bne.n	80104d6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80104ca:	f3ef 8311 	mrs	r3, BASEPRI
 80104ce:	617b      	str	r3, [r7, #20]
  return(result);
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d02c      	beq.n	8010530 <osMessageQueueGet+0x94>
 80104d6:	4b28      	ldr	r3, [pc, #160]	; (8010578 <osMessageQueueGet+0xdc>)
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	2b02      	cmp	r3, #2
 80104dc:	d128      	bne.n	8010530 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80104de:	6a3b      	ldr	r3, [r7, #32]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d005      	beq.n	80104f0 <osMessageQueueGet+0x54>
 80104e4:	68bb      	ldr	r3, [r7, #8]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <osMessageQueueGet+0x54>
 80104ea:	683b      	ldr	r3, [r7, #0]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d003      	beq.n	80104f8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80104f0:	f06f 0303 	mvn.w	r3, #3
 80104f4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80104f6:	e038      	b.n	801056a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80104f8:	2300      	movs	r3, #0
 80104fa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80104fc:	f107 0310 	add.w	r3, r7, #16
 8010500:	461a      	mov	r2, r3
 8010502:	68b9      	ldr	r1, [r7, #8]
 8010504:	6a38      	ldr	r0, [r7, #32]
 8010506:	f001 fb93 	bl	8011c30 <xQueueReceiveFromISR>
 801050a:	4603      	mov	r3, r0
 801050c:	2b01      	cmp	r3, #1
 801050e:	d003      	beq.n	8010518 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8010510:	f06f 0302 	mvn.w	r3, #2
 8010514:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8010516:	e028      	b.n	801056a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8010518:	693b      	ldr	r3, [r7, #16]
 801051a:	2b00      	cmp	r3, #0
 801051c:	d025      	beq.n	801056a <osMessageQueueGet+0xce>
 801051e:	4b17      	ldr	r3, [pc, #92]	; (801057c <osMessageQueueGet+0xe0>)
 8010520:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010524:	601a      	str	r2, [r3, #0]
 8010526:	f3bf 8f4f 	dsb	sy
 801052a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801052e:	e01c      	b.n	801056a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8010530:	6a3b      	ldr	r3, [r7, #32]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d002      	beq.n	801053c <osMessageQueueGet+0xa0>
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d103      	bne.n	8010544 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801053c:	f06f 0303 	mvn.w	r3, #3
 8010540:	627b      	str	r3, [r7, #36]	; 0x24
 8010542:	e013      	b.n	801056c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8010544:	683a      	ldr	r2, [r7, #0]
 8010546:	68b9      	ldr	r1, [r7, #8]
 8010548:	6a38      	ldr	r0, [r7, #32]
 801054a:	f001 f98d 	bl	8011868 <xQueueReceive>
 801054e:	4603      	mov	r3, r0
 8010550:	2b01      	cmp	r3, #1
 8010552:	d00b      	beq.n	801056c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d003      	beq.n	8010562 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801055a:	f06f 0301 	mvn.w	r3, #1
 801055e:	627b      	str	r3, [r7, #36]	; 0x24
 8010560:	e004      	b.n	801056c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8010562:	f06f 0302 	mvn.w	r3, #2
 8010566:	627b      	str	r3, [r7, #36]	; 0x24
 8010568:	e000      	b.n	801056c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801056a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801056c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801056e:	4618      	mov	r0, r3
 8010570:	3728      	adds	r7, #40	; 0x28
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}
 8010576:	bf00      	nop
 8010578:	20001434 	.word	0x20001434
 801057c:	e000ed04 	.word	0xe000ed04

08010580 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8010580:	b480      	push	{r7}
 8010582:	b085      	sub	sp, #20
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	4a07      	ldr	r2, [pc, #28]	; (80105ac <vApplicationGetIdleTaskMemory+0x2c>)
 8010590:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8010592:	68bb      	ldr	r3, [r7, #8]
 8010594:	4a06      	ldr	r2, [pc, #24]	; (80105b0 <vApplicationGetIdleTaskMemory+0x30>)
 8010596:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2280      	movs	r2, #128	; 0x80
 801059c:	601a      	str	r2, [r3, #0]
}
 801059e:	bf00      	nop
 80105a0:	3714      	adds	r7, #20
 80105a2:	46bd      	mov	sp, r7
 80105a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105a8:	4770      	bx	lr
 80105aa:	bf00      	nop
 80105ac:	20001438 	.word	0x20001438
 80105b0:	20001494 	.word	0x20001494

080105b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80105b4:	b480      	push	{r7}
 80105b6:	b085      	sub	sp, #20
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	60b9      	str	r1, [r7, #8]
 80105be:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	4a07      	ldr	r2, [pc, #28]	; (80105e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80105c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80105c6:	68bb      	ldr	r3, [r7, #8]
 80105c8:	4a06      	ldr	r2, [pc, #24]	; (80105e4 <vApplicationGetTimerTaskMemory+0x30>)
 80105ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80105d2:	601a      	str	r2, [r3, #0]
}
 80105d4:	bf00      	nop
 80105d6:	3714      	adds	r7, #20
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr
 80105e0:	20001694 	.word	0x20001694
 80105e4:	200016f0 	.word	0x200016f0

080105e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80105e8:	b480      	push	{r7}
 80105ea:	b085      	sub	sp, #20
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	3b04      	subs	r3, #4
 80105f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010600:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	3b04      	subs	r3, #4
 8010606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010608:	68bb      	ldr	r3, [r7, #8]
 801060a:	f023 0201 	bic.w	r2, r3, #1
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	3b04      	subs	r3, #4
 8010616:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010618:	4a0c      	ldr	r2, [pc, #48]	; (801064c <pxPortInitialiseStack+0x64>)
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	3b14      	subs	r3, #20
 8010622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010624:	687a      	ldr	r2, [r7, #4]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	3b04      	subs	r3, #4
 801062e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	f06f 0202 	mvn.w	r2, #2
 8010636:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	3b20      	subs	r3, #32
 801063c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801063e:	68fb      	ldr	r3, [r7, #12]
}
 8010640:	4618      	mov	r0, r3
 8010642:	3714      	adds	r7, #20
 8010644:	46bd      	mov	sp, r7
 8010646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801064a:	4770      	bx	lr
 801064c:	08010651 	.word	0x08010651

08010650 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010650:	b480      	push	{r7}
 8010652:	b085      	sub	sp, #20
 8010654:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010656:	2300      	movs	r3, #0
 8010658:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801065a:	4b11      	ldr	r3, [pc, #68]	; (80106a0 <prvTaskExitError+0x50>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010662:	d009      	beq.n	8010678 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010668:	f383 8811 	msr	BASEPRI, r3
 801066c:	f3bf 8f6f 	isb	sy
 8010670:	f3bf 8f4f 	dsb	sy
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	e7fe      	b.n	8010676 <prvTaskExitError+0x26>
 8010678:	f04f 0350 	mov.w	r3, #80	; 0x50
 801067c:	f383 8811 	msr	BASEPRI, r3
 8010680:	f3bf 8f6f 	isb	sy
 8010684:	f3bf 8f4f 	dsb	sy
 8010688:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801068a:	bf00      	nop
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	2b00      	cmp	r3, #0
 8010690:	d0fc      	beq.n	801068c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010692:	bf00      	nop
 8010694:	3714      	adds	r7, #20
 8010696:	46bd      	mov	sp, r7
 8010698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801069c:	4770      	bx	lr
 801069e:	bf00      	nop
 80106a0:	20000020 	.word	0x20000020
	...

080106b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80106b0:	4b07      	ldr	r3, [pc, #28]	; (80106d0 <pxCurrentTCBConst2>)
 80106b2:	6819      	ldr	r1, [r3, #0]
 80106b4:	6808      	ldr	r0, [r1, #0]
 80106b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ba:	f380 8809 	msr	PSP, r0
 80106be:	f3bf 8f6f 	isb	sy
 80106c2:	f04f 0000 	mov.w	r0, #0
 80106c6:	f380 8811 	msr	BASEPRI, r0
 80106ca:	4770      	bx	lr
 80106cc:	f3af 8000 	nop.w

080106d0 <pxCurrentTCBConst2>:
 80106d0:	2002da30 	.word	0x2002da30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80106d4:	bf00      	nop
 80106d6:	bf00      	nop

080106d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80106d8:	4808      	ldr	r0, [pc, #32]	; (80106fc <prvPortStartFirstTask+0x24>)
 80106da:	6800      	ldr	r0, [r0, #0]
 80106dc:	6800      	ldr	r0, [r0, #0]
 80106de:	f380 8808 	msr	MSP, r0
 80106e2:	f04f 0000 	mov.w	r0, #0
 80106e6:	f380 8814 	msr	CONTROL, r0
 80106ea:	b662      	cpsie	i
 80106ec:	b661      	cpsie	f
 80106ee:	f3bf 8f4f 	dsb	sy
 80106f2:	f3bf 8f6f 	isb	sy
 80106f6:	df00      	svc	0
 80106f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80106fa:	bf00      	nop
 80106fc:	e000ed08 	.word	0xe000ed08

08010700 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b086      	sub	sp, #24
 8010704:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010706:	4b44      	ldr	r3, [pc, #272]	; (8010818 <xPortStartScheduler+0x118>)
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a44      	ldr	r2, [pc, #272]	; (801081c <xPortStartScheduler+0x11c>)
 801070c:	4293      	cmp	r3, r2
 801070e:	d109      	bne.n	8010724 <xPortStartScheduler+0x24>
 8010710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010714:	f383 8811 	msr	BASEPRI, r3
 8010718:	f3bf 8f6f 	isb	sy
 801071c:	f3bf 8f4f 	dsb	sy
 8010720:	613b      	str	r3, [r7, #16]
 8010722:	e7fe      	b.n	8010722 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010724:	4b3c      	ldr	r3, [pc, #240]	; (8010818 <xPortStartScheduler+0x118>)
 8010726:	681b      	ldr	r3, [r3, #0]
 8010728:	4a3d      	ldr	r2, [pc, #244]	; (8010820 <xPortStartScheduler+0x120>)
 801072a:	4293      	cmp	r3, r2
 801072c:	d109      	bne.n	8010742 <xPortStartScheduler+0x42>
 801072e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010732:	f383 8811 	msr	BASEPRI, r3
 8010736:	f3bf 8f6f 	isb	sy
 801073a:	f3bf 8f4f 	dsb	sy
 801073e:	60fb      	str	r3, [r7, #12]
 8010740:	e7fe      	b.n	8010740 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010742:	4b38      	ldr	r3, [pc, #224]	; (8010824 <xPortStartScheduler+0x124>)
 8010744:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	781b      	ldrb	r3, [r3, #0]
 801074a:	b2db      	uxtb	r3, r3
 801074c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	22ff      	movs	r2, #255	; 0xff
 8010752:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	781b      	ldrb	r3, [r3, #0]
 8010758:	b2db      	uxtb	r3, r3
 801075a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801075c:	78fb      	ldrb	r3, [r7, #3]
 801075e:	b2db      	uxtb	r3, r3
 8010760:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010764:	b2da      	uxtb	r2, r3
 8010766:	4b30      	ldr	r3, [pc, #192]	; (8010828 <xPortStartScheduler+0x128>)
 8010768:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801076a:	4b30      	ldr	r3, [pc, #192]	; (801082c <xPortStartScheduler+0x12c>)
 801076c:	2207      	movs	r2, #7
 801076e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010770:	e009      	b.n	8010786 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8010772:	4b2e      	ldr	r3, [pc, #184]	; (801082c <xPortStartScheduler+0x12c>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	3b01      	subs	r3, #1
 8010778:	4a2c      	ldr	r2, [pc, #176]	; (801082c <xPortStartScheduler+0x12c>)
 801077a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801077c:	78fb      	ldrb	r3, [r7, #3]
 801077e:	b2db      	uxtb	r3, r3
 8010780:	005b      	lsls	r3, r3, #1
 8010782:	b2db      	uxtb	r3, r3
 8010784:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010786:	78fb      	ldrb	r3, [r7, #3]
 8010788:	b2db      	uxtb	r3, r3
 801078a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801078e:	2b80      	cmp	r3, #128	; 0x80
 8010790:	d0ef      	beq.n	8010772 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010792:	4b26      	ldr	r3, [pc, #152]	; (801082c <xPortStartScheduler+0x12c>)
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	f1c3 0307 	rsb	r3, r3, #7
 801079a:	2b04      	cmp	r3, #4
 801079c:	d009      	beq.n	80107b2 <xPortStartScheduler+0xb2>
 801079e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107a2:	f383 8811 	msr	BASEPRI, r3
 80107a6:	f3bf 8f6f 	isb	sy
 80107aa:	f3bf 8f4f 	dsb	sy
 80107ae:	60bb      	str	r3, [r7, #8]
 80107b0:	e7fe      	b.n	80107b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80107b2:	4b1e      	ldr	r3, [pc, #120]	; (801082c <xPortStartScheduler+0x12c>)
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	021b      	lsls	r3, r3, #8
 80107b8:	4a1c      	ldr	r2, [pc, #112]	; (801082c <xPortStartScheduler+0x12c>)
 80107ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80107bc:	4b1b      	ldr	r3, [pc, #108]	; (801082c <xPortStartScheduler+0x12c>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80107c4:	4a19      	ldr	r2, [pc, #100]	; (801082c <xPortStartScheduler+0x12c>)
 80107c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	b2da      	uxtb	r2, r3
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80107d0:	4b17      	ldr	r3, [pc, #92]	; (8010830 <xPortStartScheduler+0x130>)
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	4a16      	ldr	r2, [pc, #88]	; (8010830 <xPortStartScheduler+0x130>)
 80107d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80107da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80107dc:	4b14      	ldr	r3, [pc, #80]	; (8010830 <xPortStartScheduler+0x130>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	4a13      	ldr	r2, [pc, #76]	; (8010830 <xPortStartScheduler+0x130>)
 80107e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80107e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80107e8:	f000 f8d6 	bl	8010998 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80107ec:	4b11      	ldr	r3, [pc, #68]	; (8010834 <xPortStartScheduler+0x134>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80107f2:	f000 f8f5 	bl	80109e0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80107f6:	4b10      	ldr	r3, [pc, #64]	; (8010838 <xPortStartScheduler+0x138>)
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	4a0f      	ldr	r2, [pc, #60]	; (8010838 <xPortStartScheduler+0x138>)
 80107fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010800:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010802:	f7ff ff69 	bl	80106d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010806:	f002 f841 	bl	801288c <vTaskSwitchContext>
	prvTaskExitError();
 801080a:	f7ff ff21 	bl	8010650 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801080e:	2300      	movs	r3, #0
}
 8010810:	4618      	mov	r0, r3
 8010812:	3718      	adds	r7, #24
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	e000ed00 	.word	0xe000ed00
 801081c:	410fc271 	.word	0x410fc271
 8010820:	410fc270 	.word	0x410fc270
 8010824:	e000e400 	.word	0xe000e400
 8010828:	20001af0 	.word	0x20001af0
 801082c:	20001af4 	.word	0x20001af4
 8010830:	e000ed20 	.word	0xe000ed20
 8010834:	20000020 	.word	0x20000020
 8010838:	e000ef34 	.word	0xe000ef34

0801083c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801083c:	b480      	push	{r7}
 801083e:	b083      	sub	sp, #12
 8010840:	af00      	add	r7, sp, #0
 8010842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010846:	f383 8811 	msr	BASEPRI, r3
 801084a:	f3bf 8f6f 	isb	sy
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010854:	4b0e      	ldr	r3, [pc, #56]	; (8010890 <vPortEnterCritical+0x54>)
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3301      	adds	r3, #1
 801085a:	4a0d      	ldr	r2, [pc, #52]	; (8010890 <vPortEnterCritical+0x54>)
 801085c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801085e:	4b0c      	ldr	r3, [pc, #48]	; (8010890 <vPortEnterCritical+0x54>)
 8010860:	681b      	ldr	r3, [r3, #0]
 8010862:	2b01      	cmp	r3, #1
 8010864:	d10e      	bne.n	8010884 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010866:	4b0b      	ldr	r3, [pc, #44]	; (8010894 <vPortEnterCritical+0x58>)
 8010868:	681b      	ldr	r3, [r3, #0]
 801086a:	b2db      	uxtb	r3, r3
 801086c:	2b00      	cmp	r3, #0
 801086e:	d009      	beq.n	8010884 <vPortEnterCritical+0x48>
 8010870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	603b      	str	r3, [r7, #0]
 8010882:	e7fe      	b.n	8010882 <vPortEnterCritical+0x46>
	}
}
 8010884:	bf00      	nop
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr
 8010890:	20000020 	.word	0x20000020
 8010894:	e000ed04 	.word	0xe000ed04

08010898 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010898:	b480      	push	{r7}
 801089a:	b083      	sub	sp, #12
 801089c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801089e:	4b11      	ldr	r3, [pc, #68]	; (80108e4 <vPortExitCritical+0x4c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d109      	bne.n	80108ba <vPortExitCritical+0x22>
 80108a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108aa:	f383 8811 	msr	BASEPRI, r3
 80108ae:	f3bf 8f6f 	isb	sy
 80108b2:	f3bf 8f4f 	dsb	sy
 80108b6:	607b      	str	r3, [r7, #4]
 80108b8:	e7fe      	b.n	80108b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80108ba:	4b0a      	ldr	r3, [pc, #40]	; (80108e4 <vPortExitCritical+0x4c>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	3b01      	subs	r3, #1
 80108c0:	4a08      	ldr	r2, [pc, #32]	; (80108e4 <vPortExitCritical+0x4c>)
 80108c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80108c4:	4b07      	ldr	r3, [pc, #28]	; (80108e4 <vPortExitCritical+0x4c>)
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d104      	bne.n	80108d6 <vPortExitCritical+0x3e>
 80108cc:	2300      	movs	r3, #0
 80108ce:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80108d0:	683b      	ldr	r3, [r7, #0]
 80108d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80108d6:	bf00      	nop
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
 80108e2:	bf00      	nop
 80108e4:	20000020 	.word	0x20000020
	...

080108f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80108f0:	f3ef 8009 	mrs	r0, PSP
 80108f4:	f3bf 8f6f 	isb	sy
 80108f8:	4b15      	ldr	r3, [pc, #84]	; (8010950 <pxCurrentTCBConst>)
 80108fa:	681a      	ldr	r2, [r3, #0]
 80108fc:	f01e 0f10 	tst.w	lr, #16
 8010900:	bf08      	it	eq
 8010902:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010906:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801090a:	6010      	str	r0, [r2, #0]
 801090c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010910:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010914:	f380 8811 	msr	BASEPRI, r0
 8010918:	f3bf 8f4f 	dsb	sy
 801091c:	f3bf 8f6f 	isb	sy
 8010920:	f001 ffb4 	bl	801288c <vTaskSwitchContext>
 8010924:	f04f 0000 	mov.w	r0, #0
 8010928:	f380 8811 	msr	BASEPRI, r0
 801092c:	bc09      	pop	{r0, r3}
 801092e:	6819      	ldr	r1, [r3, #0]
 8010930:	6808      	ldr	r0, [r1, #0]
 8010932:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010936:	f01e 0f10 	tst.w	lr, #16
 801093a:	bf08      	it	eq
 801093c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010940:	f380 8809 	msr	PSP, r0
 8010944:	f3bf 8f6f 	isb	sy
 8010948:	4770      	bx	lr
 801094a:	bf00      	nop
 801094c:	f3af 8000 	nop.w

08010950 <pxCurrentTCBConst>:
 8010950:	2002da30 	.word	0x2002da30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010954:	bf00      	nop
 8010956:	bf00      	nop

08010958 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b082      	sub	sp, #8
 801095c:	af00      	add	r7, sp, #0
	__asm volatile
 801095e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010962:	f383 8811 	msr	BASEPRI, r3
 8010966:	f3bf 8f6f 	isb	sy
 801096a:	f3bf 8f4f 	dsb	sy
 801096e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010970:	f001 fed4 	bl	801271c <xTaskIncrementTick>
 8010974:	4603      	mov	r3, r0
 8010976:	2b00      	cmp	r3, #0
 8010978:	d003      	beq.n	8010982 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801097a:	4b06      	ldr	r3, [pc, #24]	; (8010994 <SysTick_Handler+0x3c>)
 801097c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010980:	601a      	str	r2, [r3, #0]
 8010982:	2300      	movs	r3, #0
 8010984:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010986:	683b      	ldr	r3, [r7, #0]
 8010988:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 801098c:	bf00      	nop
 801098e:	3708      	adds	r7, #8
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	e000ed04 	.word	0xe000ed04

08010998 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010998:	b480      	push	{r7}
 801099a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801099c:	4b0b      	ldr	r3, [pc, #44]	; (80109cc <vPortSetupTimerInterrupt+0x34>)
 801099e:	2200      	movs	r2, #0
 80109a0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80109a2:	4b0b      	ldr	r3, [pc, #44]	; (80109d0 <vPortSetupTimerInterrupt+0x38>)
 80109a4:	2200      	movs	r2, #0
 80109a6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80109a8:	4b0a      	ldr	r3, [pc, #40]	; (80109d4 <vPortSetupTimerInterrupt+0x3c>)
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4a0a      	ldr	r2, [pc, #40]	; (80109d8 <vPortSetupTimerInterrupt+0x40>)
 80109ae:	fba2 2303 	umull	r2, r3, r2, r3
 80109b2:	099b      	lsrs	r3, r3, #6
 80109b4:	4a09      	ldr	r2, [pc, #36]	; (80109dc <vPortSetupTimerInterrupt+0x44>)
 80109b6:	3b01      	subs	r3, #1
 80109b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80109ba:	4b04      	ldr	r3, [pc, #16]	; (80109cc <vPortSetupTimerInterrupt+0x34>)
 80109bc:	2207      	movs	r2, #7
 80109be:	601a      	str	r2, [r3, #0]
}
 80109c0:	bf00      	nop
 80109c2:	46bd      	mov	sp, r7
 80109c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c8:	4770      	bx	lr
 80109ca:	bf00      	nop
 80109cc:	e000e010 	.word	0xe000e010
 80109d0:	e000e018 	.word	0xe000e018
 80109d4:	20000014 	.word	0x20000014
 80109d8:	10624dd3 	.word	0x10624dd3
 80109dc:	e000e014 	.word	0xe000e014

080109e0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80109e0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80109f0 <vPortEnableVFP+0x10>
 80109e4:	6801      	ldr	r1, [r0, #0]
 80109e6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80109ea:	6001      	str	r1, [r0, #0]
 80109ec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80109ee:	bf00      	nop
 80109f0:	e000ed88 	.word	0xe000ed88

080109f4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80109f4:	b480      	push	{r7}
 80109f6:	b085      	sub	sp, #20
 80109f8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80109fa:	f3ef 8305 	mrs	r3, IPSR
 80109fe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	2b0f      	cmp	r3, #15
 8010a04:	d913      	bls.n	8010a2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010a06:	4a16      	ldr	r2, [pc, #88]	; (8010a60 <vPortValidateInterruptPriority+0x6c>)
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	781b      	ldrb	r3, [r3, #0]
 8010a0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010a10:	4b14      	ldr	r3, [pc, #80]	; (8010a64 <vPortValidateInterruptPriority+0x70>)
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	7afa      	ldrb	r2, [r7, #11]
 8010a16:	429a      	cmp	r2, r3
 8010a18:	d209      	bcs.n	8010a2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8010a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a1e:	f383 8811 	msr	BASEPRI, r3
 8010a22:	f3bf 8f6f 	isb	sy
 8010a26:	f3bf 8f4f 	dsb	sy
 8010a2a:	607b      	str	r3, [r7, #4]
 8010a2c:	e7fe      	b.n	8010a2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010a2e:	4b0e      	ldr	r3, [pc, #56]	; (8010a68 <vPortValidateInterruptPriority+0x74>)
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010a36:	4b0d      	ldr	r3, [pc, #52]	; (8010a6c <vPortValidateInterruptPriority+0x78>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d909      	bls.n	8010a52 <vPortValidateInterruptPriority+0x5e>
 8010a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a42:	f383 8811 	msr	BASEPRI, r3
 8010a46:	f3bf 8f6f 	isb	sy
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	603b      	str	r3, [r7, #0]
 8010a50:	e7fe      	b.n	8010a50 <vPortValidateInterruptPriority+0x5c>
	}
 8010a52:	bf00      	nop
 8010a54:	3714      	adds	r7, #20
 8010a56:	46bd      	mov	sp, r7
 8010a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a5c:	4770      	bx	lr
 8010a5e:	bf00      	nop
 8010a60:	e000e3f0 	.word	0xe000e3f0
 8010a64:	20001af0 	.word	0x20001af0
 8010a68:	e000ed0c 	.word	0xe000ed0c
 8010a6c:	20001af4 	.word	0x20001af4

08010a70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010a70:	b580      	push	{r7, lr}
 8010a72:	b08a      	sub	sp, #40	; 0x28
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010a78:	2300      	movs	r3, #0
 8010a7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010a7c:	f001 fd5c 	bl	8012538 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010a80:	4b57      	ldr	r3, [pc, #348]	; (8010be0 <pvPortMalloc+0x170>)
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d101      	bne.n	8010a8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010a88:	f000 f90c 	bl	8010ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010a8c:	4b55      	ldr	r3, [pc, #340]	; (8010be4 <pvPortMalloc+0x174>)
 8010a8e:	681a      	ldr	r2, [r3, #0]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	4013      	ands	r3, r2
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	f040 808c 	bne.w	8010bb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d01c      	beq.n	8010ada <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8010aa0:	2208      	movs	r2, #8
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f003 0307 	and.w	r3, r3, #7
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d013      	beq.n	8010ada <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	f023 0307 	bic.w	r3, r3, #7
 8010ab8:	3308      	adds	r3, #8
 8010aba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	f003 0307 	and.w	r3, r3, #7
 8010ac2:	2b00      	cmp	r3, #0
 8010ac4:	d009      	beq.n	8010ada <pvPortMalloc+0x6a>
 8010ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010aca:	f383 8811 	msr	BASEPRI, r3
 8010ace:	f3bf 8f6f 	isb	sy
 8010ad2:	f3bf 8f4f 	dsb	sy
 8010ad6:	617b      	str	r3, [r7, #20]
 8010ad8:	e7fe      	b.n	8010ad8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d068      	beq.n	8010bb2 <pvPortMalloc+0x142>
 8010ae0:	4b41      	ldr	r3, [pc, #260]	; (8010be8 <pvPortMalloc+0x178>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	687a      	ldr	r2, [r7, #4]
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d863      	bhi.n	8010bb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010aea:	4b40      	ldr	r3, [pc, #256]	; (8010bec <pvPortMalloc+0x17c>)
 8010aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010aee:	4b3f      	ldr	r3, [pc, #252]	; (8010bec <pvPortMalloc+0x17c>)
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010af4:	e004      	b.n	8010b00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8010af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b02:	685b      	ldr	r3, [r3, #4]
 8010b04:	687a      	ldr	r2, [r7, #4]
 8010b06:	429a      	cmp	r2, r3
 8010b08:	d903      	bls.n	8010b12 <pvPortMalloc+0xa2>
 8010b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d1f1      	bne.n	8010af6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010b12:	4b33      	ldr	r3, [pc, #204]	; (8010be0 <pvPortMalloc+0x170>)
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	d04a      	beq.n	8010bb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010b1c:	6a3b      	ldr	r3, [r7, #32]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	2208      	movs	r2, #8
 8010b22:	4413      	add	r3, r2
 8010b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b28:	681a      	ldr	r2, [r3, #0]
 8010b2a:	6a3b      	ldr	r3, [r7, #32]
 8010b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b30:	685a      	ldr	r2, [r3, #4]
 8010b32:	687b      	ldr	r3, [r7, #4]
 8010b34:	1ad2      	subs	r2, r2, r3
 8010b36:	2308      	movs	r3, #8
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d91e      	bls.n	8010b7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	4413      	add	r3, r2
 8010b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b46:	69bb      	ldr	r3, [r7, #24]
 8010b48:	f003 0307 	and.w	r3, r3, #7
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d009      	beq.n	8010b64 <pvPortMalloc+0xf4>
 8010b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b54:	f383 8811 	msr	BASEPRI, r3
 8010b58:	f3bf 8f6f 	isb	sy
 8010b5c:	f3bf 8f4f 	dsb	sy
 8010b60:	613b      	str	r3, [r7, #16]
 8010b62:	e7fe      	b.n	8010b62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	1ad2      	subs	r2, r2, r3
 8010b6c:	69bb      	ldr	r3, [r7, #24]
 8010b6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b72:	687a      	ldr	r2, [r7, #4]
 8010b74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010b76:	69b8      	ldr	r0, [r7, #24]
 8010b78:	f000 f8f8 	bl	8010d6c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010b7c:	4b1a      	ldr	r3, [pc, #104]	; (8010be8 <pvPortMalloc+0x178>)
 8010b7e:	681a      	ldr	r2, [r3, #0]
 8010b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	1ad3      	subs	r3, r2, r3
 8010b86:	4a18      	ldr	r2, [pc, #96]	; (8010be8 <pvPortMalloc+0x178>)
 8010b88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010b8a:	4b17      	ldr	r3, [pc, #92]	; (8010be8 <pvPortMalloc+0x178>)
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	4b18      	ldr	r3, [pc, #96]	; (8010bf0 <pvPortMalloc+0x180>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d203      	bcs.n	8010b9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010b96:	4b14      	ldr	r3, [pc, #80]	; (8010be8 <pvPortMalloc+0x178>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	4a15      	ldr	r2, [pc, #84]	; (8010bf0 <pvPortMalloc+0x180>)
 8010b9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ba0:	685a      	ldr	r2, [r3, #4]
 8010ba2:	4b10      	ldr	r3, [pc, #64]	; (8010be4 <pvPortMalloc+0x174>)
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	431a      	orrs	r2, r3
 8010ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010baa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	2200      	movs	r2, #0
 8010bb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010bb2:	f001 fd07 	bl	80125c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bb6:	69fb      	ldr	r3, [r7, #28]
 8010bb8:	f003 0307 	and.w	r3, r3, #7
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d009      	beq.n	8010bd4 <pvPortMalloc+0x164>
 8010bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc4:	f383 8811 	msr	BASEPRI, r3
 8010bc8:	f3bf 8f6f 	isb	sy
 8010bcc:	f3bf 8f4f 	dsb	sy
 8010bd0:	60fb      	str	r3, [r7, #12]
 8010bd2:	e7fe      	b.n	8010bd2 <pvPortMalloc+0x162>
	return pvReturn;
 8010bd4:	69fb      	ldr	r3, [r7, #28]
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3728      	adds	r7, #40	; 0x28
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	2002da20 	.word	0x2002da20
 8010be4:	2002da2c 	.word	0x2002da2c
 8010be8:	2002da24 	.word	0x2002da24
 8010bec:	2002da18 	.word	0x2002da18
 8010bf0:	2002da28 	.word	0x2002da28

08010bf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b086      	sub	sp, #24
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d046      	beq.n	8010c94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010c06:	2308      	movs	r3, #8
 8010c08:	425b      	negs	r3, r3
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	4413      	add	r3, r2
 8010c0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010c10:	697b      	ldr	r3, [r7, #20]
 8010c12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010c14:	693b      	ldr	r3, [r7, #16]
 8010c16:	685a      	ldr	r2, [r3, #4]
 8010c18:	4b20      	ldr	r3, [pc, #128]	; (8010c9c <vPortFree+0xa8>)
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d109      	bne.n	8010c36 <vPortFree+0x42>
 8010c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c26:	f383 8811 	msr	BASEPRI, r3
 8010c2a:	f3bf 8f6f 	isb	sy
 8010c2e:	f3bf 8f4f 	dsb	sy
 8010c32:	60fb      	str	r3, [r7, #12]
 8010c34:	e7fe      	b.n	8010c34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010c36:	693b      	ldr	r3, [r7, #16]
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d009      	beq.n	8010c52 <vPortFree+0x5e>
 8010c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c42:	f383 8811 	msr	BASEPRI, r3
 8010c46:	f3bf 8f6f 	isb	sy
 8010c4a:	f3bf 8f4f 	dsb	sy
 8010c4e:	60bb      	str	r3, [r7, #8]
 8010c50:	e7fe      	b.n	8010c50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	685a      	ldr	r2, [r3, #4]
 8010c56:	4b11      	ldr	r3, [pc, #68]	; (8010c9c <vPortFree+0xa8>)
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	4013      	ands	r3, r2
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d019      	beq.n	8010c94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010c60:	693b      	ldr	r3, [r7, #16]
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d115      	bne.n	8010c94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010c68:	693b      	ldr	r3, [r7, #16]
 8010c6a:	685a      	ldr	r2, [r3, #4]
 8010c6c:	4b0b      	ldr	r3, [pc, #44]	; (8010c9c <vPortFree+0xa8>)
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	43db      	mvns	r3, r3
 8010c72:	401a      	ands	r2, r3
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010c78:	f001 fc5e 	bl	8012538 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010c7c:	693b      	ldr	r3, [r7, #16]
 8010c7e:	685a      	ldr	r2, [r3, #4]
 8010c80:	4b07      	ldr	r3, [pc, #28]	; (8010ca0 <vPortFree+0xac>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	4413      	add	r3, r2
 8010c86:	4a06      	ldr	r2, [pc, #24]	; (8010ca0 <vPortFree+0xac>)
 8010c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010c8a:	6938      	ldr	r0, [r7, #16]
 8010c8c:	f000 f86e 	bl	8010d6c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010c90:	f001 fc98 	bl	80125c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010c94:	bf00      	nop
 8010c96:	3718      	adds	r7, #24
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}
 8010c9c:	2002da2c 	.word	0x2002da2c
 8010ca0:	2002da24 	.word	0x2002da24

08010ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010ca4:	b480      	push	{r7}
 8010ca6:	b085      	sub	sp, #20
 8010ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010caa:	4b29      	ldr	r3, [pc, #164]	; (8010d50 <prvHeapInit+0xac>)
 8010cac:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010cae:	4b29      	ldr	r3, [pc, #164]	; (8010d54 <prvHeapInit+0xb0>)
 8010cb0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f003 0307 	and.w	r3, r3, #7
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d00c      	beq.n	8010cd6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010cbc:	68fb      	ldr	r3, [r7, #12]
 8010cbe:	3307      	adds	r3, #7
 8010cc0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	f023 0307 	bic.w	r3, r3, #7
 8010cc8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010cca:	68ba      	ldr	r2, [r7, #8]
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	1ad3      	subs	r3, r2, r3
 8010cd0:	4a20      	ldr	r2, [pc, #128]	; (8010d54 <prvHeapInit+0xb0>)
 8010cd2:	4413      	add	r3, r2
 8010cd4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010cd6:	68fb      	ldr	r3, [r7, #12]
 8010cd8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010cda:	4a1f      	ldr	r2, [pc, #124]	; (8010d58 <prvHeapInit+0xb4>)
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010ce0:	4b1d      	ldr	r3, [pc, #116]	; (8010d58 <prvHeapInit+0xb4>)
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	68ba      	ldr	r2, [r7, #8]
 8010cea:	4413      	add	r3, r2
 8010cec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010cee:	2208      	movs	r2, #8
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	1a9b      	subs	r3, r3, r2
 8010cf4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	f023 0307 	bic.w	r3, r3, #7
 8010cfc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010cfe:	68fb      	ldr	r3, [r7, #12]
 8010d00:	4a16      	ldr	r2, [pc, #88]	; (8010d5c <prvHeapInit+0xb8>)
 8010d02:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010d04:	4b15      	ldr	r3, [pc, #84]	; (8010d5c <prvHeapInit+0xb8>)
 8010d06:	681b      	ldr	r3, [r3, #0]
 8010d08:	2200      	movs	r2, #0
 8010d0a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d0c:	4b13      	ldr	r3, [pc, #76]	; (8010d5c <prvHeapInit+0xb8>)
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	2200      	movs	r2, #0
 8010d12:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010d18:	683b      	ldr	r3, [r7, #0]
 8010d1a:	68fa      	ldr	r2, [r7, #12]
 8010d1c:	1ad2      	subs	r2, r2, r3
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010d22:	4b0e      	ldr	r3, [pc, #56]	; (8010d5c <prvHeapInit+0xb8>)
 8010d24:	681a      	ldr	r2, [r3, #0]
 8010d26:	683b      	ldr	r3, [r7, #0]
 8010d28:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	685b      	ldr	r3, [r3, #4]
 8010d2e:	4a0c      	ldr	r2, [pc, #48]	; (8010d60 <prvHeapInit+0xbc>)
 8010d30:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d32:	683b      	ldr	r3, [r7, #0]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	4a0b      	ldr	r2, [pc, #44]	; (8010d64 <prvHeapInit+0xc0>)
 8010d38:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010d3a:	4b0b      	ldr	r3, [pc, #44]	; (8010d68 <prvHeapInit+0xc4>)
 8010d3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010d40:	601a      	str	r2, [r3, #0]
}
 8010d42:	bf00      	nop
 8010d44:	3714      	adds	r7, #20
 8010d46:	46bd      	mov	sp, r7
 8010d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d4c:	4770      	bx	lr
 8010d4e:	bf00      	nop
 8010d50:	0002bf20 	.word	0x0002bf20
 8010d54:	20001af8 	.word	0x20001af8
 8010d58:	2002da18 	.word	0x2002da18
 8010d5c:	2002da20 	.word	0x2002da20
 8010d60:	2002da28 	.word	0x2002da28
 8010d64:	2002da24 	.word	0x2002da24
 8010d68:	2002da2c 	.word	0x2002da2c

08010d6c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010d6c:	b480      	push	{r7}
 8010d6e:	b085      	sub	sp, #20
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010d74:	4b28      	ldr	r3, [pc, #160]	; (8010e18 <prvInsertBlockIntoFreeList+0xac>)
 8010d76:	60fb      	str	r3, [r7, #12]
 8010d78:	e002      	b.n	8010d80 <prvInsertBlockIntoFreeList+0x14>
 8010d7a:	68fb      	ldr	r3, [r7, #12]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	60fb      	str	r3, [r7, #12]
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d8f7      	bhi.n	8010d7a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	685b      	ldr	r3, [r3, #4]
 8010d92:	68ba      	ldr	r2, [r7, #8]
 8010d94:	4413      	add	r3, r2
 8010d96:	687a      	ldr	r2, [r7, #4]
 8010d98:	429a      	cmp	r2, r3
 8010d9a:	d108      	bne.n	8010dae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	685a      	ldr	r2, [r3, #4]
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	685b      	ldr	r3, [r3, #4]
 8010da4:	441a      	add	r2, r3
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010daa:	68fb      	ldr	r3, [r7, #12]
 8010dac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	685b      	ldr	r3, [r3, #4]
 8010db6:	68ba      	ldr	r2, [r7, #8]
 8010db8:	441a      	add	r2, r3
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d118      	bne.n	8010df4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	681a      	ldr	r2, [r3, #0]
 8010dc6:	4b15      	ldr	r3, [pc, #84]	; (8010e1c <prvInsertBlockIntoFreeList+0xb0>)
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	429a      	cmp	r2, r3
 8010dcc:	d00d      	beq.n	8010dea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	685a      	ldr	r2, [r3, #4]
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	681b      	ldr	r3, [r3, #0]
 8010dd6:	685b      	ldr	r3, [r3, #4]
 8010dd8:	441a      	add	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	601a      	str	r2, [r3, #0]
 8010de8:	e008      	b.n	8010dfc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010dea:	4b0c      	ldr	r3, [pc, #48]	; (8010e1c <prvInsertBlockIntoFreeList+0xb0>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	601a      	str	r2, [r3, #0]
 8010df2:	e003      	b.n	8010dfc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010df4:	68fb      	ldr	r3, [r7, #12]
 8010df6:	681a      	ldr	r2, [r3, #0]
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d002      	beq.n	8010e0a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e04:	68fb      	ldr	r3, [r7, #12]
 8010e06:	687a      	ldr	r2, [r7, #4]
 8010e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e0a:	bf00      	nop
 8010e0c:	3714      	adds	r7, #20
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e14:	4770      	bx	lr
 8010e16:	bf00      	nop
 8010e18:	2002da18 	.word	0x2002da18
 8010e1c:	2002da20 	.word	0x2002da20

08010e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010e20:	b480      	push	{r7}
 8010e22:	b083      	sub	sp, #12
 8010e24:	af00      	add	r7, sp, #0
 8010e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	f103 0208 	add.w	r2, r3, #8
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f04f 32ff 	mov.w	r2, #4294967295
 8010e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f103 0208 	add.w	r2, r3, #8
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f103 0208 	add.w	r2, r3, #8
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2200      	movs	r2, #0
 8010e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010e54:	bf00      	nop
 8010e56:	370c      	adds	r7, #12
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e5e:	4770      	bx	lr

08010e60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010e60:	b480      	push	{r7}
 8010e62:	b083      	sub	sp, #12
 8010e64:	af00      	add	r7, sp, #0
 8010e66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	2200      	movs	r2, #0
 8010e6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010e6e:	bf00      	nop
 8010e70:	370c      	adds	r7, #12
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr

08010e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010e7a:	b480      	push	{r7}
 8010e7c:	b085      	sub	sp, #20
 8010e7e:	af00      	add	r7, sp, #0
 8010e80:	6078      	str	r0, [r7, #4]
 8010e82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	685b      	ldr	r3, [r3, #4]
 8010e88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	689a      	ldr	r2, [r3, #8]
 8010e94:	683b      	ldr	r3, [r7, #0]
 8010e96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	689b      	ldr	r3, [r3, #8]
 8010e9c:	683a      	ldr	r2, [r7, #0]
 8010e9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	683a      	ldr	r2, [r7, #0]
 8010ea4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010ea6:	683b      	ldr	r3, [r7, #0]
 8010ea8:	687a      	ldr	r2, [r7, #4]
 8010eaa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	1c5a      	adds	r2, r3, #1
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	601a      	str	r2, [r3, #0]
}
 8010eb6:	bf00      	nop
 8010eb8:	3714      	adds	r7, #20
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec0:	4770      	bx	lr

08010ec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010ec2:	b480      	push	{r7}
 8010ec4:	b085      	sub	sp, #20
 8010ec6:	af00      	add	r7, sp, #0
 8010ec8:	6078      	str	r0, [r7, #4]
 8010eca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010ed2:	68bb      	ldr	r3, [r7, #8]
 8010ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ed8:	d103      	bne.n	8010ee2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	691b      	ldr	r3, [r3, #16]
 8010ede:	60fb      	str	r3, [r7, #12]
 8010ee0:	e00c      	b.n	8010efc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	3308      	adds	r3, #8
 8010ee6:	60fb      	str	r3, [r7, #12]
 8010ee8:	e002      	b.n	8010ef0 <vListInsert+0x2e>
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	685b      	ldr	r3, [r3, #4]
 8010eee:	60fb      	str	r3, [r7, #12]
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	68ba      	ldr	r2, [r7, #8]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	d2f6      	bcs.n	8010eea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010efc:	68fb      	ldr	r3, [r7, #12]
 8010efe:	685a      	ldr	r2, [r3, #4]
 8010f00:	683b      	ldr	r3, [r7, #0]
 8010f02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010f04:	683b      	ldr	r3, [r7, #0]
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	683a      	ldr	r2, [r7, #0]
 8010f0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	68fa      	ldr	r2, [r7, #12]
 8010f10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	683a      	ldr	r2, [r7, #0]
 8010f16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010f18:	683b      	ldr	r3, [r7, #0]
 8010f1a:	687a      	ldr	r2, [r7, #4]
 8010f1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	1c5a      	adds	r2, r3, #1
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	601a      	str	r2, [r3, #0]
}
 8010f28:	bf00      	nop
 8010f2a:	3714      	adds	r7, #20
 8010f2c:	46bd      	mov	sp, r7
 8010f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f32:	4770      	bx	lr

08010f34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010f34:	b480      	push	{r7}
 8010f36:	b085      	sub	sp, #20
 8010f38:	af00      	add	r7, sp, #0
 8010f3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	691b      	ldr	r3, [r3, #16]
 8010f40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	685b      	ldr	r3, [r3, #4]
 8010f46:	687a      	ldr	r2, [r7, #4]
 8010f48:	6892      	ldr	r2, [r2, #8]
 8010f4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	689b      	ldr	r3, [r3, #8]
 8010f50:	687a      	ldr	r2, [r7, #4]
 8010f52:	6852      	ldr	r2, [r2, #4]
 8010f54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	687a      	ldr	r2, [r7, #4]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d103      	bne.n	8010f68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	689a      	ldr	r2, [r3, #8]
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	1e5a      	subs	r2, r3, #1
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	681b      	ldr	r3, [r3, #0]
}
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	3714      	adds	r7, #20
 8010f80:	46bd      	mov	sp, r7
 8010f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f86:	4770      	bx	lr

08010f88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b084      	sub	sp, #16
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d109      	bne.n	8010fb0 <xQueueGenericReset+0x28>
 8010f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fa0:	f383 8811 	msr	BASEPRI, r3
 8010fa4:	f3bf 8f6f 	isb	sy
 8010fa8:	f3bf 8f4f 	dsb	sy
 8010fac:	60bb      	str	r3, [r7, #8]
 8010fae:	e7fe      	b.n	8010fae <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8010fb0:	f7ff fc44 	bl	801083c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fbc:	68f9      	ldr	r1, [r7, #12]
 8010fbe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010fc0:	fb01 f303 	mul.w	r3, r1, r3
 8010fc4:	441a      	add	r2, r3
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	2200      	movs	r2, #0
 8010fce:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	681a      	ldr	r2, [r3, #0]
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	681a      	ldr	r2, [r3, #0]
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fe0:	3b01      	subs	r3, #1
 8010fe2:	68f9      	ldr	r1, [r7, #12]
 8010fe4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010fe6:	fb01 f303 	mul.w	r3, r1, r3
 8010fea:	441a      	add	r2, r3
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	22ff      	movs	r2, #255	; 0xff
 8010ff4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	22ff      	movs	r2, #255	; 0xff
 8010ffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	2b00      	cmp	r3, #0
 8011004:	d114      	bne.n	8011030 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	691b      	ldr	r3, [r3, #16]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d01a      	beq.n	8011044 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801100e:	68fb      	ldr	r3, [r7, #12]
 8011010:	3310      	adds	r3, #16
 8011012:	4618      	mov	r0, r3
 8011014:	f001 fce4 	bl	80129e0 <xTaskRemoveFromEventList>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d012      	beq.n	8011044 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801101e:	4b0d      	ldr	r3, [pc, #52]	; (8011054 <xQueueGenericReset+0xcc>)
 8011020:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011024:	601a      	str	r2, [r3, #0]
 8011026:	f3bf 8f4f 	dsb	sy
 801102a:	f3bf 8f6f 	isb	sy
 801102e:	e009      	b.n	8011044 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	3310      	adds	r3, #16
 8011034:	4618      	mov	r0, r3
 8011036:	f7ff fef3 	bl	8010e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	3324      	adds	r3, #36	; 0x24
 801103e:	4618      	mov	r0, r3
 8011040:	f7ff feee 	bl	8010e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011044:	f7ff fc28 	bl	8010898 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011048:	2301      	movs	r3, #1
}
 801104a:	4618      	mov	r0, r3
 801104c:	3710      	adds	r7, #16
 801104e:	46bd      	mov	sp, r7
 8011050:	bd80      	pop	{r7, pc}
 8011052:	bf00      	nop
 8011054:	e000ed04 	.word	0xe000ed04

08011058 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08e      	sub	sp, #56	; 0x38
 801105c:	af02      	add	r7, sp, #8
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	607a      	str	r2, [r7, #4]
 8011064:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d109      	bne.n	8011080 <xQueueGenericCreateStatic+0x28>
 801106c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011070:	f383 8811 	msr	BASEPRI, r3
 8011074:	f3bf 8f6f 	isb	sy
 8011078:	f3bf 8f4f 	dsb	sy
 801107c:	62bb      	str	r3, [r7, #40]	; 0x28
 801107e:	e7fe      	b.n	801107e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011080:	683b      	ldr	r3, [r7, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d109      	bne.n	801109a <xQueueGenericCreateStatic+0x42>
 8011086:	f04f 0350 	mov.w	r3, #80	; 0x50
 801108a:	f383 8811 	msr	BASEPRI, r3
 801108e:	f3bf 8f6f 	isb	sy
 8011092:	f3bf 8f4f 	dsb	sy
 8011096:	627b      	str	r3, [r7, #36]	; 0x24
 8011098:	e7fe      	b.n	8011098 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d002      	beq.n	80110a6 <xQueueGenericCreateStatic+0x4e>
 80110a0:	68bb      	ldr	r3, [r7, #8]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d001      	beq.n	80110aa <xQueueGenericCreateStatic+0x52>
 80110a6:	2301      	movs	r3, #1
 80110a8:	e000      	b.n	80110ac <xQueueGenericCreateStatic+0x54>
 80110aa:	2300      	movs	r3, #0
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d109      	bne.n	80110c4 <xQueueGenericCreateStatic+0x6c>
 80110b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b4:	f383 8811 	msr	BASEPRI, r3
 80110b8:	f3bf 8f6f 	isb	sy
 80110bc:	f3bf 8f4f 	dsb	sy
 80110c0:	623b      	str	r3, [r7, #32]
 80110c2:	e7fe      	b.n	80110c2 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d102      	bne.n	80110d0 <xQueueGenericCreateStatic+0x78>
 80110ca:	68bb      	ldr	r3, [r7, #8]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d101      	bne.n	80110d4 <xQueueGenericCreateStatic+0x7c>
 80110d0:	2301      	movs	r3, #1
 80110d2:	e000      	b.n	80110d6 <xQueueGenericCreateStatic+0x7e>
 80110d4:	2300      	movs	r3, #0
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d109      	bne.n	80110ee <xQueueGenericCreateStatic+0x96>
 80110da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110de:	f383 8811 	msr	BASEPRI, r3
 80110e2:	f3bf 8f6f 	isb	sy
 80110e6:	f3bf 8f4f 	dsb	sy
 80110ea:	61fb      	str	r3, [r7, #28]
 80110ec:	e7fe      	b.n	80110ec <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80110ee:	2350      	movs	r3, #80	; 0x50
 80110f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	2b50      	cmp	r3, #80	; 0x50
 80110f6:	d009      	beq.n	801110c <xQueueGenericCreateStatic+0xb4>
 80110f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110fc:	f383 8811 	msr	BASEPRI, r3
 8011100:	f3bf 8f6f 	isb	sy
 8011104:	f3bf 8f4f 	dsb	sy
 8011108:	61bb      	str	r3, [r7, #24]
 801110a:	e7fe      	b.n	801110a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801110c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	2b00      	cmp	r3, #0
 8011116:	d00d      	beq.n	8011134 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801111a:	2201      	movs	r2, #1
 801111c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011120:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	4613      	mov	r3, r2
 801112a:	687a      	ldr	r2, [r7, #4]
 801112c:	68b9      	ldr	r1, [r7, #8]
 801112e:	68f8      	ldr	r0, [r7, #12]
 8011130:	f000 f844 	bl	80111bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011136:	4618      	mov	r0, r3
 8011138:	3730      	adds	r7, #48	; 0x30
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801113e:	b580      	push	{r7, lr}
 8011140:	b08a      	sub	sp, #40	; 0x28
 8011142:	af02      	add	r7, sp, #8
 8011144:	60f8      	str	r0, [r7, #12]
 8011146:	60b9      	str	r1, [r7, #8]
 8011148:	4613      	mov	r3, r2
 801114a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d109      	bne.n	8011166 <xQueueGenericCreate+0x28>
 8011152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011156:	f383 8811 	msr	BASEPRI, r3
 801115a:	f3bf 8f6f 	isb	sy
 801115e:	f3bf 8f4f 	dsb	sy
 8011162:	613b      	str	r3, [r7, #16]
 8011164:	e7fe      	b.n	8011164 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	2b00      	cmp	r3, #0
 801116a:	d102      	bne.n	8011172 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801116c:	2300      	movs	r3, #0
 801116e:	61fb      	str	r3, [r7, #28]
 8011170:	e004      	b.n	801117c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	68ba      	ldr	r2, [r7, #8]
 8011176:	fb02 f303 	mul.w	r3, r2, r3
 801117a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801117c:	69fb      	ldr	r3, [r7, #28]
 801117e:	3350      	adds	r3, #80	; 0x50
 8011180:	4618      	mov	r0, r3
 8011182:	f7ff fc75 	bl	8010a70 <pvPortMalloc>
 8011186:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011188:	69bb      	ldr	r3, [r7, #24]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d011      	beq.n	80111b2 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801118e:	69bb      	ldr	r3, [r7, #24]
 8011190:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	3350      	adds	r3, #80	; 0x50
 8011196:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011198:	69bb      	ldr	r3, [r7, #24]
 801119a:	2200      	movs	r2, #0
 801119c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80111a0:	79fa      	ldrb	r2, [r7, #7]
 80111a2:	69bb      	ldr	r3, [r7, #24]
 80111a4:	9300      	str	r3, [sp, #0]
 80111a6:	4613      	mov	r3, r2
 80111a8:	697a      	ldr	r2, [r7, #20]
 80111aa:	68b9      	ldr	r1, [r7, #8]
 80111ac:	68f8      	ldr	r0, [r7, #12]
 80111ae:	f000 f805 	bl	80111bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80111b2:	69bb      	ldr	r3, [r7, #24]
	}
 80111b4:	4618      	mov	r0, r3
 80111b6:	3720      	adds	r7, #32
 80111b8:	46bd      	mov	sp, r7
 80111ba:	bd80      	pop	{r7, pc}

080111bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	60f8      	str	r0, [r7, #12]
 80111c4:	60b9      	str	r1, [r7, #8]
 80111c6:	607a      	str	r2, [r7, #4]
 80111c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80111ca:	68bb      	ldr	r3, [r7, #8]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d103      	bne.n	80111d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80111d0:	69bb      	ldr	r3, [r7, #24]
 80111d2:	69ba      	ldr	r2, [r7, #24]
 80111d4:	601a      	str	r2, [r3, #0]
 80111d6:	e002      	b.n	80111de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80111d8:	69bb      	ldr	r3, [r7, #24]
 80111da:	687a      	ldr	r2, [r7, #4]
 80111dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	68fa      	ldr	r2, [r7, #12]
 80111e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80111e4:	69bb      	ldr	r3, [r7, #24]
 80111e6:	68ba      	ldr	r2, [r7, #8]
 80111e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80111ea:	2101      	movs	r1, #1
 80111ec:	69b8      	ldr	r0, [r7, #24]
 80111ee:	f7ff fecb 	bl	8010f88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	78fa      	ldrb	r2, [r7, #3]
 80111f6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80111fa:	bf00      	nop
 80111fc:	3710      	adds	r7, #16
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011202:	b580      	push	{r7, lr}
 8011204:	b082      	sub	sp, #8
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00e      	beq.n	801122e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	2200      	movs	r2, #0
 8011214:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2200      	movs	r2, #0
 8011220:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011222:	2300      	movs	r3, #0
 8011224:	2200      	movs	r2, #0
 8011226:	2100      	movs	r1, #0
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 f905 	bl	8011438 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801122e:	bf00      	nop
 8011230:	3708      	adds	r7, #8
 8011232:	46bd      	mov	sp, r7
 8011234:	bd80      	pop	{r7, pc}

08011236 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011236:	b580      	push	{r7, lr}
 8011238:	b086      	sub	sp, #24
 801123a:	af00      	add	r7, sp, #0
 801123c:	4603      	mov	r3, r0
 801123e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011240:	2301      	movs	r3, #1
 8011242:	617b      	str	r3, [r7, #20]
 8011244:	2300      	movs	r3, #0
 8011246:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011248:	79fb      	ldrb	r3, [r7, #7]
 801124a:	461a      	mov	r2, r3
 801124c:	6939      	ldr	r1, [r7, #16]
 801124e:	6978      	ldr	r0, [r7, #20]
 8011250:	f7ff ff75 	bl	801113e <xQueueGenericCreate>
 8011254:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011256:	68f8      	ldr	r0, [r7, #12]
 8011258:	f7ff ffd3 	bl	8011202 <prvInitialiseMutex>

		return xNewQueue;
 801125c:	68fb      	ldr	r3, [r7, #12]
	}
 801125e:	4618      	mov	r0, r3
 8011260:	3718      	adds	r7, #24
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}

08011266 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011266:	b580      	push	{r7, lr}
 8011268:	b088      	sub	sp, #32
 801126a:	af02      	add	r7, sp, #8
 801126c:	4603      	mov	r3, r0
 801126e:	6039      	str	r1, [r7, #0]
 8011270:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011272:	2301      	movs	r3, #1
 8011274:	617b      	str	r3, [r7, #20]
 8011276:	2300      	movs	r3, #0
 8011278:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801127a:	79fb      	ldrb	r3, [r7, #7]
 801127c:	9300      	str	r3, [sp, #0]
 801127e:	683b      	ldr	r3, [r7, #0]
 8011280:	2200      	movs	r2, #0
 8011282:	6939      	ldr	r1, [r7, #16]
 8011284:	6978      	ldr	r0, [r7, #20]
 8011286:	f7ff fee7 	bl	8011058 <xQueueGenericCreateStatic>
 801128a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801128c:	68f8      	ldr	r0, [r7, #12]
 801128e:	f7ff ffb8 	bl	8011202 <prvInitialiseMutex>

		return xNewQueue;
 8011292:	68fb      	ldr	r3, [r7, #12]
	}
 8011294:	4618      	mov	r0, r3
 8011296:	3718      	adds	r7, #24
 8011298:	46bd      	mov	sp, r7
 801129a:	bd80      	pop	{r7, pc}

0801129c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 801129c:	b590      	push	{r4, r7, lr}
 801129e:	b087      	sub	sp, #28
 80112a0:	af00      	add	r7, sp, #0
 80112a2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80112a8:	693b      	ldr	r3, [r7, #16]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d109      	bne.n	80112c2 <xQueueGiveMutexRecursive+0x26>
 80112ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112b2:	f383 8811 	msr	BASEPRI, r3
 80112b6:	f3bf 8f6f 	isb	sy
 80112ba:	f3bf 8f4f 	dsb	sy
 80112be:	60fb      	str	r3, [r7, #12]
 80112c0:	e7fe      	b.n	80112c0 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80112c2:	693b      	ldr	r3, [r7, #16]
 80112c4:	689c      	ldr	r4, [r3, #8]
 80112c6:	f001 fd69 	bl	8012d9c <xTaskGetCurrentTaskHandle>
 80112ca:	4603      	mov	r3, r0
 80112cc:	429c      	cmp	r4, r3
 80112ce:	d111      	bne.n	80112f4 <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80112d0:	693b      	ldr	r3, [r7, #16]
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	1e5a      	subs	r2, r3, #1
 80112d6:	693b      	ldr	r3, [r7, #16]
 80112d8:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80112da:	693b      	ldr	r3, [r7, #16]
 80112dc:	68db      	ldr	r3, [r3, #12]
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d105      	bne.n	80112ee <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80112e2:	2300      	movs	r3, #0
 80112e4:	2200      	movs	r2, #0
 80112e6:	2100      	movs	r1, #0
 80112e8:	6938      	ldr	r0, [r7, #16]
 80112ea:	f000 f8a5 	bl	8011438 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80112ee:	2301      	movs	r3, #1
 80112f0:	617b      	str	r3, [r7, #20]
 80112f2:	e001      	b.n	80112f8 <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80112f4:	2300      	movs	r3, #0
 80112f6:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80112f8:	697b      	ldr	r3, [r7, #20]
	}
 80112fa:	4618      	mov	r0, r3
 80112fc:	371c      	adds	r7, #28
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd90      	pop	{r4, r7, pc}

08011302 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8011302:	b590      	push	{r4, r7, lr}
 8011304:	b087      	sub	sp, #28
 8011306:	af00      	add	r7, sp, #0
 8011308:	6078      	str	r0, [r7, #4]
 801130a:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d109      	bne.n	801132a <xQueueTakeMutexRecursive+0x28>
 8011316:	f04f 0350 	mov.w	r3, #80	; 0x50
 801131a:	f383 8811 	msr	BASEPRI, r3
 801131e:	f3bf 8f6f 	isb	sy
 8011322:	f3bf 8f4f 	dsb	sy
 8011326:	60fb      	str	r3, [r7, #12]
 8011328:	e7fe      	b.n	8011328 <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 801132a:	693b      	ldr	r3, [r7, #16]
 801132c:	689c      	ldr	r4, [r3, #8]
 801132e:	f001 fd35 	bl	8012d9c <xTaskGetCurrentTaskHandle>
 8011332:	4603      	mov	r3, r0
 8011334:	429c      	cmp	r4, r3
 8011336:	d107      	bne.n	8011348 <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	68db      	ldr	r3, [r3, #12]
 801133c:	1c5a      	adds	r2, r3, #1
 801133e:	693b      	ldr	r3, [r7, #16]
 8011340:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8011342:	2301      	movs	r3, #1
 8011344:	617b      	str	r3, [r7, #20]
 8011346:	e00c      	b.n	8011362 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8011348:	6839      	ldr	r1, [r7, #0]
 801134a:	6938      	ldr	r0, [r7, #16]
 801134c:	f000 fb68 	bl	8011a20 <xQueueSemaphoreTake>
 8011350:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	2b00      	cmp	r3, #0
 8011356:	d004      	beq.n	8011362 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	1c5a      	adds	r2, r3, #1
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8011362:	697b      	ldr	r3, [r7, #20]
	}
 8011364:	4618      	mov	r0, r3
 8011366:	371c      	adds	r7, #28
 8011368:	46bd      	mov	sp, r7
 801136a:	bd90      	pop	{r4, r7, pc}

0801136c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801136c:	b580      	push	{r7, lr}
 801136e:	b08a      	sub	sp, #40	; 0x28
 8011370:	af02      	add	r7, sp, #8
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d109      	bne.n	8011392 <xQueueCreateCountingSemaphoreStatic+0x26>
 801137e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011382:	f383 8811 	msr	BASEPRI, r3
 8011386:	f3bf 8f6f 	isb	sy
 801138a:	f3bf 8f4f 	dsb	sy
 801138e:	61bb      	str	r3, [r7, #24]
 8011390:	e7fe      	b.n	8011390 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011392:	68ba      	ldr	r2, [r7, #8]
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	429a      	cmp	r2, r3
 8011398:	d909      	bls.n	80113ae <xQueueCreateCountingSemaphoreStatic+0x42>
 801139a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139e:	f383 8811 	msr	BASEPRI, r3
 80113a2:	f3bf 8f6f 	isb	sy
 80113a6:	f3bf 8f4f 	dsb	sy
 80113aa:	617b      	str	r3, [r7, #20]
 80113ac:	e7fe      	b.n	80113ac <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80113ae:	2302      	movs	r3, #2
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	2200      	movs	r2, #0
 80113b6:	2100      	movs	r1, #0
 80113b8:	68f8      	ldr	r0, [r7, #12]
 80113ba:	f7ff fe4d 	bl	8011058 <xQueueGenericCreateStatic>
 80113be:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80113c0:	69fb      	ldr	r3, [r7, #28]
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d002      	beq.n	80113cc <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80113c6:	69fb      	ldr	r3, [r7, #28]
 80113c8:	68ba      	ldr	r2, [r7, #8]
 80113ca:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80113cc:	69fb      	ldr	r3, [r7, #28]
	}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3720      	adds	r7, #32
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}

080113d6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80113d6:	b580      	push	{r7, lr}
 80113d8:	b086      	sub	sp, #24
 80113da:	af00      	add	r7, sp, #0
 80113dc:	6078      	str	r0, [r7, #4]
 80113de:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d109      	bne.n	80113fa <xQueueCreateCountingSemaphore+0x24>
 80113e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113ea:	f383 8811 	msr	BASEPRI, r3
 80113ee:	f3bf 8f6f 	isb	sy
 80113f2:	f3bf 8f4f 	dsb	sy
 80113f6:	613b      	str	r3, [r7, #16]
 80113f8:	e7fe      	b.n	80113f8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80113fa:	683a      	ldr	r2, [r7, #0]
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	429a      	cmp	r2, r3
 8011400:	d909      	bls.n	8011416 <xQueueCreateCountingSemaphore+0x40>
 8011402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011406:	f383 8811 	msr	BASEPRI, r3
 801140a:	f3bf 8f6f 	isb	sy
 801140e:	f3bf 8f4f 	dsb	sy
 8011412:	60fb      	str	r3, [r7, #12]
 8011414:	e7fe      	b.n	8011414 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011416:	2202      	movs	r2, #2
 8011418:	2100      	movs	r1, #0
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f7ff fe8f 	bl	801113e <xQueueGenericCreate>
 8011420:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011422:	697b      	ldr	r3, [r7, #20]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011428:	697b      	ldr	r3, [r7, #20]
 801142a:	683a      	ldr	r2, [r7, #0]
 801142c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801142e:	697b      	ldr	r3, [r7, #20]
	}
 8011430:	4618      	mov	r0, r3
 8011432:	3718      	adds	r7, #24
 8011434:	46bd      	mov	sp, r7
 8011436:	bd80      	pop	{r7, pc}

08011438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011438:	b580      	push	{r7, lr}
 801143a:	b08e      	sub	sp, #56	; 0x38
 801143c:	af00      	add	r7, sp, #0
 801143e:	60f8      	str	r0, [r7, #12]
 8011440:	60b9      	str	r1, [r7, #8]
 8011442:	607a      	str	r2, [r7, #4]
 8011444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011446:	2300      	movs	r3, #0
 8011448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801144e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011450:	2b00      	cmp	r3, #0
 8011452:	d109      	bne.n	8011468 <xQueueGenericSend+0x30>
 8011454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011458:	f383 8811 	msr	BASEPRI, r3
 801145c:	f3bf 8f6f 	isb	sy
 8011460:	f3bf 8f4f 	dsb	sy
 8011464:	62bb      	str	r3, [r7, #40]	; 0x28
 8011466:	e7fe      	b.n	8011466 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d103      	bne.n	8011476 <xQueueGenericSend+0x3e>
 801146e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011472:	2b00      	cmp	r3, #0
 8011474:	d101      	bne.n	801147a <xQueueGenericSend+0x42>
 8011476:	2301      	movs	r3, #1
 8011478:	e000      	b.n	801147c <xQueueGenericSend+0x44>
 801147a:	2300      	movs	r3, #0
 801147c:	2b00      	cmp	r3, #0
 801147e:	d109      	bne.n	8011494 <xQueueGenericSend+0x5c>
 8011480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011484:	f383 8811 	msr	BASEPRI, r3
 8011488:	f3bf 8f6f 	isb	sy
 801148c:	f3bf 8f4f 	dsb	sy
 8011490:	627b      	str	r3, [r7, #36]	; 0x24
 8011492:	e7fe      	b.n	8011492 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	2b02      	cmp	r3, #2
 8011498:	d103      	bne.n	80114a2 <xQueueGenericSend+0x6a>
 801149a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d101      	bne.n	80114a6 <xQueueGenericSend+0x6e>
 80114a2:	2301      	movs	r3, #1
 80114a4:	e000      	b.n	80114a8 <xQueueGenericSend+0x70>
 80114a6:	2300      	movs	r3, #0
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d109      	bne.n	80114c0 <xQueueGenericSend+0x88>
 80114ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b0:	f383 8811 	msr	BASEPRI, r3
 80114b4:	f3bf 8f6f 	isb	sy
 80114b8:	f3bf 8f4f 	dsb	sy
 80114bc:	623b      	str	r3, [r7, #32]
 80114be:	e7fe      	b.n	80114be <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114c0:	f001 fc7c 	bl	8012dbc <xTaskGetSchedulerState>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d102      	bne.n	80114d0 <xQueueGenericSend+0x98>
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d101      	bne.n	80114d4 <xQueueGenericSend+0x9c>
 80114d0:	2301      	movs	r3, #1
 80114d2:	e000      	b.n	80114d6 <xQueueGenericSend+0x9e>
 80114d4:	2300      	movs	r3, #0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d109      	bne.n	80114ee <xQueueGenericSend+0xb6>
 80114da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114de:	f383 8811 	msr	BASEPRI, r3
 80114e2:	f3bf 8f6f 	isb	sy
 80114e6:	f3bf 8f4f 	dsb	sy
 80114ea:	61fb      	str	r3, [r7, #28]
 80114ec:	e7fe      	b.n	80114ec <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80114ee:	f7ff f9a5 	bl	801083c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80114f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d302      	bcc.n	8011504 <xQueueGenericSend+0xcc>
 80114fe:	683b      	ldr	r3, [r7, #0]
 8011500:	2b02      	cmp	r3, #2
 8011502:	d129      	bne.n	8011558 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011504:	683a      	ldr	r2, [r7, #0]
 8011506:	68b9      	ldr	r1, [r7, #8]
 8011508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801150a:	f000 fc48 	bl	8011d9e <prvCopyDataToQueue>
 801150e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011514:	2b00      	cmp	r3, #0
 8011516:	d010      	beq.n	801153a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801151a:	3324      	adds	r3, #36	; 0x24
 801151c:	4618      	mov	r0, r3
 801151e:	f001 fa5f 	bl	80129e0 <xTaskRemoveFromEventList>
 8011522:	4603      	mov	r3, r0
 8011524:	2b00      	cmp	r3, #0
 8011526:	d013      	beq.n	8011550 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011528:	4b3f      	ldr	r3, [pc, #252]	; (8011628 <xQueueGenericSend+0x1f0>)
 801152a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801152e:	601a      	str	r2, [r3, #0]
 8011530:	f3bf 8f4f 	dsb	sy
 8011534:	f3bf 8f6f 	isb	sy
 8011538:	e00a      	b.n	8011550 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801153c:	2b00      	cmp	r3, #0
 801153e:	d007      	beq.n	8011550 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011540:	4b39      	ldr	r3, [pc, #228]	; (8011628 <xQueueGenericSend+0x1f0>)
 8011542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011546:	601a      	str	r2, [r3, #0]
 8011548:	f3bf 8f4f 	dsb	sy
 801154c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011550:	f7ff f9a2 	bl	8010898 <vPortExitCritical>
				return pdPASS;
 8011554:	2301      	movs	r3, #1
 8011556:	e063      	b.n	8011620 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d103      	bne.n	8011566 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801155e:	f7ff f99b 	bl	8010898 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011562:	2300      	movs	r3, #0
 8011564:	e05c      	b.n	8011620 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011568:	2b00      	cmp	r3, #0
 801156a:	d106      	bne.n	801157a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801156c:	f107 0314 	add.w	r3, r7, #20
 8011570:	4618      	mov	r0, r3
 8011572:	f001 fa99 	bl	8012aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011576:	2301      	movs	r3, #1
 8011578:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801157a:	f7ff f98d 	bl	8010898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801157e:	f000 ffdb 	bl	8012538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011582:	f7ff f95b 	bl	801083c <vPortEnterCritical>
 8011586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011588:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801158c:	b25b      	sxtb	r3, r3
 801158e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011592:	d103      	bne.n	801159c <xQueueGenericSend+0x164>
 8011594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011596:	2200      	movs	r2, #0
 8011598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801159c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801159e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115a2:	b25b      	sxtb	r3, r3
 80115a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115a8:	d103      	bne.n	80115b2 <xQueueGenericSend+0x17a>
 80115aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ac:	2200      	movs	r2, #0
 80115ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115b2:	f7ff f971 	bl	8010898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115b6:	1d3a      	adds	r2, r7, #4
 80115b8:	f107 0314 	add.w	r3, r7, #20
 80115bc:	4611      	mov	r1, r2
 80115be:	4618      	mov	r0, r3
 80115c0:	f001 fa88 	bl	8012ad4 <xTaskCheckForTimeOut>
 80115c4:	4603      	mov	r3, r0
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d124      	bne.n	8011614 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80115ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115cc:	f000 fcdf 	bl	8011f8e <prvIsQueueFull>
 80115d0:	4603      	mov	r3, r0
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d018      	beq.n	8011608 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80115d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115d8:	3310      	adds	r3, #16
 80115da:	687a      	ldr	r2, [r7, #4]
 80115dc:	4611      	mov	r1, r2
 80115de:	4618      	mov	r0, r3
 80115e0:	f001 f9b0 	bl	8012944 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80115e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80115e6:	f000 fc6a 	bl	8011ebe <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80115ea:	f000 ffeb 	bl	80125c4 <xTaskResumeAll>
 80115ee:	4603      	mov	r3, r0
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	f47f af7c 	bne.w	80114ee <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80115f6:	4b0c      	ldr	r3, [pc, #48]	; (8011628 <xQueueGenericSend+0x1f0>)
 80115f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115fc:	601a      	str	r2, [r3, #0]
 80115fe:	f3bf 8f4f 	dsb	sy
 8011602:	f3bf 8f6f 	isb	sy
 8011606:	e772      	b.n	80114ee <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801160a:	f000 fc58 	bl	8011ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801160e:	f000 ffd9 	bl	80125c4 <xTaskResumeAll>
 8011612:	e76c      	b.n	80114ee <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011616:	f000 fc52 	bl	8011ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801161a:	f000 ffd3 	bl	80125c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801161e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011620:	4618      	mov	r0, r3
 8011622:	3738      	adds	r7, #56	; 0x38
 8011624:	46bd      	mov	sp, r7
 8011626:	bd80      	pop	{r7, pc}
 8011628:	e000ed04 	.word	0xe000ed04

0801162c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b08e      	sub	sp, #56	; 0x38
 8011630:	af00      	add	r7, sp, #0
 8011632:	60f8      	str	r0, [r7, #12]
 8011634:	60b9      	str	r1, [r7, #8]
 8011636:	607a      	str	r2, [r7, #4]
 8011638:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801163e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011640:	2b00      	cmp	r3, #0
 8011642:	d109      	bne.n	8011658 <xQueueGenericSendFromISR+0x2c>
 8011644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011648:	f383 8811 	msr	BASEPRI, r3
 801164c:	f3bf 8f6f 	isb	sy
 8011650:	f3bf 8f4f 	dsb	sy
 8011654:	627b      	str	r3, [r7, #36]	; 0x24
 8011656:	e7fe      	b.n	8011656 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d103      	bne.n	8011666 <xQueueGenericSendFromISR+0x3a>
 801165e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011662:	2b00      	cmp	r3, #0
 8011664:	d101      	bne.n	801166a <xQueueGenericSendFromISR+0x3e>
 8011666:	2301      	movs	r3, #1
 8011668:	e000      	b.n	801166c <xQueueGenericSendFromISR+0x40>
 801166a:	2300      	movs	r3, #0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d109      	bne.n	8011684 <xQueueGenericSendFromISR+0x58>
 8011670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011674:	f383 8811 	msr	BASEPRI, r3
 8011678:	f3bf 8f6f 	isb	sy
 801167c:	f3bf 8f4f 	dsb	sy
 8011680:	623b      	str	r3, [r7, #32]
 8011682:	e7fe      	b.n	8011682 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	2b02      	cmp	r3, #2
 8011688:	d103      	bne.n	8011692 <xQueueGenericSendFromISR+0x66>
 801168a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801168c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801168e:	2b01      	cmp	r3, #1
 8011690:	d101      	bne.n	8011696 <xQueueGenericSendFromISR+0x6a>
 8011692:	2301      	movs	r3, #1
 8011694:	e000      	b.n	8011698 <xQueueGenericSendFromISR+0x6c>
 8011696:	2300      	movs	r3, #0
 8011698:	2b00      	cmp	r3, #0
 801169a:	d109      	bne.n	80116b0 <xQueueGenericSendFromISR+0x84>
 801169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a0:	f383 8811 	msr	BASEPRI, r3
 80116a4:	f3bf 8f6f 	isb	sy
 80116a8:	f3bf 8f4f 	dsb	sy
 80116ac:	61fb      	str	r3, [r7, #28]
 80116ae:	e7fe      	b.n	80116ae <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80116b0:	f7ff f9a0 	bl	80109f4 <vPortValidateInterruptPriority>
	__asm volatile
 80116b4:	f3ef 8211 	mrs	r2, BASEPRI
 80116b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116bc:	f383 8811 	msr	BASEPRI, r3
 80116c0:	f3bf 8f6f 	isb	sy
 80116c4:	f3bf 8f4f 	dsb	sy
 80116c8:	61ba      	str	r2, [r7, #24]
 80116ca:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80116cc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80116ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80116d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80116d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80116d8:	429a      	cmp	r2, r3
 80116da:	d302      	bcc.n	80116e2 <xQueueGenericSendFromISR+0xb6>
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	2b02      	cmp	r3, #2
 80116e0:	d12c      	bne.n	801173c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80116e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80116e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80116ec:	683a      	ldr	r2, [r7, #0]
 80116ee:	68b9      	ldr	r1, [r7, #8]
 80116f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116f2:	f000 fb54 	bl	8011d9e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80116f6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80116fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116fe:	d112      	bne.n	8011726 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011704:	2b00      	cmp	r3, #0
 8011706:	d016      	beq.n	8011736 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170a:	3324      	adds	r3, #36	; 0x24
 801170c:	4618      	mov	r0, r3
 801170e:	f001 f967 	bl	80129e0 <xTaskRemoveFromEventList>
 8011712:	4603      	mov	r3, r0
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00e      	beq.n	8011736 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	2b00      	cmp	r3, #0
 801171c:	d00b      	beq.n	8011736 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2201      	movs	r2, #1
 8011722:	601a      	str	r2, [r3, #0]
 8011724:	e007      	b.n	8011736 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011726:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801172a:	3301      	adds	r3, #1
 801172c:	b2db      	uxtb	r3, r3
 801172e:	b25a      	sxtb	r2, r3
 8011730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011736:	2301      	movs	r3, #1
 8011738:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801173a:	e001      	b.n	8011740 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801173c:	2300      	movs	r3, #0
 801173e:	637b      	str	r3, [r7, #52]	; 0x34
 8011740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011742:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011744:	693b      	ldr	r3, [r7, #16]
 8011746:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801174a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801174c:	4618      	mov	r0, r3
 801174e:	3738      	adds	r7, #56	; 0x38
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011754:	b580      	push	{r7, lr}
 8011756:	b08e      	sub	sp, #56	; 0x38
 8011758:	af00      	add	r7, sp, #0
 801175a:	6078      	str	r0, [r7, #4]
 801175c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011764:	2b00      	cmp	r3, #0
 8011766:	d109      	bne.n	801177c <xQueueGiveFromISR+0x28>
	__asm volatile
 8011768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801176c:	f383 8811 	msr	BASEPRI, r3
 8011770:	f3bf 8f6f 	isb	sy
 8011774:	f3bf 8f4f 	dsb	sy
 8011778:	623b      	str	r3, [r7, #32]
 801177a:	e7fe      	b.n	801177a <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801177c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011780:	2b00      	cmp	r3, #0
 8011782:	d009      	beq.n	8011798 <xQueueGiveFromISR+0x44>
 8011784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011788:	f383 8811 	msr	BASEPRI, r3
 801178c:	f3bf 8f6f 	isb	sy
 8011790:	f3bf 8f4f 	dsb	sy
 8011794:	61fb      	str	r3, [r7, #28]
 8011796:	e7fe      	b.n	8011796 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d103      	bne.n	80117a8 <xQueueGiveFromISR+0x54>
 80117a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d101      	bne.n	80117ac <xQueueGiveFromISR+0x58>
 80117a8:	2301      	movs	r3, #1
 80117aa:	e000      	b.n	80117ae <xQueueGiveFromISR+0x5a>
 80117ac:	2300      	movs	r3, #0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d109      	bne.n	80117c6 <xQueueGiveFromISR+0x72>
 80117b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b6:	f383 8811 	msr	BASEPRI, r3
 80117ba:	f3bf 8f6f 	isb	sy
 80117be:	f3bf 8f4f 	dsb	sy
 80117c2:	61bb      	str	r3, [r7, #24]
 80117c4:	e7fe      	b.n	80117c4 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80117c6:	f7ff f915 	bl	80109f4 <vPortValidateInterruptPriority>
	__asm volatile
 80117ca:	f3ef 8211 	mrs	r2, BASEPRI
 80117ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d2:	f383 8811 	msr	BASEPRI, r3
 80117d6:	f3bf 8f6f 	isb	sy
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	617a      	str	r2, [r7, #20]
 80117e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80117e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80117ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117f2:	429a      	cmp	r2, r3
 80117f4:	d22b      	bcs.n	801184e <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80117f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80117fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011802:	1c5a      	adds	r2, r3, #1
 8011804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011806:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011808:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801180c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011810:	d112      	bne.n	8011838 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011816:	2b00      	cmp	r3, #0
 8011818:	d016      	beq.n	8011848 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801181a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181c:	3324      	adds	r3, #36	; 0x24
 801181e:	4618      	mov	r0, r3
 8011820:	f001 f8de 	bl	80129e0 <xTaskRemoveFromEventList>
 8011824:	4603      	mov	r3, r0
 8011826:	2b00      	cmp	r3, #0
 8011828:	d00e      	beq.n	8011848 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	2b00      	cmp	r3, #0
 801182e:	d00b      	beq.n	8011848 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011830:	683b      	ldr	r3, [r7, #0]
 8011832:	2201      	movs	r2, #1
 8011834:	601a      	str	r2, [r3, #0]
 8011836:	e007      	b.n	8011848 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011838:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801183c:	3301      	adds	r3, #1
 801183e:	b2db      	uxtb	r3, r3
 8011840:	b25a      	sxtb	r2, r3
 8011842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011848:	2301      	movs	r3, #1
 801184a:	637b      	str	r3, [r7, #52]	; 0x34
 801184c:	e001      	b.n	8011852 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801184e:	2300      	movs	r3, #0
 8011850:	637b      	str	r3, [r7, #52]	; 0x34
 8011852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011854:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801185c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801185e:	4618      	mov	r0, r3
 8011860:	3738      	adds	r7, #56	; 0x38
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}
	...

08011868 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b08c      	sub	sp, #48	; 0x30
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011874:	2300      	movs	r3, #0
 8011876:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801187c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801187e:	2b00      	cmp	r3, #0
 8011880:	d109      	bne.n	8011896 <xQueueReceive+0x2e>
	__asm volatile
 8011882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011886:	f383 8811 	msr	BASEPRI, r3
 801188a:	f3bf 8f6f 	isb	sy
 801188e:	f3bf 8f4f 	dsb	sy
 8011892:	623b      	str	r3, [r7, #32]
 8011894:	e7fe      	b.n	8011894 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011896:	68bb      	ldr	r3, [r7, #8]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d103      	bne.n	80118a4 <xQueueReceive+0x3c>
 801189c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d101      	bne.n	80118a8 <xQueueReceive+0x40>
 80118a4:	2301      	movs	r3, #1
 80118a6:	e000      	b.n	80118aa <xQueueReceive+0x42>
 80118a8:	2300      	movs	r3, #0
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d109      	bne.n	80118c2 <xQueueReceive+0x5a>
 80118ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118b2:	f383 8811 	msr	BASEPRI, r3
 80118b6:	f3bf 8f6f 	isb	sy
 80118ba:	f3bf 8f4f 	dsb	sy
 80118be:	61fb      	str	r3, [r7, #28]
 80118c0:	e7fe      	b.n	80118c0 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80118c2:	f001 fa7b 	bl	8012dbc <xTaskGetSchedulerState>
 80118c6:	4603      	mov	r3, r0
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d102      	bne.n	80118d2 <xQueueReceive+0x6a>
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2b00      	cmp	r3, #0
 80118d0:	d101      	bne.n	80118d6 <xQueueReceive+0x6e>
 80118d2:	2301      	movs	r3, #1
 80118d4:	e000      	b.n	80118d8 <xQueueReceive+0x70>
 80118d6:	2300      	movs	r3, #0
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d109      	bne.n	80118f0 <xQueueReceive+0x88>
 80118dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118e0:	f383 8811 	msr	BASEPRI, r3
 80118e4:	f3bf 8f6f 	isb	sy
 80118e8:	f3bf 8f4f 	dsb	sy
 80118ec:	61bb      	str	r3, [r7, #24]
 80118ee:	e7fe      	b.n	80118ee <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80118f0:	f7fe ffa4 	bl	801083c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118f8:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d01f      	beq.n	8011940 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011900:	68b9      	ldr	r1, [r7, #8]
 8011902:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011904:	f000 fab5 	bl	8011e72 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801190a:	1e5a      	subs	r2, r3, #1
 801190c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801190e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011912:	691b      	ldr	r3, [r3, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d00f      	beq.n	8011938 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801191a:	3310      	adds	r3, #16
 801191c:	4618      	mov	r0, r3
 801191e:	f001 f85f 	bl	80129e0 <xTaskRemoveFromEventList>
 8011922:	4603      	mov	r3, r0
 8011924:	2b00      	cmp	r3, #0
 8011926:	d007      	beq.n	8011938 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011928:	4b3c      	ldr	r3, [pc, #240]	; (8011a1c <xQueueReceive+0x1b4>)
 801192a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801192e:	601a      	str	r2, [r3, #0]
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011938:	f7fe ffae 	bl	8010898 <vPortExitCritical>
				return pdPASS;
 801193c:	2301      	movs	r3, #1
 801193e:	e069      	b.n	8011a14 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d103      	bne.n	801194e <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011946:	f7fe ffa7 	bl	8010898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801194a:	2300      	movs	r3, #0
 801194c:	e062      	b.n	8011a14 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 801194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011950:	2b00      	cmp	r3, #0
 8011952:	d106      	bne.n	8011962 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011954:	f107 0310 	add.w	r3, r7, #16
 8011958:	4618      	mov	r0, r3
 801195a:	f001 f8a5 	bl	8012aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801195e:	2301      	movs	r3, #1
 8011960:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011962:	f7fe ff99 	bl	8010898 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011966:	f000 fde7 	bl	8012538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801196a:	f7fe ff67 	bl	801083c <vPortEnterCritical>
 801196e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011974:	b25b      	sxtb	r3, r3
 8011976:	f1b3 3fff 	cmp.w	r3, #4294967295
 801197a:	d103      	bne.n	8011984 <xQueueReceive+0x11c>
 801197c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801197e:	2200      	movs	r2, #0
 8011980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801198a:	b25b      	sxtb	r3, r3
 801198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011990:	d103      	bne.n	801199a <xQueueReceive+0x132>
 8011992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011994:	2200      	movs	r2, #0
 8011996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801199a:	f7fe ff7d 	bl	8010898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801199e:	1d3a      	adds	r2, r7, #4
 80119a0:	f107 0310 	add.w	r3, r7, #16
 80119a4:	4611      	mov	r1, r2
 80119a6:	4618      	mov	r0, r3
 80119a8:	f001 f894 	bl	8012ad4 <xTaskCheckForTimeOut>
 80119ac:	4603      	mov	r3, r0
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d123      	bne.n	80119fa <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80119b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119b4:	f000 fad5 	bl	8011f62 <prvIsQueueEmpty>
 80119b8:	4603      	mov	r3, r0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d017      	beq.n	80119ee <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80119be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c0:	3324      	adds	r3, #36	; 0x24
 80119c2:	687a      	ldr	r2, [r7, #4]
 80119c4:	4611      	mov	r1, r2
 80119c6:	4618      	mov	r0, r3
 80119c8:	f000 ffbc 	bl	8012944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80119cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119ce:	f000 fa76 	bl	8011ebe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80119d2:	f000 fdf7 	bl	80125c4 <xTaskResumeAll>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d189      	bne.n	80118f0 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80119dc:	4b0f      	ldr	r3, [pc, #60]	; (8011a1c <xQueueReceive+0x1b4>)
 80119de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119e2:	601a      	str	r2, [r3, #0]
 80119e4:	f3bf 8f4f 	dsb	sy
 80119e8:	f3bf 8f6f 	isb	sy
 80119ec:	e780      	b.n	80118f0 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80119ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119f0:	f000 fa65 	bl	8011ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80119f4:	f000 fde6 	bl	80125c4 <xTaskResumeAll>
 80119f8:	e77a      	b.n	80118f0 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80119fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80119fc:	f000 fa5f 	bl	8011ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a00:	f000 fde0 	bl	80125c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011a04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a06:	f000 faac 	bl	8011f62 <prvIsQueueEmpty>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	f43f af6f 	beq.w	80118f0 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011a12:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3730      	adds	r7, #48	; 0x30
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	e000ed04 	.word	0xe000ed04

08011a20 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b08e      	sub	sp, #56	; 0x38
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011a32:	2300      	movs	r3, #0
 8011a34:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d109      	bne.n	8011a50 <xQueueSemaphoreTake+0x30>
 8011a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a40:	f383 8811 	msr	BASEPRI, r3
 8011a44:	f3bf 8f6f 	isb	sy
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	623b      	str	r3, [r7, #32]
 8011a4e:	e7fe      	b.n	8011a4e <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d009      	beq.n	8011a6c <xQueueSemaphoreTake+0x4c>
 8011a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a5c:	f383 8811 	msr	BASEPRI, r3
 8011a60:	f3bf 8f6f 	isb	sy
 8011a64:	f3bf 8f4f 	dsb	sy
 8011a68:	61fb      	str	r3, [r7, #28]
 8011a6a:	e7fe      	b.n	8011a6a <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a6c:	f001 f9a6 	bl	8012dbc <xTaskGetSchedulerState>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d102      	bne.n	8011a7c <xQueueSemaphoreTake+0x5c>
 8011a76:	683b      	ldr	r3, [r7, #0]
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d101      	bne.n	8011a80 <xQueueSemaphoreTake+0x60>
 8011a7c:	2301      	movs	r3, #1
 8011a7e:	e000      	b.n	8011a82 <xQueueSemaphoreTake+0x62>
 8011a80:	2300      	movs	r3, #0
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d109      	bne.n	8011a9a <xQueueSemaphoreTake+0x7a>
 8011a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8a:	f383 8811 	msr	BASEPRI, r3
 8011a8e:	f3bf 8f6f 	isb	sy
 8011a92:	f3bf 8f4f 	dsb	sy
 8011a96:	61bb      	str	r3, [r7, #24]
 8011a98:	e7fe      	b.n	8011a98 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a9a:	f7fe fecf 	bl	801083c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa2:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d024      	beq.n	8011af4 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aac:	1e5a      	subs	r2, r3, #1
 8011aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab0:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab4:	681b      	ldr	r3, [r3, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d104      	bne.n	8011ac4 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011aba:	f001 faf1 	bl	80130a0 <pvTaskIncrementMutexHeldCount>
 8011abe:	4602      	mov	r2, r0
 8011ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac6:	691b      	ldr	r3, [r3, #16]
 8011ac8:	2b00      	cmp	r3, #0
 8011aca:	d00f      	beq.n	8011aec <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ace:	3310      	adds	r3, #16
 8011ad0:	4618      	mov	r0, r3
 8011ad2:	f000 ff85 	bl	80129e0 <xTaskRemoveFromEventList>
 8011ad6:	4603      	mov	r3, r0
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d007      	beq.n	8011aec <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011adc:	4b53      	ldr	r3, [pc, #332]	; (8011c2c <xQueueSemaphoreTake+0x20c>)
 8011ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ae2:	601a      	str	r2, [r3, #0]
 8011ae4:	f3bf 8f4f 	dsb	sy
 8011ae8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011aec:	f7fe fed4 	bl	8010898 <vPortExitCritical>
				return pdPASS;
 8011af0:	2301      	movs	r3, #1
 8011af2:	e096      	b.n	8011c22 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011af4:	683b      	ldr	r3, [r7, #0]
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d110      	bne.n	8011b1c <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d009      	beq.n	8011b14 <xQueueSemaphoreTake+0xf4>
 8011b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b04:	f383 8811 	msr	BASEPRI, r3
 8011b08:	f3bf 8f6f 	isb	sy
 8011b0c:	f3bf 8f4f 	dsb	sy
 8011b10:	617b      	str	r3, [r7, #20]
 8011b12:	e7fe      	b.n	8011b12 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011b14:	f7fe fec0 	bl	8010898 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011b18:	2300      	movs	r3, #0
 8011b1a:	e082      	b.n	8011c22 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d106      	bne.n	8011b30 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011b22:	f107 030c 	add.w	r3, r7, #12
 8011b26:	4618      	mov	r0, r3
 8011b28:	f000 ffbe 	bl	8012aa8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011b2c:	2301      	movs	r3, #1
 8011b2e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011b30:	f7fe feb2 	bl	8010898 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011b34:	f000 fd00 	bl	8012538 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011b38:	f7fe fe80 	bl	801083c <vPortEnterCritical>
 8011b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011b42:	b25b      	sxtb	r3, r3
 8011b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b48:	d103      	bne.n	8011b52 <xQueueSemaphoreTake+0x132>
 8011b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b58:	b25b      	sxtb	r3, r3
 8011b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b5e:	d103      	bne.n	8011b68 <xQueueSemaphoreTake+0x148>
 8011b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b62:	2200      	movs	r2, #0
 8011b64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b68:	f7fe fe96 	bl	8010898 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b6c:	463a      	mov	r2, r7
 8011b6e:	f107 030c 	add.w	r3, r7, #12
 8011b72:	4611      	mov	r1, r2
 8011b74:	4618      	mov	r0, r3
 8011b76:	f000 ffad 	bl	8012ad4 <xTaskCheckForTimeOut>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d132      	bne.n	8011be6 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011b80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b82:	f000 f9ee 	bl	8011f62 <prvIsQueueEmpty>
 8011b86:	4603      	mov	r3, r0
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d026      	beq.n	8011bda <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d109      	bne.n	8011ba8 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8011b94:	f7fe fe52 	bl	801083c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	689b      	ldr	r3, [r3, #8]
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f001 f92b 	bl	8012df8 <xTaskPriorityInherit>
 8011ba2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8011ba4:	f7fe fe78 	bl	8010898 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	3324      	adds	r3, #36	; 0x24
 8011bac:	683a      	ldr	r2, [r7, #0]
 8011bae:	4611      	mov	r1, r2
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	f000 fec7 	bl	8012944 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011bb6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bb8:	f000 f981 	bl	8011ebe <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011bbc:	f000 fd02 	bl	80125c4 <xTaskResumeAll>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	f47f af69 	bne.w	8011a9a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8011bc8:	4b18      	ldr	r3, [pc, #96]	; (8011c2c <xQueueSemaphoreTake+0x20c>)
 8011bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011bce:	601a      	str	r2, [r3, #0]
 8011bd0:	f3bf 8f4f 	dsb	sy
 8011bd4:	f3bf 8f6f 	isb	sy
 8011bd8:	e75f      	b.n	8011a9a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011bda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bdc:	f000 f96f 	bl	8011ebe <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011be0:	f000 fcf0 	bl	80125c4 <xTaskResumeAll>
 8011be4:	e759      	b.n	8011a9a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8011be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011be8:	f000 f969 	bl	8011ebe <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011bec:	f000 fcea 	bl	80125c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011bf0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bf2:	f000 f9b6 	bl	8011f62 <prvIsQueueEmpty>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	f43f af4e 	beq.w	8011a9a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d00d      	beq.n	8011c20 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8011c04:	f7fe fe1a 	bl	801083c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011c08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011c0a:	f000 f8b0 	bl	8011d6e <prvGetDisinheritPriorityAfterTimeout>
 8011c0e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c12:	689b      	ldr	r3, [r3, #8]
 8011c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011c16:	4618      	mov	r0, r3
 8011c18:	f001 f9c2 	bl	8012fa0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011c1c:	f7fe fe3c 	bl	8010898 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011c20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011c22:	4618      	mov	r0, r3
 8011c24:	3738      	adds	r7, #56	; 0x38
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd80      	pop	{r7, pc}
 8011c2a:	bf00      	nop
 8011c2c:	e000ed04 	.word	0xe000ed04

08011c30 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b08e      	sub	sp, #56	; 0x38
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d109      	bne.n	8011c5a <xQueueReceiveFromISR+0x2a>
 8011c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4a:	f383 8811 	msr	BASEPRI, r3
 8011c4e:	f3bf 8f6f 	isb	sy
 8011c52:	f3bf 8f4f 	dsb	sy
 8011c56:	623b      	str	r3, [r7, #32]
 8011c58:	e7fe      	b.n	8011c58 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	2b00      	cmp	r3, #0
 8011c5e:	d103      	bne.n	8011c68 <xQueueReceiveFromISR+0x38>
 8011c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d101      	bne.n	8011c6c <xQueueReceiveFromISR+0x3c>
 8011c68:	2301      	movs	r3, #1
 8011c6a:	e000      	b.n	8011c6e <xQueueReceiveFromISR+0x3e>
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d109      	bne.n	8011c86 <xQueueReceiveFromISR+0x56>
 8011c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c76:	f383 8811 	msr	BASEPRI, r3
 8011c7a:	f3bf 8f6f 	isb	sy
 8011c7e:	f3bf 8f4f 	dsb	sy
 8011c82:	61fb      	str	r3, [r7, #28]
 8011c84:	e7fe      	b.n	8011c84 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c86:	f7fe feb5 	bl	80109f4 <vPortValidateInterruptPriority>
	__asm volatile
 8011c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8011c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c92:	f383 8811 	msr	BASEPRI, r3
 8011c96:	f3bf 8f6f 	isb	sy
 8011c9a:	f3bf 8f4f 	dsb	sy
 8011c9e:	61ba      	str	r2, [r7, #24]
 8011ca0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8011ca2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011caa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d02f      	beq.n	8011d12 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8011cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011cb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011cbc:	68b9      	ldr	r1, [r7, #8]
 8011cbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cc0:	f000 f8d7 	bl	8011e72 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cc6:	1e5a      	subs	r2, r3, #1
 8011cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011ccc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cd4:	d112      	bne.n	8011cfc <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd8:	691b      	ldr	r3, [r3, #16]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d016      	beq.n	8011d0c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	3310      	adds	r3, #16
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	f000 fe7c 	bl	80129e0 <xTaskRemoveFromEventList>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d00e      	beq.n	8011d0c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d00b      	beq.n	8011d0c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2201      	movs	r2, #1
 8011cf8:	601a      	str	r2, [r3, #0]
 8011cfa:	e007      	b.n	8011d0c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011cfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d00:	3301      	adds	r3, #1
 8011d02:	b2db      	uxtb	r3, r3
 8011d04:	b25a      	sxtb	r2, r3
 8011d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8011d10:	e001      	b.n	8011d16 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8011d12:	2300      	movs	r3, #0
 8011d14:	637b      	str	r3, [r7, #52]	; 0x34
 8011d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d18:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d22:	4618      	mov	r0, r3
 8011d24:	3738      	adds	r7, #56	; 0x38
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}

08011d2a <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	b084      	sub	sp, #16
 8011d2e:	af00      	add	r7, sp, #0
 8011d30:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011d36:	68fb      	ldr	r3, [r7, #12]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d109      	bne.n	8011d50 <vQueueDelete+0x26>
	__asm volatile
 8011d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d40:	f383 8811 	msr	BASEPRI, r3
 8011d44:	f3bf 8f6f 	isb	sy
 8011d48:	f3bf 8f4f 	dsb	sy
 8011d4c:	60bb      	str	r3, [r7, #8]
 8011d4e:	e7fe      	b.n	8011d4e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011d50:	68f8      	ldr	r0, [r7, #12]
 8011d52:	f000 f95d 	bl	8012010 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8011d56:	68fb      	ldr	r3, [r7, #12]
 8011d58:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d102      	bne.n	8011d66 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8011d60:	68f8      	ldr	r0, [r7, #12]
 8011d62:	f7fe ff47 	bl	8010bf4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011d66:	bf00      	nop
 8011d68:	3710      	adds	r7, #16
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bd80      	pop	{r7, pc}

08011d6e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011d6e:	b480      	push	{r7}
 8011d70:	b085      	sub	sp, #20
 8011d72:	af00      	add	r7, sp, #0
 8011d74:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	d006      	beq.n	8011d8c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011d82:	681b      	ldr	r3, [r3, #0]
 8011d84:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8011d88:	60fb      	str	r3, [r7, #12]
 8011d8a:	e001      	b.n	8011d90 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011d90:	68fb      	ldr	r3, [r7, #12]
	}
 8011d92:	4618      	mov	r0, r3
 8011d94:	3714      	adds	r7, #20
 8011d96:	46bd      	mov	sp, r7
 8011d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d9c:	4770      	bx	lr

08011d9e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8011d9e:	b580      	push	{r7, lr}
 8011da0:	b086      	sub	sp, #24
 8011da2:	af00      	add	r7, sp, #0
 8011da4:	60f8      	str	r0, [r7, #12]
 8011da6:	60b9      	str	r1, [r7, #8]
 8011da8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8011daa:	2300      	movs	r3, #0
 8011dac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011dae:	68fb      	ldr	r3, [r7, #12]
 8011db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011db2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011db8:	2b00      	cmp	r3, #0
 8011dba:	d10d      	bne.n	8011dd8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	2b00      	cmp	r3, #0
 8011dc2:	d14d      	bne.n	8011e60 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f001 f87d 	bl	8012ec8 <xTaskPriorityDisinherit>
 8011dce:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2200      	movs	r2, #0
 8011dd4:	609a      	str	r2, [r3, #8]
 8011dd6:	e043      	b.n	8011e60 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d119      	bne.n	8011e12 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	6858      	ldr	r0, [r3, #4]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011de6:	461a      	mov	r2, r3
 8011de8:	68b9      	ldr	r1, [r7, #8]
 8011dea:	f001 ffc7 	bl	8013d7c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	685a      	ldr	r2, [r3, #4]
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011df6:	441a      	add	r2, r3
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	685a      	ldr	r2, [r3, #4]
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	689b      	ldr	r3, [r3, #8]
 8011e04:	429a      	cmp	r2, r3
 8011e06:	d32b      	bcc.n	8011e60 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8011e08:	68fb      	ldr	r3, [r7, #12]
 8011e0a:	681a      	ldr	r2, [r3, #0]
 8011e0c:	68fb      	ldr	r3, [r7, #12]
 8011e0e:	605a      	str	r2, [r3, #4]
 8011e10:	e026      	b.n	8011e60 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	68d8      	ldr	r0, [r3, #12]
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e1a:	461a      	mov	r2, r3
 8011e1c:	68b9      	ldr	r1, [r7, #8]
 8011e1e:	f001 ffad 	bl	8013d7c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	68da      	ldr	r2, [r3, #12]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e2a:	425b      	negs	r3, r3
 8011e2c:	441a      	add	r2, r3
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	68da      	ldr	r2, [r3, #12]
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d207      	bcs.n	8011e4e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	689a      	ldr	r2, [r3, #8]
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e46:	425b      	negs	r3, r3
 8011e48:	441a      	add	r2, r3
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2b02      	cmp	r3, #2
 8011e52:	d105      	bne.n	8011e60 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e54:	693b      	ldr	r3, [r7, #16]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d002      	beq.n	8011e60 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8011e5a:	693b      	ldr	r3, [r7, #16]
 8011e5c:	3b01      	subs	r3, #1
 8011e5e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011e60:	693b      	ldr	r3, [r7, #16]
 8011e62:	1c5a      	adds	r2, r3, #1
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011e68:	697b      	ldr	r3, [r7, #20]
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3718      	adds	r7, #24
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}

08011e72 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011e72:	b580      	push	{r7, lr}
 8011e74:	b082      	sub	sp, #8
 8011e76:	af00      	add	r7, sp, #0
 8011e78:	6078      	str	r0, [r7, #4]
 8011e7a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d018      	beq.n	8011eb6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	68da      	ldr	r2, [r3, #12]
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e8c:	441a      	add	r2, r3
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	68da      	ldr	r2, [r3, #12]
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	689b      	ldr	r3, [r3, #8]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	d303      	bcc.n	8011ea6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8011e9e:	687b      	ldr	r3, [r7, #4]
 8011ea0:	681a      	ldr	r2, [r3, #0]
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	68d9      	ldr	r1, [r3, #12]
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eae:	461a      	mov	r2, r3
 8011eb0:	6838      	ldr	r0, [r7, #0]
 8011eb2:	f001 ff63 	bl	8013d7c <memcpy>
	}
}
 8011eb6:	bf00      	nop
 8011eb8:	3708      	adds	r7, #8
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd80      	pop	{r7, pc}

08011ebe <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8011ebe:	b580      	push	{r7, lr}
 8011ec0:	b084      	sub	sp, #16
 8011ec2:	af00      	add	r7, sp, #0
 8011ec4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011ec6:	f7fe fcb9 	bl	801083c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011ed0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ed2:	e011      	b.n	8011ef8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	d012      	beq.n	8011f02 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	3324      	adds	r3, #36	; 0x24
 8011ee0:	4618      	mov	r0, r3
 8011ee2:	f000 fd7d 	bl	80129e0 <xTaskRemoveFromEventList>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d001      	beq.n	8011ef0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011eec:	f000 fe52 	bl	8012b94 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011ef0:	7bfb      	ldrb	r3, [r7, #15]
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	b2db      	uxtb	r3, r3
 8011ef6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	dce9      	bgt.n	8011ed4 <prvUnlockQueue+0x16>
 8011f00:	e000      	b.n	8011f04 <prvUnlockQueue+0x46>
					break;
 8011f02:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	22ff      	movs	r2, #255	; 0xff
 8011f08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011f0c:	f7fe fcc4 	bl	8010898 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011f10:	f7fe fc94 	bl	801083c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f1a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f1c:	e011      	b.n	8011f42 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	691b      	ldr	r3, [r3, #16]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	d012      	beq.n	8011f4c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	3310      	adds	r3, #16
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	f000 fd58 	bl	80129e0 <xTaskRemoveFromEventList>
 8011f30:	4603      	mov	r3, r0
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d001      	beq.n	8011f3a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011f36:	f000 fe2d 	bl	8012b94 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011f3a:	7bbb      	ldrb	r3, [r7, #14]
 8011f3c:	3b01      	subs	r3, #1
 8011f3e:	b2db      	uxtb	r3, r3
 8011f40:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011f42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	dce9      	bgt.n	8011f1e <prvUnlockQueue+0x60>
 8011f4a:	e000      	b.n	8011f4e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011f4c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011f4e:	687b      	ldr	r3, [r7, #4]
 8011f50:	22ff      	movs	r2, #255	; 0xff
 8011f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011f56:	f7fe fc9f 	bl	8010898 <vPortExitCritical>
}
 8011f5a:	bf00      	nop
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b084      	sub	sp, #16
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011f6a:	f7fe fc67 	bl	801083c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d102      	bne.n	8011f7c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011f76:	2301      	movs	r3, #1
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	e001      	b.n	8011f80 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011f7c:	2300      	movs	r3, #0
 8011f7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011f80:	f7fe fc8a 	bl	8010898 <vPortExitCritical>

	return xReturn;
 8011f84:	68fb      	ldr	r3, [r7, #12]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011f8e:	b580      	push	{r7, lr}
 8011f90:	b084      	sub	sp, #16
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011f96:	f7fe fc51 	bl	801083c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fa2:	429a      	cmp	r2, r3
 8011fa4:	d102      	bne.n	8011fac <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	60fb      	str	r3, [r7, #12]
 8011faa:	e001      	b.n	8011fb0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011fac:	2300      	movs	r3, #0
 8011fae:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011fb0:	f7fe fc72 	bl	8010898 <vPortExitCritical>

	return xReturn;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
}
 8011fb6:	4618      	mov	r0, r3
 8011fb8:	3710      	adds	r7, #16
 8011fba:	46bd      	mov	sp, r7
 8011fbc:	bd80      	pop	{r7, pc}
	...

08011fc0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8011fc0:	b480      	push	{r7}
 8011fc2:	b085      	sub	sp, #20
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
 8011fc8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011fca:	2300      	movs	r3, #0
 8011fcc:	60fb      	str	r3, [r7, #12]
 8011fce:	e014      	b.n	8011ffa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8011fd0:	4a0e      	ldr	r2, [pc, #56]	; (801200c <vQueueAddToRegistry+0x4c>)
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d10b      	bne.n	8011ff4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8011fdc:	490b      	ldr	r1, [pc, #44]	; (801200c <vQueueAddToRegistry+0x4c>)
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	683a      	ldr	r2, [r7, #0]
 8011fe2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8011fe6:	4a09      	ldr	r2, [pc, #36]	; (801200c <vQueueAddToRegistry+0x4c>)
 8011fe8:	68fb      	ldr	r3, [r7, #12]
 8011fea:	00db      	lsls	r3, r3, #3
 8011fec:	4413      	add	r3, r2
 8011fee:	687a      	ldr	r2, [r7, #4]
 8011ff0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8011ff2:	e005      	b.n	8012000 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	3301      	adds	r3, #1
 8011ff8:	60fb      	str	r3, [r7, #12]
 8011ffa:	68fb      	ldr	r3, [r7, #12]
 8011ffc:	2b07      	cmp	r3, #7
 8011ffe:	d9e7      	bls.n	8011fd0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012000:	bf00      	nop
 8012002:	3714      	adds	r7, #20
 8012004:	46bd      	mov	sp, r7
 8012006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801200a:	4770      	bx	lr
 801200c:	2002e3b0 	.word	0x2002e3b0

08012010 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012010:	b480      	push	{r7}
 8012012:	b085      	sub	sp, #20
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012018:	2300      	movs	r3, #0
 801201a:	60fb      	str	r3, [r7, #12]
 801201c:	e016      	b.n	801204c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801201e:	4a10      	ldr	r2, [pc, #64]	; (8012060 <vQueueUnregisterQueue+0x50>)
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	00db      	lsls	r3, r3, #3
 8012024:	4413      	add	r3, r2
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	687a      	ldr	r2, [r7, #4]
 801202a:	429a      	cmp	r2, r3
 801202c:	d10b      	bne.n	8012046 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801202e:	4a0c      	ldr	r2, [pc, #48]	; (8012060 <vQueueUnregisterQueue+0x50>)
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	2100      	movs	r1, #0
 8012034:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012038:	4a09      	ldr	r2, [pc, #36]	; (8012060 <vQueueUnregisterQueue+0x50>)
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	00db      	lsls	r3, r3, #3
 801203e:	4413      	add	r3, r2
 8012040:	2200      	movs	r2, #0
 8012042:	605a      	str	r2, [r3, #4]
				break;
 8012044:	e005      	b.n	8012052 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	3301      	adds	r3, #1
 801204a:	60fb      	str	r3, [r7, #12]
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	2b07      	cmp	r3, #7
 8012050:	d9e5      	bls.n	801201e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012052:	bf00      	nop
 8012054:	3714      	adds	r7, #20
 8012056:	46bd      	mov	sp, r7
 8012058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801205c:	4770      	bx	lr
 801205e:	bf00      	nop
 8012060:	2002e3b0 	.word	0x2002e3b0

08012064 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012064:	b580      	push	{r7, lr}
 8012066:	b086      	sub	sp, #24
 8012068:	af00      	add	r7, sp, #0
 801206a:	60f8      	str	r0, [r7, #12]
 801206c:	60b9      	str	r1, [r7, #8]
 801206e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012074:	f7fe fbe2 	bl	801083c <vPortEnterCritical>
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801207e:	b25b      	sxtb	r3, r3
 8012080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012084:	d103      	bne.n	801208e <vQueueWaitForMessageRestricted+0x2a>
 8012086:	697b      	ldr	r3, [r7, #20]
 8012088:	2200      	movs	r2, #0
 801208a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801208e:	697b      	ldr	r3, [r7, #20]
 8012090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012094:	b25b      	sxtb	r3, r3
 8012096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801209a:	d103      	bne.n	80120a4 <vQueueWaitForMessageRestricted+0x40>
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80120a4:	f7fe fbf8 	bl	8010898 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80120a8:	697b      	ldr	r3, [r7, #20]
 80120aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d106      	bne.n	80120be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80120b0:	697b      	ldr	r3, [r7, #20]
 80120b2:	3324      	adds	r3, #36	; 0x24
 80120b4:	687a      	ldr	r2, [r7, #4]
 80120b6:	68b9      	ldr	r1, [r7, #8]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f000 fc67 	bl	801298c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80120be:	6978      	ldr	r0, [r7, #20]
 80120c0:	f7ff fefd 	bl	8011ebe <prvUnlockQueue>
	}
 80120c4:	bf00      	nop
 80120c6:	3718      	adds	r7, #24
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd80      	pop	{r7, pc}

080120cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b08e      	sub	sp, #56	; 0x38
 80120d0:	af04      	add	r7, sp, #16
 80120d2:	60f8      	str	r0, [r7, #12]
 80120d4:	60b9      	str	r1, [r7, #8]
 80120d6:	607a      	str	r2, [r7, #4]
 80120d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80120da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d109      	bne.n	80120f4 <xTaskCreateStatic+0x28>
 80120e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e4:	f383 8811 	msr	BASEPRI, r3
 80120e8:	f3bf 8f6f 	isb	sy
 80120ec:	f3bf 8f4f 	dsb	sy
 80120f0:	623b      	str	r3, [r7, #32]
 80120f2:	e7fe      	b.n	80120f2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80120f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d109      	bne.n	801210e <xTaskCreateStatic+0x42>
 80120fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fe:	f383 8811 	msr	BASEPRI, r3
 8012102:	f3bf 8f6f 	isb	sy
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	61fb      	str	r3, [r7, #28]
 801210c:	e7fe      	b.n	801210c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801210e:	235c      	movs	r3, #92	; 0x5c
 8012110:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012112:	693b      	ldr	r3, [r7, #16]
 8012114:	2b5c      	cmp	r3, #92	; 0x5c
 8012116:	d009      	beq.n	801212c <xTaskCreateStatic+0x60>
 8012118:	f04f 0350 	mov.w	r3, #80	; 0x50
 801211c:	f383 8811 	msr	BASEPRI, r3
 8012120:	f3bf 8f6f 	isb	sy
 8012124:	f3bf 8f4f 	dsb	sy
 8012128:	61bb      	str	r3, [r7, #24]
 801212a:	e7fe      	b.n	801212a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801212c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801212e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012130:	2b00      	cmp	r3, #0
 8012132:	d01e      	beq.n	8012172 <xTaskCreateStatic+0xa6>
 8012134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012136:	2b00      	cmp	r3, #0
 8012138:	d01b      	beq.n	8012172 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801213a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801213c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012140:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012142:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012146:	2202      	movs	r2, #2
 8012148:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801214c:	2300      	movs	r3, #0
 801214e:	9303      	str	r3, [sp, #12]
 8012150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012152:	9302      	str	r3, [sp, #8]
 8012154:	f107 0314 	add.w	r3, r7, #20
 8012158:	9301      	str	r3, [sp, #4]
 801215a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801215c:	9300      	str	r3, [sp, #0]
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	68b9      	ldr	r1, [r7, #8]
 8012164:	68f8      	ldr	r0, [r7, #12]
 8012166:	f000 f850 	bl	801220a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801216a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801216c:	f000 f8dc 	bl	8012328 <prvAddNewTaskToReadyList>
 8012170:	e001      	b.n	8012176 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8012172:	2300      	movs	r3, #0
 8012174:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012176:	697b      	ldr	r3, [r7, #20]
	}
 8012178:	4618      	mov	r0, r3
 801217a:	3728      	adds	r7, #40	; 0x28
 801217c:	46bd      	mov	sp, r7
 801217e:	bd80      	pop	{r7, pc}

08012180 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012180:	b580      	push	{r7, lr}
 8012182:	b08c      	sub	sp, #48	; 0x30
 8012184:	af04      	add	r7, sp, #16
 8012186:	60f8      	str	r0, [r7, #12]
 8012188:	60b9      	str	r1, [r7, #8]
 801218a:	603b      	str	r3, [r7, #0]
 801218c:	4613      	mov	r3, r2
 801218e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012190:	88fb      	ldrh	r3, [r7, #6]
 8012192:	009b      	lsls	r3, r3, #2
 8012194:	4618      	mov	r0, r3
 8012196:	f7fe fc6b 	bl	8010a70 <pvPortMalloc>
 801219a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00e      	beq.n	80121c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80121a2:	205c      	movs	r0, #92	; 0x5c
 80121a4:	f7fe fc64 	bl	8010a70 <pvPortMalloc>
 80121a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80121aa:	69fb      	ldr	r3, [r7, #28]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d003      	beq.n	80121b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80121b0:	69fb      	ldr	r3, [r7, #28]
 80121b2:	697a      	ldr	r2, [r7, #20]
 80121b4:	631a      	str	r2, [r3, #48]	; 0x30
 80121b6:	e005      	b.n	80121c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80121b8:	6978      	ldr	r0, [r7, #20]
 80121ba:	f7fe fd1b 	bl	8010bf4 <vPortFree>
 80121be:	e001      	b.n	80121c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80121c0:	2300      	movs	r3, #0
 80121c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80121c4:	69fb      	ldr	r3, [r7, #28]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d017      	beq.n	80121fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	2200      	movs	r2, #0
 80121ce:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80121d2:	88fa      	ldrh	r2, [r7, #6]
 80121d4:	2300      	movs	r3, #0
 80121d6:	9303      	str	r3, [sp, #12]
 80121d8:	69fb      	ldr	r3, [r7, #28]
 80121da:	9302      	str	r3, [sp, #8]
 80121dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121de:	9301      	str	r3, [sp, #4]
 80121e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	683b      	ldr	r3, [r7, #0]
 80121e6:	68b9      	ldr	r1, [r7, #8]
 80121e8:	68f8      	ldr	r0, [r7, #12]
 80121ea:	f000 f80e 	bl	801220a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80121ee:	69f8      	ldr	r0, [r7, #28]
 80121f0:	f000 f89a 	bl	8012328 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80121f4:	2301      	movs	r3, #1
 80121f6:	61bb      	str	r3, [r7, #24]
 80121f8:	e002      	b.n	8012200 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80121fa:	f04f 33ff 	mov.w	r3, #4294967295
 80121fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012200:	69bb      	ldr	r3, [r7, #24]
	}
 8012202:	4618      	mov	r0, r3
 8012204:	3720      	adds	r7, #32
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}

0801220a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801220a:	b580      	push	{r7, lr}
 801220c:	b088      	sub	sp, #32
 801220e:	af00      	add	r7, sp, #0
 8012210:	60f8      	str	r0, [r7, #12]
 8012212:	60b9      	str	r1, [r7, #8]
 8012214:	607a      	str	r2, [r7, #4]
 8012216:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801221a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	009b      	lsls	r3, r3, #2
 8012220:	461a      	mov	r2, r3
 8012222:	21a5      	movs	r1, #165	; 0xa5
 8012224:	f001 fdb5 	bl	8013d92 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801222a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012232:	3b01      	subs	r3, #1
 8012234:	009b      	lsls	r3, r3, #2
 8012236:	4413      	add	r3, r2
 8012238:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801223a:	69bb      	ldr	r3, [r7, #24]
 801223c:	f023 0307 	bic.w	r3, r3, #7
 8012240:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	f003 0307 	and.w	r3, r3, #7
 8012248:	2b00      	cmp	r3, #0
 801224a:	d009      	beq.n	8012260 <prvInitialiseNewTask+0x56>
 801224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012250:	f383 8811 	msr	BASEPRI, r3
 8012254:	f3bf 8f6f 	isb	sy
 8012258:	f3bf 8f4f 	dsb	sy
 801225c:	617b      	str	r3, [r7, #20]
 801225e:	e7fe      	b.n	801225e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012260:	68bb      	ldr	r3, [r7, #8]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d01f      	beq.n	80122a6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012266:	2300      	movs	r3, #0
 8012268:	61fb      	str	r3, [r7, #28]
 801226a:	e012      	b.n	8012292 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801226c:	68ba      	ldr	r2, [r7, #8]
 801226e:	69fb      	ldr	r3, [r7, #28]
 8012270:	4413      	add	r3, r2
 8012272:	7819      	ldrb	r1, [r3, #0]
 8012274:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012276:	69fb      	ldr	r3, [r7, #28]
 8012278:	4413      	add	r3, r2
 801227a:	3334      	adds	r3, #52	; 0x34
 801227c:	460a      	mov	r2, r1
 801227e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012280:	68ba      	ldr	r2, [r7, #8]
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	4413      	add	r3, r2
 8012286:	781b      	ldrb	r3, [r3, #0]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d006      	beq.n	801229a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	3301      	adds	r3, #1
 8012290:	61fb      	str	r3, [r7, #28]
 8012292:	69fb      	ldr	r3, [r7, #28]
 8012294:	2b0f      	cmp	r3, #15
 8012296:	d9e9      	bls.n	801226c <prvInitialiseNewTask+0x62>
 8012298:	e000      	b.n	801229c <prvInitialiseNewTask+0x92>
			{
				break;
 801229a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229e:	2200      	movs	r2, #0
 80122a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80122a4:	e003      	b.n	80122ae <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80122a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a8:	2200      	movs	r2, #0
 80122aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80122ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122b0:	2b37      	cmp	r3, #55	; 0x37
 80122b2:	d901      	bls.n	80122b8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80122b4:	2337      	movs	r3, #55	; 0x37
 80122b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80122b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80122be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80122c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80122c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c6:	2200      	movs	r2, #0
 80122c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80122ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122cc:	3304      	adds	r3, #4
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7fe fdc6 	bl	8010e60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80122d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d6:	3318      	adds	r3, #24
 80122d8:	4618      	mov	r0, r3
 80122da:	f7fe fdc1 	bl	8010e60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80122e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80122ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80122ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80122f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80122f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122f6:	2200      	movs	r2, #0
 80122f8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80122fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122fc:	2200      	movs	r2, #0
 80122fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012302:	683a      	ldr	r2, [r7, #0]
 8012304:	68f9      	ldr	r1, [r7, #12]
 8012306:	69b8      	ldr	r0, [r7, #24]
 8012308:	f7fe f96e 	bl	80105e8 <pxPortInitialiseStack>
 801230c:	4602      	mov	r2, r0
 801230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012310:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012314:	2b00      	cmp	r3, #0
 8012316:	d002      	beq.n	801231e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801231a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801231c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801231e:	bf00      	nop
 8012320:	3720      	adds	r7, #32
 8012322:	46bd      	mov	sp, r7
 8012324:	bd80      	pop	{r7, pc}
	...

08012328 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012328:	b580      	push	{r7, lr}
 801232a:	b082      	sub	sp, #8
 801232c:	af00      	add	r7, sp, #0
 801232e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012330:	f7fe fa84 	bl	801083c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012334:	4b2d      	ldr	r3, [pc, #180]	; (80123ec <prvAddNewTaskToReadyList+0xc4>)
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	3301      	adds	r3, #1
 801233a:	4a2c      	ldr	r2, [pc, #176]	; (80123ec <prvAddNewTaskToReadyList+0xc4>)
 801233c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801233e:	4b2c      	ldr	r3, [pc, #176]	; (80123f0 <prvAddNewTaskToReadyList+0xc8>)
 8012340:	681b      	ldr	r3, [r3, #0]
 8012342:	2b00      	cmp	r3, #0
 8012344:	d109      	bne.n	801235a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012346:	4a2a      	ldr	r2, [pc, #168]	; (80123f0 <prvAddNewTaskToReadyList+0xc8>)
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801234c:	4b27      	ldr	r3, [pc, #156]	; (80123ec <prvAddNewTaskToReadyList+0xc4>)
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b01      	cmp	r3, #1
 8012352:	d110      	bne.n	8012376 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012354:	f000 fc68 	bl	8012c28 <prvInitialiseTaskLists>
 8012358:	e00d      	b.n	8012376 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801235a:	4b26      	ldr	r3, [pc, #152]	; (80123f4 <prvAddNewTaskToReadyList+0xcc>)
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d109      	bne.n	8012376 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012362:	4b23      	ldr	r3, [pc, #140]	; (80123f0 <prvAddNewTaskToReadyList+0xc8>)
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801236c:	429a      	cmp	r2, r3
 801236e:	d802      	bhi.n	8012376 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012370:	4a1f      	ldr	r2, [pc, #124]	; (80123f0 <prvAddNewTaskToReadyList+0xc8>)
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012376:	4b20      	ldr	r3, [pc, #128]	; (80123f8 <prvAddNewTaskToReadyList+0xd0>)
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	3301      	adds	r3, #1
 801237c:	4a1e      	ldr	r2, [pc, #120]	; (80123f8 <prvAddNewTaskToReadyList+0xd0>)
 801237e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012380:	4b1d      	ldr	r3, [pc, #116]	; (80123f8 <prvAddNewTaskToReadyList+0xd0>)
 8012382:	681a      	ldr	r2, [r3, #0]
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801238c:	4b1b      	ldr	r3, [pc, #108]	; (80123fc <prvAddNewTaskToReadyList+0xd4>)
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	429a      	cmp	r2, r3
 8012392:	d903      	bls.n	801239c <prvAddNewTaskToReadyList+0x74>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012398:	4a18      	ldr	r2, [pc, #96]	; (80123fc <prvAddNewTaskToReadyList+0xd4>)
 801239a:	6013      	str	r3, [r2, #0]
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123a0:	4613      	mov	r3, r2
 80123a2:	009b      	lsls	r3, r3, #2
 80123a4:	4413      	add	r3, r2
 80123a6:	009b      	lsls	r3, r3, #2
 80123a8:	4a15      	ldr	r2, [pc, #84]	; (8012400 <prvAddNewTaskToReadyList+0xd8>)
 80123aa:	441a      	add	r2, r3
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	3304      	adds	r3, #4
 80123b0:	4619      	mov	r1, r3
 80123b2:	4610      	mov	r0, r2
 80123b4:	f7fe fd61 	bl	8010e7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80123b8:	f7fe fa6e 	bl	8010898 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80123bc:	4b0d      	ldr	r3, [pc, #52]	; (80123f4 <prvAddNewTaskToReadyList+0xcc>)
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00e      	beq.n	80123e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80123c4:	4b0a      	ldr	r3, [pc, #40]	; (80123f0 <prvAddNewTaskToReadyList+0xc8>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ce:	429a      	cmp	r2, r3
 80123d0:	d207      	bcs.n	80123e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80123d2:	4b0c      	ldr	r3, [pc, #48]	; (8012404 <prvAddNewTaskToReadyList+0xdc>)
 80123d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123d8:	601a      	str	r2, [r3, #0]
 80123da:	f3bf 8f4f 	dsb	sy
 80123de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80123e2:	bf00      	nop
 80123e4:	3708      	adds	r7, #8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}
 80123ea:	bf00      	nop
 80123ec:	2002df04 	.word	0x2002df04
 80123f0:	2002da30 	.word	0x2002da30
 80123f4:	2002df10 	.word	0x2002df10
 80123f8:	2002df20 	.word	0x2002df20
 80123fc:	2002df0c 	.word	0x2002df0c
 8012400:	2002da34 	.word	0x2002da34
 8012404:	e000ed04 	.word	0xe000ed04

08012408 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012410:	2300      	movs	r3, #0
 8012412:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d016      	beq.n	8012448 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801241a:	4b13      	ldr	r3, [pc, #76]	; (8012468 <vTaskDelay+0x60>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d009      	beq.n	8012436 <vTaskDelay+0x2e>
 8012422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012426:	f383 8811 	msr	BASEPRI, r3
 801242a:	f3bf 8f6f 	isb	sy
 801242e:	f3bf 8f4f 	dsb	sy
 8012432:	60bb      	str	r3, [r7, #8]
 8012434:	e7fe      	b.n	8012434 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8012436:	f000 f87f 	bl	8012538 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801243a:	2100      	movs	r1, #0
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f001 f899 	bl	8013574 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012442:	f000 f8bf 	bl	80125c4 <xTaskResumeAll>
 8012446:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d107      	bne.n	801245e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 801244e:	4b07      	ldr	r3, [pc, #28]	; (801246c <vTaskDelay+0x64>)
 8012450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012454:	601a      	str	r2, [r3, #0]
 8012456:	f3bf 8f4f 	dsb	sy
 801245a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801245e:	bf00      	nop
 8012460:	3710      	adds	r7, #16
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}
 8012466:	bf00      	nop
 8012468:	2002df2c 	.word	0x2002df2c
 801246c:	e000ed04 	.word	0xe000ed04

08012470 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b08a      	sub	sp, #40	; 0x28
 8012474:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012476:	2300      	movs	r3, #0
 8012478:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801247a:	2300      	movs	r3, #0
 801247c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801247e:	463a      	mov	r2, r7
 8012480:	1d39      	adds	r1, r7, #4
 8012482:	f107 0308 	add.w	r3, r7, #8
 8012486:	4618      	mov	r0, r3
 8012488:	f7fe f87a 	bl	8010580 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801248c:	6839      	ldr	r1, [r7, #0]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	68ba      	ldr	r2, [r7, #8]
 8012492:	9202      	str	r2, [sp, #8]
 8012494:	9301      	str	r3, [sp, #4]
 8012496:	2300      	movs	r3, #0
 8012498:	9300      	str	r3, [sp, #0]
 801249a:	2300      	movs	r3, #0
 801249c:	460a      	mov	r2, r1
 801249e:	4920      	ldr	r1, [pc, #128]	; (8012520 <vTaskStartScheduler+0xb0>)
 80124a0:	4820      	ldr	r0, [pc, #128]	; (8012524 <vTaskStartScheduler+0xb4>)
 80124a2:	f7ff fe13 	bl	80120cc <xTaskCreateStatic>
 80124a6:	4602      	mov	r2, r0
 80124a8:	4b1f      	ldr	r3, [pc, #124]	; (8012528 <vTaskStartScheduler+0xb8>)
 80124aa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80124ac:	4b1e      	ldr	r3, [pc, #120]	; (8012528 <vTaskStartScheduler+0xb8>)
 80124ae:	681b      	ldr	r3, [r3, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d002      	beq.n	80124ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80124b4:	2301      	movs	r3, #1
 80124b6:	617b      	str	r3, [r7, #20]
 80124b8:	e001      	b.n	80124be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80124ba:	2300      	movs	r3, #0
 80124bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2b01      	cmp	r3, #1
 80124c2:	d102      	bne.n	80124ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80124c4:	f001 f8aa 	bl	801361c <xTimerCreateTimerTask>
 80124c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	d115      	bne.n	80124fc <vTaskStartScheduler+0x8c>
 80124d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124d4:	f383 8811 	msr	BASEPRI, r3
 80124d8:	f3bf 8f6f 	isb	sy
 80124dc:	f3bf 8f4f 	dsb	sy
 80124e0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80124e2:	4b12      	ldr	r3, [pc, #72]	; (801252c <vTaskStartScheduler+0xbc>)
 80124e4:	f04f 32ff 	mov.w	r2, #4294967295
 80124e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80124ea:	4b11      	ldr	r3, [pc, #68]	; (8012530 <vTaskStartScheduler+0xc0>)
 80124ec:	2201      	movs	r2, #1
 80124ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80124f0:	4b10      	ldr	r3, [pc, #64]	; (8012534 <vTaskStartScheduler+0xc4>)
 80124f2:	2200      	movs	r2, #0
 80124f4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80124f6:	f7fe f903 	bl	8010700 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80124fa:	e00d      	b.n	8012518 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012502:	d109      	bne.n	8012518 <vTaskStartScheduler+0xa8>
 8012504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012508:	f383 8811 	msr	BASEPRI, r3
 801250c:	f3bf 8f6f 	isb	sy
 8012510:	f3bf 8f4f 	dsb	sy
 8012514:	60fb      	str	r3, [r7, #12]
 8012516:	e7fe      	b.n	8012516 <vTaskStartScheduler+0xa6>
}
 8012518:	bf00      	nop
 801251a:	3718      	adds	r7, #24
 801251c:	46bd      	mov	sp, r7
 801251e:	bd80      	pop	{r7, pc}
 8012520:	080186d8 	.word	0x080186d8
 8012524:	08012bad 	.word	0x08012bad
 8012528:	2002df28 	.word	0x2002df28
 801252c:	2002df24 	.word	0x2002df24
 8012530:	2002df10 	.word	0x2002df10
 8012534:	2002df08 	.word	0x2002df08

08012538 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012538:	b480      	push	{r7}
 801253a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801253c:	4b04      	ldr	r3, [pc, #16]	; (8012550 <vTaskSuspendAll+0x18>)
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	3301      	adds	r3, #1
 8012542:	4a03      	ldr	r2, [pc, #12]	; (8012550 <vTaskSuspendAll+0x18>)
 8012544:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012546:	bf00      	nop
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr
 8012550:	2002df2c 	.word	0x2002df2c

08012554 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 8012554:	b480      	push	{r7}
 8012556:	b083      	sub	sp, #12
 8012558:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 801255a:	2300      	movs	r3, #0
 801255c:	603b      	str	r3, [r7, #0]
		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
		task that are in the Ready state, even though the idle task is
		running. */
		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
		{
			if( uxTopReadyPriority > tskIDLE_PRIORITY )
 801255e:	4b14      	ldr	r3, [pc, #80]	; (80125b0 <prvGetExpectedIdleTime+0x5c>)
 8012560:	681b      	ldr	r3, [r3, #0]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d001      	beq.n	801256a <prvGetExpectedIdleTime+0x16>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 8012566:	2301      	movs	r3, #1
 8012568:	603b      	str	r3, [r7, #0]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 801256a:	4b12      	ldr	r3, [pc, #72]	; (80125b4 <prvGetExpectedIdleTime+0x60>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012570:	2b00      	cmp	r3, #0
 8012572:	d002      	beq.n	801257a <prvGetExpectedIdleTime+0x26>
		{
			xReturn = 0;
 8012574:	2300      	movs	r3, #0
 8012576:	607b      	str	r3, [r7, #4]
 8012578:	e012      	b.n	80125a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 801257a:	4b0f      	ldr	r3, [pc, #60]	; (80125b8 <prvGetExpectedIdleTime+0x64>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2b01      	cmp	r3, #1
 8012580:	d902      	bls.n	8012588 <prvGetExpectedIdleTime+0x34>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 8012582:	2300      	movs	r3, #0
 8012584:	607b      	str	r3, [r7, #4]
 8012586:	e00b      	b.n	80125a0 <prvGetExpectedIdleTime+0x4c>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d002      	beq.n	8012594 <prvGetExpectedIdleTime+0x40>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 801258e:	2300      	movs	r3, #0
 8012590:	607b      	str	r3, [r7, #4]
 8012592:	e005      	b.n	80125a0 <prvGetExpectedIdleTime+0x4c>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 8012594:	4b09      	ldr	r3, [pc, #36]	; (80125bc <prvGetExpectedIdleTime+0x68>)
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	4b09      	ldr	r3, [pc, #36]	; (80125c0 <prvGetExpectedIdleTime+0x6c>)
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	1ad3      	subs	r3, r2, r3
 801259e:	607b      	str	r3, [r7, #4]
		}

		return xReturn;
 80125a0:	687b      	ldr	r3, [r7, #4]
	}
 80125a2:	4618      	mov	r0, r3
 80125a4:	370c      	adds	r7, #12
 80125a6:	46bd      	mov	sp, r7
 80125a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ac:	4770      	bx	lr
 80125ae:	bf00      	nop
 80125b0:	2002df0c 	.word	0x2002df0c
 80125b4:	2002da30 	.word	0x2002da30
 80125b8:	2002da34 	.word	0x2002da34
 80125bc:	2002df24 	.word	0x2002df24
 80125c0:	2002df08 	.word	0x2002df08

080125c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b084      	sub	sp, #16
 80125c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80125ca:	2300      	movs	r3, #0
 80125cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80125ce:	2300      	movs	r3, #0
 80125d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80125d2:	4b41      	ldr	r3, [pc, #260]	; (80126d8 <xTaskResumeAll+0x114>)
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d109      	bne.n	80125ee <xTaskResumeAll+0x2a>
 80125da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125de:	f383 8811 	msr	BASEPRI, r3
 80125e2:	f3bf 8f6f 	isb	sy
 80125e6:	f3bf 8f4f 	dsb	sy
 80125ea:	603b      	str	r3, [r7, #0]
 80125ec:	e7fe      	b.n	80125ec <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80125ee:	f7fe f925 	bl	801083c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80125f2:	4b39      	ldr	r3, [pc, #228]	; (80126d8 <xTaskResumeAll+0x114>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	3b01      	subs	r3, #1
 80125f8:	4a37      	ldr	r2, [pc, #220]	; (80126d8 <xTaskResumeAll+0x114>)
 80125fa:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125fc:	4b36      	ldr	r3, [pc, #216]	; (80126d8 <xTaskResumeAll+0x114>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d162      	bne.n	80126ca <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012604:	4b35      	ldr	r3, [pc, #212]	; (80126dc <xTaskResumeAll+0x118>)
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	2b00      	cmp	r3, #0
 801260a:	d05e      	beq.n	80126ca <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801260c:	e02f      	b.n	801266e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801260e:	4b34      	ldr	r3, [pc, #208]	; (80126e0 <xTaskResumeAll+0x11c>)
 8012610:	68db      	ldr	r3, [r3, #12]
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	3318      	adds	r3, #24
 801261a:	4618      	mov	r0, r3
 801261c:	f7fe fc8a 	bl	8010f34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	3304      	adds	r3, #4
 8012624:	4618      	mov	r0, r3
 8012626:	f7fe fc85 	bl	8010f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801262a:	68fb      	ldr	r3, [r7, #12]
 801262c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801262e:	4b2d      	ldr	r3, [pc, #180]	; (80126e4 <xTaskResumeAll+0x120>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	429a      	cmp	r2, r3
 8012634:	d903      	bls.n	801263e <xTaskResumeAll+0x7a>
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801263a:	4a2a      	ldr	r2, [pc, #168]	; (80126e4 <xTaskResumeAll+0x120>)
 801263c:	6013      	str	r3, [r2, #0]
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012642:	4613      	mov	r3, r2
 8012644:	009b      	lsls	r3, r3, #2
 8012646:	4413      	add	r3, r2
 8012648:	009b      	lsls	r3, r3, #2
 801264a:	4a27      	ldr	r2, [pc, #156]	; (80126e8 <xTaskResumeAll+0x124>)
 801264c:	441a      	add	r2, r3
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	3304      	adds	r3, #4
 8012652:	4619      	mov	r1, r3
 8012654:	4610      	mov	r0, r2
 8012656:	f7fe fc10 	bl	8010e7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801265e:	4b23      	ldr	r3, [pc, #140]	; (80126ec <xTaskResumeAll+0x128>)
 8012660:	681b      	ldr	r3, [r3, #0]
 8012662:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012664:	429a      	cmp	r2, r3
 8012666:	d302      	bcc.n	801266e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8012668:	4b21      	ldr	r3, [pc, #132]	; (80126f0 <xTaskResumeAll+0x12c>)
 801266a:	2201      	movs	r2, #1
 801266c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801266e:	4b1c      	ldr	r3, [pc, #112]	; (80126e0 <xTaskResumeAll+0x11c>)
 8012670:	681b      	ldr	r3, [r3, #0]
 8012672:	2b00      	cmp	r3, #0
 8012674:	d1cb      	bne.n	801260e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	2b00      	cmp	r3, #0
 801267a:	d001      	beq.n	8012680 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801267c:	f000 fb6e 	bl	8012d5c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012680:	4b1c      	ldr	r3, [pc, #112]	; (80126f4 <xTaskResumeAll+0x130>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d010      	beq.n	80126ae <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801268c:	f000 f846 	bl	801271c <xTaskIncrementTick>
 8012690:	4603      	mov	r3, r0
 8012692:	2b00      	cmp	r3, #0
 8012694:	d002      	beq.n	801269c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8012696:	4b16      	ldr	r3, [pc, #88]	; (80126f0 <xTaskResumeAll+0x12c>)
 8012698:	2201      	movs	r2, #1
 801269a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	3b01      	subs	r3, #1
 80126a0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d1f1      	bne.n	801268c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80126a8:	4b12      	ldr	r3, [pc, #72]	; (80126f4 <xTaskResumeAll+0x130>)
 80126aa:	2200      	movs	r2, #0
 80126ac:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80126ae:	4b10      	ldr	r3, [pc, #64]	; (80126f0 <xTaskResumeAll+0x12c>)
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d009      	beq.n	80126ca <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80126b6:	2301      	movs	r3, #1
 80126b8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80126ba:	4b0f      	ldr	r3, [pc, #60]	; (80126f8 <xTaskResumeAll+0x134>)
 80126bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80126c0:	601a      	str	r2, [r3, #0]
 80126c2:	f3bf 8f4f 	dsb	sy
 80126c6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80126ca:	f7fe f8e5 	bl	8010898 <vPortExitCritical>

	return xAlreadyYielded;
 80126ce:	68bb      	ldr	r3, [r7, #8]
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	3710      	adds	r7, #16
 80126d4:	46bd      	mov	sp, r7
 80126d6:	bd80      	pop	{r7, pc}
 80126d8:	2002df2c 	.word	0x2002df2c
 80126dc:	2002df04 	.word	0x2002df04
 80126e0:	2002dec4 	.word	0x2002dec4
 80126e4:	2002df0c 	.word	0x2002df0c
 80126e8:	2002da34 	.word	0x2002da34
 80126ec:	2002da30 	.word	0x2002da30
 80126f0:	2002df18 	.word	0x2002df18
 80126f4:	2002df14 	.word	0x2002df14
 80126f8:	e000ed04 	.word	0xe000ed04

080126fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80126fc:	b480      	push	{r7}
 80126fe:	b083      	sub	sp, #12
 8012700:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012702:	4b05      	ldr	r3, [pc, #20]	; (8012718 <xTaskGetTickCount+0x1c>)
 8012704:	681b      	ldr	r3, [r3, #0]
 8012706:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012708:	687b      	ldr	r3, [r7, #4]
}
 801270a:	4618      	mov	r0, r3
 801270c:	370c      	adds	r7, #12
 801270e:	46bd      	mov	sp, r7
 8012710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012714:	4770      	bx	lr
 8012716:	bf00      	nop
 8012718:	2002df08 	.word	0x2002df08

0801271c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801271c:	b580      	push	{r7, lr}
 801271e:	b086      	sub	sp, #24
 8012720:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012722:	2300      	movs	r3, #0
 8012724:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012726:	4b4e      	ldr	r3, [pc, #312]	; (8012860 <xTaskIncrementTick+0x144>)
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	2b00      	cmp	r3, #0
 801272c:	f040 8088 	bne.w	8012840 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012730:	4b4c      	ldr	r3, [pc, #304]	; (8012864 <xTaskIncrementTick+0x148>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	3301      	adds	r3, #1
 8012736:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012738:	4a4a      	ldr	r2, [pc, #296]	; (8012864 <xTaskIncrementTick+0x148>)
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801273e:	693b      	ldr	r3, [r7, #16]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d11f      	bne.n	8012784 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8012744:	4b48      	ldr	r3, [pc, #288]	; (8012868 <xTaskIncrementTick+0x14c>)
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	681b      	ldr	r3, [r3, #0]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d009      	beq.n	8012762 <xTaskIncrementTick+0x46>
 801274e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012752:	f383 8811 	msr	BASEPRI, r3
 8012756:	f3bf 8f6f 	isb	sy
 801275a:	f3bf 8f4f 	dsb	sy
 801275e:	603b      	str	r3, [r7, #0]
 8012760:	e7fe      	b.n	8012760 <xTaskIncrementTick+0x44>
 8012762:	4b41      	ldr	r3, [pc, #260]	; (8012868 <xTaskIncrementTick+0x14c>)
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	60fb      	str	r3, [r7, #12]
 8012768:	4b40      	ldr	r3, [pc, #256]	; (801286c <xTaskIncrementTick+0x150>)
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	4a3e      	ldr	r2, [pc, #248]	; (8012868 <xTaskIncrementTick+0x14c>)
 801276e:	6013      	str	r3, [r2, #0]
 8012770:	4a3e      	ldr	r2, [pc, #248]	; (801286c <xTaskIncrementTick+0x150>)
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	6013      	str	r3, [r2, #0]
 8012776:	4b3e      	ldr	r3, [pc, #248]	; (8012870 <xTaskIncrementTick+0x154>)
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	3301      	adds	r3, #1
 801277c:	4a3c      	ldr	r2, [pc, #240]	; (8012870 <xTaskIncrementTick+0x154>)
 801277e:	6013      	str	r3, [r2, #0]
 8012780:	f000 faec 	bl	8012d5c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012784:	4b3b      	ldr	r3, [pc, #236]	; (8012874 <xTaskIncrementTick+0x158>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	693a      	ldr	r2, [r7, #16]
 801278a:	429a      	cmp	r2, r3
 801278c:	d349      	bcc.n	8012822 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801278e:	4b36      	ldr	r3, [pc, #216]	; (8012868 <xTaskIncrementTick+0x14c>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	2b00      	cmp	r3, #0
 8012796:	d104      	bne.n	80127a2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012798:	4b36      	ldr	r3, [pc, #216]	; (8012874 <xTaskIncrementTick+0x158>)
 801279a:	f04f 32ff 	mov.w	r2, #4294967295
 801279e:	601a      	str	r2, [r3, #0]
					break;
 80127a0:	e03f      	b.n	8012822 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127a2:	4b31      	ldr	r3, [pc, #196]	; (8012868 <xTaskIncrementTick+0x14c>)
 80127a4:	681b      	ldr	r3, [r3, #0]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	68db      	ldr	r3, [r3, #12]
 80127aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	685b      	ldr	r3, [r3, #4]
 80127b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80127b2:	693a      	ldr	r2, [r7, #16]
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d203      	bcs.n	80127c2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80127ba:	4a2e      	ldr	r2, [pc, #184]	; (8012874 <xTaskIncrementTick+0x158>)
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80127c0:	e02f      	b.n	8012822 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	3304      	adds	r3, #4
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7fe fbb4 	bl	8010f34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80127cc:	68bb      	ldr	r3, [r7, #8]
 80127ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d004      	beq.n	80127de <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	3318      	adds	r3, #24
 80127d8:	4618      	mov	r0, r3
 80127da:	f7fe fbab 	bl	8010f34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127e2:	4b25      	ldr	r3, [pc, #148]	; (8012878 <xTaskIncrementTick+0x15c>)
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d903      	bls.n	80127f2 <xTaskIncrementTick+0xd6>
 80127ea:	68bb      	ldr	r3, [r7, #8]
 80127ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127ee:	4a22      	ldr	r2, [pc, #136]	; (8012878 <xTaskIncrementTick+0x15c>)
 80127f0:	6013      	str	r3, [r2, #0]
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127f6:	4613      	mov	r3, r2
 80127f8:	009b      	lsls	r3, r3, #2
 80127fa:	4413      	add	r3, r2
 80127fc:	009b      	lsls	r3, r3, #2
 80127fe:	4a1f      	ldr	r2, [pc, #124]	; (801287c <xTaskIncrementTick+0x160>)
 8012800:	441a      	add	r2, r3
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	3304      	adds	r3, #4
 8012806:	4619      	mov	r1, r3
 8012808:	4610      	mov	r0, r2
 801280a:	f7fe fb36 	bl	8010e7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012812:	4b1b      	ldr	r3, [pc, #108]	; (8012880 <xTaskIncrementTick+0x164>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012818:	429a      	cmp	r2, r3
 801281a:	d3b8      	bcc.n	801278e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 801281c:	2301      	movs	r3, #1
 801281e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012820:	e7b5      	b.n	801278e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012822:	4b17      	ldr	r3, [pc, #92]	; (8012880 <xTaskIncrementTick+0x164>)
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012828:	4914      	ldr	r1, [pc, #80]	; (801287c <xTaskIncrementTick+0x160>)
 801282a:	4613      	mov	r3, r2
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	4413      	add	r3, r2
 8012830:	009b      	lsls	r3, r3, #2
 8012832:	440b      	add	r3, r1
 8012834:	681b      	ldr	r3, [r3, #0]
 8012836:	2b01      	cmp	r3, #1
 8012838:	d907      	bls.n	801284a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 801283a:	2301      	movs	r3, #1
 801283c:	617b      	str	r3, [r7, #20]
 801283e:	e004      	b.n	801284a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012840:	4b10      	ldr	r3, [pc, #64]	; (8012884 <xTaskIncrementTick+0x168>)
 8012842:	681b      	ldr	r3, [r3, #0]
 8012844:	3301      	adds	r3, #1
 8012846:	4a0f      	ldr	r2, [pc, #60]	; (8012884 <xTaskIncrementTick+0x168>)
 8012848:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801284a:	4b0f      	ldr	r3, [pc, #60]	; (8012888 <xTaskIncrementTick+0x16c>)
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d001      	beq.n	8012856 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8012852:	2301      	movs	r3, #1
 8012854:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012856:	697b      	ldr	r3, [r7, #20]
}
 8012858:	4618      	mov	r0, r3
 801285a:	3718      	adds	r7, #24
 801285c:	46bd      	mov	sp, r7
 801285e:	bd80      	pop	{r7, pc}
 8012860:	2002df2c 	.word	0x2002df2c
 8012864:	2002df08 	.word	0x2002df08
 8012868:	2002debc 	.word	0x2002debc
 801286c:	2002dec0 	.word	0x2002dec0
 8012870:	2002df1c 	.word	0x2002df1c
 8012874:	2002df24 	.word	0x2002df24
 8012878:	2002df0c 	.word	0x2002df0c
 801287c:	2002da34 	.word	0x2002da34
 8012880:	2002da30 	.word	0x2002da30
 8012884:	2002df14 	.word	0x2002df14
 8012888:	2002df18 	.word	0x2002df18

0801288c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801288c:	b480      	push	{r7}
 801288e:	b085      	sub	sp, #20
 8012890:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012892:	4b27      	ldr	r3, [pc, #156]	; (8012930 <vTaskSwitchContext+0xa4>)
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d003      	beq.n	80128a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801289a:	4b26      	ldr	r3, [pc, #152]	; (8012934 <vTaskSwitchContext+0xa8>)
 801289c:	2201      	movs	r2, #1
 801289e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80128a0:	e040      	b.n	8012924 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80128a2:	4b24      	ldr	r3, [pc, #144]	; (8012934 <vTaskSwitchContext+0xa8>)
 80128a4:	2200      	movs	r2, #0
 80128a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128a8:	4b23      	ldr	r3, [pc, #140]	; (8012938 <vTaskSwitchContext+0xac>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	60fb      	str	r3, [r7, #12]
 80128ae:	e00f      	b.n	80128d0 <vTaskSwitchContext+0x44>
 80128b0:	68fb      	ldr	r3, [r7, #12]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d109      	bne.n	80128ca <vTaskSwitchContext+0x3e>
 80128b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128ba:	f383 8811 	msr	BASEPRI, r3
 80128be:	f3bf 8f6f 	isb	sy
 80128c2:	f3bf 8f4f 	dsb	sy
 80128c6:	607b      	str	r3, [r7, #4]
 80128c8:	e7fe      	b.n	80128c8 <vTaskSwitchContext+0x3c>
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	3b01      	subs	r3, #1
 80128ce:	60fb      	str	r3, [r7, #12]
 80128d0:	491a      	ldr	r1, [pc, #104]	; (801293c <vTaskSwitchContext+0xb0>)
 80128d2:	68fa      	ldr	r2, [r7, #12]
 80128d4:	4613      	mov	r3, r2
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	4413      	add	r3, r2
 80128da:	009b      	lsls	r3, r3, #2
 80128dc:	440b      	add	r3, r1
 80128de:	681b      	ldr	r3, [r3, #0]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d0e5      	beq.n	80128b0 <vTaskSwitchContext+0x24>
 80128e4:	68fa      	ldr	r2, [r7, #12]
 80128e6:	4613      	mov	r3, r2
 80128e8:	009b      	lsls	r3, r3, #2
 80128ea:	4413      	add	r3, r2
 80128ec:	009b      	lsls	r3, r3, #2
 80128ee:	4a13      	ldr	r2, [pc, #76]	; (801293c <vTaskSwitchContext+0xb0>)
 80128f0:	4413      	add	r3, r2
 80128f2:	60bb      	str	r3, [r7, #8]
 80128f4:	68bb      	ldr	r3, [r7, #8]
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	685a      	ldr	r2, [r3, #4]
 80128fa:	68bb      	ldr	r3, [r7, #8]
 80128fc:	605a      	str	r2, [r3, #4]
 80128fe:	68bb      	ldr	r3, [r7, #8]
 8012900:	685a      	ldr	r2, [r3, #4]
 8012902:	68bb      	ldr	r3, [r7, #8]
 8012904:	3308      	adds	r3, #8
 8012906:	429a      	cmp	r2, r3
 8012908:	d104      	bne.n	8012914 <vTaskSwitchContext+0x88>
 801290a:	68bb      	ldr	r3, [r7, #8]
 801290c:	685b      	ldr	r3, [r3, #4]
 801290e:	685a      	ldr	r2, [r3, #4]
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	605a      	str	r2, [r3, #4]
 8012914:	68bb      	ldr	r3, [r7, #8]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	68db      	ldr	r3, [r3, #12]
 801291a:	4a09      	ldr	r2, [pc, #36]	; (8012940 <vTaskSwitchContext+0xb4>)
 801291c:	6013      	str	r3, [r2, #0]
 801291e:	4a06      	ldr	r2, [pc, #24]	; (8012938 <vTaskSwitchContext+0xac>)
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	6013      	str	r3, [r2, #0]
}
 8012924:	bf00      	nop
 8012926:	3714      	adds	r7, #20
 8012928:	46bd      	mov	sp, r7
 801292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801292e:	4770      	bx	lr
 8012930:	2002df2c 	.word	0x2002df2c
 8012934:	2002df18 	.word	0x2002df18
 8012938:	2002df0c 	.word	0x2002df0c
 801293c:	2002da34 	.word	0x2002da34
 8012940:	2002da30 	.word	0x2002da30

08012944 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012944:	b580      	push	{r7, lr}
 8012946:	b084      	sub	sp, #16
 8012948:	af00      	add	r7, sp, #0
 801294a:	6078      	str	r0, [r7, #4]
 801294c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d109      	bne.n	8012968 <vTaskPlaceOnEventList+0x24>
 8012954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012958:	f383 8811 	msr	BASEPRI, r3
 801295c:	f3bf 8f6f 	isb	sy
 8012960:	f3bf 8f4f 	dsb	sy
 8012964:	60fb      	str	r3, [r7, #12]
 8012966:	e7fe      	b.n	8012966 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012968:	4b07      	ldr	r3, [pc, #28]	; (8012988 <vTaskPlaceOnEventList+0x44>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	3318      	adds	r3, #24
 801296e:	4619      	mov	r1, r3
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f7fe faa6 	bl	8010ec2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012976:	2101      	movs	r1, #1
 8012978:	6838      	ldr	r0, [r7, #0]
 801297a:	f000 fdfb 	bl	8013574 <prvAddCurrentTaskToDelayedList>
}
 801297e:	bf00      	nop
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}
 8012986:	bf00      	nop
 8012988:	2002da30 	.word	0x2002da30

0801298c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801298c:	b580      	push	{r7, lr}
 801298e:	b086      	sub	sp, #24
 8012990:	af00      	add	r7, sp, #0
 8012992:	60f8      	str	r0, [r7, #12]
 8012994:	60b9      	str	r1, [r7, #8]
 8012996:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d109      	bne.n	80129b2 <vTaskPlaceOnEventListRestricted+0x26>
 801299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129a2:	f383 8811 	msr	BASEPRI, r3
 80129a6:	f3bf 8f6f 	isb	sy
 80129aa:	f3bf 8f4f 	dsb	sy
 80129ae:	617b      	str	r3, [r7, #20]
 80129b0:	e7fe      	b.n	80129b0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80129b2:	4b0a      	ldr	r3, [pc, #40]	; (80129dc <vTaskPlaceOnEventListRestricted+0x50>)
 80129b4:	681b      	ldr	r3, [r3, #0]
 80129b6:	3318      	adds	r3, #24
 80129b8:	4619      	mov	r1, r3
 80129ba:	68f8      	ldr	r0, [r7, #12]
 80129bc:	f7fe fa5d 	bl	8010e7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d002      	beq.n	80129cc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80129c6:	f04f 33ff 	mov.w	r3, #4294967295
 80129ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80129cc:	6879      	ldr	r1, [r7, #4]
 80129ce:	68b8      	ldr	r0, [r7, #8]
 80129d0:	f000 fdd0 	bl	8013574 <prvAddCurrentTaskToDelayedList>
	}
 80129d4:	bf00      	nop
 80129d6:	3718      	adds	r7, #24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	2002da30 	.word	0x2002da30

080129e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	68db      	ldr	r3, [r3, #12]
 80129ec:	68db      	ldr	r3, [r3, #12]
 80129ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80129f0:	693b      	ldr	r3, [r7, #16]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d109      	bne.n	8012a0a <xTaskRemoveFromEventList+0x2a>
 80129f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129fa:	f383 8811 	msr	BASEPRI, r3
 80129fe:	f3bf 8f6f 	isb	sy
 8012a02:	f3bf 8f4f 	dsb	sy
 8012a06:	60fb      	str	r3, [r7, #12]
 8012a08:	e7fe      	b.n	8012a08 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	3318      	adds	r3, #24
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fe fa90 	bl	8010f34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a14:	4b1e      	ldr	r3, [pc, #120]	; (8012a90 <xTaskRemoveFromEventList+0xb0>)
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d11f      	bne.n	8012a5c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	3304      	adds	r3, #4
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7fe fa87 	bl	8010f34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a2a:	4b1a      	ldr	r3, [pc, #104]	; (8012a94 <xTaskRemoveFromEventList+0xb4>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d903      	bls.n	8012a3a <xTaskRemoveFromEventList+0x5a>
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a36:	4a17      	ldr	r2, [pc, #92]	; (8012a94 <xTaskRemoveFromEventList+0xb4>)
 8012a38:	6013      	str	r3, [r2, #0]
 8012a3a:	693b      	ldr	r3, [r7, #16]
 8012a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a3e:	4613      	mov	r3, r2
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	4413      	add	r3, r2
 8012a44:	009b      	lsls	r3, r3, #2
 8012a46:	4a14      	ldr	r2, [pc, #80]	; (8012a98 <xTaskRemoveFromEventList+0xb8>)
 8012a48:	441a      	add	r2, r3
 8012a4a:	693b      	ldr	r3, [r7, #16]
 8012a4c:	3304      	adds	r3, #4
 8012a4e:	4619      	mov	r1, r3
 8012a50:	4610      	mov	r0, r2
 8012a52:	f7fe fa12 	bl	8010e7a <vListInsertEnd>
			normally left unchanged, because it is automatically reset to a new
			value when the tick count equals xNextTaskUnblockTime.  However if
			tickless idling is used it might be more important to enter sleep mode
			at the earliest possible time - so reset xNextTaskUnblockTime here to
			ensure it is updated at the earliest possible time. */
			prvResetNextTaskUnblockTime();
 8012a56:	f000 f981 	bl	8012d5c <prvResetNextTaskUnblockTime>
 8012a5a:	e005      	b.n	8012a68 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012a5c:	693b      	ldr	r3, [r7, #16]
 8012a5e:	3318      	adds	r3, #24
 8012a60:	4619      	mov	r1, r3
 8012a62:	480e      	ldr	r0, [pc, #56]	; (8012a9c <xTaskRemoveFromEventList+0xbc>)
 8012a64:	f7fe fa09 	bl	8010e7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a6c:	4b0c      	ldr	r3, [pc, #48]	; (8012aa0 <xTaskRemoveFromEventList+0xc0>)
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a72:	429a      	cmp	r2, r3
 8012a74:	d905      	bls.n	8012a82 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012a76:	2301      	movs	r3, #1
 8012a78:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012a7a:	4b0a      	ldr	r3, [pc, #40]	; (8012aa4 <xTaskRemoveFromEventList+0xc4>)
 8012a7c:	2201      	movs	r2, #1
 8012a7e:	601a      	str	r2, [r3, #0]
 8012a80:	e001      	b.n	8012a86 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012a82:	2300      	movs	r3, #0
 8012a84:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012a86:	697b      	ldr	r3, [r7, #20]
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3718      	adds	r7, #24
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}
 8012a90:	2002df2c 	.word	0x2002df2c
 8012a94:	2002df0c 	.word	0x2002df0c
 8012a98:	2002da34 	.word	0x2002da34
 8012a9c:	2002dec4 	.word	0x2002dec4
 8012aa0:	2002da30 	.word	0x2002da30
 8012aa4:	2002df18 	.word	0x2002df18

08012aa8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012aa8:	b480      	push	{r7}
 8012aaa:	b083      	sub	sp, #12
 8012aac:	af00      	add	r7, sp, #0
 8012aae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012ab0:	4b06      	ldr	r3, [pc, #24]	; (8012acc <vTaskInternalSetTimeOutState+0x24>)
 8012ab2:	681a      	ldr	r2, [r3, #0]
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012ab8:	4b05      	ldr	r3, [pc, #20]	; (8012ad0 <vTaskInternalSetTimeOutState+0x28>)
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	605a      	str	r2, [r3, #4]
}
 8012ac0:	bf00      	nop
 8012ac2:	370c      	adds	r7, #12
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	2002df1c 	.word	0x2002df1c
 8012ad0:	2002df08 	.word	0x2002df08

08012ad4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b088      	sub	sp, #32
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d109      	bne.n	8012af8 <xTaskCheckForTimeOut+0x24>
 8012ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ae8:	f383 8811 	msr	BASEPRI, r3
 8012aec:	f3bf 8f6f 	isb	sy
 8012af0:	f3bf 8f4f 	dsb	sy
 8012af4:	613b      	str	r3, [r7, #16]
 8012af6:	e7fe      	b.n	8012af6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8012af8:	683b      	ldr	r3, [r7, #0]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d109      	bne.n	8012b12 <xTaskCheckForTimeOut+0x3e>
 8012afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b02:	f383 8811 	msr	BASEPRI, r3
 8012b06:	f3bf 8f6f 	isb	sy
 8012b0a:	f3bf 8f4f 	dsb	sy
 8012b0e:	60fb      	str	r3, [r7, #12]
 8012b10:	e7fe      	b.n	8012b10 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8012b12:	f7fd fe93 	bl	801083c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012b16:	4b1d      	ldr	r3, [pc, #116]	; (8012b8c <xTaskCheckForTimeOut+0xb8>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	69ba      	ldr	r2, [r7, #24]
 8012b22:	1ad3      	subs	r3, r2, r3
 8012b24:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	681b      	ldr	r3, [r3, #0]
 8012b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b2e:	d102      	bne.n	8012b36 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012b30:	2300      	movs	r3, #0
 8012b32:	61fb      	str	r3, [r7, #28]
 8012b34:	e023      	b.n	8012b7e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681a      	ldr	r2, [r3, #0]
 8012b3a:	4b15      	ldr	r3, [pc, #84]	; (8012b90 <xTaskCheckForTimeOut+0xbc>)
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	d007      	beq.n	8012b52 <xTaskCheckForTimeOut+0x7e>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	685b      	ldr	r3, [r3, #4]
 8012b46:	69ba      	ldr	r2, [r7, #24]
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d302      	bcc.n	8012b52 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012b4c:	2301      	movs	r3, #1
 8012b4e:	61fb      	str	r3, [r7, #28]
 8012b50:	e015      	b.n	8012b7e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012b52:	683b      	ldr	r3, [r7, #0]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	697a      	ldr	r2, [r7, #20]
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d20b      	bcs.n	8012b74 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	681a      	ldr	r2, [r3, #0]
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	1ad2      	subs	r2, r2, r3
 8012b64:	683b      	ldr	r3, [r7, #0]
 8012b66:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f7ff ff9d 	bl	8012aa8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012b6e:	2300      	movs	r3, #0
 8012b70:	61fb      	str	r3, [r7, #28]
 8012b72:	e004      	b.n	8012b7e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	2200      	movs	r2, #0
 8012b78:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012b7a:	2301      	movs	r3, #1
 8012b7c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012b7e:	f7fd fe8b 	bl	8010898 <vPortExitCritical>

	return xReturn;
 8012b82:	69fb      	ldr	r3, [r7, #28]
}
 8012b84:	4618      	mov	r0, r3
 8012b86:	3720      	adds	r7, #32
 8012b88:	46bd      	mov	sp, r7
 8012b8a:	bd80      	pop	{r7, pc}
 8012b8c:	2002df08 	.word	0x2002df08
 8012b90:	2002df1c 	.word	0x2002df1c

08012b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012b94:	b480      	push	{r7}
 8012b96:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012b98:	4b03      	ldr	r3, [pc, #12]	; (8012ba8 <vTaskMissedYield+0x14>)
 8012b9a:	2201      	movs	r2, #1
 8012b9c:	601a      	str	r2, [r3, #0]
}
 8012b9e:	bf00      	nop
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba6:	4770      	bx	lr
 8012ba8:	2002df18 	.word	0x2002df18

08012bac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012bac:	b580      	push	{r7, lr}
 8012bae:	b084      	sub	sp, #16
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012bb4:	f000 f878 	bl	8012ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012bb8:	4b17      	ldr	r3, [pc, #92]	; (8012c18 <prvIdleTask+0x6c>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d907      	bls.n	8012bd0 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012bc0:	4b16      	ldr	r3, [pc, #88]	; (8012c1c <prvIdleTask+0x70>)
 8012bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	f3bf 8f4f 	dsb	sy
 8012bcc:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 8012bd0:	f7ff fcc0 	bl	8012554 <prvGetExpectedIdleTime>
 8012bd4:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b01      	cmp	r3, #1
 8012bda:	d9eb      	bls.n	8012bb4 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8012bdc:	f7ff fcac 	bl	8012538 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 8012be0:	4b0f      	ldr	r3, [pc, #60]	; (8012c20 <prvIdleTask+0x74>)
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	4b0f      	ldr	r3, [pc, #60]	; (8012c24 <prvIdleTask+0x78>)
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	429a      	cmp	r2, r3
 8012bea:	d209      	bcs.n	8012c00 <prvIdleTask+0x54>
 8012bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf0:	f383 8811 	msr	BASEPRI, r3
 8012bf4:	f3bf 8f6f 	isb	sy
 8012bf8:	f3bf 8f4f 	dsb	sy
 8012bfc:	60bb      	str	r3, [r7, #8]
 8012bfe:	e7fe      	b.n	8012bfe <prvIdleTask+0x52>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 8012c00:	f7ff fca8 	bl	8012554 <prvGetExpectedIdleTime>
 8012c04:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	2b01      	cmp	r3, #1
 8012c0a:	d902      	bls.n	8012c12 <prvIdleTask+0x66>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 8012c0c:	68f8      	ldr	r0, [r7, #12]
 8012c0e:	f7ef ff04 	bl	8002a1a <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8012c12:	f7ff fcd7 	bl	80125c4 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8012c16:	e7cd      	b.n	8012bb4 <prvIdleTask+0x8>
 8012c18:	2002da34 	.word	0x2002da34
 8012c1c:	e000ed04 	.word	0xe000ed04
 8012c20:	2002df24 	.word	0x2002df24
 8012c24:	2002df08 	.word	0x2002df08

08012c28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b082      	sub	sp, #8
 8012c2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c2e:	2300      	movs	r3, #0
 8012c30:	607b      	str	r3, [r7, #4]
 8012c32:	e00c      	b.n	8012c4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	4613      	mov	r3, r2
 8012c38:	009b      	lsls	r3, r3, #2
 8012c3a:	4413      	add	r3, r2
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4a12      	ldr	r2, [pc, #72]	; (8012c88 <prvInitialiseTaskLists+0x60>)
 8012c40:	4413      	add	r3, r2
 8012c42:	4618      	mov	r0, r3
 8012c44:	f7fe f8ec 	bl	8010e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	607b      	str	r3, [r7, #4]
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	2b37      	cmp	r3, #55	; 0x37
 8012c52:	d9ef      	bls.n	8012c34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012c54:	480d      	ldr	r0, [pc, #52]	; (8012c8c <prvInitialiseTaskLists+0x64>)
 8012c56:	f7fe f8e3 	bl	8010e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012c5a:	480d      	ldr	r0, [pc, #52]	; (8012c90 <prvInitialiseTaskLists+0x68>)
 8012c5c:	f7fe f8e0 	bl	8010e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012c60:	480c      	ldr	r0, [pc, #48]	; (8012c94 <prvInitialiseTaskLists+0x6c>)
 8012c62:	f7fe f8dd 	bl	8010e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012c66:	480c      	ldr	r0, [pc, #48]	; (8012c98 <prvInitialiseTaskLists+0x70>)
 8012c68:	f7fe f8da 	bl	8010e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012c6c:	480b      	ldr	r0, [pc, #44]	; (8012c9c <prvInitialiseTaskLists+0x74>)
 8012c6e:	f7fe f8d7 	bl	8010e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012c72:	4b0b      	ldr	r3, [pc, #44]	; (8012ca0 <prvInitialiseTaskLists+0x78>)
 8012c74:	4a05      	ldr	r2, [pc, #20]	; (8012c8c <prvInitialiseTaskLists+0x64>)
 8012c76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012c78:	4b0a      	ldr	r3, [pc, #40]	; (8012ca4 <prvInitialiseTaskLists+0x7c>)
 8012c7a:	4a05      	ldr	r2, [pc, #20]	; (8012c90 <prvInitialiseTaskLists+0x68>)
 8012c7c:	601a      	str	r2, [r3, #0]
}
 8012c7e:	bf00      	nop
 8012c80:	3708      	adds	r7, #8
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
 8012c86:	bf00      	nop
 8012c88:	2002da34 	.word	0x2002da34
 8012c8c:	2002de94 	.word	0x2002de94
 8012c90:	2002dea8 	.word	0x2002dea8
 8012c94:	2002dec4 	.word	0x2002dec4
 8012c98:	2002ded8 	.word	0x2002ded8
 8012c9c:	2002def0 	.word	0x2002def0
 8012ca0:	2002debc 	.word	0x2002debc
 8012ca4:	2002dec0 	.word	0x2002dec0

08012ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012cae:	e019      	b.n	8012ce4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012cb0:	f7fd fdc4 	bl	801083c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012cb4:	4b0f      	ldr	r3, [pc, #60]	; (8012cf4 <prvCheckTasksWaitingTermination+0x4c>)
 8012cb6:	68db      	ldr	r3, [r3, #12]
 8012cb8:	68db      	ldr	r3, [r3, #12]
 8012cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	3304      	adds	r3, #4
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	f7fe f937 	bl	8010f34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012cc6:	4b0c      	ldr	r3, [pc, #48]	; (8012cf8 <prvCheckTasksWaitingTermination+0x50>)
 8012cc8:	681b      	ldr	r3, [r3, #0]
 8012cca:	3b01      	subs	r3, #1
 8012ccc:	4a0a      	ldr	r2, [pc, #40]	; (8012cf8 <prvCheckTasksWaitingTermination+0x50>)
 8012cce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012cd0:	4b0a      	ldr	r3, [pc, #40]	; (8012cfc <prvCheckTasksWaitingTermination+0x54>)
 8012cd2:	681b      	ldr	r3, [r3, #0]
 8012cd4:	3b01      	subs	r3, #1
 8012cd6:	4a09      	ldr	r2, [pc, #36]	; (8012cfc <prvCheckTasksWaitingTermination+0x54>)
 8012cd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012cda:	f7fd fddd 	bl	8010898 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f000 f80e 	bl	8012d00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ce4:	4b05      	ldr	r3, [pc, #20]	; (8012cfc <prvCheckTasksWaitingTermination+0x54>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d1e1      	bne.n	8012cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012cec:	bf00      	nop
 8012cee:	3708      	adds	r7, #8
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	2002ded8 	.word	0x2002ded8
 8012cf8:	2002df04 	.word	0x2002df04
 8012cfc:	2002deec 	.word	0x2002deec

08012d00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d108      	bne.n	8012d24 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d16:	4618      	mov	r0, r3
 8012d18:	f7fd ff6c 	bl	8010bf4 <vPortFree>
				vPortFree( pxTCB );
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f7fd ff69 	bl	8010bf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012d22:	e017      	b.n	8012d54 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012d2a:	2b01      	cmp	r3, #1
 8012d2c:	d103      	bne.n	8012d36 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8012d2e:	6878      	ldr	r0, [r7, #4]
 8012d30:	f7fd ff60 	bl	8010bf4 <vPortFree>
	}
 8012d34:	e00e      	b.n	8012d54 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d009      	beq.n	8012d54 <prvDeleteTCB+0x54>
 8012d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d44:	f383 8811 	msr	BASEPRI, r3
 8012d48:	f3bf 8f6f 	isb	sy
 8012d4c:	f3bf 8f4f 	dsb	sy
 8012d50:	60fb      	str	r3, [r7, #12]
 8012d52:	e7fe      	b.n	8012d52 <prvDeleteTCB+0x52>
	}
 8012d54:	bf00      	nop
 8012d56:	3710      	adds	r7, #16
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd80      	pop	{r7, pc}

08012d5c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012d62:	4b0c      	ldr	r3, [pc, #48]	; (8012d94 <prvResetNextTaskUnblockTime+0x38>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d104      	bne.n	8012d76 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012d6c:	4b0a      	ldr	r3, [pc, #40]	; (8012d98 <prvResetNextTaskUnblockTime+0x3c>)
 8012d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d72:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012d74:	e008      	b.n	8012d88 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012d76:	4b07      	ldr	r3, [pc, #28]	; (8012d94 <prvResetNextTaskUnblockTime+0x38>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68db      	ldr	r3, [r3, #12]
 8012d7c:	68db      	ldr	r3, [r3, #12]
 8012d7e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	685b      	ldr	r3, [r3, #4]
 8012d84:	4a04      	ldr	r2, [pc, #16]	; (8012d98 <prvResetNextTaskUnblockTime+0x3c>)
 8012d86:	6013      	str	r3, [r2, #0]
}
 8012d88:	bf00      	nop
 8012d8a:	370c      	adds	r7, #12
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d92:	4770      	bx	lr
 8012d94:	2002debc 	.word	0x2002debc
 8012d98:	2002df24 	.word	0x2002df24

08012d9c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8012d9c:	b480      	push	{r7}
 8012d9e:	b083      	sub	sp, #12
 8012da0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8012da2:	4b05      	ldr	r3, [pc, #20]	; (8012db8 <xTaskGetCurrentTaskHandle+0x1c>)
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	607b      	str	r3, [r7, #4]

		return xReturn;
 8012da8:	687b      	ldr	r3, [r7, #4]
	}
 8012daa:	4618      	mov	r0, r3
 8012dac:	370c      	adds	r7, #12
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr
 8012db6:	bf00      	nop
 8012db8:	2002da30 	.word	0x2002da30

08012dbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012dc2:	4b0b      	ldr	r3, [pc, #44]	; (8012df0 <xTaskGetSchedulerState+0x34>)
 8012dc4:	681b      	ldr	r3, [r3, #0]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d102      	bne.n	8012dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	607b      	str	r3, [r7, #4]
 8012dce:	e008      	b.n	8012de2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012dd0:	4b08      	ldr	r3, [pc, #32]	; (8012df4 <xTaskGetSchedulerState+0x38>)
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d102      	bne.n	8012dde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012dd8:	2302      	movs	r3, #2
 8012dda:	607b      	str	r3, [r7, #4]
 8012ddc:	e001      	b.n	8012de2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012dde:	2300      	movs	r3, #0
 8012de0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012de2:	687b      	ldr	r3, [r7, #4]
	}
 8012de4:	4618      	mov	r0, r3
 8012de6:	370c      	adds	r7, #12
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr
 8012df0:	2002df10 	.word	0x2002df10
 8012df4:	2002df2c 	.word	0x2002df2c

08012df8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012e04:	2300      	movs	r3, #0
 8012e06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d051      	beq.n	8012eb2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e12:	4b2a      	ldr	r3, [pc, #168]	; (8012ebc <xTaskPriorityInherit+0xc4>)
 8012e14:	681b      	ldr	r3, [r3, #0]
 8012e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d241      	bcs.n	8012ea0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	699b      	ldr	r3, [r3, #24]
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	db06      	blt.n	8012e32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012e24:	4b25      	ldr	r3, [pc, #148]	; (8012ebc <xTaskPriorityInherit+0xc4>)
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012e32:	68bb      	ldr	r3, [r7, #8]
 8012e34:	6959      	ldr	r1, [r3, #20]
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e3a:	4613      	mov	r3, r2
 8012e3c:	009b      	lsls	r3, r3, #2
 8012e3e:	4413      	add	r3, r2
 8012e40:	009b      	lsls	r3, r3, #2
 8012e42:	4a1f      	ldr	r2, [pc, #124]	; (8012ec0 <xTaskPriorityInherit+0xc8>)
 8012e44:	4413      	add	r3, r2
 8012e46:	4299      	cmp	r1, r3
 8012e48:	d122      	bne.n	8012e90 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012e4a:	68bb      	ldr	r3, [r7, #8]
 8012e4c:	3304      	adds	r3, #4
 8012e4e:	4618      	mov	r0, r3
 8012e50:	f7fe f870 	bl	8010f34 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012e54:	4b19      	ldr	r3, [pc, #100]	; (8012ebc <xTaskPriorityInherit+0xc4>)
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e62:	4b18      	ldr	r3, [pc, #96]	; (8012ec4 <xTaskPriorityInherit+0xcc>)
 8012e64:	681b      	ldr	r3, [r3, #0]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d903      	bls.n	8012e72 <xTaskPriorityInherit+0x7a>
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6e:	4a15      	ldr	r2, [pc, #84]	; (8012ec4 <xTaskPriorityInherit+0xcc>)
 8012e70:	6013      	str	r3, [r2, #0]
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e76:	4613      	mov	r3, r2
 8012e78:	009b      	lsls	r3, r3, #2
 8012e7a:	4413      	add	r3, r2
 8012e7c:	009b      	lsls	r3, r3, #2
 8012e7e:	4a10      	ldr	r2, [pc, #64]	; (8012ec0 <xTaskPriorityInherit+0xc8>)
 8012e80:	441a      	add	r2, r3
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	3304      	adds	r3, #4
 8012e86:	4619      	mov	r1, r3
 8012e88:	4610      	mov	r0, r2
 8012e8a:	f7fd fff6 	bl	8010e7a <vListInsertEnd>
 8012e8e:	e004      	b.n	8012e9a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012e90:	4b0a      	ldr	r3, [pc, #40]	; (8012ebc <xTaskPriorityInherit+0xc4>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e96:	68bb      	ldr	r3, [r7, #8]
 8012e98:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8012e9a:	2301      	movs	r3, #1
 8012e9c:	60fb      	str	r3, [r7, #12]
 8012e9e:	e008      	b.n	8012eb2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012ea0:	68bb      	ldr	r3, [r7, #8]
 8012ea2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012ea4:	4b05      	ldr	r3, [pc, #20]	; (8012ebc <xTaskPriorityInherit+0xc4>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d201      	bcs.n	8012eb2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8012eae:	2301      	movs	r3, #1
 8012eb0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
	}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3710      	adds	r7, #16
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	2002da30 	.word	0x2002da30
 8012ec0:	2002da34 	.word	0x2002da34
 8012ec4:	2002df0c 	.word	0x2002df0c

08012ec8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b086      	sub	sp, #24
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d054      	beq.n	8012f88 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012ede:	4b2d      	ldr	r3, [pc, #180]	; (8012f94 <xTaskPriorityDisinherit+0xcc>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	693a      	ldr	r2, [r7, #16]
 8012ee4:	429a      	cmp	r2, r3
 8012ee6:	d009      	beq.n	8012efc <xTaskPriorityDisinherit+0x34>
 8012ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eec:	f383 8811 	msr	BASEPRI, r3
 8012ef0:	f3bf 8f6f 	isb	sy
 8012ef4:	f3bf 8f4f 	dsb	sy
 8012ef8:	60fb      	str	r3, [r7, #12]
 8012efa:	e7fe      	b.n	8012efa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8012efc:	693b      	ldr	r3, [r7, #16]
 8012efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d109      	bne.n	8012f18 <xTaskPriorityDisinherit+0x50>
 8012f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f08:	f383 8811 	msr	BASEPRI, r3
 8012f0c:	f3bf 8f6f 	isb	sy
 8012f10:	f3bf 8f4f 	dsb	sy
 8012f14:	60bb      	str	r3, [r7, #8]
 8012f16:	e7fe      	b.n	8012f16 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f1c:	1e5a      	subs	r2, r3, #1
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012f22:	693b      	ldr	r3, [r7, #16]
 8012f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f26:	693b      	ldr	r3, [r7, #16]
 8012f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d02c      	beq.n	8012f88 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012f2e:	693b      	ldr	r3, [r7, #16]
 8012f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d128      	bne.n	8012f88 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012f36:	693b      	ldr	r3, [r7, #16]
 8012f38:	3304      	adds	r3, #4
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7fd fffa 	bl	8010f34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012f48:	693b      	ldr	r3, [r7, #16]
 8012f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f4c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012f50:	693b      	ldr	r3, [r7, #16]
 8012f52:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f58:	4b0f      	ldr	r3, [pc, #60]	; (8012f98 <xTaskPriorityDisinherit+0xd0>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d903      	bls.n	8012f68 <xTaskPriorityDisinherit+0xa0>
 8012f60:	693b      	ldr	r3, [r7, #16]
 8012f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f64:	4a0c      	ldr	r2, [pc, #48]	; (8012f98 <xTaskPriorityDisinherit+0xd0>)
 8012f66:	6013      	str	r3, [r2, #0]
 8012f68:	693b      	ldr	r3, [r7, #16]
 8012f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	009b      	lsls	r3, r3, #2
 8012f70:	4413      	add	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4a09      	ldr	r2, [pc, #36]	; (8012f9c <xTaskPriorityDisinherit+0xd4>)
 8012f76:	441a      	add	r2, r3
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	3304      	adds	r3, #4
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	4610      	mov	r0, r2
 8012f80:	f7fd ff7b 	bl	8010e7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012f84:	2301      	movs	r3, #1
 8012f86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012f88:	697b      	ldr	r3, [r7, #20]
	}
 8012f8a:	4618      	mov	r0, r3
 8012f8c:	3718      	adds	r7, #24
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	2002da30 	.word	0x2002da30
 8012f98:	2002df0c 	.word	0x2002df0c
 8012f9c:	2002da34 	.word	0x2002da34

08012fa0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b088      	sub	sp, #32
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
 8012fa8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8012fae:	2301      	movs	r3, #1
 8012fb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d068      	beq.n	801308a <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012fb8:	69bb      	ldr	r3, [r7, #24]
 8012fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d109      	bne.n	8012fd4 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8012fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc4:	f383 8811 	msr	BASEPRI, r3
 8012fc8:	f3bf 8f6f 	isb	sy
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	60fb      	str	r3, [r7, #12]
 8012fd2:	e7fe      	b.n	8012fd2 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012fd4:	69bb      	ldr	r3, [r7, #24]
 8012fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fd8:	683a      	ldr	r2, [r7, #0]
 8012fda:	429a      	cmp	r2, r3
 8012fdc:	d902      	bls.n	8012fe4 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012fde:	683b      	ldr	r3, [r7, #0]
 8012fe0:	61fb      	str	r3, [r7, #28]
 8012fe2:	e002      	b.n	8012fea <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012fe4:	69bb      	ldr	r3, [r7, #24]
 8012fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012fe8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012fee:	69fa      	ldr	r2, [r7, #28]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d04a      	beq.n	801308a <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012ff4:	69bb      	ldr	r3, [r7, #24]
 8012ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ff8:	697a      	ldr	r2, [r7, #20]
 8012ffa:	429a      	cmp	r2, r3
 8012ffc:	d145      	bne.n	801308a <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012ffe:	4b25      	ldr	r3, [pc, #148]	; (8013094 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8013000:	681b      	ldr	r3, [r3, #0]
 8013002:	69ba      	ldr	r2, [r7, #24]
 8013004:	429a      	cmp	r2, r3
 8013006:	d109      	bne.n	801301c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8013008:	f04f 0350 	mov.w	r3, #80	; 0x50
 801300c:	f383 8811 	msr	BASEPRI, r3
 8013010:	f3bf 8f6f 	isb	sy
 8013014:	f3bf 8f4f 	dsb	sy
 8013018:	60bb      	str	r3, [r7, #8]
 801301a:	e7fe      	b.n	801301a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013020:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	69fa      	ldr	r2, [r7, #28]
 8013026:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013028:	69bb      	ldr	r3, [r7, #24]
 801302a:	699b      	ldr	r3, [r3, #24]
 801302c:	2b00      	cmp	r3, #0
 801302e:	db04      	blt.n	801303a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013036:	69bb      	ldr	r3, [r7, #24]
 8013038:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801303a:	69bb      	ldr	r3, [r7, #24]
 801303c:	6959      	ldr	r1, [r3, #20]
 801303e:	693a      	ldr	r2, [r7, #16]
 8013040:	4613      	mov	r3, r2
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	4413      	add	r3, r2
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	4a13      	ldr	r2, [pc, #76]	; (8013098 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801304a:	4413      	add	r3, r2
 801304c:	4299      	cmp	r1, r3
 801304e:	d11c      	bne.n	801308a <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013050:	69bb      	ldr	r3, [r7, #24]
 8013052:	3304      	adds	r3, #4
 8013054:	4618      	mov	r0, r3
 8013056:	f7fd ff6d 	bl	8010f34 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801305e:	4b0f      	ldr	r3, [pc, #60]	; (801309c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013060:	681b      	ldr	r3, [r3, #0]
 8013062:	429a      	cmp	r2, r3
 8013064:	d903      	bls.n	801306e <vTaskPriorityDisinheritAfterTimeout+0xce>
 8013066:	69bb      	ldr	r3, [r7, #24]
 8013068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801306a:	4a0c      	ldr	r2, [pc, #48]	; (801309c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801306c:	6013      	str	r3, [r2, #0]
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013072:	4613      	mov	r3, r2
 8013074:	009b      	lsls	r3, r3, #2
 8013076:	4413      	add	r3, r2
 8013078:	009b      	lsls	r3, r3, #2
 801307a:	4a07      	ldr	r2, [pc, #28]	; (8013098 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801307c:	441a      	add	r2, r3
 801307e:	69bb      	ldr	r3, [r7, #24]
 8013080:	3304      	adds	r3, #4
 8013082:	4619      	mov	r1, r3
 8013084:	4610      	mov	r0, r2
 8013086:	f7fd fef8 	bl	8010e7a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801308a:	bf00      	nop
 801308c:	3720      	adds	r7, #32
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
 8013092:	bf00      	nop
 8013094:	2002da30 	.word	0x2002da30
 8013098:	2002da34 	.word	0x2002da34
 801309c:	2002df0c 	.word	0x2002df0c

080130a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80130a0:	b480      	push	{r7}
 80130a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80130a4:	4b07      	ldr	r3, [pc, #28]	; (80130c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d004      	beq.n	80130b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80130ac:	4b05      	ldr	r3, [pc, #20]	; (80130c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80130b2:	3201      	adds	r2, #1
 80130b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80130b6:	4b03      	ldr	r3, [pc, #12]	; (80130c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80130b8:	681b      	ldr	r3, [r3, #0]
	}
 80130ba:	4618      	mov	r0, r3
 80130bc:	46bd      	mov	sp, r7
 80130be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c2:	4770      	bx	lr
 80130c4:	2002da30 	.word	0x2002da30

080130c8 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b084      	sub	sp, #16
 80130cc:	af00      	add	r7, sp, #0
 80130ce:	6078      	str	r0, [r7, #4]
 80130d0:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80130d2:	f7fd fbb3 	bl	801083c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80130d6:	4b1e      	ldr	r3, [pc, #120]	; (8013150 <ulTaskNotifyTake+0x88>)
 80130d8:	681b      	ldr	r3, [r3, #0]
 80130da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d113      	bne.n	8013108 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80130e0:	4b1b      	ldr	r3, [pc, #108]	; (8013150 <ulTaskNotifyTake+0x88>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	2201      	movs	r2, #1
 80130e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d00b      	beq.n	8013108 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80130f0:	2101      	movs	r1, #1
 80130f2:	6838      	ldr	r0, [r7, #0]
 80130f4:	f000 fa3e 	bl	8013574 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80130f8:	4b16      	ldr	r3, [pc, #88]	; (8013154 <ulTaskNotifyTake+0x8c>)
 80130fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130fe:	601a      	str	r2, [r3, #0]
 8013100:	f3bf 8f4f 	dsb	sy
 8013104:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013108:	f7fd fbc6 	bl	8010898 <vPortExitCritical>

		taskENTER_CRITICAL();
 801310c:	f7fd fb96 	bl	801083c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8013110:	4b0f      	ldr	r3, [pc, #60]	; (8013150 <ulTaskNotifyTake+0x88>)
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013116:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	2b00      	cmp	r3, #0
 801311c:	d00c      	beq.n	8013138 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d004      	beq.n	801312e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8013124:	4b0a      	ldr	r3, [pc, #40]	; (8013150 <ulTaskNotifyTake+0x88>)
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	2200      	movs	r2, #0
 801312a:	655a      	str	r2, [r3, #84]	; 0x54
 801312c:	e004      	b.n	8013138 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 801312e:	4b08      	ldr	r3, [pc, #32]	; (8013150 <ulTaskNotifyTake+0x88>)
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	68fa      	ldr	r2, [r7, #12]
 8013134:	3a01      	subs	r2, #1
 8013136:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013138:	4b05      	ldr	r3, [pc, #20]	; (8013150 <ulTaskNotifyTake+0x88>)
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2200      	movs	r2, #0
 801313e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8013142:	f7fd fba9 	bl	8010898 <vPortExitCritical>

		return ulReturn;
 8013146:	68fb      	ldr	r3, [r7, #12]
	}
 8013148:	4618      	mov	r0, r3
 801314a:	3710      	adds	r7, #16
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	2002da30 	.word	0x2002da30
 8013154:	e000ed04 	.word	0xe000ed04

08013158 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8013158:	b580      	push	{r7, lr}
 801315a:	b086      	sub	sp, #24
 801315c:	af00      	add	r7, sp, #0
 801315e:	60f8      	str	r0, [r7, #12]
 8013160:	60b9      	str	r1, [r7, #8]
 8013162:	607a      	str	r2, [r7, #4]
 8013164:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8013166:	f7fd fb69 	bl	801083c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 801316a:	4b26      	ldr	r3, [pc, #152]	; (8013204 <xTaskNotifyWait+0xac>)
 801316c:	681b      	ldr	r3, [r3, #0]
 801316e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013172:	b2db      	uxtb	r3, r3
 8013174:	2b02      	cmp	r3, #2
 8013176:	d01a      	beq.n	80131ae <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8013178:	4b22      	ldr	r3, [pc, #136]	; (8013204 <xTaskNotifyWait+0xac>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801317e:	68fa      	ldr	r2, [r7, #12]
 8013180:	43d2      	mvns	r2, r2
 8013182:	400a      	ands	r2, r1
 8013184:	655a      	str	r2, [r3, #84]	; 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8013186:	4b1f      	ldr	r3, [pc, #124]	; (8013204 <xTaskNotifyWait+0xac>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	2201      	movs	r2, #1
 801318c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8013190:	683b      	ldr	r3, [r7, #0]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d00b      	beq.n	80131ae <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013196:	2101      	movs	r1, #1
 8013198:	6838      	ldr	r0, [r7, #0]
 801319a:	f000 f9eb 	bl	8013574 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 801319e:	4b1a      	ldr	r3, [pc, #104]	; (8013208 <xTaskNotifyWait+0xb0>)
 80131a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131a4:	601a      	str	r2, [r3, #0]
 80131a6:	f3bf 8f4f 	dsb	sy
 80131aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80131ae:	f7fd fb73 	bl	8010898 <vPortExitCritical>

		taskENTER_CRITICAL();
 80131b2:	f7fd fb43 	bl	801083c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d004      	beq.n	80131c6 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80131bc:	4b11      	ldr	r3, [pc, #68]	; (8013204 <xTaskNotifyWait+0xac>)
 80131be:	681b      	ldr	r3, [r3, #0]
 80131c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80131c6:	4b0f      	ldr	r3, [pc, #60]	; (8013204 <xTaskNotifyWait+0xac>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80131ce:	b2db      	uxtb	r3, r3
 80131d0:	2b02      	cmp	r3, #2
 80131d2:	d002      	beq.n	80131da <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80131d4:	2300      	movs	r3, #0
 80131d6:	617b      	str	r3, [r7, #20]
 80131d8:	e008      	b.n	80131ec <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80131da:	4b0a      	ldr	r3, [pc, #40]	; (8013204 <xTaskNotifyWait+0xac>)
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80131e0:	68ba      	ldr	r2, [r7, #8]
 80131e2:	43d2      	mvns	r2, r2
 80131e4:	400a      	ands	r2, r1
 80131e6:	655a      	str	r2, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 80131e8:	2301      	movs	r3, #1
 80131ea:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80131ec:	4b05      	ldr	r3, [pc, #20]	; (8013204 <xTaskNotifyWait+0xac>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	2200      	movs	r2, #0
 80131f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 80131f6:	f7fd fb4f 	bl	8010898 <vPortExitCritical>

		return xReturn;
 80131fa:	697b      	ldr	r3, [r7, #20]
	}
 80131fc:	4618      	mov	r0, r3
 80131fe:	3718      	adds	r7, #24
 8013200:	46bd      	mov	sp, r7
 8013202:	bd80      	pop	{r7, pc}
 8013204:	2002da30 	.word	0x2002da30
 8013208:	e000ed04 	.word	0xe000ed04

0801320c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 801320c:	b580      	push	{r7, lr}
 801320e:	b08a      	sub	sp, #40	; 0x28
 8013210:	af00      	add	r7, sp, #0
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	603b      	str	r3, [r7, #0]
 8013218:	4613      	mov	r3, r2
 801321a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 801321c:	2301      	movs	r3, #1
 801321e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8013220:	68fb      	ldr	r3, [r7, #12]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d109      	bne.n	801323a <xTaskGenericNotify+0x2e>
 8013226:	f04f 0350 	mov.w	r3, #80	; 0x50
 801322a:	f383 8811 	msr	BASEPRI, r3
 801322e:	f3bf 8f6f 	isb	sy
 8013232:	f3bf 8f4f 	dsb	sy
 8013236:	61bb      	str	r3, [r7, #24]
 8013238:	e7fe      	b.n	8013238 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 801323e:	f7fd fafd 	bl	801083c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8013242:	683b      	ldr	r3, [r7, #0]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d003      	beq.n	8013250 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8013248:	6a3b      	ldr	r3, [r7, #32]
 801324a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801324c:	683b      	ldr	r3, [r7, #0]
 801324e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8013250:	6a3b      	ldr	r3, [r7, #32]
 8013252:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8013256:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8013258:	6a3b      	ldr	r3, [r7, #32]
 801325a:	2202      	movs	r2, #2
 801325c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8013260:	79fb      	ldrb	r3, [r7, #7]
 8013262:	2b04      	cmp	r3, #4
 8013264:	d827      	bhi.n	80132b6 <xTaskGenericNotify+0xaa>
 8013266:	a201      	add	r2, pc, #4	; (adr r2, 801326c <xTaskGenericNotify+0x60>)
 8013268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801326c:	080132d5 	.word	0x080132d5
 8013270:	08013281 	.word	0x08013281
 8013274:	0801328f 	.word	0x0801328f
 8013278:	0801329b 	.word	0x0801329b
 801327c:	080132a3 	.word	0x080132a3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8013280:	6a3b      	ldr	r3, [r7, #32]
 8013282:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	431a      	orrs	r2, r3
 8013288:	6a3b      	ldr	r3, [r7, #32]
 801328a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801328c:	e025      	b.n	80132da <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801328e:	6a3b      	ldr	r3, [r7, #32]
 8013290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013292:	1c5a      	adds	r2, r3, #1
 8013294:	6a3b      	ldr	r3, [r7, #32]
 8013296:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8013298:	e01f      	b.n	80132da <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 801329a:	6a3b      	ldr	r3, [r7, #32]
 801329c:	68ba      	ldr	r2, [r7, #8]
 801329e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80132a0:	e01b      	b.n	80132da <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80132a2:	7ffb      	ldrb	r3, [r7, #31]
 80132a4:	2b02      	cmp	r3, #2
 80132a6:	d003      	beq.n	80132b0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80132a8:	6a3b      	ldr	r3, [r7, #32]
 80132aa:	68ba      	ldr	r2, [r7, #8]
 80132ac:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80132ae:	e014      	b.n	80132da <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 80132b0:	2300      	movs	r3, #0
 80132b2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80132b4:	e011      	b.n	80132da <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80132b6:	6a3b      	ldr	r3, [r7, #32]
 80132b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80132ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132be:	d00b      	beq.n	80132d8 <xTaskGenericNotify+0xcc>
 80132c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132c4:	f383 8811 	msr	BASEPRI, r3
 80132c8:	f3bf 8f6f 	isb	sy
 80132cc:	f3bf 8f4f 	dsb	sy
 80132d0:	617b      	str	r3, [r7, #20]
 80132d2:	e7fe      	b.n	80132d2 <xTaskGenericNotify+0xc6>
					break;
 80132d4:	bf00      	nop
 80132d6:	e000      	b.n	80132da <xTaskGenericNotify+0xce>

					break;
 80132d8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80132da:	7ffb      	ldrb	r3, [r7, #31]
 80132dc:	2b01      	cmp	r3, #1
 80132de:	d13b      	bne.n	8013358 <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80132e0:	6a3b      	ldr	r3, [r7, #32]
 80132e2:	3304      	adds	r3, #4
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7fd fe25 	bl	8010f34 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80132ea:	6a3b      	ldr	r3, [r7, #32]
 80132ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132ee:	4b1e      	ldr	r3, [pc, #120]	; (8013368 <xTaskGenericNotify+0x15c>)
 80132f0:	681b      	ldr	r3, [r3, #0]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d903      	bls.n	80132fe <xTaskGenericNotify+0xf2>
 80132f6:	6a3b      	ldr	r3, [r7, #32]
 80132f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132fa:	4a1b      	ldr	r2, [pc, #108]	; (8013368 <xTaskGenericNotify+0x15c>)
 80132fc:	6013      	str	r3, [r2, #0]
 80132fe:	6a3b      	ldr	r3, [r7, #32]
 8013300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013302:	4613      	mov	r3, r2
 8013304:	009b      	lsls	r3, r3, #2
 8013306:	4413      	add	r3, r2
 8013308:	009b      	lsls	r3, r3, #2
 801330a:	4a18      	ldr	r2, [pc, #96]	; (801336c <xTaskGenericNotify+0x160>)
 801330c:	441a      	add	r2, r3
 801330e:	6a3b      	ldr	r3, [r7, #32]
 8013310:	3304      	adds	r3, #4
 8013312:	4619      	mov	r1, r3
 8013314:	4610      	mov	r0, r2
 8013316:	f7fd fdb0 	bl	8010e7a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 801331a:	6a3b      	ldr	r3, [r7, #32]
 801331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801331e:	2b00      	cmp	r3, #0
 8013320:	d009      	beq.n	8013336 <xTaskGenericNotify+0x12a>
 8013322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013326:	f383 8811 	msr	BASEPRI, r3
 801332a:	f3bf 8f6f 	isb	sy
 801332e:	f3bf 8f4f 	dsb	sy
 8013332:	613b      	str	r3, [r7, #16]
 8013334:	e7fe      	b.n	8013334 <xTaskGenericNotify+0x128>
					the tick count equals xNextTaskUnblockTime.  However if
					tickless idling is used it might be more important to enter
					sleep mode at the earliest possible time - so reset
					xNextTaskUnblockTime here to ensure it is updated at the
					earliest possible time. */
					prvResetNextTaskUnblockTime();
 8013336:	f7ff fd11 	bl	8012d5c <prvResetNextTaskUnblockTime>
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801333a:	6a3b      	ldr	r3, [r7, #32]
 801333c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801333e:	4b0c      	ldr	r3, [pc, #48]	; (8013370 <xTaskGenericNotify+0x164>)
 8013340:	681b      	ldr	r3, [r3, #0]
 8013342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013344:	429a      	cmp	r2, r3
 8013346:	d907      	bls.n	8013358 <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8013348:	4b0a      	ldr	r3, [pc, #40]	; (8013374 <xTaskGenericNotify+0x168>)
 801334a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801334e:	601a      	str	r2, [r3, #0]
 8013350:	f3bf 8f4f 	dsb	sy
 8013354:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8013358:	f7fd fa9e 	bl	8010898 <vPortExitCritical>

		return xReturn;
 801335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801335e:	4618      	mov	r0, r3
 8013360:	3728      	adds	r7, #40	; 0x28
 8013362:	46bd      	mov	sp, r7
 8013364:	bd80      	pop	{r7, pc}
 8013366:	bf00      	nop
 8013368:	2002df0c 	.word	0x2002df0c
 801336c:	2002da34 	.word	0x2002da34
 8013370:	2002da30 	.word	0x2002da30
 8013374:	e000ed04 	.word	0xe000ed04

08013378 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013378:	b580      	push	{r7, lr}
 801337a:	b08e      	sub	sp, #56	; 0x38
 801337c:	af00      	add	r7, sp, #0
 801337e:	60f8      	str	r0, [r7, #12]
 8013380:	60b9      	str	r1, [r7, #8]
 8013382:	603b      	str	r3, [r7, #0]
 8013384:	4613      	mov	r3, r2
 8013386:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8013388:	2301      	movs	r3, #1
 801338a:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 801338c:	68fb      	ldr	r3, [r7, #12]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d109      	bne.n	80133a6 <xTaskGenericNotifyFromISR+0x2e>
 8013392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013396:	f383 8811 	msr	BASEPRI, r3
 801339a:	f3bf 8f6f 	isb	sy
 801339e:	f3bf 8f4f 	dsb	sy
 80133a2:	627b      	str	r3, [r7, #36]	; 0x24
 80133a4:	e7fe      	b.n	80133a4 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133a6:	f7fd fb25 	bl	80109f4 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80133ae:	f3ef 8211 	mrs	r2, BASEPRI
 80133b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133b6:	f383 8811 	msr	BASEPRI, r3
 80133ba:	f3bf 8f6f 	isb	sy
 80133be:	f3bf 8f4f 	dsb	sy
 80133c2:	623a      	str	r2, [r7, #32]
 80133c4:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80133c6:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d003      	beq.n	80133d8 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80133d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80133d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80133de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80133e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133e4:	2202      	movs	r2, #2
 80133e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 80133ea:	79fb      	ldrb	r3, [r7, #7]
 80133ec:	2b04      	cmp	r3, #4
 80133ee:	d829      	bhi.n	8013444 <xTaskGenericNotifyFromISR+0xcc>
 80133f0:	a201      	add	r2, pc, #4	; (adr r2, 80133f8 <xTaskGenericNotifyFromISR+0x80>)
 80133f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133f6:	bf00      	nop
 80133f8:	08013463 	.word	0x08013463
 80133fc:	0801340d 	.word	0x0801340d
 8013400:	0801341b 	.word	0x0801341b
 8013404:	08013427 	.word	0x08013427
 8013408:	0801342f 	.word	0x0801342f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 801340c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801340e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	431a      	orrs	r2, r3
 8013414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013416:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8013418:	e026      	b.n	8013468 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 801341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801341e:	1c5a      	adds	r2, r3, #1
 8013420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013422:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8013424:	e020      	b.n	8013468 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8013426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013428:	68ba      	ldr	r2, [r7, #8]
 801342a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 801342c:	e01c      	b.n	8013468 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 801342e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8013432:	2b02      	cmp	r3, #2
 8013434:	d003      	beq.n	801343e <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8013436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013438:	68ba      	ldr	r2, [r7, #8]
 801343a:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 801343c:	e014      	b.n	8013468 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 801343e:	2300      	movs	r3, #0
 8013440:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8013442:	e011      	b.n	8013468 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8013444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013448:	f1b3 3fff 	cmp.w	r3, #4294967295
 801344c:	d00b      	beq.n	8013466 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 801344e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013452:	f383 8811 	msr	BASEPRI, r3
 8013456:	f3bf 8f6f 	isb	sy
 801345a:	f3bf 8f4f 	dsb	sy
 801345e:	61bb      	str	r3, [r7, #24]
 8013460:	e7fe      	b.n	8013460 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8013462:	bf00      	nop
 8013464:	e000      	b.n	8013468 <xTaskGenericNotifyFromISR+0xf0>
					break;
 8013466:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8013468:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801346c:	2b01      	cmp	r3, #1
 801346e:	d145      	bne.n	80134fc <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8013470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013474:	2b00      	cmp	r3, #0
 8013476:	d009      	beq.n	801348c <xTaskGenericNotifyFromISR+0x114>
 8013478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801347c:	f383 8811 	msr	BASEPRI, r3
 8013480:	f3bf 8f6f 	isb	sy
 8013484:	f3bf 8f4f 	dsb	sy
 8013488:	617b      	str	r3, [r7, #20]
 801348a:	e7fe      	b.n	801348a <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801348c:	4b20      	ldr	r3, [pc, #128]	; (8013510 <xTaskGenericNotifyFromISR+0x198>)
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d11d      	bne.n	80134d0 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013496:	3304      	adds	r3, #4
 8013498:	4618      	mov	r0, r3
 801349a:	f7fd fd4b 	bl	8010f34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134a2:	4b1c      	ldr	r3, [pc, #112]	; (8013514 <xTaskGenericNotifyFromISR+0x19c>)
 80134a4:	681b      	ldr	r3, [r3, #0]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d903      	bls.n	80134b2 <xTaskGenericNotifyFromISR+0x13a>
 80134aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134ae:	4a19      	ldr	r2, [pc, #100]	; (8013514 <xTaskGenericNotifyFromISR+0x19c>)
 80134b0:	6013      	str	r3, [r2, #0]
 80134b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134b6:	4613      	mov	r3, r2
 80134b8:	009b      	lsls	r3, r3, #2
 80134ba:	4413      	add	r3, r2
 80134bc:	009b      	lsls	r3, r3, #2
 80134be:	4a16      	ldr	r2, [pc, #88]	; (8013518 <xTaskGenericNotifyFromISR+0x1a0>)
 80134c0:	441a      	add	r2, r3
 80134c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134c4:	3304      	adds	r3, #4
 80134c6:	4619      	mov	r1, r3
 80134c8:	4610      	mov	r0, r2
 80134ca:	f7fd fcd6 	bl	8010e7a <vListInsertEnd>
 80134ce:	e005      	b.n	80134dc <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80134d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134d2:	3318      	adds	r3, #24
 80134d4:	4619      	mov	r1, r3
 80134d6:	4811      	ldr	r0, [pc, #68]	; (801351c <xTaskGenericNotifyFromISR+0x1a4>)
 80134d8:	f7fd fccf 	bl	8010e7a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80134dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80134e0:	4b0f      	ldr	r3, [pc, #60]	; (8013520 <xTaskGenericNotifyFromISR+0x1a8>)
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e6:	429a      	cmp	r2, r3
 80134e8:	d908      	bls.n	80134fc <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80134ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d002      	beq.n	80134f6 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80134f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134f2:	2201      	movs	r2, #1
 80134f4:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80134f6:	4b0b      	ldr	r3, [pc, #44]	; (8013524 <xTaskGenericNotifyFromISR+0x1ac>)
 80134f8:	2201      	movs	r2, #1
 80134fa:	601a      	str	r2, [r3, #0]
 80134fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134fe:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8013506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8013508:	4618      	mov	r0, r3
 801350a:	3738      	adds	r7, #56	; 0x38
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	2002df2c 	.word	0x2002df2c
 8013514:	2002df0c 	.word	0x2002df0c
 8013518:	2002da34 	.word	0x2002da34
 801351c:	2002dec4 	.word	0x2002dec4
 8013520:	2002da30 	.word	0x2002da30
 8013524:	2002df18 	.word	0x2002df18

08013528 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8013528:	b580      	push	{r7, lr}
 801352a:	b084      	sub	sp, #16
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d102      	bne.n	801353c <xTaskNotifyStateClear+0x14>
 8013536:	4b0e      	ldr	r3, [pc, #56]	; (8013570 <xTaskNotifyStateClear+0x48>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	e000      	b.n	801353e <xTaskNotifyStateClear+0x16>
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8013540:	f7fd f97c 	bl	801083c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801354a:	b2db      	uxtb	r3, r3
 801354c:	2b02      	cmp	r3, #2
 801354e:	d106      	bne.n	801355e <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	2200      	movs	r2, #0
 8013554:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				xReturn = pdPASS;
 8013558:	2301      	movs	r3, #1
 801355a:	60fb      	str	r3, [r7, #12]
 801355c:	e001      	b.n	8013562 <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 801355e:	2300      	movs	r3, #0
 8013560:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8013562:	f7fd f999 	bl	8010898 <vPortExitCritical>

		return xReturn;
 8013566:	68fb      	ldr	r3, [r7, #12]
	}
 8013568:	4618      	mov	r0, r3
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}
 8013570:	2002da30 	.word	0x2002da30

08013574 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013574:	b580      	push	{r7, lr}
 8013576:	b084      	sub	sp, #16
 8013578:	af00      	add	r7, sp, #0
 801357a:	6078      	str	r0, [r7, #4]
 801357c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801357e:	4b21      	ldr	r3, [pc, #132]	; (8013604 <prvAddCurrentTaskToDelayedList+0x90>)
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013584:	4b20      	ldr	r3, [pc, #128]	; (8013608 <prvAddCurrentTaskToDelayedList+0x94>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	3304      	adds	r3, #4
 801358a:	4618      	mov	r0, r3
 801358c:	f7fd fcd2 	bl	8010f34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013596:	d10a      	bne.n	80135ae <prvAddCurrentTaskToDelayedList+0x3a>
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d007      	beq.n	80135ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801359e:	4b1a      	ldr	r3, [pc, #104]	; (8013608 <prvAddCurrentTaskToDelayedList+0x94>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	3304      	adds	r3, #4
 80135a4:	4619      	mov	r1, r3
 80135a6:	4819      	ldr	r0, [pc, #100]	; (801360c <prvAddCurrentTaskToDelayedList+0x98>)
 80135a8:	f7fd fc67 	bl	8010e7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80135ac:	e026      	b.n	80135fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80135ae:	68fa      	ldr	r2, [r7, #12]
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	4413      	add	r3, r2
 80135b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80135b6:	4b14      	ldr	r3, [pc, #80]	; (8013608 <prvAddCurrentTaskToDelayedList+0x94>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	68ba      	ldr	r2, [r7, #8]
 80135bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80135be:	68ba      	ldr	r2, [r7, #8]
 80135c0:	68fb      	ldr	r3, [r7, #12]
 80135c2:	429a      	cmp	r2, r3
 80135c4:	d209      	bcs.n	80135da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80135c6:	4b12      	ldr	r3, [pc, #72]	; (8013610 <prvAddCurrentTaskToDelayedList+0x9c>)
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	4b0f      	ldr	r3, [pc, #60]	; (8013608 <prvAddCurrentTaskToDelayedList+0x94>)
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	3304      	adds	r3, #4
 80135d0:	4619      	mov	r1, r3
 80135d2:	4610      	mov	r0, r2
 80135d4:	f7fd fc75 	bl	8010ec2 <vListInsert>
}
 80135d8:	e010      	b.n	80135fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80135da:	4b0e      	ldr	r3, [pc, #56]	; (8013614 <prvAddCurrentTaskToDelayedList+0xa0>)
 80135dc:	681a      	ldr	r2, [r3, #0]
 80135de:	4b0a      	ldr	r3, [pc, #40]	; (8013608 <prvAddCurrentTaskToDelayedList+0x94>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	3304      	adds	r3, #4
 80135e4:	4619      	mov	r1, r3
 80135e6:	4610      	mov	r0, r2
 80135e8:	f7fd fc6b 	bl	8010ec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80135ec:	4b0a      	ldr	r3, [pc, #40]	; (8013618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80135ee:	681b      	ldr	r3, [r3, #0]
 80135f0:	68ba      	ldr	r2, [r7, #8]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d202      	bcs.n	80135fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80135f6:	4a08      	ldr	r2, [pc, #32]	; (8013618 <prvAddCurrentTaskToDelayedList+0xa4>)
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	6013      	str	r3, [r2, #0]
}
 80135fc:	bf00      	nop
 80135fe:	3710      	adds	r7, #16
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}
 8013604:	2002df08 	.word	0x2002df08
 8013608:	2002da30 	.word	0x2002da30
 801360c:	2002def0 	.word	0x2002def0
 8013610:	2002dec0 	.word	0x2002dec0
 8013614:	2002debc 	.word	0x2002debc
 8013618:	2002df24 	.word	0x2002df24

0801361c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08a      	sub	sp, #40	; 0x28
 8013620:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013622:	2300      	movs	r3, #0
 8013624:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013626:	f000 faff 	bl	8013c28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801362a:	4b1c      	ldr	r3, [pc, #112]	; (801369c <xTimerCreateTimerTask+0x80>)
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	2b00      	cmp	r3, #0
 8013630:	d021      	beq.n	8013676 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013632:	2300      	movs	r3, #0
 8013634:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013636:	2300      	movs	r3, #0
 8013638:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801363a:	1d3a      	adds	r2, r7, #4
 801363c:	f107 0108 	add.w	r1, r7, #8
 8013640:	f107 030c 	add.w	r3, r7, #12
 8013644:	4618      	mov	r0, r3
 8013646:	f7fc ffb5 	bl	80105b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801364a:	6879      	ldr	r1, [r7, #4]
 801364c:	68bb      	ldr	r3, [r7, #8]
 801364e:	68fa      	ldr	r2, [r7, #12]
 8013650:	9202      	str	r2, [sp, #8]
 8013652:	9301      	str	r3, [sp, #4]
 8013654:	2302      	movs	r3, #2
 8013656:	9300      	str	r3, [sp, #0]
 8013658:	2300      	movs	r3, #0
 801365a:	460a      	mov	r2, r1
 801365c:	4910      	ldr	r1, [pc, #64]	; (80136a0 <xTimerCreateTimerTask+0x84>)
 801365e:	4811      	ldr	r0, [pc, #68]	; (80136a4 <xTimerCreateTimerTask+0x88>)
 8013660:	f7fe fd34 	bl	80120cc <xTaskCreateStatic>
 8013664:	4602      	mov	r2, r0
 8013666:	4b10      	ldr	r3, [pc, #64]	; (80136a8 <xTimerCreateTimerTask+0x8c>)
 8013668:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801366a:	4b0f      	ldr	r3, [pc, #60]	; (80136a8 <xTimerCreateTimerTask+0x8c>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d001      	beq.n	8013676 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013672:	2301      	movs	r3, #1
 8013674:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013676:	697b      	ldr	r3, [r7, #20]
 8013678:	2b00      	cmp	r3, #0
 801367a:	d109      	bne.n	8013690 <xTimerCreateTimerTask+0x74>
	__asm volatile
 801367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013680:	f383 8811 	msr	BASEPRI, r3
 8013684:	f3bf 8f6f 	isb	sy
 8013688:	f3bf 8f4f 	dsb	sy
 801368c:	613b      	str	r3, [r7, #16]
 801368e:	e7fe      	b.n	801368e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8013690:	697b      	ldr	r3, [r7, #20]
}
 8013692:	4618      	mov	r0, r3
 8013694:	3718      	adds	r7, #24
 8013696:	46bd      	mov	sp, r7
 8013698:	bd80      	pop	{r7, pc}
 801369a:	bf00      	nop
 801369c:	2002df60 	.word	0x2002df60
 80136a0:	080186e0 	.word	0x080186e0
 80136a4:	080137dd 	.word	0x080137dd
 80136a8:	2002df64 	.word	0x2002df64

080136ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b08a      	sub	sp, #40	; 0x28
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	60f8      	str	r0, [r7, #12]
 80136b4:	60b9      	str	r1, [r7, #8]
 80136b6:	607a      	str	r2, [r7, #4]
 80136b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80136ba:	2300      	movs	r3, #0
 80136bc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d109      	bne.n	80136d8 <xTimerGenericCommand+0x2c>
 80136c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136c8:	f383 8811 	msr	BASEPRI, r3
 80136cc:	f3bf 8f6f 	isb	sy
 80136d0:	f3bf 8f4f 	dsb	sy
 80136d4:	623b      	str	r3, [r7, #32]
 80136d6:	e7fe      	b.n	80136d6 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80136d8:	4b19      	ldr	r3, [pc, #100]	; (8013740 <xTimerGenericCommand+0x94>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	d02a      	beq.n	8013736 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	2b05      	cmp	r3, #5
 80136f0:	dc18      	bgt.n	8013724 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80136f2:	f7ff fb63 	bl	8012dbc <xTaskGetSchedulerState>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b02      	cmp	r3, #2
 80136fa:	d109      	bne.n	8013710 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80136fc:	4b10      	ldr	r3, [pc, #64]	; (8013740 <xTimerGenericCommand+0x94>)
 80136fe:	6818      	ldr	r0, [r3, #0]
 8013700:	f107 0110 	add.w	r1, r7, #16
 8013704:	2300      	movs	r3, #0
 8013706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013708:	f7fd fe96 	bl	8011438 <xQueueGenericSend>
 801370c:	6278      	str	r0, [r7, #36]	; 0x24
 801370e:	e012      	b.n	8013736 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013710:	4b0b      	ldr	r3, [pc, #44]	; (8013740 <xTimerGenericCommand+0x94>)
 8013712:	6818      	ldr	r0, [r3, #0]
 8013714:	f107 0110 	add.w	r1, r7, #16
 8013718:	2300      	movs	r3, #0
 801371a:	2200      	movs	r2, #0
 801371c:	f7fd fe8c 	bl	8011438 <xQueueGenericSend>
 8013720:	6278      	str	r0, [r7, #36]	; 0x24
 8013722:	e008      	b.n	8013736 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013724:	4b06      	ldr	r3, [pc, #24]	; (8013740 <xTimerGenericCommand+0x94>)
 8013726:	6818      	ldr	r0, [r3, #0]
 8013728:	f107 0110 	add.w	r1, r7, #16
 801372c:	2300      	movs	r3, #0
 801372e:	683a      	ldr	r2, [r7, #0]
 8013730:	f7fd ff7c 	bl	801162c <xQueueGenericSendFromISR>
 8013734:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013738:	4618      	mov	r0, r3
 801373a:	3728      	adds	r7, #40	; 0x28
 801373c:	46bd      	mov	sp, r7
 801373e:	bd80      	pop	{r7, pc}
 8013740:	2002df60 	.word	0x2002df60

08013744 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013744:	b580      	push	{r7, lr}
 8013746:	b088      	sub	sp, #32
 8013748:	af02      	add	r7, sp, #8
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801374e:	4b22      	ldr	r3, [pc, #136]	; (80137d8 <prvProcessExpiredTimer+0x94>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	68db      	ldr	r3, [r3, #12]
 8013754:	68db      	ldr	r3, [r3, #12]
 8013756:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	3304      	adds	r3, #4
 801375c:	4618      	mov	r0, r3
 801375e:	f7fd fbe9 	bl	8010f34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013762:	697b      	ldr	r3, [r7, #20]
 8013764:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013768:	f003 0304 	and.w	r3, r3, #4
 801376c:	2b00      	cmp	r3, #0
 801376e:	d021      	beq.n	80137b4 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	699a      	ldr	r2, [r3, #24]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	18d1      	adds	r1, r2, r3
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	683a      	ldr	r2, [r7, #0]
 801377c:	6978      	ldr	r0, [r7, #20]
 801377e:	f000 f8d1 	bl	8013924 <prvInsertTimerInActiveList>
 8013782:	4603      	mov	r3, r0
 8013784:	2b00      	cmp	r3, #0
 8013786:	d01e      	beq.n	80137c6 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013788:	2300      	movs	r3, #0
 801378a:	9300      	str	r3, [sp, #0]
 801378c:	2300      	movs	r3, #0
 801378e:	687a      	ldr	r2, [r7, #4]
 8013790:	2100      	movs	r1, #0
 8013792:	6978      	ldr	r0, [r7, #20]
 8013794:	f7ff ff8a 	bl	80136ac <xTimerGenericCommand>
 8013798:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801379a:	693b      	ldr	r3, [r7, #16]
 801379c:	2b00      	cmp	r3, #0
 801379e:	d112      	bne.n	80137c6 <prvProcessExpiredTimer+0x82>
 80137a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137a4:	f383 8811 	msr	BASEPRI, r3
 80137a8:	f3bf 8f6f 	isb	sy
 80137ac:	f3bf 8f4f 	dsb	sy
 80137b0:	60fb      	str	r3, [r7, #12]
 80137b2:	e7fe      	b.n	80137b2 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80137b4:	697b      	ldr	r3, [r7, #20]
 80137b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80137ba:	f023 0301 	bic.w	r3, r3, #1
 80137be:	b2da      	uxtb	r2, r3
 80137c0:	697b      	ldr	r3, [r7, #20]
 80137c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80137c6:	697b      	ldr	r3, [r7, #20]
 80137c8:	6a1b      	ldr	r3, [r3, #32]
 80137ca:	6978      	ldr	r0, [r7, #20]
 80137cc:	4798      	blx	r3
}
 80137ce:	bf00      	nop
 80137d0:	3718      	adds	r7, #24
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}
 80137d6:	bf00      	nop
 80137d8:	2002df58 	.word	0x2002df58

080137dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b084      	sub	sp, #16
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80137e4:	f107 0308 	add.w	r3, r7, #8
 80137e8:	4618      	mov	r0, r3
 80137ea:	f000 f857 	bl	801389c <prvGetNextExpireTime>
 80137ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	4619      	mov	r1, r3
 80137f4:	68f8      	ldr	r0, [r7, #12]
 80137f6:	f000 f803 	bl	8013800 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80137fa:	f000 f8d5 	bl	80139a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80137fe:	e7f1      	b.n	80137e4 <prvTimerTask+0x8>

08013800 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013800:	b580      	push	{r7, lr}
 8013802:	b084      	sub	sp, #16
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
 8013808:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801380a:	f7fe fe95 	bl	8012538 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801380e:	f107 0308 	add.w	r3, r7, #8
 8013812:	4618      	mov	r0, r3
 8013814:	f000 f866 	bl	80138e4 <prvSampleTimeNow>
 8013818:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801381a:	68bb      	ldr	r3, [r7, #8]
 801381c:	2b00      	cmp	r3, #0
 801381e:	d130      	bne.n	8013882 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013820:	683b      	ldr	r3, [r7, #0]
 8013822:	2b00      	cmp	r3, #0
 8013824:	d10a      	bne.n	801383c <prvProcessTimerOrBlockTask+0x3c>
 8013826:	687a      	ldr	r2, [r7, #4]
 8013828:	68fb      	ldr	r3, [r7, #12]
 801382a:	429a      	cmp	r2, r3
 801382c:	d806      	bhi.n	801383c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801382e:	f7fe fec9 	bl	80125c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013832:	68f9      	ldr	r1, [r7, #12]
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f7ff ff85 	bl	8013744 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801383a:	e024      	b.n	8013886 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d008      	beq.n	8013854 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013842:	4b13      	ldr	r3, [pc, #76]	; (8013890 <prvProcessTimerOrBlockTask+0x90>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d101      	bne.n	8013850 <prvProcessTimerOrBlockTask+0x50>
 801384c:	2301      	movs	r3, #1
 801384e:	e000      	b.n	8013852 <prvProcessTimerOrBlockTask+0x52>
 8013850:	2300      	movs	r3, #0
 8013852:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013854:	4b0f      	ldr	r3, [pc, #60]	; (8013894 <prvProcessTimerOrBlockTask+0x94>)
 8013856:	6818      	ldr	r0, [r3, #0]
 8013858:	687a      	ldr	r2, [r7, #4]
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	1ad3      	subs	r3, r2, r3
 801385e:	683a      	ldr	r2, [r7, #0]
 8013860:	4619      	mov	r1, r3
 8013862:	f7fe fbff 	bl	8012064 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013866:	f7fe fead 	bl	80125c4 <xTaskResumeAll>
 801386a:	4603      	mov	r3, r0
 801386c:	2b00      	cmp	r3, #0
 801386e:	d10a      	bne.n	8013886 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013870:	4b09      	ldr	r3, [pc, #36]	; (8013898 <prvProcessTimerOrBlockTask+0x98>)
 8013872:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013876:	601a      	str	r2, [r3, #0]
 8013878:	f3bf 8f4f 	dsb	sy
 801387c:	f3bf 8f6f 	isb	sy
}
 8013880:	e001      	b.n	8013886 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013882:	f7fe fe9f 	bl	80125c4 <xTaskResumeAll>
}
 8013886:	bf00      	nop
 8013888:	3710      	adds	r7, #16
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	2002df5c 	.word	0x2002df5c
 8013894:	2002df60 	.word	0x2002df60
 8013898:	e000ed04 	.word	0xe000ed04

0801389c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801389c:	b480      	push	{r7}
 801389e:	b085      	sub	sp, #20
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80138a4:	4b0e      	ldr	r3, [pc, #56]	; (80138e0 <prvGetNextExpireTime+0x44>)
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d101      	bne.n	80138b2 <prvGetNextExpireTime+0x16>
 80138ae:	2201      	movs	r2, #1
 80138b0:	e000      	b.n	80138b4 <prvGetNextExpireTime+0x18>
 80138b2:	2200      	movs	r2, #0
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d105      	bne.n	80138cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80138c0:	4b07      	ldr	r3, [pc, #28]	; (80138e0 <prvGetNextExpireTime+0x44>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	68db      	ldr	r3, [r3, #12]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	60fb      	str	r3, [r7, #12]
 80138ca:	e001      	b.n	80138d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80138cc:	2300      	movs	r3, #0
 80138ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80138d0:	68fb      	ldr	r3, [r7, #12]
}
 80138d2:	4618      	mov	r0, r3
 80138d4:	3714      	adds	r7, #20
 80138d6:	46bd      	mov	sp, r7
 80138d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138dc:	4770      	bx	lr
 80138de:	bf00      	nop
 80138e0:	2002df58 	.word	0x2002df58

080138e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80138ec:	f7fe ff06 	bl	80126fc <xTaskGetTickCount>
 80138f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80138f2:	4b0b      	ldr	r3, [pc, #44]	; (8013920 <prvSampleTimeNow+0x3c>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	68fa      	ldr	r2, [r7, #12]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d205      	bcs.n	8013908 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80138fc:	f000 f930 	bl	8013b60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	2201      	movs	r2, #1
 8013904:	601a      	str	r2, [r3, #0]
 8013906:	e002      	b.n	801390e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	2200      	movs	r2, #0
 801390c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801390e:	4a04      	ldr	r2, [pc, #16]	; (8013920 <prvSampleTimeNow+0x3c>)
 8013910:	68fb      	ldr	r3, [r7, #12]
 8013912:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013914:	68fb      	ldr	r3, [r7, #12]
}
 8013916:	4618      	mov	r0, r3
 8013918:	3710      	adds	r7, #16
 801391a:	46bd      	mov	sp, r7
 801391c:	bd80      	pop	{r7, pc}
 801391e:	bf00      	nop
 8013920:	2002df68 	.word	0x2002df68

08013924 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b086      	sub	sp, #24
 8013928:	af00      	add	r7, sp, #0
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
 8013930:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013932:	2300      	movs	r3, #0
 8013934:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	68ba      	ldr	r2, [r7, #8]
 801393a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	68fa      	ldr	r2, [r7, #12]
 8013940:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013942:	68ba      	ldr	r2, [r7, #8]
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	429a      	cmp	r2, r3
 8013948:	d812      	bhi.n	8013970 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801394a:	687a      	ldr	r2, [r7, #4]
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	1ad2      	subs	r2, r2, r3
 8013950:	68fb      	ldr	r3, [r7, #12]
 8013952:	699b      	ldr	r3, [r3, #24]
 8013954:	429a      	cmp	r2, r3
 8013956:	d302      	bcc.n	801395e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013958:	2301      	movs	r3, #1
 801395a:	617b      	str	r3, [r7, #20]
 801395c:	e01b      	b.n	8013996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801395e:	4b10      	ldr	r3, [pc, #64]	; (80139a0 <prvInsertTimerInActiveList+0x7c>)
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	3304      	adds	r3, #4
 8013966:	4619      	mov	r1, r3
 8013968:	4610      	mov	r0, r2
 801396a:	f7fd faaa 	bl	8010ec2 <vListInsert>
 801396e:	e012      	b.n	8013996 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013970:	687a      	ldr	r2, [r7, #4]
 8013972:	683b      	ldr	r3, [r7, #0]
 8013974:	429a      	cmp	r2, r3
 8013976:	d206      	bcs.n	8013986 <prvInsertTimerInActiveList+0x62>
 8013978:	68ba      	ldr	r2, [r7, #8]
 801397a:	683b      	ldr	r3, [r7, #0]
 801397c:	429a      	cmp	r2, r3
 801397e:	d302      	bcc.n	8013986 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013980:	2301      	movs	r3, #1
 8013982:	617b      	str	r3, [r7, #20]
 8013984:	e007      	b.n	8013996 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013986:	4b07      	ldr	r3, [pc, #28]	; (80139a4 <prvInsertTimerInActiveList+0x80>)
 8013988:	681a      	ldr	r2, [r3, #0]
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	3304      	adds	r3, #4
 801398e:	4619      	mov	r1, r3
 8013990:	4610      	mov	r0, r2
 8013992:	f7fd fa96 	bl	8010ec2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013996:	697b      	ldr	r3, [r7, #20]
}
 8013998:	4618      	mov	r0, r3
 801399a:	3718      	adds	r7, #24
 801399c:	46bd      	mov	sp, r7
 801399e:	bd80      	pop	{r7, pc}
 80139a0:	2002df5c 	.word	0x2002df5c
 80139a4:	2002df58 	.word	0x2002df58

080139a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b08e      	sub	sp, #56	; 0x38
 80139ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80139ae:	e0c6      	b.n	8013b3e <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	da17      	bge.n	80139e6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80139b6:	1d3b      	adds	r3, r7, #4
 80139b8:	3304      	adds	r3, #4
 80139ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80139bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d109      	bne.n	80139d6 <prvProcessReceivedCommands+0x2e>
 80139c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139c6:	f383 8811 	msr	BASEPRI, r3
 80139ca:	f3bf 8f6f 	isb	sy
 80139ce:	f3bf 8f4f 	dsb	sy
 80139d2:	61fb      	str	r3, [r7, #28]
 80139d4:	e7fe      	b.n	80139d4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80139d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139dc:	6850      	ldr	r0, [r2, #4]
 80139de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80139e0:	6892      	ldr	r2, [r2, #8]
 80139e2:	4611      	mov	r1, r2
 80139e4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	f2c0 80a7 	blt.w	8013b3c <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80139f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139f4:	695b      	ldr	r3, [r3, #20]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d004      	beq.n	8013a04 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80139fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fc:	3304      	adds	r3, #4
 80139fe:	4618      	mov	r0, r3
 8013a00:	f7fd fa98 	bl	8010f34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013a04:	463b      	mov	r3, r7
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7ff ff6c 	bl	80138e4 <prvSampleTimeNow>
 8013a0c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	2b09      	cmp	r3, #9
 8013a12:	f200 8094 	bhi.w	8013b3e <prvProcessReceivedCommands+0x196>
 8013a16:	a201      	add	r2, pc, #4	; (adr r2, 8013a1c <prvProcessReceivedCommands+0x74>)
 8013a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a1c:	08013a45 	.word	0x08013a45
 8013a20:	08013a45 	.word	0x08013a45
 8013a24:	08013a45 	.word	0x08013a45
 8013a28:	08013ab7 	.word	0x08013ab7
 8013a2c:	08013acb 	.word	0x08013acb
 8013a30:	08013b13 	.word	0x08013b13
 8013a34:	08013a45 	.word	0x08013a45
 8013a38:	08013a45 	.word	0x08013a45
 8013a3c:	08013ab7 	.word	0x08013ab7
 8013a40:	08013acb 	.word	0x08013acb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a4a:	f043 0301 	orr.w	r3, r3, #1
 8013a4e:	b2da      	uxtb	r2, r3
 8013a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013a56:	68ba      	ldr	r2, [r7, #8]
 8013a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a5a:	699b      	ldr	r3, [r3, #24]
 8013a5c:	18d1      	adds	r1, r2, r3
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a64:	f7ff ff5e 	bl	8013924 <prvInsertTimerInActiveList>
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d067      	beq.n	8013b3e <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a70:	6a1b      	ldr	r3, [r3, #32]
 8013a72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a74:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013a7c:	f003 0304 	and.w	r3, r3, #4
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d05c      	beq.n	8013b3e <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013a84:	68ba      	ldr	r2, [r7, #8]
 8013a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a88:	699b      	ldr	r3, [r3, #24]
 8013a8a:	441a      	add	r2, r3
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	9300      	str	r3, [sp, #0]
 8013a90:	2300      	movs	r3, #0
 8013a92:	2100      	movs	r1, #0
 8013a94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a96:	f7ff fe09 	bl	80136ac <xTimerGenericCommand>
 8013a9a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013a9c:	6a3b      	ldr	r3, [r7, #32]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d14d      	bne.n	8013b3e <prvProcessReceivedCommands+0x196>
 8013aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa6:	f383 8811 	msr	BASEPRI, r3
 8013aaa:	f3bf 8f6f 	isb	sy
 8013aae:	f3bf 8f4f 	dsb	sy
 8013ab2:	61bb      	str	r3, [r7, #24]
 8013ab4:	e7fe      	b.n	8013ab4 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013abc:	f023 0301 	bic.w	r3, r3, #1
 8013ac0:	b2da      	uxtb	r2, r3
 8013ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013ac8:	e039      	b.n	8013b3e <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ad0:	f043 0301 	orr.w	r3, r3, #1
 8013ad4:	b2da      	uxtb	r2, r3
 8013ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013adc:	68ba      	ldr	r2, [r7, #8]
 8013ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae4:	699b      	ldr	r3, [r3, #24]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d109      	bne.n	8013afe <prvProcessReceivedCommands+0x156>
 8013aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aee:	f383 8811 	msr	BASEPRI, r3
 8013af2:	f3bf 8f6f 	isb	sy
 8013af6:	f3bf 8f4f 	dsb	sy
 8013afa:	617b      	str	r3, [r7, #20]
 8013afc:	e7fe      	b.n	8013afc <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b00:	699a      	ldr	r2, [r3, #24]
 8013b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b04:	18d1      	adds	r1, r2, r3
 8013b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b0c:	f7ff ff0a 	bl	8013924 <prvInsertTimerInActiveList>
					break;
 8013b10:	e015      	b.n	8013b3e <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b18:	f003 0302 	and.w	r3, r3, #2
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d103      	bne.n	8013b28 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8013b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b22:	f7fd f867 	bl	8010bf4 <vPortFree>
 8013b26:	e00a      	b.n	8013b3e <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b2e:	f023 0301 	bic.w	r3, r3, #1
 8013b32:	b2da      	uxtb	r2, r3
 8013b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013b3a:	e000      	b.n	8013b3e <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013b3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013b3e:	4b07      	ldr	r3, [pc, #28]	; (8013b5c <prvProcessReceivedCommands+0x1b4>)
 8013b40:	681b      	ldr	r3, [r3, #0]
 8013b42:	1d39      	adds	r1, r7, #4
 8013b44:	2200      	movs	r2, #0
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7fd fe8e 	bl	8011868 <xQueueReceive>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	f47f af2e 	bne.w	80139b0 <prvProcessReceivedCommands+0x8>
	}
}
 8013b54:	bf00      	nop
 8013b56:	3730      	adds	r7, #48	; 0x30
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	bd80      	pop	{r7, pc}
 8013b5c:	2002df60 	.word	0x2002df60

08013b60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b088      	sub	sp, #32
 8013b64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013b66:	e047      	b.n	8013bf8 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013b68:	4b2d      	ldr	r3, [pc, #180]	; (8013c20 <prvSwitchTimerLists+0xc0>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	68db      	ldr	r3, [r3, #12]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b72:	4b2b      	ldr	r3, [pc, #172]	; (8013c20 <prvSwitchTimerLists+0xc0>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	68db      	ldr	r3, [r3, #12]
 8013b7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	3304      	adds	r3, #4
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7fd f9d7 	bl	8010f34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	6a1b      	ldr	r3, [r3, #32]
 8013b8a:	68f8      	ldr	r0, [r7, #12]
 8013b8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b94:	f003 0304 	and.w	r3, r3, #4
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d02d      	beq.n	8013bf8 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013b9c:	68fb      	ldr	r3, [r7, #12]
 8013b9e:	699b      	ldr	r3, [r3, #24]
 8013ba0:	693a      	ldr	r2, [r7, #16]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013ba6:	68ba      	ldr	r2, [r7, #8]
 8013ba8:	693b      	ldr	r3, [r7, #16]
 8013baa:	429a      	cmp	r2, r3
 8013bac:	d90e      	bls.n	8013bcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	68ba      	ldr	r2, [r7, #8]
 8013bb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	68fa      	ldr	r2, [r7, #12]
 8013bb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013bba:	4b19      	ldr	r3, [pc, #100]	; (8013c20 <prvSwitchTimerLists+0xc0>)
 8013bbc:	681a      	ldr	r2, [r3, #0]
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	3304      	adds	r3, #4
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	4610      	mov	r0, r2
 8013bc6:	f7fd f97c 	bl	8010ec2 <vListInsert>
 8013bca:	e015      	b.n	8013bf8 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013bcc:	2300      	movs	r3, #0
 8013bce:	9300      	str	r3, [sp, #0]
 8013bd0:	2300      	movs	r3, #0
 8013bd2:	693a      	ldr	r2, [r7, #16]
 8013bd4:	2100      	movs	r1, #0
 8013bd6:	68f8      	ldr	r0, [r7, #12]
 8013bd8:	f7ff fd68 	bl	80136ac <xTimerGenericCommand>
 8013bdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d109      	bne.n	8013bf8 <prvSwitchTimerLists+0x98>
 8013be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013be8:	f383 8811 	msr	BASEPRI, r3
 8013bec:	f3bf 8f6f 	isb	sy
 8013bf0:	f3bf 8f4f 	dsb	sy
 8013bf4:	603b      	str	r3, [r7, #0]
 8013bf6:	e7fe      	b.n	8013bf6 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013bf8:	4b09      	ldr	r3, [pc, #36]	; (8013c20 <prvSwitchTimerLists+0xc0>)
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d1b2      	bne.n	8013b68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8013c02:	4b07      	ldr	r3, [pc, #28]	; (8013c20 <prvSwitchTimerLists+0xc0>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8013c08:	4b06      	ldr	r3, [pc, #24]	; (8013c24 <prvSwitchTimerLists+0xc4>)
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	4a04      	ldr	r2, [pc, #16]	; (8013c20 <prvSwitchTimerLists+0xc0>)
 8013c0e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8013c10:	4a04      	ldr	r2, [pc, #16]	; (8013c24 <prvSwitchTimerLists+0xc4>)
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	6013      	str	r3, [r2, #0]
}
 8013c16:	bf00      	nop
 8013c18:	3718      	adds	r7, #24
 8013c1a:	46bd      	mov	sp, r7
 8013c1c:	bd80      	pop	{r7, pc}
 8013c1e:	bf00      	nop
 8013c20:	2002df58 	.word	0x2002df58
 8013c24:	2002df5c 	.word	0x2002df5c

08013c28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8013c28:	b580      	push	{r7, lr}
 8013c2a:	b082      	sub	sp, #8
 8013c2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8013c2e:	f7fc fe05 	bl	801083c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8013c32:	4b15      	ldr	r3, [pc, #84]	; (8013c88 <prvCheckForValidListAndQueue+0x60>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d120      	bne.n	8013c7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8013c3a:	4814      	ldr	r0, [pc, #80]	; (8013c8c <prvCheckForValidListAndQueue+0x64>)
 8013c3c:	f7fd f8f0 	bl	8010e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8013c40:	4813      	ldr	r0, [pc, #76]	; (8013c90 <prvCheckForValidListAndQueue+0x68>)
 8013c42:	f7fd f8ed 	bl	8010e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8013c46:	4b13      	ldr	r3, [pc, #76]	; (8013c94 <prvCheckForValidListAndQueue+0x6c>)
 8013c48:	4a10      	ldr	r2, [pc, #64]	; (8013c8c <prvCheckForValidListAndQueue+0x64>)
 8013c4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8013c4c:	4b12      	ldr	r3, [pc, #72]	; (8013c98 <prvCheckForValidListAndQueue+0x70>)
 8013c4e:	4a10      	ldr	r2, [pc, #64]	; (8013c90 <prvCheckForValidListAndQueue+0x68>)
 8013c50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8013c52:	2300      	movs	r3, #0
 8013c54:	9300      	str	r3, [sp, #0]
 8013c56:	4b11      	ldr	r3, [pc, #68]	; (8013c9c <prvCheckForValidListAndQueue+0x74>)
 8013c58:	4a11      	ldr	r2, [pc, #68]	; (8013ca0 <prvCheckForValidListAndQueue+0x78>)
 8013c5a:	2110      	movs	r1, #16
 8013c5c:	200a      	movs	r0, #10
 8013c5e:	f7fd f9fb 	bl	8011058 <xQueueGenericCreateStatic>
 8013c62:	4602      	mov	r2, r0
 8013c64:	4b08      	ldr	r3, [pc, #32]	; (8013c88 <prvCheckForValidListAndQueue+0x60>)
 8013c66:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8013c68:	4b07      	ldr	r3, [pc, #28]	; (8013c88 <prvCheckForValidListAndQueue+0x60>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d005      	beq.n	8013c7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8013c70:	4b05      	ldr	r3, [pc, #20]	; (8013c88 <prvCheckForValidListAndQueue+0x60>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	490b      	ldr	r1, [pc, #44]	; (8013ca4 <prvCheckForValidListAndQueue+0x7c>)
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7fe f9a2 	bl	8011fc0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c7c:	f7fc fe0c 	bl	8010898 <vPortExitCritical>
}
 8013c80:	bf00      	nop
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
 8013c86:	bf00      	nop
 8013c88:	2002df60 	.word	0x2002df60
 8013c8c:	2002df30 	.word	0x2002df30
 8013c90:	2002df44 	.word	0x2002df44
 8013c94:	2002df58 	.word	0x2002df58
 8013c98:	2002df5c 	.word	0x2002df5c
 8013c9c:	2002e00c 	.word	0x2002e00c
 8013ca0:	2002df6c 	.word	0x2002df6c
 8013ca4:	080186e8 	.word	0x080186e8

08013ca8 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8013ca8:	b480      	push	{r7}
 8013caa:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013cac:	4b05      	ldr	r3, [pc, #20]	; (8013cc4 <UTIL_LPM_Init+0x1c>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013cb2:	4b05      	ldr	r3, [pc, #20]	; (8013cc8 <UTIL_LPM_Init+0x20>)
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8013cb8:	bf00      	nop
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr
 8013cc2:	bf00      	nop
 8013cc4:	2002e05c 	.word	0x2002e05c
 8013cc8:	2002e060 	.word	0x2002e060

08013ccc <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8013ccc:	b480      	push	{r7}
 8013cce:	b087      	sub	sp, #28
 8013cd0:	af00      	add	r7, sp, #0
 8013cd2:	6078      	str	r0, [r7, #4]
 8013cd4:	460b      	mov	r3, r1
 8013cd6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8013cdc:	613b      	str	r3, [r7, #16]
  return(result);
 8013cde:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8013ce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8013ce2:	b672      	cpsid	i
  
  switch(state)
 8013ce4:	78fb      	ldrb	r3, [r7, #3]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d009      	beq.n	8013cfe <UTIL_LPM_SetOffMode+0x32>
 8013cea:	2b01      	cmp	r3, #1
 8013cec:	d000      	beq.n	8013cf0 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 8013cee:	e00e      	b.n	8013d0e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 8013cf0:	4b0c      	ldr	r3, [pc, #48]	; (8013d24 <UTIL_LPM_SetOffMode+0x58>)
 8013cf2:	681a      	ldr	r2, [r3, #0]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	4313      	orrs	r3, r2
 8013cf8:	4a0a      	ldr	r2, [pc, #40]	; (8013d24 <UTIL_LPM_SetOffMode+0x58>)
 8013cfa:	6013      	str	r3, [r2, #0]
      break;
 8013cfc:	e007      	b.n	8013d0e <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	43da      	mvns	r2, r3
 8013d02:	4b08      	ldr	r3, [pc, #32]	; (8013d24 <UTIL_LPM_SetOffMode+0x58>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	4013      	ands	r3, r2
 8013d08:	4a06      	ldr	r2, [pc, #24]	; (8013d24 <UTIL_LPM_SetOffMode+0x58>)
 8013d0a:	6013      	str	r3, [r2, #0]
      break;
 8013d0c:	bf00      	nop
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013d18:	bf00      	nop
 8013d1a:	371c      	adds	r7, #28
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d22:	4770      	bx	lr
 8013d24:	2002e060 	.word	0x2002e060

08013d28 <__errno>:
 8013d28:	4b01      	ldr	r3, [pc, #4]	; (8013d30 <__errno+0x8>)
 8013d2a:	6818      	ldr	r0, [r3, #0]
 8013d2c:	4770      	bx	lr
 8013d2e:	bf00      	nop
 8013d30:	20000024 	.word	0x20000024

08013d34 <__libc_init_array>:
 8013d34:	b570      	push	{r4, r5, r6, lr}
 8013d36:	4e0d      	ldr	r6, [pc, #52]	; (8013d6c <__libc_init_array+0x38>)
 8013d38:	4c0d      	ldr	r4, [pc, #52]	; (8013d70 <__libc_init_array+0x3c>)
 8013d3a:	1ba4      	subs	r4, r4, r6
 8013d3c:	10a4      	asrs	r4, r4, #2
 8013d3e:	2500      	movs	r5, #0
 8013d40:	42a5      	cmp	r5, r4
 8013d42:	d109      	bne.n	8013d58 <__libc_init_array+0x24>
 8013d44:	4e0b      	ldr	r6, [pc, #44]	; (8013d74 <__libc_init_array+0x40>)
 8013d46:	4c0c      	ldr	r4, [pc, #48]	; (8013d78 <__libc_init_array+0x44>)
 8013d48:	f003 fe74 	bl	8017a34 <_init>
 8013d4c:	1ba4      	subs	r4, r4, r6
 8013d4e:	10a4      	asrs	r4, r4, #2
 8013d50:	2500      	movs	r5, #0
 8013d52:	42a5      	cmp	r5, r4
 8013d54:	d105      	bne.n	8013d62 <__libc_init_array+0x2e>
 8013d56:	bd70      	pop	{r4, r5, r6, pc}
 8013d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013d5c:	4798      	blx	r3
 8013d5e:	3501      	adds	r5, #1
 8013d60:	e7ee      	b.n	8013d40 <__libc_init_array+0xc>
 8013d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013d66:	4798      	blx	r3
 8013d68:	3501      	adds	r5, #1
 8013d6a:	e7f2      	b.n	8013d52 <__libc_init_array+0x1e>
 8013d6c:	08019bc0 	.word	0x08019bc0
 8013d70:	08019bc0 	.word	0x08019bc0
 8013d74:	08019bc0 	.word	0x08019bc0
 8013d78:	08019bc4 	.word	0x08019bc4

08013d7c <memcpy>:
 8013d7c:	b510      	push	{r4, lr}
 8013d7e:	1e43      	subs	r3, r0, #1
 8013d80:	440a      	add	r2, r1
 8013d82:	4291      	cmp	r1, r2
 8013d84:	d100      	bne.n	8013d88 <memcpy+0xc>
 8013d86:	bd10      	pop	{r4, pc}
 8013d88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013d90:	e7f7      	b.n	8013d82 <memcpy+0x6>

08013d92 <memset>:
 8013d92:	4402      	add	r2, r0
 8013d94:	4603      	mov	r3, r0
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d100      	bne.n	8013d9c <memset+0xa>
 8013d9a:	4770      	bx	lr
 8013d9c:	f803 1b01 	strb.w	r1, [r3], #1
 8013da0:	e7f9      	b.n	8013d96 <memset+0x4>

08013da2 <__cvt>:
 8013da2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013da6:	ec55 4b10 	vmov	r4, r5, d0
 8013daa:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013db0:	2d00      	cmp	r5, #0
 8013db2:	460e      	mov	r6, r1
 8013db4:	4691      	mov	r9, r2
 8013db6:	4619      	mov	r1, r3
 8013db8:	bfb8      	it	lt
 8013dba:	4622      	movlt	r2, r4
 8013dbc:	462b      	mov	r3, r5
 8013dbe:	f027 0720 	bic.w	r7, r7, #32
 8013dc2:	bfbb      	ittet	lt
 8013dc4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013dc8:	461d      	movlt	r5, r3
 8013dca:	2300      	movge	r3, #0
 8013dcc:	232d      	movlt	r3, #45	; 0x2d
 8013dce:	bfb8      	it	lt
 8013dd0:	4614      	movlt	r4, r2
 8013dd2:	2f46      	cmp	r7, #70	; 0x46
 8013dd4:	700b      	strb	r3, [r1, #0]
 8013dd6:	d004      	beq.n	8013de2 <__cvt+0x40>
 8013dd8:	2f45      	cmp	r7, #69	; 0x45
 8013dda:	d100      	bne.n	8013dde <__cvt+0x3c>
 8013ddc:	3601      	adds	r6, #1
 8013dde:	2102      	movs	r1, #2
 8013de0:	e000      	b.n	8013de4 <__cvt+0x42>
 8013de2:	2103      	movs	r1, #3
 8013de4:	ab03      	add	r3, sp, #12
 8013de6:	9301      	str	r3, [sp, #4]
 8013de8:	ab02      	add	r3, sp, #8
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	4632      	mov	r2, r6
 8013dee:	4653      	mov	r3, sl
 8013df0:	ec45 4b10 	vmov	d0, r4, r5
 8013df4:	f000 fe88 	bl	8014b08 <_dtoa_r>
 8013df8:	2f47      	cmp	r7, #71	; 0x47
 8013dfa:	4680      	mov	r8, r0
 8013dfc:	d102      	bne.n	8013e04 <__cvt+0x62>
 8013dfe:	f019 0f01 	tst.w	r9, #1
 8013e02:	d026      	beq.n	8013e52 <__cvt+0xb0>
 8013e04:	2f46      	cmp	r7, #70	; 0x46
 8013e06:	eb08 0906 	add.w	r9, r8, r6
 8013e0a:	d111      	bne.n	8013e30 <__cvt+0x8e>
 8013e0c:	f898 3000 	ldrb.w	r3, [r8]
 8013e10:	2b30      	cmp	r3, #48	; 0x30
 8013e12:	d10a      	bne.n	8013e2a <__cvt+0x88>
 8013e14:	2200      	movs	r2, #0
 8013e16:	2300      	movs	r3, #0
 8013e18:	4620      	mov	r0, r4
 8013e1a:	4629      	mov	r1, r5
 8013e1c:	f7ec fe2c 	bl	8000a78 <__aeabi_dcmpeq>
 8013e20:	b918      	cbnz	r0, 8013e2a <__cvt+0x88>
 8013e22:	f1c6 0601 	rsb	r6, r6, #1
 8013e26:	f8ca 6000 	str.w	r6, [sl]
 8013e2a:	f8da 3000 	ldr.w	r3, [sl]
 8013e2e:	4499      	add	r9, r3
 8013e30:	2200      	movs	r2, #0
 8013e32:	2300      	movs	r3, #0
 8013e34:	4620      	mov	r0, r4
 8013e36:	4629      	mov	r1, r5
 8013e38:	f7ec fe1e 	bl	8000a78 <__aeabi_dcmpeq>
 8013e3c:	b938      	cbnz	r0, 8013e4e <__cvt+0xac>
 8013e3e:	2230      	movs	r2, #48	; 0x30
 8013e40:	9b03      	ldr	r3, [sp, #12]
 8013e42:	454b      	cmp	r3, r9
 8013e44:	d205      	bcs.n	8013e52 <__cvt+0xb0>
 8013e46:	1c59      	adds	r1, r3, #1
 8013e48:	9103      	str	r1, [sp, #12]
 8013e4a:	701a      	strb	r2, [r3, #0]
 8013e4c:	e7f8      	b.n	8013e40 <__cvt+0x9e>
 8013e4e:	f8cd 900c 	str.w	r9, [sp, #12]
 8013e52:	9b03      	ldr	r3, [sp, #12]
 8013e54:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013e56:	eba3 0308 	sub.w	r3, r3, r8
 8013e5a:	4640      	mov	r0, r8
 8013e5c:	6013      	str	r3, [r2, #0]
 8013e5e:	b004      	add	sp, #16
 8013e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013e64 <__exponent>:
 8013e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013e66:	2900      	cmp	r1, #0
 8013e68:	4604      	mov	r4, r0
 8013e6a:	bfba      	itte	lt
 8013e6c:	4249      	neglt	r1, r1
 8013e6e:	232d      	movlt	r3, #45	; 0x2d
 8013e70:	232b      	movge	r3, #43	; 0x2b
 8013e72:	2909      	cmp	r1, #9
 8013e74:	f804 2b02 	strb.w	r2, [r4], #2
 8013e78:	7043      	strb	r3, [r0, #1]
 8013e7a:	dd20      	ble.n	8013ebe <__exponent+0x5a>
 8013e7c:	f10d 0307 	add.w	r3, sp, #7
 8013e80:	461f      	mov	r7, r3
 8013e82:	260a      	movs	r6, #10
 8013e84:	fb91 f5f6 	sdiv	r5, r1, r6
 8013e88:	fb06 1115 	mls	r1, r6, r5, r1
 8013e8c:	3130      	adds	r1, #48	; 0x30
 8013e8e:	2d09      	cmp	r5, #9
 8013e90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013e94:	f103 32ff 	add.w	r2, r3, #4294967295
 8013e98:	4629      	mov	r1, r5
 8013e9a:	dc09      	bgt.n	8013eb0 <__exponent+0x4c>
 8013e9c:	3130      	adds	r1, #48	; 0x30
 8013e9e:	3b02      	subs	r3, #2
 8013ea0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013ea4:	42bb      	cmp	r3, r7
 8013ea6:	4622      	mov	r2, r4
 8013ea8:	d304      	bcc.n	8013eb4 <__exponent+0x50>
 8013eaa:	1a10      	subs	r0, r2, r0
 8013eac:	b003      	add	sp, #12
 8013eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013eb0:	4613      	mov	r3, r2
 8013eb2:	e7e7      	b.n	8013e84 <__exponent+0x20>
 8013eb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013eb8:	f804 2b01 	strb.w	r2, [r4], #1
 8013ebc:	e7f2      	b.n	8013ea4 <__exponent+0x40>
 8013ebe:	2330      	movs	r3, #48	; 0x30
 8013ec0:	4419      	add	r1, r3
 8013ec2:	7083      	strb	r3, [r0, #2]
 8013ec4:	1d02      	adds	r2, r0, #4
 8013ec6:	70c1      	strb	r1, [r0, #3]
 8013ec8:	e7ef      	b.n	8013eaa <__exponent+0x46>
	...

08013ecc <_printf_float>:
 8013ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed0:	b08d      	sub	sp, #52	; 0x34
 8013ed2:	460c      	mov	r4, r1
 8013ed4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013ed8:	4616      	mov	r6, r2
 8013eda:	461f      	mov	r7, r3
 8013edc:	4605      	mov	r5, r0
 8013ede:	f001 fd45 	bl	801596c <_localeconv_r>
 8013ee2:	6803      	ldr	r3, [r0, #0]
 8013ee4:	9304      	str	r3, [sp, #16]
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	f7ec f94a 	bl	8000180 <strlen>
 8013eec:	2300      	movs	r3, #0
 8013eee:	930a      	str	r3, [sp, #40]	; 0x28
 8013ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8013ef4:	9005      	str	r0, [sp, #20]
 8013ef6:	3307      	adds	r3, #7
 8013ef8:	f023 0307 	bic.w	r3, r3, #7
 8013efc:	f103 0208 	add.w	r2, r3, #8
 8013f00:	f894 a018 	ldrb.w	sl, [r4, #24]
 8013f04:	f8d4 b000 	ldr.w	fp, [r4]
 8013f08:	f8c8 2000 	str.w	r2, [r8]
 8013f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f10:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8013f14:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8013f18:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013f1c:	9307      	str	r3, [sp, #28]
 8013f1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8013f22:	f04f 32ff 	mov.w	r2, #4294967295
 8013f26:	4ba7      	ldr	r3, [pc, #668]	; (80141c4 <_printf_float+0x2f8>)
 8013f28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f2c:	f7ec fdd6 	bl	8000adc <__aeabi_dcmpun>
 8013f30:	bb70      	cbnz	r0, 8013f90 <_printf_float+0xc4>
 8013f32:	f04f 32ff 	mov.w	r2, #4294967295
 8013f36:	4ba3      	ldr	r3, [pc, #652]	; (80141c4 <_printf_float+0x2f8>)
 8013f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8013f3c:	f7ec fdb0 	bl	8000aa0 <__aeabi_dcmple>
 8013f40:	bb30      	cbnz	r0, 8013f90 <_printf_float+0xc4>
 8013f42:	2200      	movs	r2, #0
 8013f44:	2300      	movs	r3, #0
 8013f46:	4640      	mov	r0, r8
 8013f48:	4649      	mov	r1, r9
 8013f4a:	f7ec fd9f 	bl	8000a8c <__aeabi_dcmplt>
 8013f4e:	b110      	cbz	r0, 8013f56 <_printf_float+0x8a>
 8013f50:	232d      	movs	r3, #45	; 0x2d
 8013f52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013f56:	4a9c      	ldr	r2, [pc, #624]	; (80141c8 <_printf_float+0x2fc>)
 8013f58:	4b9c      	ldr	r3, [pc, #624]	; (80141cc <_printf_float+0x300>)
 8013f5a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8013f5e:	bf8c      	ite	hi
 8013f60:	4690      	movhi	r8, r2
 8013f62:	4698      	movls	r8, r3
 8013f64:	2303      	movs	r3, #3
 8013f66:	f02b 0204 	bic.w	r2, fp, #4
 8013f6a:	6123      	str	r3, [r4, #16]
 8013f6c:	6022      	str	r2, [r4, #0]
 8013f6e:	f04f 0900 	mov.w	r9, #0
 8013f72:	9700      	str	r7, [sp, #0]
 8013f74:	4633      	mov	r3, r6
 8013f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8013f78:	4621      	mov	r1, r4
 8013f7a:	4628      	mov	r0, r5
 8013f7c:	f000 f9e6 	bl	801434c <_printf_common>
 8013f80:	3001      	adds	r0, #1
 8013f82:	f040 808d 	bne.w	80140a0 <_printf_float+0x1d4>
 8013f86:	f04f 30ff 	mov.w	r0, #4294967295
 8013f8a:	b00d      	add	sp, #52	; 0x34
 8013f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f90:	4642      	mov	r2, r8
 8013f92:	464b      	mov	r3, r9
 8013f94:	4640      	mov	r0, r8
 8013f96:	4649      	mov	r1, r9
 8013f98:	f7ec fda0 	bl	8000adc <__aeabi_dcmpun>
 8013f9c:	b110      	cbz	r0, 8013fa4 <_printf_float+0xd8>
 8013f9e:	4a8c      	ldr	r2, [pc, #560]	; (80141d0 <_printf_float+0x304>)
 8013fa0:	4b8c      	ldr	r3, [pc, #560]	; (80141d4 <_printf_float+0x308>)
 8013fa2:	e7da      	b.n	8013f5a <_printf_float+0x8e>
 8013fa4:	6861      	ldr	r1, [r4, #4]
 8013fa6:	1c4b      	adds	r3, r1, #1
 8013fa8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8013fac:	a80a      	add	r0, sp, #40	; 0x28
 8013fae:	d13e      	bne.n	801402e <_printf_float+0x162>
 8013fb0:	2306      	movs	r3, #6
 8013fb2:	6063      	str	r3, [r4, #4]
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8013fba:	ab09      	add	r3, sp, #36	; 0x24
 8013fbc:	9300      	str	r3, [sp, #0]
 8013fbe:	ec49 8b10 	vmov	d0, r8, r9
 8013fc2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8013fc6:	6022      	str	r2, [r4, #0]
 8013fc8:	f8cd a004 	str.w	sl, [sp, #4]
 8013fcc:	6861      	ldr	r1, [r4, #4]
 8013fce:	4628      	mov	r0, r5
 8013fd0:	f7ff fee7 	bl	8013da2 <__cvt>
 8013fd4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8013fd8:	2b47      	cmp	r3, #71	; 0x47
 8013fda:	4680      	mov	r8, r0
 8013fdc:	d109      	bne.n	8013ff2 <_printf_float+0x126>
 8013fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fe0:	1cd8      	adds	r0, r3, #3
 8013fe2:	db02      	blt.n	8013fea <_printf_float+0x11e>
 8013fe4:	6862      	ldr	r2, [r4, #4]
 8013fe6:	4293      	cmp	r3, r2
 8013fe8:	dd47      	ble.n	801407a <_printf_float+0x1ae>
 8013fea:	f1aa 0a02 	sub.w	sl, sl, #2
 8013fee:	fa5f fa8a 	uxtb.w	sl, sl
 8013ff2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8013ff6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8013ff8:	d824      	bhi.n	8014044 <_printf_float+0x178>
 8013ffa:	3901      	subs	r1, #1
 8013ffc:	4652      	mov	r2, sl
 8013ffe:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8014002:	9109      	str	r1, [sp, #36]	; 0x24
 8014004:	f7ff ff2e 	bl	8013e64 <__exponent>
 8014008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801400a:	1813      	adds	r3, r2, r0
 801400c:	2a01      	cmp	r2, #1
 801400e:	4681      	mov	r9, r0
 8014010:	6123      	str	r3, [r4, #16]
 8014012:	dc02      	bgt.n	801401a <_printf_float+0x14e>
 8014014:	6822      	ldr	r2, [r4, #0]
 8014016:	07d1      	lsls	r1, r2, #31
 8014018:	d501      	bpl.n	801401e <_printf_float+0x152>
 801401a:	3301      	adds	r3, #1
 801401c:	6123      	str	r3, [r4, #16]
 801401e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8014022:	2b00      	cmp	r3, #0
 8014024:	d0a5      	beq.n	8013f72 <_printf_float+0xa6>
 8014026:	232d      	movs	r3, #45	; 0x2d
 8014028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801402c:	e7a1      	b.n	8013f72 <_printf_float+0xa6>
 801402e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8014032:	f000 8177 	beq.w	8014324 <_printf_float+0x458>
 8014036:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801403a:	d1bb      	bne.n	8013fb4 <_printf_float+0xe8>
 801403c:	2900      	cmp	r1, #0
 801403e:	d1b9      	bne.n	8013fb4 <_printf_float+0xe8>
 8014040:	2301      	movs	r3, #1
 8014042:	e7b6      	b.n	8013fb2 <_printf_float+0xe6>
 8014044:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014048:	d119      	bne.n	801407e <_printf_float+0x1b2>
 801404a:	2900      	cmp	r1, #0
 801404c:	6863      	ldr	r3, [r4, #4]
 801404e:	dd0c      	ble.n	801406a <_printf_float+0x19e>
 8014050:	6121      	str	r1, [r4, #16]
 8014052:	b913      	cbnz	r3, 801405a <_printf_float+0x18e>
 8014054:	6822      	ldr	r2, [r4, #0]
 8014056:	07d2      	lsls	r2, r2, #31
 8014058:	d502      	bpl.n	8014060 <_printf_float+0x194>
 801405a:	3301      	adds	r3, #1
 801405c:	440b      	add	r3, r1
 801405e:	6123      	str	r3, [r4, #16]
 8014060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014062:	65a3      	str	r3, [r4, #88]	; 0x58
 8014064:	f04f 0900 	mov.w	r9, #0
 8014068:	e7d9      	b.n	801401e <_printf_float+0x152>
 801406a:	b913      	cbnz	r3, 8014072 <_printf_float+0x1a6>
 801406c:	6822      	ldr	r2, [r4, #0]
 801406e:	07d0      	lsls	r0, r2, #31
 8014070:	d501      	bpl.n	8014076 <_printf_float+0x1aa>
 8014072:	3302      	adds	r3, #2
 8014074:	e7f3      	b.n	801405e <_printf_float+0x192>
 8014076:	2301      	movs	r3, #1
 8014078:	e7f1      	b.n	801405e <_printf_float+0x192>
 801407a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801407e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8014082:	4293      	cmp	r3, r2
 8014084:	db05      	blt.n	8014092 <_printf_float+0x1c6>
 8014086:	6822      	ldr	r2, [r4, #0]
 8014088:	6123      	str	r3, [r4, #16]
 801408a:	07d1      	lsls	r1, r2, #31
 801408c:	d5e8      	bpl.n	8014060 <_printf_float+0x194>
 801408e:	3301      	adds	r3, #1
 8014090:	e7e5      	b.n	801405e <_printf_float+0x192>
 8014092:	2b00      	cmp	r3, #0
 8014094:	bfd4      	ite	le
 8014096:	f1c3 0302 	rsble	r3, r3, #2
 801409a:	2301      	movgt	r3, #1
 801409c:	4413      	add	r3, r2
 801409e:	e7de      	b.n	801405e <_printf_float+0x192>
 80140a0:	6823      	ldr	r3, [r4, #0]
 80140a2:	055a      	lsls	r2, r3, #21
 80140a4:	d407      	bmi.n	80140b6 <_printf_float+0x1ea>
 80140a6:	6923      	ldr	r3, [r4, #16]
 80140a8:	4642      	mov	r2, r8
 80140aa:	4631      	mov	r1, r6
 80140ac:	4628      	mov	r0, r5
 80140ae:	47b8      	blx	r7
 80140b0:	3001      	adds	r0, #1
 80140b2:	d12b      	bne.n	801410c <_printf_float+0x240>
 80140b4:	e767      	b.n	8013f86 <_printf_float+0xba>
 80140b6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80140ba:	f240 80dc 	bls.w	8014276 <_printf_float+0x3aa>
 80140be:	2200      	movs	r2, #0
 80140c0:	2300      	movs	r3, #0
 80140c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80140c6:	f7ec fcd7 	bl	8000a78 <__aeabi_dcmpeq>
 80140ca:	2800      	cmp	r0, #0
 80140cc:	d033      	beq.n	8014136 <_printf_float+0x26a>
 80140ce:	2301      	movs	r3, #1
 80140d0:	4a41      	ldr	r2, [pc, #260]	; (80141d8 <_printf_float+0x30c>)
 80140d2:	4631      	mov	r1, r6
 80140d4:	4628      	mov	r0, r5
 80140d6:	47b8      	blx	r7
 80140d8:	3001      	adds	r0, #1
 80140da:	f43f af54 	beq.w	8013f86 <_printf_float+0xba>
 80140de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80140e2:	429a      	cmp	r2, r3
 80140e4:	db02      	blt.n	80140ec <_printf_float+0x220>
 80140e6:	6823      	ldr	r3, [r4, #0]
 80140e8:	07d8      	lsls	r0, r3, #31
 80140ea:	d50f      	bpl.n	801410c <_printf_float+0x240>
 80140ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80140f0:	4631      	mov	r1, r6
 80140f2:	4628      	mov	r0, r5
 80140f4:	47b8      	blx	r7
 80140f6:	3001      	adds	r0, #1
 80140f8:	f43f af45 	beq.w	8013f86 <_printf_float+0xba>
 80140fc:	f04f 0800 	mov.w	r8, #0
 8014100:	f104 091a 	add.w	r9, r4, #26
 8014104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014106:	3b01      	subs	r3, #1
 8014108:	4543      	cmp	r3, r8
 801410a:	dc09      	bgt.n	8014120 <_printf_float+0x254>
 801410c:	6823      	ldr	r3, [r4, #0]
 801410e:	079b      	lsls	r3, r3, #30
 8014110:	f100 8103 	bmi.w	801431a <_printf_float+0x44e>
 8014114:	68e0      	ldr	r0, [r4, #12]
 8014116:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014118:	4298      	cmp	r0, r3
 801411a:	bfb8      	it	lt
 801411c:	4618      	movlt	r0, r3
 801411e:	e734      	b.n	8013f8a <_printf_float+0xbe>
 8014120:	2301      	movs	r3, #1
 8014122:	464a      	mov	r2, r9
 8014124:	4631      	mov	r1, r6
 8014126:	4628      	mov	r0, r5
 8014128:	47b8      	blx	r7
 801412a:	3001      	adds	r0, #1
 801412c:	f43f af2b 	beq.w	8013f86 <_printf_float+0xba>
 8014130:	f108 0801 	add.w	r8, r8, #1
 8014134:	e7e6      	b.n	8014104 <_printf_float+0x238>
 8014136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014138:	2b00      	cmp	r3, #0
 801413a:	dc2b      	bgt.n	8014194 <_printf_float+0x2c8>
 801413c:	2301      	movs	r3, #1
 801413e:	4a26      	ldr	r2, [pc, #152]	; (80141d8 <_printf_float+0x30c>)
 8014140:	4631      	mov	r1, r6
 8014142:	4628      	mov	r0, r5
 8014144:	47b8      	blx	r7
 8014146:	3001      	adds	r0, #1
 8014148:	f43f af1d 	beq.w	8013f86 <_printf_float+0xba>
 801414c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801414e:	b923      	cbnz	r3, 801415a <_printf_float+0x28e>
 8014150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014152:	b913      	cbnz	r3, 801415a <_printf_float+0x28e>
 8014154:	6823      	ldr	r3, [r4, #0]
 8014156:	07d9      	lsls	r1, r3, #31
 8014158:	d5d8      	bpl.n	801410c <_printf_float+0x240>
 801415a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801415e:	4631      	mov	r1, r6
 8014160:	4628      	mov	r0, r5
 8014162:	47b8      	blx	r7
 8014164:	3001      	adds	r0, #1
 8014166:	f43f af0e 	beq.w	8013f86 <_printf_float+0xba>
 801416a:	f04f 0900 	mov.w	r9, #0
 801416e:	f104 0a1a 	add.w	sl, r4, #26
 8014172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014174:	425b      	negs	r3, r3
 8014176:	454b      	cmp	r3, r9
 8014178:	dc01      	bgt.n	801417e <_printf_float+0x2b2>
 801417a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801417c:	e794      	b.n	80140a8 <_printf_float+0x1dc>
 801417e:	2301      	movs	r3, #1
 8014180:	4652      	mov	r2, sl
 8014182:	4631      	mov	r1, r6
 8014184:	4628      	mov	r0, r5
 8014186:	47b8      	blx	r7
 8014188:	3001      	adds	r0, #1
 801418a:	f43f aefc 	beq.w	8013f86 <_printf_float+0xba>
 801418e:	f109 0901 	add.w	r9, r9, #1
 8014192:	e7ee      	b.n	8014172 <_printf_float+0x2a6>
 8014194:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014196:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014198:	429a      	cmp	r2, r3
 801419a:	bfa8      	it	ge
 801419c:	461a      	movge	r2, r3
 801419e:	2a00      	cmp	r2, #0
 80141a0:	4691      	mov	r9, r2
 80141a2:	dd07      	ble.n	80141b4 <_printf_float+0x2e8>
 80141a4:	4613      	mov	r3, r2
 80141a6:	4631      	mov	r1, r6
 80141a8:	4642      	mov	r2, r8
 80141aa:	4628      	mov	r0, r5
 80141ac:	47b8      	blx	r7
 80141ae:	3001      	adds	r0, #1
 80141b0:	f43f aee9 	beq.w	8013f86 <_printf_float+0xba>
 80141b4:	f104 031a 	add.w	r3, r4, #26
 80141b8:	f04f 0b00 	mov.w	fp, #0
 80141bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80141c0:	9306      	str	r3, [sp, #24]
 80141c2:	e015      	b.n	80141f0 <_printf_float+0x324>
 80141c4:	7fefffff 	.word	0x7fefffff
 80141c8:	080198c0 	.word	0x080198c0
 80141cc:	080198bc 	.word	0x080198bc
 80141d0:	080198c8 	.word	0x080198c8
 80141d4:	080198c4 	.word	0x080198c4
 80141d8:	080198cc 	.word	0x080198cc
 80141dc:	2301      	movs	r3, #1
 80141de:	9a06      	ldr	r2, [sp, #24]
 80141e0:	4631      	mov	r1, r6
 80141e2:	4628      	mov	r0, r5
 80141e4:	47b8      	blx	r7
 80141e6:	3001      	adds	r0, #1
 80141e8:	f43f aecd 	beq.w	8013f86 <_printf_float+0xba>
 80141ec:	f10b 0b01 	add.w	fp, fp, #1
 80141f0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80141f4:	ebaa 0309 	sub.w	r3, sl, r9
 80141f8:	455b      	cmp	r3, fp
 80141fa:	dcef      	bgt.n	80141dc <_printf_float+0x310>
 80141fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014200:	429a      	cmp	r2, r3
 8014202:	44d0      	add	r8, sl
 8014204:	db15      	blt.n	8014232 <_printf_float+0x366>
 8014206:	6823      	ldr	r3, [r4, #0]
 8014208:	07da      	lsls	r2, r3, #31
 801420a:	d412      	bmi.n	8014232 <_printf_float+0x366>
 801420c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801420e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8014210:	eba3 020a 	sub.w	r2, r3, sl
 8014214:	eba3 0a01 	sub.w	sl, r3, r1
 8014218:	4592      	cmp	sl, r2
 801421a:	bfa8      	it	ge
 801421c:	4692      	movge	sl, r2
 801421e:	f1ba 0f00 	cmp.w	sl, #0
 8014222:	dc0e      	bgt.n	8014242 <_printf_float+0x376>
 8014224:	f04f 0800 	mov.w	r8, #0
 8014228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801422c:	f104 091a 	add.w	r9, r4, #26
 8014230:	e019      	b.n	8014266 <_printf_float+0x39a>
 8014232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014236:	4631      	mov	r1, r6
 8014238:	4628      	mov	r0, r5
 801423a:	47b8      	blx	r7
 801423c:	3001      	adds	r0, #1
 801423e:	d1e5      	bne.n	801420c <_printf_float+0x340>
 8014240:	e6a1      	b.n	8013f86 <_printf_float+0xba>
 8014242:	4653      	mov	r3, sl
 8014244:	4642      	mov	r2, r8
 8014246:	4631      	mov	r1, r6
 8014248:	4628      	mov	r0, r5
 801424a:	47b8      	blx	r7
 801424c:	3001      	adds	r0, #1
 801424e:	d1e9      	bne.n	8014224 <_printf_float+0x358>
 8014250:	e699      	b.n	8013f86 <_printf_float+0xba>
 8014252:	2301      	movs	r3, #1
 8014254:	464a      	mov	r2, r9
 8014256:	4631      	mov	r1, r6
 8014258:	4628      	mov	r0, r5
 801425a:	47b8      	blx	r7
 801425c:	3001      	adds	r0, #1
 801425e:	f43f ae92 	beq.w	8013f86 <_printf_float+0xba>
 8014262:	f108 0801 	add.w	r8, r8, #1
 8014266:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801426a:	1a9b      	subs	r3, r3, r2
 801426c:	eba3 030a 	sub.w	r3, r3, sl
 8014270:	4543      	cmp	r3, r8
 8014272:	dcee      	bgt.n	8014252 <_printf_float+0x386>
 8014274:	e74a      	b.n	801410c <_printf_float+0x240>
 8014276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014278:	2a01      	cmp	r2, #1
 801427a:	dc01      	bgt.n	8014280 <_printf_float+0x3b4>
 801427c:	07db      	lsls	r3, r3, #31
 801427e:	d53a      	bpl.n	80142f6 <_printf_float+0x42a>
 8014280:	2301      	movs	r3, #1
 8014282:	4642      	mov	r2, r8
 8014284:	4631      	mov	r1, r6
 8014286:	4628      	mov	r0, r5
 8014288:	47b8      	blx	r7
 801428a:	3001      	adds	r0, #1
 801428c:	f43f ae7b 	beq.w	8013f86 <_printf_float+0xba>
 8014290:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014294:	4631      	mov	r1, r6
 8014296:	4628      	mov	r0, r5
 8014298:	47b8      	blx	r7
 801429a:	3001      	adds	r0, #1
 801429c:	f108 0801 	add.w	r8, r8, #1
 80142a0:	f43f ae71 	beq.w	8013f86 <_printf_float+0xba>
 80142a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142a6:	2200      	movs	r2, #0
 80142a8:	f103 3aff 	add.w	sl, r3, #4294967295
 80142ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80142b0:	2300      	movs	r3, #0
 80142b2:	f7ec fbe1 	bl	8000a78 <__aeabi_dcmpeq>
 80142b6:	b9c8      	cbnz	r0, 80142ec <_printf_float+0x420>
 80142b8:	4653      	mov	r3, sl
 80142ba:	4642      	mov	r2, r8
 80142bc:	4631      	mov	r1, r6
 80142be:	4628      	mov	r0, r5
 80142c0:	47b8      	blx	r7
 80142c2:	3001      	adds	r0, #1
 80142c4:	d10e      	bne.n	80142e4 <_printf_float+0x418>
 80142c6:	e65e      	b.n	8013f86 <_printf_float+0xba>
 80142c8:	2301      	movs	r3, #1
 80142ca:	4652      	mov	r2, sl
 80142cc:	4631      	mov	r1, r6
 80142ce:	4628      	mov	r0, r5
 80142d0:	47b8      	blx	r7
 80142d2:	3001      	adds	r0, #1
 80142d4:	f43f ae57 	beq.w	8013f86 <_printf_float+0xba>
 80142d8:	f108 0801 	add.w	r8, r8, #1
 80142dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80142de:	3b01      	subs	r3, #1
 80142e0:	4543      	cmp	r3, r8
 80142e2:	dcf1      	bgt.n	80142c8 <_printf_float+0x3fc>
 80142e4:	464b      	mov	r3, r9
 80142e6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80142ea:	e6de      	b.n	80140aa <_printf_float+0x1de>
 80142ec:	f04f 0800 	mov.w	r8, #0
 80142f0:	f104 0a1a 	add.w	sl, r4, #26
 80142f4:	e7f2      	b.n	80142dc <_printf_float+0x410>
 80142f6:	2301      	movs	r3, #1
 80142f8:	e7df      	b.n	80142ba <_printf_float+0x3ee>
 80142fa:	2301      	movs	r3, #1
 80142fc:	464a      	mov	r2, r9
 80142fe:	4631      	mov	r1, r6
 8014300:	4628      	mov	r0, r5
 8014302:	47b8      	blx	r7
 8014304:	3001      	adds	r0, #1
 8014306:	f43f ae3e 	beq.w	8013f86 <_printf_float+0xba>
 801430a:	f108 0801 	add.w	r8, r8, #1
 801430e:	68e3      	ldr	r3, [r4, #12]
 8014310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014312:	1a9b      	subs	r3, r3, r2
 8014314:	4543      	cmp	r3, r8
 8014316:	dcf0      	bgt.n	80142fa <_printf_float+0x42e>
 8014318:	e6fc      	b.n	8014114 <_printf_float+0x248>
 801431a:	f04f 0800 	mov.w	r8, #0
 801431e:	f104 0919 	add.w	r9, r4, #25
 8014322:	e7f4      	b.n	801430e <_printf_float+0x442>
 8014324:	2900      	cmp	r1, #0
 8014326:	f43f ae8b 	beq.w	8014040 <_printf_float+0x174>
 801432a:	2300      	movs	r3, #0
 801432c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8014330:	ab09      	add	r3, sp, #36	; 0x24
 8014332:	9300      	str	r3, [sp, #0]
 8014334:	ec49 8b10 	vmov	d0, r8, r9
 8014338:	6022      	str	r2, [r4, #0]
 801433a:	f8cd a004 	str.w	sl, [sp, #4]
 801433e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8014342:	4628      	mov	r0, r5
 8014344:	f7ff fd2d 	bl	8013da2 <__cvt>
 8014348:	4680      	mov	r8, r0
 801434a:	e648      	b.n	8013fde <_printf_float+0x112>

0801434c <_printf_common>:
 801434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014350:	4691      	mov	r9, r2
 8014352:	461f      	mov	r7, r3
 8014354:	688a      	ldr	r2, [r1, #8]
 8014356:	690b      	ldr	r3, [r1, #16]
 8014358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801435c:	4293      	cmp	r3, r2
 801435e:	bfb8      	it	lt
 8014360:	4613      	movlt	r3, r2
 8014362:	f8c9 3000 	str.w	r3, [r9]
 8014366:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801436a:	4606      	mov	r6, r0
 801436c:	460c      	mov	r4, r1
 801436e:	b112      	cbz	r2, 8014376 <_printf_common+0x2a>
 8014370:	3301      	adds	r3, #1
 8014372:	f8c9 3000 	str.w	r3, [r9]
 8014376:	6823      	ldr	r3, [r4, #0]
 8014378:	0699      	lsls	r1, r3, #26
 801437a:	bf42      	ittt	mi
 801437c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8014380:	3302      	addmi	r3, #2
 8014382:	f8c9 3000 	strmi.w	r3, [r9]
 8014386:	6825      	ldr	r5, [r4, #0]
 8014388:	f015 0506 	ands.w	r5, r5, #6
 801438c:	d107      	bne.n	801439e <_printf_common+0x52>
 801438e:	f104 0a19 	add.w	sl, r4, #25
 8014392:	68e3      	ldr	r3, [r4, #12]
 8014394:	f8d9 2000 	ldr.w	r2, [r9]
 8014398:	1a9b      	subs	r3, r3, r2
 801439a:	42ab      	cmp	r3, r5
 801439c:	dc28      	bgt.n	80143f0 <_printf_common+0xa4>
 801439e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80143a2:	6822      	ldr	r2, [r4, #0]
 80143a4:	3300      	adds	r3, #0
 80143a6:	bf18      	it	ne
 80143a8:	2301      	movne	r3, #1
 80143aa:	0692      	lsls	r2, r2, #26
 80143ac:	d42d      	bmi.n	801440a <_printf_common+0xbe>
 80143ae:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80143b2:	4639      	mov	r1, r7
 80143b4:	4630      	mov	r0, r6
 80143b6:	47c0      	blx	r8
 80143b8:	3001      	adds	r0, #1
 80143ba:	d020      	beq.n	80143fe <_printf_common+0xb2>
 80143bc:	6823      	ldr	r3, [r4, #0]
 80143be:	68e5      	ldr	r5, [r4, #12]
 80143c0:	f8d9 2000 	ldr.w	r2, [r9]
 80143c4:	f003 0306 	and.w	r3, r3, #6
 80143c8:	2b04      	cmp	r3, #4
 80143ca:	bf08      	it	eq
 80143cc:	1aad      	subeq	r5, r5, r2
 80143ce:	68a3      	ldr	r3, [r4, #8]
 80143d0:	6922      	ldr	r2, [r4, #16]
 80143d2:	bf0c      	ite	eq
 80143d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80143d8:	2500      	movne	r5, #0
 80143da:	4293      	cmp	r3, r2
 80143dc:	bfc4      	itt	gt
 80143de:	1a9b      	subgt	r3, r3, r2
 80143e0:	18ed      	addgt	r5, r5, r3
 80143e2:	f04f 0900 	mov.w	r9, #0
 80143e6:	341a      	adds	r4, #26
 80143e8:	454d      	cmp	r5, r9
 80143ea:	d11a      	bne.n	8014422 <_printf_common+0xd6>
 80143ec:	2000      	movs	r0, #0
 80143ee:	e008      	b.n	8014402 <_printf_common+0xb6>
 80143f0:	2301      	movs	r3, #1
 80143f2:	4652      	mov	r2, sl
 80143f4:	4639      	mov	r1, r7
 80143f6:	4630      	mov	r0, r6
 80143f8:	47c0      	blx	r8
 80143fa:	3001      	adds	r0, #1
 80143fc:	d103      	bne.n	8014406 <_printf_common+0xba>
 80143fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014406:	3501      	adds	r5, #1
 8014408:	e7c3      	b.n	8014392 <_printf_common+0x46>
 801440a:	18e1      	adds	r1, r4, r3
 801440c:	1c5a      	adds	r2, r3, #1
 801440e:	2030      	movs	r0, #48	; 0x30
 8014410:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014414:	4422      	add	r2, r4
 8014416:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801441a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801441e:	3302      	adds	r3, #2
 8014420:	e7c5      	b.n	80143ae <_printf_common+0x62>
 8014422:	2301      	movs	r3, #1
 8014424:	4622      	mov	r2, r4
 8014426:	4639      	mov	r1, r7
 8014428:	4630      	mov	r0, r6
 801442a:	47c0      	blx	r8
 801442c:	3001      	adds	r0, #1
 801442e:	d0e6      	beq.n	80143fe <_printf_common+0xb2>
 8014430:	f109 0901 	add.w	r9, r9, #1
 8014434:	e7d8      	b.n	80143e8 <_printf_common+0x9c>
	...

08014438 <_printf_i>:
 8014438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801443c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8014440:	460c      	mov	r4, r1
 8014442:	7e09      	ldrb	r1, [r1, #24]
 8014444:	b085      	sub	sp, #20
 8014446:	296e      	cmp	r1, #110	; 0x6e
 8014448:	4617      	mov	r7, r2
 801444a:	4606      	mov	r6, r0
 801444c:	4698      	mov	r8, r3
 801444e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014450:	f000 80b3 	beq.w	80145ba <_printf_i+0x182>
 8014454:	d822      	bhi.n	801449c <_printf_i+0x64>
 8014456:	2963      	cmp	r1, #99	; 0x63
 8014458:	d036      	beq.n	80144c8 <_printf_i+0x90>
 801445a:	d80a      	bhi.n	8014472 <_printf_i+0x3a>
 801445c:	2900      	cmp	r1, #0
 801445e:	f000 80b9 	beq.w	80145d4 <_printf_i+0x19c>
 8014462:	2958      	cmp	r1, #88	; 0x58
 8014464:	f000 8083 	beq.w	801456e <_printf_i+0x136>
 8014468:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801446c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8014470:	e032      	b.n	80144d8 <_printf_i+0xa0>
 8014472:	2964      	cmp	r1, #100	; 0x64
 8014474:	d001      	beq.n	801447a <_printf_i+0x42>
 8014476:	2969      	cmp	r1, #105	; 0x69
 8014478:	d1f6      	bne.n	8014468 <_printf_i+0x30>
 801447a:	6820      	ldr	r0, [r4, #0]
 801447c:	6813      	ldr	r3, [r2, #0]
 801447e:	0605      	lsls	r5, r0, #24
 8014480:	f103 0104 	add.w	r1, r3, #4
 8014484:	d52a      	bpl.n	80144dc <_printf_i+0xa4>
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	6011      	str	r1, [r2, #0]
 801448a:	2b00      	cmp	r3, #0
 801448c:	da03      	bge.n	8014496 <_printf_i+0x5e>
 801448e:	222d      	movs	r2, #45	; 0x2d
 8014490:	425b      	negs	r3, r3
 8014492:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014496:	486f      	ldr	r0, [pc, #444]	; (8014654 <_printf_i+0x21c>)
 8014498:	220a      	movs	r2, #10
 801449a:	e039      	b.n	8014510 <_printf_i+0xd8>
 801449c:	2973      	cmp	r1, #115	; 0x73
 801449e:	f000 809d 	beq.w	80145dc <_printf_i+0x1a4>
 80144a2:	d808      	bhi.n	80144b6 <_printf_i+0x7e>
 80144a4:	296f      	cmp	r1, #111	; 0x6f
 80144a6:	d020      	beq.n	80144ea <_printf_i+0xb2>
 80144a8:	2970      	cmp	r1, #112	; 0x70
 80144aa:	d1dd      	bne.n	8014468 <_printf_i+0x30>
 80144ac:	6823      	ldr	r3, [r4, #0]
 80144ae:	f043 0320 	orr.w	r3, r3, #32
 80144b2:	6023      	str	r3, [r4, #0]
 80144b4:	e003      	b.n	80144be <_printf_i+0x86>
 80144b6:	2975      	cmp	r1, #117	; 0x75
 80144b8:	d017      	beq.n	80144ea <_printf_i+0xb2>
 80144ba:	2978      	cmp	r1, #120	; 0x78
 80144bc:	d1d4      	bne.n	8014468 <_printf_i+0x30>
 80144be:	2378      	movs	r3, #120	; 0x78
 80144c0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80144c4:	4864      	ldr	r0, [pc, #400]	; (8014658 <_printf_i+0x220>)
 80144c6:	e055      	b.n	8014574 <_printf_i+0x13c>
 80144c8:	6813      	ldr	r3, [r2, #0]
 80144ca:	1d19      	adds	r1, r3, #4
 80144cc:	681b      	ldr	r3, [r3, #0]
 80144ce:	6011      	str	r1, [r2, #0]
 80144d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80144d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80144d8:	2301      	movs	r3, #1
 80144da:	e08c      	b.n	80145f6 <_printf_i+0x1be>
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	6011      	str	r1, [r2, #0]
 80144e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80144e4:	bf18      	it	ne
 80144e6:	b21b      	sxthne	r3, r3
 80144e8:	e7cf      	b.n	801448a <_printf_i+0x52>
 80144ea:	6813      	ldr	r3, [r2, #0]
 80144ec:	6825      	ldr	r5, [r4, #0]
 80144ee:	1d18      	adds	r0, r3, #4
 80144f0:	6010      	str	r0, [r2, #0]
 80144f2:	0628      	lsls	r0, r5, #24
 80144f4:	d501      	bpl.n	80144fa <_printf_i+0xc2>
 80144f6:	681b      	ldr	r3, [r3, #0]
 80144f8:	e002      	b.n	8014500 <_printf_i+0xc8>
 80144fa:	0668      	lsls	r0, r5, #25
 80144fc:	d5fb      	bpl.n	80144f6 <_printf_i+0xbe>
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	4854      	ldr	r0, [pc, #336]	; (8014654 <_printf_i+0x21c>)
 8014502:	296f      	cmp	r1, #111	; 0x6f
 8014504:	bf14      	ite	ne
 8014506:	220a      	movne	r2, #10
 8014508:	2208      	moveq	r2, #8
 801450a:	2100      	movs	r1, #0
 801450c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014510:	6865      	ldr	r5, [r4, #4]
 8014512:	60a5      	str	r5, [r4, #8]
 8014514:	2d00      	cmp	r5, #0
 8014516:	f2c0 8095 	blt.w	8014644 <_printf_i+0x20c>
 801451a:	6821      	ldr	r1, [r4, #0]
 801451c:	f021 0104 	bic.w	r1, r1, #4
 8014520:	6021      	str	r1, [r4, #0]
 8014522:	2b00      	cmp	r3, #0
 8014524:	d13d      	bne.n	80145a2 <_printf_i+0x16a>
 8014526:	2d00      	cmp	r5, #0
 8014528:	f040 808e 	bne.w	8014648 <_printf_i+0x210>
 801452c:	4665      	mov	r5, ip
 801452e:	2a08      	cmp	r2, #8
 8014530:	d10b      	bne.n	801454a <_printf_i+0x112>
 8014532:	6823      	ldr	r3, [r4, #0]
 8014534:	07db      	lsls	r3, r3, #31
 8014536:	d508      	bpl.n	801454a <_printf_i+0x112>
 8014538:	6923      	ldr	r3, [r4, #16]
 801453a:	6862      	ldr	r2, [r4, #4]
 801453c:	429a      	cmp	r2, r3
 801453e:	bfde      	ittt	le
 8014540:	2330      	movle	r3, #48	; 0x30
 8014542:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014546:	f105 35ff 	addle.w	r5, r5, #4294967295
 801454a:	ebac 0305 	sub.w	r3, ip, r5
 801454e:	6123      	str	r3, [r4, #16]
 8014550:	f8cd 8000 	str.w	r8, [sp]
 8014554:	463b      	mov	r3, r7
 8014556:	aa03      	add	r2, sp, #12
 8014558:	4621      	mov	r1, r4
 801455a:	4630      	mov	r0, r6
 801455c:	f7ff fef6 	bl	801434c <_printf_common>
 8014560:	3001      	adds	r0, #1
 8014562:	d14d      	bne.n	8014600 <_printf_i+0x1c8>
 8014564:	f04f 30ff 	mov.w	r0, #4294967295
 8014568:	b005      	add	sp, #20
 801456a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801456e:	4839      	ldr	r0, [pc, #228]	; (8014654 <_printf_i+0x21c>)
 8014570:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014574:	6813      	ldr	r3, [r2, #0]
 8014576:	6821      	ldr	r1, [r4, #0]
 8014578:	1d1d      	adds	r5, r3, #4
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	6015      	str	r5, [r2, #0]
 801457e:	060a      	lsls	r2, r1, #24
 8014580:	d50b      	bpl.n	801459a <_printf_i+0x162>
 8014582:	07ca      	lsls	r2, r1, #31
 8014584:	bf44      	itt	mi
 8014586:	f041 0120 	orrmi.w	r1, r1, #32
 801458a:	6021      	strmi	r1, [r4, #0]
 801458c:	b91b      	cbnz	r3, 8014596 <_printf_i+0x15e>
 801458e:	6822      	ldr	r2, [r4, #0]
 8014590:	f022 0220 	bic.w	r2, r2, #32
 8014594:	6022      	str	r2, [r4, #0]
 8014596:	2210      	movs	r2, #16
 8014598:	e7b7      	b.n	801450a <_printf_i+0xd2>
 801459a:	064d      	lsls	r5, r1, #25
 801459c:	bf48      	it	mi
 801459e:	b29b      	uxthmi	r3, r3
 80145a0:	e7ef      	b.n	8014582 <_printf_i+0x14a>
 80145a2:	4665      	mov	r5, ip
 80145a4:	fbb3 f1f2 	udiv	r1, r3, r2
 80145a8:	fb02 3311 	mls	r3, r2, r1, r3
 80145ac:	5cc3      	ldrb	r3, [r0, r3]
 80145ae:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80145b2:	460b      	mov	r3, r1
 80145b4:	2900      	cmp	r1, #0
 80145b6:	d1f5      	bne.n	80145a4 <_printf_i+0x16c>
 80145b8:	e7b9      	b.n	801452e <_printf_i+0xf6>
 80145ba:	6813      	ldr	r3, [r2, #0]
 80145bc:	6825      	ldr	r5, [r4, #0]
 80145be:	6961      	ldr	r1, [r4, #20]
 80145c0:	1d18      	adds	r0, r3, #4
 80145c2:	6010      	str	r0, [r2, #0]
 80145c4:	0628      	lsls	r0, r5, #24
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	d501      	bpl.n	80145ce <_printf_i+0x196>
 80145ca:	6019      	str	r1, [r3, #0]
 80145cc:	e002      	b.n	80145d4 <_printf_i+0x19c>
 80145ce:	066a      	lsls	r2, r5, #25
 80145d0:	d5fb      	bpl.n	80145ca <_printf_i+0x192>
 80145d2:	8019      	strh	r1, [r3, #0]
 80145d4:	2300      	movs	r3, #0
 80145d6:	6123      	str	r3, [r4, #16]
 80145d8:	4665      	mov	r5, ip
 80145da:	e7b9      	b.n	8014550 <_printf_i+0x118>
 80145dc:	6813      	ldr	r3, [r2, #0]
 80145de:	1d19      	adds	r1, r3, #4
 80145e0:	6011      	str	r1, [r2, #0]
 80145e2:	681d      	ldr	r5, [r3, #0]
 80145e4:	6862      	ldr	r2, [r4, #4]
 80145e6:	2100      	movs	r1, #0
 80145e8:	4628      	mov	r0, r5
 80145ea:	f7eb fdd1 	bl	8000190 <memchr>
 80145ee:	b108      	cbz	r0, 80145f4 <_printf_i+0x1bc>
 80145f0:	1b40      	subs	r0, r0, r5
 80145f2:	6060      	str	r0, [r4, #4]
 80145f4:	6863      	ldr	r3, [r4, #4]
 80145f6:	6123      	str	r3, [r4, #16]
 80145f8:	2300      	movs	r3, #0
 80145fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80145fe:	e7a7      	b.n	8014550 <_printf_i+0x118>
 8014600:	6923      	ldr	r3, [r4, #16]
 8014602:	462a      	mov	r2, r5
 8014604:	4639      	mov	r1, r7
 8014606:	4630      	mov	r0, r6
 8014608:	47c0      	blx	r8
 801460a:	3001      	adds	r0, #1
 801460c:	d0aa      	beq.n	8014564 <_printf_i+0x12c>
 801460e:	6823      	ldr	r3, [r4, #0]
 8014610:	079b      	lsls	r3, r3, #30
 8014612:	d413      	bmi.n	801463c <_printf_i+0x204>
 8014614:	68e0      	ldr	r0, [r4, #12]
 8014616:	9b03      	ldr	r3, [sp, #12]
 8014618:	4298      	cmp	r0, r3
 801461a:	bfb8      	it	lt
 801461c:	4618      	movlt	r0, r3
 801461e:	e7a3      	b.n	8014568 <_printf_i+0x130>
 8014620:	2301      	movs	r3, #1
 8014622:	464a      	mov	r2, r9
 8014624:	4639      	mov	r1, r7
 8014626:	4630      	mov	r0, r6
 8014628:	47c0      	blx	r8
 801462a:	3001      	adds	r0, #1
 801462c:	d09a      	beq.n	8014564 <_printf_i+0x12c>
 801462e:	3501      	adds	r5, #1
 8014630:	68e3      	ldr	r3, [r4, #12]
 8014632:	9a03      	ldr	r2, [sp, #12]
 8014634:	1a9b      	subs	r3, r3, r2
 8014636:	42ab      	cmp	r3, r5
 8014638:	dcf2      	bgt.n	8014620 <_printf_i+0x1e8>
 801463a:	e7eb      	b.n	8014614 <_printf_i+0x1dc>
 801463c:	2500      	movs	r5, #0
 801463e:	f104 0919 	add.w	r9, r4, #25
 8014642:	e7f5      	b.n	8014630 <_printf_i+0x1f8>
 8014644:	2b00      	cmp	r3, #0
 8014646:	d1ac      	bne.n	80145a2 <_printf_i+0x16a>
 8014648:	7803      	ldrb	r3, [r0, #0]
 801464a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801464e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014652:	e76c      	b.n	801452e <_printf_i+0xf6>
 8014654:	080198ce 	.word	0x080198ce
 8014658:	080198df 	.word	0x080198df

0801465c <iprintf>:
 801465c:	b40f      	push	{r0, r1, r2, r3}
 801465e:	4b0a      	ldr	r3, [pc, #40]	; (8014688 <iprintf+0x2c>)
 8014660:	b513      	push	{r0, r1, r4, lr}
 8014662:	681c      	ldr	r4, [r3, #0]
 8014664:	b124      	cbz	r4, 8014670 <iprintf+0x14>
 8014666:	69a3      	ldr	r3, [r4, #24]
 8014668:	b913      	cbnz	r3, 8014670 <iprintf+0x14>
 801466a:	4620      	mov	r0, r4
 801466c:	f001 f8f4 	bl	8015858 <__sinit>
 8014670:	ab05      	add	r3, sp, #20
 8014672:	9a04      	ldr	r2, [sp, #16]
 8014674:	68a1      	ldr	r1, [r4, #8]
 8014676:	9301      	str	r3, [sp, #4]
 8014678:	4620      	mov	r0, r4
 801467a:	f001 feff 	bl	801647c <_vfiprintf_r>
 801467e:	b002      	add	sp, #8
 8014680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014684:	b004      	add	sp, #16
 8014686:	4770      	bx	lr
 8014688:	20000024 	.word	0x20000024

0801468c <_puts_r>:
 801468c:	b570      	push	{r4, r5, r6, lr}
 801468e:	460e      	mov	r6, r1
 8014690:	4605      	mov	r5, r0
 8014692:	b118      	cbz	r0, 801469c <_puts_r+0x10>
 8014694:	6983      	ldr	r3, [r0, #24]
 8014696:	b90b      	cbnz	r3, 801469c <_puts_r+0x10>
 8014698:	f001 f8de 	bl	8015858 <__sinit>
 801469c:	69ab      	ldr	r3, [r5, #24]
 801469e:	68ac      	ldr	r4, [r5, #8]
 80146a0:	b913      	cbnz	r3, 80146a8 <_puts_r+0x1c>
 80146a2:	4628      	mov	r0, r5
 80146a4:	f001 f8d8 	bl	8015858 <__sinit>
 80146a8:	4b23      	ldr	r3, [pc, #140]	; (8014738 <_puts_r+0xac>)
 80146aa:	429c      	cmp	r4, r3
 80146ac:	d117      	bne.n	80146de <_puts_r+0x52>
 80146ae:	686c      	ldr	r4, [r5, #4]
 80146b0:	89a3      	ldrh	r3, [r4, #12]
 80146b2:	071b      	lsls	r3, r3, #28
 80146b4:	d51d      	bpl.n	80146f2 <_puts_r+0x66>
 80146b6:	6923      	ldr	r3, [r4, #16]
 80146b8:	b1db      	cbz	r3, 80146f2 <_puts_r+0x66>
 80146ba:	3e01      	subs	r6, #1
 80146bc:	68a3      	ldr	r3, [r4, #8]
 80146be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80146c2:	3b01      	subs	r3, #1
 80146c4:	60a3      	str	r3, [r4, #8]
 80146c6:	b9e9      	cbnz	r1, 8014704 <_puts_r+0x78>
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	da2e      	bge.n	801472a <_puts_r+0x9e>
 80146cc:	4622      	mov	r2, r4
 80146ce:	210a      	movs	r1, #10
 80146d0:	4628      	mov	r0, r5
 80146d2:	f000 f8cd 	bl	8014870 <__swbuf_r>
 80146d6:	3001      	adds	r0, #1
 80146d8:	d011      	beq.n	80146fe <_puts_r+0x72>
 80146da:	200a      	movs	r0, #10
 80146dc:	e011      	b.n	8014702 <_puts_r+0x76>
 80146de:	4b17      	ldr	r3, [pc, #92]	; (801473c <_puts_r+0xb0>)
 80146e0:	429c      	cmp	r4, r3
 80146e2:	d101      	bne.n	80146e8 <_puts_r+0x5c>
 80146e4:	68ac      	ldr	r4, [r5, #8]
 80146e6:	e7e3      	b.n	80146b0 <_puts_r+0x24>
 80146e8:	4b15      	ldr	r3, [pc, #84]	; (8014740 <_puts_r+0xb4>)
 80146ea:	429c      	cmp	r4, r3
 80146ec:	bf08      	it	eq
 80146ee:	68ec      	ldreq	r4, [r5, #12]
 80146f0:	e7de      	b.n	80146b0 <_puts_r+0x24>
 80146f2:	4621      	mov	r1, r4
 80146f4:	4628      	mov	r0, r5
 80146f6:	f000 f90d 	bl	8014914 <__swsetup_r>
 80146fa:	2800      	cmp	r0, #0
 80146fc:	d0dd      	beq.n	80146ba <_puts_r+0x2e>
 80146fe:	f04f 30ff 	mov.w	r0, #4294967295
 8014702:	bd70      	pop	{r4, r5, r6, pc}
 8014704:	2b00      	cmp	r3, #0
 8014706:	da04      	bge.n	8014712 <_puts_r+0x86>
 8014708:	69a2      	ldr	r2, [r4, #24]
 801470a:	429a      	cmp	r2, r3
 801470c:	dc06      	bgt.n	801471c <_puts_r+0x90>
 801470e:	290a      	cmp	r1, #10
 8014710:	d004      	beq.n	801471c <_puts_r+0x90>
 8014712:	6823      	ldr	r3, [r4, #0]
 8014714:	1c5a      	adds	r2, r3, #1
 8014716:	6022      	str	r2, [r4, #0]
 8014718:	7019      	strb	r1, [r3, #0]
 801471a:	e7cf      	b.n	80146bc <_puts_r+0x30>
 801471c:	4622      	mov	r2, r4
 801471e:	4628      	mov	r0, r5
 8014720:	f000 f8a6 	bl	8014870 <__swbuf_r>
 8014724:	3001      	adds	r0, #1
 8014726:	d1c9      	bne.n	80146bc <_puts_r+0x30>
 8014728:	e7e9      	b.n	80146fe <_puts_r+0x72>
 801472a:	6823      	ldr	r3, [r4, #0]
 801472c:	200a      	movs	r0, #10
 801472e:	1c5a      	adds	r2, r3, #1
 8014730:	6022      	str	r2, [r4, #0]
 8014732:	7018      	strb	r0, [r3, #0]
 8014734:	e7e5      	b.n	8014702 <_puts_r+0x76>
 8014736:	bf00      	nop
 8014738:	08019920 	.word	0x08019920
 801473c:	08019940 	.word	0x08019940
 8014740:	08019900 	.word	0x08019900

08014744 <puts>:
 8014744:	4b02      	ldr	r3, [pc, #8]	; (8014750 <puts+0xc>)
 8014746:	4601      	mov	r1, r0
 8014748:	6818      	ldr	r0, [r3, #0]
 801474a:	f7ff bf9f 	b.w	801468c <_puts_r>
 801474e:	bf00      	nop
 8014750:	20000024 	.word	0x20000024

08014754 <srand>:
 8014754:	b538      	push	{r3, r4, r5, lr}
 8014756:	4b0d      	ldr	r3, [pc, #52]	; (801478c <srand+0x38>)
 8014758:	681c      	ldr	r4, [r3, #0]
 801475a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801475c:	4605      	mov	r5, r0
 801475e:	b97b      	cbnz	r3, 8014780 <srand+0x2c>
 8014760:	2018      	movs	r0, #24
 8014762:	f001 f975 	bl	8015a50 <malloc>
 8014766:	4a0a      	ldr	r2, [pc, #40]	; (8014790 <srand+0x3c>)
 8014768:	4b0a      	ldr	r3, [pc, #40]	; (8014794 <srand+0x40>)
 801476a:	63a0      	str	r0, [r4, #56]	; 0x38
 801476c:	e9c0 2300 	strd	r2, r3, [r0]
 8014770:	4b09      	ldr	r3, [pc, #36]	; (8014798 <srand+0x44>)
 8014772:	6083      	str	r3, [r0, #8]
 8014774:	230b      	movs	r3, #11
 8014776:	8183      	strh	r3, [r0, #12]
 8014778:	2201      	movs	r2, #1
 801477a:	2300      	movs	r3, #0
 801477c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8014780:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014782:	2200      	movs	r2, #0
 8014784:	611d      	str	r5, [r3, #16]
 8014786:	615a      	str	r2, [r3, #20]
 8014788:	bd38      	pop	{r3, r4, r5, pc}
 801478a:	bf00      	nop
 801478c:	20000024 	.word	0x20000024
 8014790:	abcd330e 	.word	0xabcd330e
 8014794:	e66d1234 	.word	0xe66d1234
 8014798:	0005deec 	.word	0x0005deec

0801479c <rand>:
 801479c:	b538      	push	{r3, r4, r5, lr}
 801479e:	4b13      	ldr	r3, [pc, #76]	; (80147ec <rand+0x50>)
 80147a0:	681c      	ldr	r4, [r3, #0]
 80147a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80147a4:	b97b      	cbnz	r3, 80147c6 <rand+0x2a>
 80147a6:	2018      	movs	r0, #24
 80147a8:	f001 f952 	bl	8015a50 <malloc>
 80147ac:	4a10      	ldr	r2, [pc, #64]	; (80147f0 <rand+0x54>)
 80147ae:	4b11      	ldr	r3, [pc, #68]	; (80147f4 <rand+0x58>)
 80147b0:	63a0      	str	r0, [r4, #56]	; 0x38
 80147b2:	e9c0 2300 	strd	r2, r3, [r0]
 80147b6:	4b10      	ldr	r3, [pc, #64]	; (80147f8 <rand+0x5c>)
 80147b8:	6083      	str	r3, [r0, #8]
 80147ba:	230b      	movs	r3, #11
 80147bc:	8183      	strh	r3, [r0, #12]
 80147be:	2201      	movs	r2, #1
 80147c0:	2300      	movs	r3, #0
 80147c2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80147c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80147c8:	480c      	ldr	r0, [pc, #48]	; (80147fc <rand+0x60>)
 80147ca:	690a      	ldr	r2, [r1, #16]
 80147cc:	694b      	ldr	r3, [r1, #20]
 80147ce:	4c0c      	ldr	r4, [pc, #48]	; (8014800 <rand+0x64>)
 80147d0:	4350      	muls	r0, r2
 80147d2:	fb04 0003 	mla	r0, r4, r3, r0
 80147d6:	fba2 2304 	umull	r2, r3, r2, r4
 80147da:	4403      	add	r3, r0
 80147dc:	1c54      	adds	r4, r2, #1
 80147de:	f143 0500 	adc.w	r5, r3, #0
 80147e2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80147e6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80147ea:	bd38      	pop	{r3, r4, r5, pc}
 80147ec:	20000024 	.word	0x20000024
 80147f0:	abcd330e 	.word	0xabcd330e
 80147f4:	e66d1234 	.word	0xe66d1234
 80147f8:	0005deec 	.word	0x0005deec
 80147fc:	5851f42d 	.word	0x5851f42d
 8014800:	4c957f2d 	.word	0x4c957f2d

08014804 <siprintf>:
 8014804:	b40e      	push	{r1, r2, r3}
 8014806:	b500      	push	{lr}
 8014808:	b09c      	sub	sp, #112	; 0x70
 801480a:	ab1d      	add	r3, sp, #116	; 0x74
 801480c:	9002      	str	r0, [sp, #8]
 801480e:	9006      	str	r0, [sp, #24]
 8014810:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014814:	4809      	ldr	r0, [pc, #36]	; (801483c <siprintf+0x38>)
 8014816:	9107      	str	r1, [sp, #28]
 8014818:	9104      	str	r1, [sp, #16]
 801481a:	4909      	ldr	r1, [pc, #36]	; (8014840 <siprintf+0x3c>)
 801481c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014820:	9105      	str	r1, [sp, #20]
 8014822:	6800      	ldr	r0, [r0, #0]
 8014824:	9301      	str	r3, [sp, #4]
 8014826:	a902      	add	r1, sp, #8
 8014828:	f001 fd06 	bl	8016238 <_svfiprintf_r>
 801482c:	9b02      	ldr	r3, [sp, #8]
 801482e:	2200      	movs	r2, #0
 8014830:	701a      	strb	r2, [r3, #0]
 8014832:	b01c      	add	sp, #112	; 0x70
 8014834:	f85d eb04 	ldr.w	lr, [sp], #4
 8014838:	b003      	add	sp, #12
 801483a:	4770      	bx	lr
 801483c:	20000024 	.word	0x20000024
 8014840:	ffff0208 	.word	0xffff0208

08014844 <strncpy>:
 8014844:	b570      	push	{r4, r5, r6, lr}
 8014846:	3901      	subs	r1, #1
 8014848:	4604      	mov	r4, r0
 801484a:	b902      	cbnz	r2, 801484e <strncpy+0xa>
 801484c:	bd70      	pop	{r4, r5, r6, pc}
 801484e:	4623      	mov	r3, r4
 8014850:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8014854:	f803 5b01 	strb.w	r5, [r3], #1
 8014858:	1e56      	subs	r6, r2, #1
 801485a:	b92d      	cbnz	r5, 8014868 <strncpy+0x24>
 801485c:	4414      	add	r4, r2
 801485e:	42a3      	cmp	r3, r4
 8014860:	d0f4      	beq.n	801484c <strncpy+0x8>
 8014862:	f803 5b01 	strb.w	r5, [r3], #1
 8014866:	e7fa      	b.n	801485e <strncpy+0x1a>
 8014868:	461c      	mov	r4, r3
 801486a:	4632      	mov	r2, r6
 801486c:	e7ed      	b.n	801484a <strncpy+0x6>
	...

08014870 <__swbuf_r>:
 8014870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014872:	460e      	mov	r6, r1
 8014874:	4614      	mov	r4, r2
 8014876:	4605      	mov	r5, r0
 8014878:	b118      	cbz	r0, 8014882 <__swbuf_r+0x12>
 801487a:	6983      	ldr	r3, [r0, #24]
 801487c:	b90b      	cbnz	r3, 8014882 <__swbuf_r+0x12>
 801487e:	f000 ffeb 	bl	8015858 <__sinit>
 8014882:	4b21      	ldr	r3, [pc, #132]	; (8014908 <__swbuf_r+0x98>)
 8014884:	429c      	cmp	r4, r3
 8014886:	d12a      	bne.n	80148de <__swbuf_r+0x6e>
 8014888:	686c      	ldr	r4, [r5, #4]
 801488a:	69a3      	ldr	r3, [r4, #24]
 801488c:	60a3      	str	r3, [r4, #8]
 801488e:	89a3      	ldrh	r3, [r4, #12]
 8014890:	071a      	lsls	r2, r3, #28
 8014892:	d52e      	bpl.n	80148f2 <__swbuf_r+0x82>
 8014894:	6923      	ldr	r3, [r4, #16]
 8014896:	b363      	cbz	r3, 80148f2 <__swbuf_r+0x82>
 8014898:	6923      	ldr	r3, [r4, #16]
 801489a:	6820      	ldr	r0, [r4, #0]
 801489c:	1ac0      	subs	r0, r0, r3
 801489e:	6963      	ldr	r3, [r4, #20]
 80148a0:	b2f6      	uxtb	r6, r6
 80148a2:	4283      	cmp	r3, r0
 80148a4:	4637      	mov	r7, r6
 80148a6:	dc04      	bgt.n	80148b2 <__swbuf_r+0x42>
 80148a8:	4621      	mov	r1, r4
 80148aa:	4628      	mov	r0, r5
 80148ac:	f000 ff6a 	bl	8015784 <_fflush_r>
 80148b0:	bb28      	cbnz	r0, 80148fe <__swbuf_r+0x8e>
 80148b2:	68a3      	ldr	r3, [r4, #8]
 80148b4:	3b01      	subs	r3, #1
 80148b6:	60a3      	str	r3, [r4, #8]
 80148b8:	6823      	ldr	r3, [r4, #0]
 80148ba:	1c5a      	adds	r2, r3, #1
 80148bc:	6022      	str	r2, [r4, #0]
 80148be:	701e      	strb	r6, [r3, #0]
 80148c0:	6963      	ldr	r3, [r4, #20]
 80148c2:	3001      	adds	r0, #1
 80148c4:	4283      	cmp	r3, r0
 80148c6:	d004      	beq.n	80148d2 <__swbuf_r+0x62>
 80148c8:	89a3      	ldrh	r3, [r4, #12]
 80148ca:	07db      	lsls	r3, r3, #31
 80148cc:	d519      	bpl.n	8014902 <__swbuf_r+0x92>
 80148ce:	2e0a      	cmp	r6, #10
 80148d0:	d117      	bne.n	8014902 <__swbuf_r+0x92>
 80148d2:	4621      	mov	r1, r4
 80148d4:	4628      	mov	r0, r5
 80148d6:	f000 ff55 	bl	8015784 <_fflush_r>
 80148da:	b190      	cbz	r0, 8014902 <__swbuf_r+0x92>
 80148dc:	e00f      	b.n	80148fe <__swbuf_r+0x8e>
 80148de:	4b0b      	ldr	r3, [pc, #44]	; (801490c <__swbuf_r+0x9c>)
 80148e0:	429c      	cmp	r4, r3
 80148e2:	d101      	bne.n	80148e8 <__swbuf_r+0x78>
 80148e4:	68ac      	ldr	r4, [r5, #8]
 80148e6:	e7d0      	b.n	801488a <__swbuf_r+0x1a>
 80148e8:	4b09      	ldr	r3, [pc, #36]	; (8014910 <__swbuf_r+0xa0>)
 80148ea:	429c      	cmp	r4, r3
 80148ec:	bf08      	it	eq
 80148ee:	68ec      	ldreq	r4, [r5, #12]
 80148f0:	e7cb      	b.n	801488a <__swbuf_r+0x1a>
 80148f2:	4621      	mov	r1, r4
 80148f4:	4628      	mov	r0, r5
 80148f6:	f000 f80d 	bl	8014914 <__swsetup_r>
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d0cc      	beq.n	8014898 <__swbuf_r+0x28>
 80148fe:	f04f 37ff 	mov.w	r7, #4294967295
 8014902:	4638      	mov	r0, r7
 8014904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014906:	bf00      	nop
 8014908:	08019920 	.word	0x08019920
 801490c:	08019940 	.word	0x08019940
 8014910:	08019900 	.word	0x08019900

08014914 <__swsetup_r>:
 8014914:	4b32      	ldr	r3, [pc, #200]	; (80149e0 <__swsetup_r+0xcc>)
 8014916:	b570      	push	{r4, r5, r6, lr}
 8014918:	681d      	ldr	r5, [r3, #0]
 801491a:	4606      	mov	r6, r0
 801491c:	460c      	mov	r4, r1
 801491e:	b125      	cbz	r5, 801492a <__swsetup_r+0x16>
 8014920:	69ab      	ldr	r3, [r5, #24]
 8014922:	b913      	cbnz	r3, 801492a <__swsetup_r+0x16>
 8014924:	4628      	mov	r0, r5
 8014926:	f000 ff97 	bl	8015858 <__sinit>
 801492a:	4b2e      	ldr	r3, [pc, #184]	; (80149e4 <__swsetup_r+0xd0>)
 801492c:	429c      	cmp	r4, r3
 801492e:	d10f      	bne.n	8014950 <__swsetup_r+0x3c>
 8014930:	686c      	ldr	r4, [r5, #4]
 8014932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014936:	b29a      	uxth	r2, r3
 8014938:	0715      	lsls	r5, r2, #28
 801493a:	d42c      	bmi.n	8014996 <__swsetup_r+0x82>
 801493c:	06d0      	lsls	r0, r2, #27
 801493e:	d411      	bmi.n	8014964 <__swsetup_r+0x50>
 8014940:	2209      	movs	r2, #9
 8014942:	6032      	str	r2, [r6, #0]
 8014944:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014948:	81a3      	strh	r3, [r4, #12]
 801494a:	f04f 30ff 	mov.w	r0, #4294967295
 801494e:	e03e      	b.n	80149ce <__swsetup_r+0xba>
 8014950:	4b25      	ldr	r3, [pc, #148]	; (80149e8 <__swsetup_r+0xd4>)
 8014952:	429c      	cmp	r4, r3
 8014954:	d101      	bne.n	801495a <__swsetup_r+0x46>
 8014956:	68ac      	ldr	r4, [r5, #8]
 8014958:	e7eb      	b.n	8014932 <__swsetup_r+0x1e>
 801495a:	4b24      	ldr	r3, [pc, #144]	; (80149ec <__swsetup_r+0xd8>)
 801495c:	429c      	cmp	r4, r3
 801495e:	bf08      	it	eq
 8014960:	68ec      	ldreq	r4, [r5, #12]
 8014962:	e7e6      	b.n	8014932 <__swsetup_r+0x1e>
 8014964:	0751      	lsls	r1, r2, #29
 8014966:	d512      	bpl.n	801498e <__swsetup_r+0x7a>
 8014968:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801496a:	b141      	cbz	r1, 801497e <__swsetup_r+0x6a>
 801496c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014970:	4299      	cmp	r1, r3
 8014972:	d002      	beq.n	801497a <__swsetup_r+0x66>
 8014974:	4630      	mov	r0, r6
 8014976:	f001 fb5d 	bl	8016034 <_free_r>
 801497a:	2300      	movs	r3, #0
 801497c:	6363      	str	r3, [r4, #52]	; 0x34
 801497e:	89a3      	ldrh	r3, [r4, #12]
 8014980:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014984:	81a3      	strh	r3, [r4, #12]
 8014986:	2300      	movs	r3, #0
 8014988:	6063      	str	r3, [r4, #4]
 801498a:	6923      	ldr	r3, [r4, #16]
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	89a3      	ldrh	r3, [r4, #12]
 8014990:	f043 0308 	orr.w	r3, r3, #8
 8014994:	81a3      	strh	r3, [r4, #12]
 8014996:	6923      	ldr	r3, [r4, #16]
 8014998:	b94b      	cbnz	r3, 80149ae <__swsetup_r+0x9a>
 801499a:	89a3      	ldrh	r3, [r4, #12]
 801499c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80149a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80149a4:	d003      	beq.n	80149ae <__swsetup_r+0x9a>
 80149a6:	4621      	mov	r1, r4
 80149a8:	4630      	mov	r0, r6
 80149aa:	f001 f811 	bl	80159d0 <__smakebuf_r>
 80149ae:	89a2      	ldrh	r2, [r4, #12]
 80149b0:	f012 0301 	ands.w	r3, r2, #1
 80149b4:	d00c      	beq.n	80149d0 <__swsetup_r+0xbc>
 80149b6:	2300      	movs	r3, #0
 80149b8:	60a3      	str	r3, [r4, #8]
 80149ba:	6963      	ldr	r3, [r4, #20]
 80149bc:	425b      	negs	r3, r3
 80149be:	61a3      	str	r3, [r4, #24]
 80149c0:	6923      	ldr	r3, [r4, #16]
 80149c2:	b953      	cbnz	r3, 80149da <__swsetup_r+0xc6>
 80149c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80149c8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80149cc:	d1ba      	bne.n	8014944 <__swsetup_r+0x30>
 80149ce:	bd70      	pop	{r4, r5, r6, pc}
 80149d0:	0792      	lsls	r2, r2, #30
 80149d2:	bf58      	it	pl
 80149d4:	6963      	ldrpl	r3, [r4, #20]
 80149d6:	60a3      	str	r3, [r4, #8]
 80149d8:	e7f2      	b.n	80149c0 <__swsetup_r+0xac>
 80149da:	2000      	movs	r0, #0
 80149dc:	e7f7      	b.n	80149ce <__swsetup_r+0xba>
 80149de:	bf00      	nop
 80149e0:	20000024 	.word	0x20000024
 80149e4:	08019920 	.word	0x08019920
 80149e8:	08019940 	.word	0x08019940
 80149ec:	08019900 	.word	0x08019900

080149f0 <quorem>:
 80149f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80149f4:	6903      	ldr	r3, [r0, #16]
 80149f6:	690c      	ldr	r4, [r1, #16]
 80149f8:	42a3      	cmp	r3, r4
 80149fa:	4680      	mov	r8, r0
 80149fc:	f2c0 8082 	blt.w	8014b04 <quorem+0x114>
 8014a00:	3c01      	subs	r4, #1
 8014a02:	f101 0714 	add.w	r7, r1, #20
 8014a06:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014a0a:	f100 0614 	add.w	r6, r0, #20
 8014a0e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8014a12:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8014a16:	eb06 030c 	add.w	r3, r6, ip
 8014a1a:	3501      	adds	r5, #1
 8014a1c:	eb07 090c 	add.w	r9, r7, ip
 8014a20:	9301      	str	r3, [sp, #4]
 8014a22:	fbb0 f5f5 	udiv	r5, r0, r5
 8014a26:	b395      	cbz	r5, 8014a8e <quorem+0x9e>
 8014a28:	f04f 0a00 	mov.w	sl, #0
 8014a2c:	4638      	mov	r0, r7
 8014a2e:	46b6      	mov	lr, r6
 8014a30:	46d3      	mov	fp, sl
 8014a32:	f850 2b04 	ldr.w	r2, [r0], #4
 8014a36:	b293      	uxth	r3, r2
 8014a38:	fb05 a303 	mla	r3, r5, r3, sl
 8014a3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014a40:	b29b      	uxth	r3, r3
 8014a42:	ebab 0303 	sub.w	r3, fp, r3
 8014a46:	0c12      	lsrs	r2, r2, #16
 8014a48:	f8de b000 	ldr.w	fp, [lr]
 8014a4c:	fb05 a202 	mla	r2, r5, r2, sl
 8014a50:	fa13 f38b 	uxtah	r3, r3, fp
 8014a54:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8014a58:	fa1f fb82 	uxth.w	fp, r2
 8014a5c:	f8de 2000 	ldr.w	r2, [lr]
 8014a60:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8014a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014a6e:	4581      	cmp	r9, r0
 8014a70:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8014a74:	f84e 3b04 	str.w	r3, [lr], #4
 8014a78:	d2db      	bcs.n	8014a32 <quorem+0x42>
 8014a7a:	f856 300c 	ldr.w	r3, [r6, ip]
 8014a7e:	b933      	cbnz	r3, 8014a8e <quorem+0x9e>
 8014a80:	9b01      	ldr	r3, [sp, #4]
 8014a82:	3b04      	subs	r3, #4
 8014a84:	429e      	cmp	r6, r3
 8014a86:	461a      	mov	r2, r3
 8014a88:	d330      	bcc.n	8014aec <quorem+0xfc>
 8014a8a:	f8c8 4010 	str.w	r4, [r8, #16]
 8014a8e:	4640      	mov	r0, r8
 8014a90:	f001 f9fc 	bl	8015e8c <__mcmp>
 8014a94:	2800      	cmp	r0, #0
 8014a96:	db25      	blt.n	8014ae4 <quorem+0xf4>
 8014a98:	3501      	adds	r5, #1
 8014a9a:	4630      	mov	r0, r6
 8014a9c:	f04f 0c00 	mov.w	ip, #0
 8014aa0:	f857 2b04 	ldr.w	r2, [r7], #4
 8014aa4:	f8d0 e000 	ldr.w	lr, [r0]
 8014aa8:	b293      	uxth	r3, r2
 8014aaa:	ebac 0303 	sub.w	r3, ip, r3
 8014aae:	0c12      	lsrs	r2, r2, #16
 8014ab0:	fa13 f38e 	uxtah	r3, r3, lr
 8014ab4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8014ab8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8014abc:	b29b      	uxth	r3, r3
 8014abe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014ac2:	45b9      	cmp	r9, r7
 8014ac4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8014ac8:	f840 3b04 	str.w	r3, [r0], #4
 8014acc:	d2e8      	bcs.n	8014aa0 <quorem+0xb0>
 8014ace:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8014ad2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8014ad6:	b92a      	cbnz	r2, 8014ae4 <quorem+0xf4>
 8014ad8:	3b04      	subs	r3, #4
 8014ada:	429e      	cmp	r6, r3
 8014adc:	461a      	mov	r2, r3
 8014ade:	d30b      	bcc.n	8014af8 <quorem+0x108>
 8014ae0:	f8c8 4010 	str.w	r4, [r8, #16]
 8014ae4:	4628      	mov	r0, r5
 8014ae6:	b003      	add	sp, #12
 8014ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014aec:	6812      	ldr	r2, [r2, #0]
 8014aee:	3b04      	subs	r3, #4
 8014af0:	2a00      	cmp	r2, #0
 8014af2:	d1ca      	bne.n	8014a8a <quorem+0x9a>
 8014af4:	3c01      	subs	r4, #1
 8014af6:	e7c5      	b.n	8014a84 <quorem+0x94>
 8014af8:	6812      	ldr	r2, [r2, #0]
 8014afa:	3b04      	subs	r3, #4
 8014afc:	2a00      	cmp	r2, #0
 8014afe:	d1ef      	bne.n	8014ae0 <quorem+0xf0>
 8014b00:	3c01      	subs	r4, #1
 8014b02:	e7ea      	b.n	8014ada <quorem+0xea>
 8014b04:	2000      	movs	r0, #0
 8014b06:	e7ee      	b.n	8014ae6 <quorem+0xf6>

08014b08 <_dtoa_r>:
 8014b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b0c:	ec57 6b10 	vmov	r6, r7, d0
 8014b10:	b097      	sub	sp, #92	; 0x5c
 8014b12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8014b14:	9106      	str	r1, [sp, #24]
 8014b16:	4604      	mov	r4, r0
 8014b18:	920b      	str	r2, [sp, #44]	; 0x2c
 8014b1a:	9312      	str	r3, [sp, #72]	; 0x48
 8014b1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8014b20:	e9cd 6700 	strd	r6, r7, [sp]
 8014b24:	b93d      	cbnz	r5, 8014b36 <_dtoa_r+0x2e>
 8014b26:	2010      	movs	r0, #16
 8014b28:	f000 ff92 	bl	8015a50 <malloc>
 8014b2c:	6260      	str	r0, [r4, #36]	; 0x24
 8014b2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8014b32:	6005      	str	r5, [r0, #0]
 8014b34:	60c5      	str	r5, [r0, #12]
 8014b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b38:	6819      	ldr	r1, [r3, #0]
 8014b3a:	b151      	cbz	r1, 8014b52 <_dtoa_r+0x4a>
 8014b3c:	685a      	ldr	r2, [r3, #4]
 8014b3e:	604a      	str	r2, [r1, #4]
 8014b40:	2301      	movs	r3, #1
 8014b42:	4093      	lsls	r3, r2
 8014b44:	608b      	str	r3, [r1, #8]
 8014b46:	4620      	mov	r0, r4
 8014b48:	f000 ffbe 	bl	8015ac8 <_Bfree>
 8014b4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014b4e:	2200      	movs	r2, #0
 8014b50:	601a      	str	r2, [r3, #0]
 8014b52:	1e3b      	subs	r3, r7, #0
 8014b54:	bfbb      	ittet	lt
 8014b56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8014b5a:	9301      	strlt	r3, [sp, #4]
 8014b5c:	2300      	movge	r3, #0
 8014b5e:	2201      	movlt	r2, #1
 8014b60:	bfac      	ite	ge
 8014b62:	f8c8 3000 	strge.w	r3, [r8]
 8014b66:	f8c8 2000 	strlt.w	r2, [r8]
 8014b6a:	4baf      	ldr	r3, [pc, #700]	; (8014e28 <_dtoa_r+0x320>)
 8014b6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014b70:	ea33 0308 	bics.w	r3, r3, r8
 8014b74:	d114      	bne.n	8014ba0 <_dtoa_r+0x98>
 8014b76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014b78:	f242 730f 	movw	r3, #9999	; 0x270f
 8014b7c:	6013      	str	r3, [r2, #0]
 8014b7e:	9b00      	ldr	r3, [sp, #0]
 8014b80:	b923      	cbnz	r3, 8014b8c <_dtoa_r+0x84>
 8014b82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8014b86:	2800      	cmp	r0, #0
 8014b88:	f000 8542 	beq.w	8015610 <_dtoa_r+0xb08>
 8014b8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014b8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014e3c <_dtoa_r+0x334>
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	f000 8544 	beq.w	8015620 <_dtoa_r+0xb18>
 8014b98:	f10b 0303 	add.w	r3, fp, #3
 8014b9c:	f000 bd3e 	b.w	801561c <_dtoa_r+0xb14>
 8014ba0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014ba4:	2200      	movs	r2, #0
 8014ba6:	2300      	movs	r3, #0
 8014ba8:	4630      	mov	r0, r6
 8014baa:	4639      	mov	r1, r7
 8014bac:	f7eb ff64 	bl	8000a78 <__aeabi_dcmpeq>
 8014bb0:	4681      	mov	r9, r0
 8014bb2:	b168      	cbz	r0, 8014bd0 <_dtoa_r+0xc8>
 8014bb4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	6013      	str	r3, [r2, #0]
 8014bba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f000 8524 	beq.w	801560a <_dtoa_r+0xb02>
 8014bc2:	4b9a      	ldr	r3, [pc, #616]	; (8014e2c <_dtoa_r+0x324>)
 8014bc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014bc6:	f103 3bff 	add.w	fp, r3, #4294967295
 8014bca:	6013      	str	r3, [r2, #0]
 8014bcc:	f000 bd28 	b.w	8015620 <_dtoa_r+0xb18>
 8014bd0:	aa14      	add	r2, sp, #80	; 0x50
 8014bd2:	a915      	add	r1, sp, #84	; 0x54
 8014bd4:	ec47 6b10 	vmov	d0, r6, r7
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f001 f9ce 	bl	8015f7a <__d2b>
 8014bde:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8014be2:	9004      	str	r0, [sp, #16]
 8014be4:	2d00      	cmp	r5, #0
 8014be6:	d07c      	beq.n	8014ce2 <_dtoa_r+0x1da>
 8014be8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014bec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8014bf0:	46b2      	mov	sl, r6
 8014bf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8014bf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8014bfa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8014bfe:	2200      	movs	r2, #0
 8014c00:	4b8b      	ldr	r3, [pc, #556]	; (8014e30 <_dtoa_r+0x328>)
 8014c02:	4650      	mov	r0, sl
 8014c04:	4659      	mov	r1, fp
 8014c06:	f7eb fb17 	bl	8000238 <__aeabi_dsub>
 8014c0a:	a381      	add	r3, pc, #516	; (adr r3, 8014e10 <_dtoa_r+0x308>)
 8014c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c10:	f7eb fcca 	bl	80005a8 <__aeabi_dmul>
 8014c14:	a380      	add	r3, pc, #512	; (adr r3, 8014e18 <_dtoa_r+0x310>)
 8014c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c1a:	f7eb fb0f 	bl	800023c <__adddf3>
 8014c1e:	4606      	mov	r6, r0
 8014c20:	4628      	mov	r0, r5
 8014c22:	460f      	mov	r7, r1
 8014c24:	f7eb fc56 	bl	80004d4 <__aeabi_i2d>
 8014c28:	a37d      	add	r3, pc, #500	; (adr r3, 8014e20 <_dtoa_r+0x318>)
 8014c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c2e:	f7eb fcbb 	bl	80005a8 <__aeabi_dmul>
 8014c32:	4602      	mov	r2, r0
 8014c34:	460b      	mov	r3, r1
 8014c36:	4630      	mov	r0, r6
 8014c38:	4639      	mov	r1, r7
 8014c3a:	f7eb faff 	bl	800023c <__adddf3>
 8014c3e:	4606      	mov	r6, r0
 8014c40:	460f      	mov	r7, r1
 8014c42:	f7eb ff61 	bl	8000b08 <__aeabi_d2iz>
 8014c46:	2200      	movs	r2, #0
 8014c48:	4682      	mov	sl, r0
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	4630      	mov	r0, r6
 8014c4e:	4639      	mov	r1, r7
 8014c50:	f7eb ff1c 	bl	8000a8c <__aeabi_dcmplt>
 8014c54:	b148      	cbz	r0, 8014c6a <_dtoa_r+0x162>
 8014c56:	4650      	mov	r0, sl
 8014c58:	f7eb fc3c 	bl	80004d4 <__aeabi_i2d>
 8014c5c:	4632      	mov	r2, r6
 8014c5e:	463b      	mov	r3, r7
 8014c60:	f7eb ff0a 	bl	8000a78 <__aeabi_dcmpeq>
 8014c64:	b908      	cbnz	r0, 8014c6a <_dtoa_r+0x162>
 8014c66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c6a:	f1ba 0f16 	cmp.w	sl, #22
 8014c6e:	d859      	bhi.n	8014d24 <_dtoa_r+0x21c>
 8014c70:	4970      	ldr	r1, [pc, #448]	; (8014e34 <_dtoa_r+0x32c>)
 8014c72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8014c76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014c7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014c7e:	f7eb ff23 	bl	8000ac8 <__aeabi_dcmpgt>
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d050      	beq.n	8014d28 <_dtoa_r+0x220>
 8014c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	930f      	str	r3, [sp, #60]	; 0x3c
 8014c8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014c90:	1b5d      	subs	r5, r3, r5
 8014c92:	f1b5 0801 	subs.w	r8, r5, #1
 8014c96:	bf49      	itett	mi
 8014c98:	f1c5 0301 	rsbmi	r3, r5, #1
 8014c9c:	2300      	movpl	r3, #0
 8014c9e:	9305      	strmi	r3, [sp, #20]
 8014ca0:	f04f 0800 	movmi.w	r8, #0
 8014ca4:	bf58      	it	pl
 8014ca6:	9305      	strpl	r3, [sp, #20]
 8014ca8:	f1ba 0f00 	cmp.w	sl, #0
 8014cac:	db3e      	blt.n	8014d2c <_dtoa_r+0x224>
 8014cae:	2300      	movs	r3, #0
 8014cb0:	44d0      	add	r8, sl
 8014cb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8014cb6:	9307      	str	r3, [sp, #28]
 8014cb8:	9b06      	ldr	r3, [sp, #24]
 8014cba:	2b09      	cmp	r3, #9
 8014cbc:	f200 8090 	bhi.w	8014de0 <_dtoa_r+0x2d8>
 8014cc0:	2b05      	cmp	r3, #5
 8014cc2:	bfc4      	itt	gt
 8014cc4:	3b04      	subgt	r3, #4
 8014cc6:	9306      	strgt	r3, [sp, #24]
 8014cc8:	9b06      	ldr	r3, [sp, #24]
 8014cca:	f1a3 0302 	sub.w	r3, r3, #2
 8014cce:	bfcc      	ite	gt
 8014cd0:	2500      	movgt	r5, #0
 8014cd2:	2501      	movle	r5, #1
 8014cd4:	2b03      	cmp	r3, #3
 8014cd6:	f200 808f 	bhi.w	8014df8 <_dtoa_r+0x2f0>
 8014cda:	e8df f003 	tbb	[pc, r3]
 8014cde:	7f7d      	.short	0x7f7d
 8014ce0:	7131      	.short	0x7131
 8014ce2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8014ce6:	441d      	add	r5, r3
 8014ce8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014cec:	2820      	cmp	r0, #32
 8014cee:	dd13      	ble.n	8014d18 <_dtoa_r+0x210>
 8014cf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8014cf4:	9b00      	ldr	r3, [sp, #0]
 8014cf6:	fa08 f800 	lsl.w	r8, r8, r0
 8014cfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014cfe:	fa23 f000 	lsr.w	r0, r3, r0
 8014d02:	ea48 0000 	orr.w	r0, r8, r0
 8014d06:	f7eb fbd5 	bl	80004b4 <__aeabi_ui2d>
 8014d0a:	2301      	movs	r3, #1
 8014d0c:	4682      	mov	sl, r0
 8014d0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8014d12:	3d01      	subs	r5, #1
 8014d14:	9313      	str	r3, [sp, #76]	; 0x4c
 8014d16:	e772      	b.n	8014bfe <_dtoa_r+0xf6>
 8014d18:	9b00      	ldr	r3, [sp, #0]
 8014d1a:	f1c0 0020 	rsb	r0, r0, #32
 8014d1e:	fa03 f000 	lsl.w	r0, r3, r0
 8014d22:	e7f0      	b.n	8014d06 <_dtoa_r+0x1fe>
 8014d24:	2301      	movs	r3, #1
 8014d26:	e7b1      	b.n	8014c8c <_dtoa_r+0x184>
 8014d28:	900f      	str	r0, [sp, #60]	; 0x3c
 8014d2a:	e7b0      	b.n	8014c8e <_dtoa_r+0x186>
 8014d2c:	9b05      	ldr	r3, [sp, #20]
 8014d2e:	eba3 030a 	sub.w	r3, r3, sl
 8014d32:	9305      	str	r3, [sp, #20]
 8014d34:	f1ca 0300 	rsb	r3, sl, #0
 8014d38:	9307      	str	r3, [sp, #28]
 8014d3a:	2300      	movs	r3, #0
 8014d3c:	930e      	str	r3, [sp, #56]	; 0x38
 8014d3e:	e7bb      	b.n	8014cb8 <_dtoa_r+0x1b0>
 8014d40:	2301      	movs	r3, #1
 8014d42:	930a      	str	r3, [sp, #40]	; 0x28
 8014d44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	dd59      	ble.n	8014dfe <_dtoa_r+0x2f6>
 8014d4a:	9302      	str	r3, [sp, #8]
 8014d4c:	4699      	mov	r9, r3
 8014d4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014d50:	2200      	movs	r2, #0
 8014d52:	6072      	str	r2, [r6, #4]
 8014d54:	2204      	movs	r2, #4
 8014d56:	f102 0014 	add.w	r0, r2, #20
 8014d5a:	4298      	cmp	r0, r3
 8014d5c:	6871      	ldr	r1, [r6, #4]
 8014d5e:	d953      	bls.n	8014e08 <_dtoa_r+0x300>
 8014d60:	4620      	mov	r0, r4
 8014d62:	f000 fe7d 	bl	8015a60 <_Balloc>
 8014d66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014d68:	6030      	str	r0, [r6, #0]
 8014d6a:	f1b9 0f0e 	cmp.w	r9, #14
 8014d6e:	f8d3 b000 	ldr.w	fp, [r3]
 8014d72:	f200 80e6 	bhi.w	8014f42 <_dtoa_r+0x43a>
 8014d76:	2d00      	cmp	r5, #0
 8014d78:	f000 80e3 	beq.w	8014f42 <_dtoa_r+0x43a>
 8014d7c:	ed9d 7b00 	vldr	d7, [sp]
 8014d80:	f1ba 0f00 	cmp.w	sl, #0
 8014d84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8014d88:	dd74      	ble.n	8014e74 <_dtoa_r+0x36c>
 8014d8a:	4a2a      	ldr	r2, [pc, #168]	; (8014e34 <_dtoa_r+0x32c>)
 8014d8c:	f00a 030f 	and.w	r3, sl, #15
 8014d90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8014d94:	ed93 7b00 	vldr	d7, [r3]
 8014d98:	ea4f 162a 	mov.w	r6, sl, asr #4
 8014d9c:	06f0      	lsls	r0, r6, #27
 8014d9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014da2:	d565      	bpl.n	8014e70 <_dtoa_r+0x368>
 8014da4:	4b24      	ldr	r3, [pc, #144]	; (8014e38 <_dtoa_r+0x330>)
 8014da6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014daa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8014dae:	f7eb fd25 	bl	80007fc <__aeabi_ddiv>
 8014db2:	e9cd 0100 	strd	r0, r1, [sp]
 8014db6:	f006 060f 	and.w	r6, r6, #15
 8014dba:	2503      	movs	r5, #3
 8014dbc:	4f1e      	ldr	r7, [pc, #120]	; (8014e38 <_dtoa_r+0x330>)
 8014dbe:	e04c      	b.n	8014e5a <_dtoa_r+0x352>
 8014dc0:	2301      	movs	r3, #1
 8014dc2:	930a      	str	r3, [sp, #40]	; 0x28
 8014dc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014dc6:	4453      	add	r3, sl
 8014dc8:	f103 0901 	add.w	r9, r3, #1
 8014dcc:	9302      	str	r3, [sp, #8]
 8014dce:	464b      	mov	r3, r9
 8014dd0:	2b01      	cmp	r3, #1
 8014dd2:	bfb8      	it	lt
 8014dd4:	2301      	movlt	r3, #1
 8014dd6:	e7ba      	b.n	8014d4e <_dtoa_r+0x246>
 8014dd8:	2300      	movs	r3, #0
 8014dda:	e7b2      	b.n	8014d42 <_dtoa_r+0x23a>
 8014ddc:	2300      	movs	r3, #0
 8014dde:	e7f0      	b.n	8014dc2 <_dtoa_r+0x2ba>
 8014de0:	2501      	movs	r5, #1
 8014de2:	2300      	movs	r3, #0
 8014de4:	9306      	str	r3, [sp, #24]
 8014de6:	950a      	str	r5, [sp, #40]	; 0x28
 8014de8:	f04f 33ff 	mov.w	r3, #4294967295
 8014dec:	9302      	str	r3, [sp, #8]
 8014dee:	4699      	mov	r9, r3
 8014df0:	2200      	movs	r2, #0
 8014df2:	2312      	movs	r3, #18
 8014df4:	920b      	str	r2, [sp, #44]	; 0x2c
 8014df6:	e7aa      	b.n	8014d4e <_dtoa_r+0x246>
 8014df8:	2301      	movs	r3, #1
 8014dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8014dfc:	e7f4      	b.n	8014de8 <_dtoa_r+0x2e0>
 8014dfe:	2301      	movs	r3, #1
 8014e00:	9302      	str	r3, [sp, #8]
 8014e02:	4699      	mov	r9, r3
 8014e04:	461a      	mov	r2, r3
 8014e06:	e7f5      	b.n	8014df4 <_dtoa_r+0x2ec>
 8014e08:	3101      	adds	r1, #1
 8014e0a:	6071      	str	r1, [r6, #4]
 8014e0c:	0052      	lsls	r2, r2, #1
 8014e0e:	e7a2      	b.n	8014d56 <_dtoa_r+0x24e>
 8014e10:	636f4361 	.word	0x636f4361
 8014e14:	3fd287a7 	.word	0x3fd287a7
 8014e18:	8b60c8b3 	.word	0x8b60c8b3
 8014e1c:	3fc68a28 	.word	0x3fc68a28
 8014e20:	509f79fb 	.word	0x509f79fb
 8014e24:	3fd34413 	.word	0x3fd34413
 8014e28:	7ff00000 	.word	0x7ff00000
 8014e2c:	080198cd 	.word	0x080198cd
 8014e30:	3ff80000 	.word	0x3ff80000
 8014e34:	08019988 	.word	0x08019988
 8014e38:	08019960 	.word	0x08019960
 8014e3c:	080198f9 	.word	0x080198f9
 8014e40:	07f1      	lsls	r1, r6, #31
 8014e42:	d508      	bpl.n	8014e56 <_dtoa_r+0x34e>
 8014e44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014e48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014e4c:	f7eb fbac 	bl	80005a8 <__aeabi_dmul>
 8014e50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014e54:	3501      	adds	r5, #1
 8014e56:	1076      	asrs	r6, r6, #1
 8014e58:	3708      	adds	r7, #8
 8014e5a:	2e00      	cmp	r6, #0
 8014e5c:	d1f0      	bne.n	8014e40 <_dtoa_r+0x338>
 8014e5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8014e62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e66:	f7eb fcc9 	bl	80007fc <__aeabi_ddiv>
 8014e6a:	e9cd 0100 	strd	r0, r1, [sp]
 8014e6e:	e01a      	b.n	8014ea6 <_dtoa_r+0x39e>
 8014e70:	2502      	movs	r5, #2
 8014e72:	e7a3      	b.n	8014dbc <_dtoa_r+0x2b4>
 8014e74:	f000 80a0 	beq.w	8014fb8 <_dtoa_r+0x4b0>
 8014e78:	f1ca 0600 	rsb	r6, sl, #0
 8014e7c:	4b9f      	ldr	r3, [pc, #636]	; (80150fc <_dtoa_r+0x5f4>)
 8014e7e:	4fa0      	ldr	r7, [pc, #640]	; (8015100 <_dtoa_r+0x5f8>)
 8014e80:	f006 020f 	and.w	r2, r6, #15
 8014e84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8014e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8014e90:	f7eb fb8a 	bl	80005a8 <__aeabi_dmul>
 8014e94:	e9cd 0100 	strd	r0, r1, [sp]
 8014e98:	1136      	asrs	r6, r6, #4
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	2502      	movs	r5, #2
 8014e9e:	2e00      	cmp	r6, #0
 8014ea0:	d17f      	bne.n	8014fa2 <_dtoa_r+0x49a>
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d1e1      	bne.n	8014e6a <_dtoa_r+0x362>
 8014ea6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014ea8:	2b00      	cmp	r3, #0
 8014eaa:	f000 8087 	beq.w	8014fbc <_dtoa_r+0x4b4>
 8014eae:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	4b93      	ldr	r3, [pc, #588]	; (8015104 <_dtoa_r+0x5fc>)
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	4639      	mov	r1, r7
 8014eba:	f7eb fde7 	bl	8000a8c <__aeabi_dcmplt>
 8014ebe:	2800      	cmp	r0, #0
 8014ec0:	d07c      	beq.n	8014fbc <_dtoa_r+0x4b4>
 8014ec2:	f1b9 0f00 	cmp.w	r9, #0
 8014ec6:	d079      	beq.n	8014fbc <_dtoa_r+0x4b4>
 8014ec8:	9b02      	ldr	r3, [sp, #8]
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	dd35      	ble.n	8014f3a <_dtoa_r+0x432>
 8014ece:	f10a 33ff 	add.w	r3, sl, #4294967295
 8014ed2:	9308      	str	r3, [sp, #32]
 8014ed4:	4639      	mov	r1, r7
 8014ed6:	2200      	movs	r2, #0
 8014ed8:	4b8b      	ldr	r3, [pc, #556]	; (8015108 <_dtoa_r+0x600>)
 8014eda:	4630      	mov	r0, r6
 8014edc:	f7eb fb64 	bl	80005a8 <__aeabi_dmul>
 8014ee0:	e9cd 0100 	strd	r0, r1, [sp]
 8014ee4:	9f02      	ldr	r7, [sp, #8]
 8014ee6:	3501      	adds	r5, #1
 8014ee8:	4628      	mov	r0, r5
 8014eea:	f7eb faf3 	bl	80004d4 <__aeabi_i2d>
 8014eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014ef2:	f7eb fb59 	bl	80005a8 <__aeabi_dmul>
 8014ef6:	2200      	movs	r2, #0
 8014ef8:	4b84      	ldr	r3, [pc, #528]	; (801510c <_dtoa_r+0x604>)
 8014efa:	f7eb f99f 	bl	800023c <__adddf3>
 8014efe:	4605      	mov	r5, r0
 8014f00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8014f04:	2f00      	cmp	r7, #0
 8014f06:	d15d      	bne.n	8014fc4 <_dtoa_r+0x4bc>
 8014f08:	2200      	movs	r2, #0
 8014f0a:	4b81      	ldr	r3, [pc, #516]	; (8015110 <_dtoa_r+0x608>)
 8014f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f10:	f7eb f992 	bl	8000238 <__aeabi_dsub>
 8014f14:	462a      	mov	r2, r5
 8014f16:	4633      	mov	r3, r6
 8014f18:	e9cd 0100 	strd	r0, r1, [sp]
 8014f1c:	f7eb fdd4 	bl	8000ac8 <__aeabi_dcmpgt>
 8014f20:	2800      	cmp	r0, #0
 8014f22:	f040 8288 	bne.w	8015436 <_dtoa_r+0x92e>
 8014f26:	462a      	mov	r2, r5
 8014f28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014f2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f30:	f7eb fdac 	bl	8000a8c <__aeabi_dcmplt>
 8014f34:	2800      	cmp	r0, #0
 8014f36:	f040 827c 	bne.w	8015432 <_dtoa_r+0x92a>
 8014f3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014f3e:	e9cd 2300 	strd	r2, r3, [sp]
 8014f42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	f2c0 8150 	blt.w	80151ea <_dtoa_r+0x6e2>
 8014f4a:	f1ba 0f0e 	cmp.w	sl, #14
 8014f4e:	f300 814c 	bgt.w	80151ea <_dtoa_r+0x6e2>
 8014f52:	4b6a      	ldr	r3, [pc, #424]	; (80150fc <_dtoa_r+0x5f4>)
 8014f54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014f58:	ed93 7b00 	vldr	d7, [r3]
 8014f5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014f5e:	2b00      	cmp	r3, #0
 8014f60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014f64:	f280 80d8 	bge.w	8015118 <_dtoa_r+0x610>
 8014f68:	f1b9 0f00 	cmp.w	r9, #0
 8014f6c:	f300 80d4 	bgt.w	8015118 <_dtoa_r+0x610>
 8014f70:	f040 825e 	bne.w	8015430 <_dtoa_r+0x928>
 8014f74:	2200      	movs	r2, #0
 8014f76:	4b66      	ldr	r3, [pc, #408]	; (8015110 <_dtoa_r+0x608>)
 8014f78:	ec51 0b17 	vmov	r0, r1, d7
 8014f7c:	f7eb fb14 	bl	80005a8 <__aeabi_dmul>
 8014f80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f84:	f7eb fd96 	bl	8000ab4 <__aeabi_dcmpge>
 8014f88:	464f      	mov	r7, r9
 8014f8a:	464e      	mov	r6, r9
 8014f8c:	2800      	cmp	r0, #0
 8014f8e:	f040 8234 	bne.w	80153fa <_dtoa_r+0x8f2>
 8014f92:	2331      	movs	r3, #49	; 0x31
 8014f94:	f10b 0501 	add.w	r5, fp, #1
 8014f98:	f88b 3000 	strb.w	r3, [fp]
 8014f9c:	f10a 0a01 	add.w	sl, sl, #1
 8014fa0:	e22f      	b.n	8015402 <_dtoa_r+0x8fa>
 8014fa2:	07f2      	lsls	r2, r6, #31
 8014fa4:	d505      	bpl.n	8014fb2 <_dtoa_r+0x4aa>
 8014fa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014faa:	f7eb fafd 	bl	80005a8 <__aeabi_dmul>
 8014fae:	3501      	adds	r5, #1
 8014fb0:	2301      	movs	r3, #1
 8014fb2:	1076      	asrs	r6, r6, #1
 8014fb4:	3708      	adds	r7, #8
 8014fb6:	e772      	b.n	8014e9e <_dtoa_r+0x396>
 8014fb8:	2502      	movs	r5, #2
 8014fba:	e774      	b.n	8014ea6 <_dtoa_r+0x39e>
 8014fbc:	f8cd a020 	str.w	sl, [sp, #32]
 8014fc0:	464f      	mov	r7, r9
 8014fc2:	e791      	b.n	8014ee8 <_dtoa_r+0x3e0>
 8014fc4:	4b4d      	ldr	r3, [pc, #308]	; (80150fc <_dtoa_r+0x5f4>)
 8014fc6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014fca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d047      	beq.n	8015064 <_dtoa_r+0x55c>
 8014fd4:	4602      	mov	r2, r0
 8014fd6:	460b      	mov	r3, r1
 8014fd8:	2000      	movs	r0, #0
 8014fda:	494e      	ldr	r1, [pc, #312]	; (8015114 <_dtoa_r+0x60c>)
 8014fdc:	f7eb fc0e 	bl	80007fc <__aeabi_ddiv>
 8014fe0:	462a      	mov	r2, r5
 8014fe2:	4633      	mov	r3, r6
 8014fe4:	f7eb f928 	bl	8000238 <__aeabi_dsub>
 8014fe8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014fec:	465d      	mov	r5, fp
 8014fee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ff2:	f7eb fd89 	bl	8000b08 <__aeabi_d2iz>
 8014ff6:	4606      	mov	r6, r0
 8014ff8:	f7eb fa6c 	bl	80004d4 <__aeabi_i2d>
 8014ffc:	4602      	mov	r2, r0
 8014ffe:	460b      	mov	r3, r1
 8015000:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015004:	f7eb f918 	bl	8000238 <__aeabi_dsub>
 8015008:	3630      	adds	r6, #48	; 0x30
 801500a:	f805 6b01 	strb.w	r6, [r5], #1
 801500e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015012:	e9cd 0100 	strd	r0, r1, [sp]
 8015016:	f7eb fd39 	bl	8000a8c <__aeabi_dcmplt>
 801501a:	2800      	cmp	r0, #0
 801501c:	d163      	bne.n	80150e6 <_dtoa_r+0x5de>
 801501e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015022:	2000      	movs	r0, #0
 8015024:	4937      	ldr	r1, [pc, #220]	; (8015104 <_dtoa_r+0x5fc>)
 8015026:	f7eb f907 	bl	8000238 <__aeabi_dsub>
 801502a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801502e:	f7eb fd2d 	bl	8000a8c <__aeabi_dcmplt>
 8015032:	2800      	cmp	r0, #0
 8015034:	f040 80b7 	bne.w	80151a6 <_dtoa_r+0x69e>
 8015038:	eba5 030b 	sub.w	r3, r5, fp
 801503c:	429f      	cmp	r7, r3
 801503e:	f77f af7c 	ble.w	8014f3a <_dtoa_r+0x432>
 8015042:	2200      	movs	r2, #0
 8015044:	4b30      	ldr	r3, [pc, #192]	; (8015108 <_dtoa_r+0x600>)
 8015046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801504a:	f7eb faad 	bl	80005a8 <__aeabi_dmul>
 801504e:	2200      	movs	r2, #0
 8015050:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015054:	4b2c      	ldr	r3, [pc, #176]	; (8015108 <_dtoa_r+0x600>)
 8015056:	e9dd 0100 	ldrd	r0, r1, [sp]
 801505a:	f7eb faa5 	bl	80005a8 <__aeabi_dmul>
 801505e:	e9cd 0100 	strd	r0, r1, [sp]
 8015062:	e7c4      	b.n	8014fee <_dtoa_r+0x4e6>
 8015064:	462a      	mov	r2, r5
 8015066:	4633      	mov	r3, r6
 8015068:	f7eb fa9e 	bl	80005a8 <__aeabi_dmul>
 801506c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015070:	eb0b 0507 	add.w	r5, fp, r7
 8015074:	465e      	mov	r6, fp
 8015076:	e9dd 0100 	ldrd	r0, r1, [sp]
 801507a:	f7eb fd45 	bl	8000b08 <__aeabi_d2iz>
 801507e:	4607      	mov	r7, r0
 8015080:	f7eb fa28 	bl	80004d4 <__aeabi_i2d>
 8015084:	3730      	adds	r7, #48	; 0x30
 8015086:	4602      	mov	r2, r0
 8015088:	460b      	mov	r3, r1
 801508a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801508e:	f7eb f8d3 	bl	8000238 <__aeabi_dsub>
 8015092:	f806 7b01 	strb.w	r7, [r6], #1
 8015096:	42ae      	cmp	r6, r5
 8015098:	e9cd 0100 	strd	r0, r1, [sp]
 801509c:	f04f 0200 	mov.w	r2, #0
 80150a0:	d126      	bne.n	80150f0 <_dtoa_r+0x5e8>
 80150a2:	4b1c      	ldr	r3, [pc, #112]	; (8015114 <_dtoa_r+0x60c>)
 80150a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80150a8:	f7eb f8c8 	bl	800023c <__adddf3>
 80150ac:	4602      	mov	r2, r0
 80150ae:	460b      	mov	r3, r1
 80150b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150b4:	f7eb fd08 	bl	8000ac8 <__aeabi_dcmpgt>
 80150b8:	2800      	cmp	r0, #0
 80150ba:	d174      	bne.n	80151a6 <_dtoa_r+0x69e>
 80150bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80150c0:	2000      	movs	r0, #0
 80150c2:	4914      	ldr	r1, [pc, #80]	; (8015114 <_dtoa_r+0x60c>)
 80150c4:	f7eb f8b8 	bl	8000238 <__aeabi_dsub>
 80150c8:	4602      	mov	r2, r0
 80150ca:	460b      	mov	r3, r1
 80150cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80150d0:	f7eb fcdc 	bl	8000a8c <__aeabi_dcmplt>
 80150d4:	2800      	cmp	r0, #0
 80150d6:	f43f af30 	beq.w	8014f3a <_dtoa_r+0x432>
 80150da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80150de:	2b30      	cmp	r3, #48	; 0x30
 80150e0:	f105 32ff 	add.w	r2, r5, #4294967295
 80150e4:	d002      	beq.n	80150ec <_dtoa_r+0x5e4>
 80150e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80150ea:	e04a      	b.n	8015182 <_dtoa_r+0x67a>
 80150ec:	4615      	mov	r5, r2
 80150ee:	e7f4      	b.n	80150da <_dtoa_r+0x5d2>
 80150f0:	4b05      	ldr	r3, [pc, #20]	; (8015108 <_dtoa_r+0x600>)
 80150f2:	f7eb fa59 	bl	80005a8 <__aeabi_dmul>
 80150f6:	e9cd 0100 	strd	r0, r1, [sp]
 80150fa:	e7bc      	b.n	8015076 <_dtoa_r+0x56e>
 80150fc:	08019988 	.word	0x08019988
 8015100:	08019960 	.word	0x08019960
 8015104:	3ff00000 	.word	0x3ff00000
 8015108:	40240000 	.word	0x40240000
 801510c:	401c0000 	.word	0x401c0000
 8015110:	40140000 	.word	0x40140000
 8015114:	3fe00000 	.word	0x3fe00000
 8015118:	e9dd 6700 	ldrd	r6, r7, [sp]
 801511c:	465d      	mov	r5, fp
 801511e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015122:	4630      	mov	r0, r6
 8015124:	4639      	mov	r1, r7
 8015126:	f7eb fb69 	bl	80007fc <__aeabi_ddiv>
 801512a:	f7eb fced 	bl	8000b08 <__aeabi_d2iz>
 801512e:	4680      	mov	r8, r0
 8015130:	f7eb f9d0 	bl	80004d4 <__aeabi_i2d>
 8015134:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015138:	f7eb fa36 	bl	80005a8 <__aeabi_dmul>
 801513c:	4602      	mov	r2, r0
 801513e:	460b      	mov	r3, r1
 8015140:	4630      	mov	r0, r6
 8015142:	4639      	mov	r1, r7
 8015144:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8015148:	f7eb f876 	bl	8000238 <__aeabi_dsub>
 801514c:	f805 6b01 	strb.w	r6, [r5], #1
 8015150:	eba5 060b 	sub.w	r6, r5, fp
 8015154:	45b1      	cmp	r9, r6
 8015156:	4602      	mov	r2, r0
 8015158:	460b      	mov	r3, r1
 801515a:	d139      	bne.n	80151d0 <_dtoa_r+0x6c8>
 801515c:	f7eb f86e 	bl	800023c <__adddf3>
 8015160:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015164:	4606      	mov	r6, r0
 8015166:	460f      	mov	r7, r1
 8015168:	f7eb fcae 	bl	8000ac8 <__aeabi_dcmpgt>
 801516c:	b9c8      	cbnz	r0, 80151a2 <_dtoa_r+0x69a>
 801516e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8015172:	4630      	mov	r0, r6
 8015174:	4639      	mov	r1, r7
 8015176:	f7eb fc7f 	bl	8000a78 <__aeabi_dcmpeq>
 801517a:	b110      	cbz	r0, 8015182 <_dtoa_r+0x67a>
 801517c:	f018 0f01 	tst.w	r8, #1
 8015180:	d10f      	bne.n	80151a2 <_dtoa_r+0x69a>
 8015182:	9904      	ldr	r1, [sp, #16]
 8015184:	4620      	mov	r0, r4
 8015186:	f000 fc9f 	bl	8015ac8 <_Bfree>
 801518a:	2300      	movs	r3, #0
 801518c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801518e:	702b      	strb	r3, [r5, #0]
 8015190:	f10a 0301 	add.w	r3, sl, #1
 8015194:	6013      	str	r3, [r2, #0]
 8015196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015198:	2b00      	cmp	r3, #0
 801519a:	f000 8241 	beq.w	8015620 <_dtoa_r+0xb18>
 801519e:	601d      	str	r5, [r3, #0]
 80151a0:	e23e      	b.n	8015620 <_dtoa_r+0xb18>
 80151a2:	f8cd a020 	str.w	sl, [sp, #32]
 80151a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80151aa:	2a39      	cmp	r2, #57	; 0x39
 80151ac:	f105 33ff 	add.w	r3, r5, #4294967295
 80151b0:	d108      	bne.n	80151c4 <_dtoa_r+0x6bc>
 80151b2:	459b      	cmp	fp, r3
 80151b4:	d10a      	bne.n	80151cc <_dtoa_r+0x6c4>
 80151b6:	9b08      	ldr	r3, [sp, #32]
 80151b8:	3301      	adds	r3, #1
 80151ba:	9308      	str	r3, [sp, #32]
 80151bc:	2330      	movs	r3, #48	; 0x30
 80151be:	f88b 3000 	strb.w	r3, [fp]
 80151c2:	465b      	mov	r3, fp
 80151c4:	781a      	ldrb	r2, [r3, #0]
 80151c6:	3201      	adds	r2, #1
 80151c8:	701a      	strb	r2, [r3, #0]
 80151ca:	e78c      	b.n	80150e6 <_dtoa_r+0x5de>
 80151cc:	461d      	mov	r5, r3
 80151ce:	e7ea      	b.n	80151a6 <_dtoa_r+0x69e>
 80151d0:	2200      	movs	r2, #0
 80151d2:	4b9b      	ldr	r3, [pc, #620]	; (8015440 <_dtoa_r+0x938>)
 80151d4:	f7eb f9e8 	bl	80005a8 <__aeabi_dmul>
 80151d8:	2200      	movs	r2, #0
 80151da:	2300      	movs	r3, #0
 80151dc:	4606      	mov	r6, r0
 80151de:	460f      	mov	r7, r1
 80151e0:	f7eb fc4a 	bl	8000a78 <__aeabi_dcmpeq>
 80151e4:	2800      	cmp	r0, #0
 80151e6:	d09a      	beq.n	801511e <_dtoa_r+0x616>
 80151e8:	e7cb      	b.n	8015182 <_dtoa_r+0x67a>
 80151ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80151ec:	2a00      	cmp	r2, #0
 80151ee:	f000 808b 	beq.w	8015308 <_dtoa_r+0x800>
 80151f2:	9a06      	ldr	r2, [sp, #24]
 80151f4:	2a01      	cmp	r2, #1
 80151f6:	dc6e      	bgt.n	80152d6 <_dtoa_r+0x7ce>
 80151f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80151fa:	2a00      	cmp	r2, #0
 80151fc:	d067      	beq.n	80152ce <_dtoa_r+0x7c6>
 80151fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8015202:	9f07      	ldr	r7, [sp, #28]
 8015204:	9d05      	ldr	r5, [sp, #20]
 8015206:	9a05      	ldr	r2, [sp, #20]
 8015208:	2101      	movs	r1, #1
 801520a:	441a      	add	r2, r3
 801520c:	4620      	mov	r0, r4
 801520e:	9205      	str	r2, [sp, #20]
 8015210:	4498      	add	r8, r3
 8015212:	f000 fcf9 	bl	8015c08 <__i2b>
 8015216:	4606      	mov	r6, r0
 8015218:	2d00      	cmp	r5, #0
 801521a:	dd0c      	ble.n	8015236 <_dtoa_r+0x72e>
 801521c:	f1b8 0f00 	cmp.w	r8, #0
 8015220:	dd09      	ble.n	8015236 <_dtoa_r+0x72e>
 8015222:	4545      	cmp	r5, r8
 8015224:	9a05      	ldr	r2, [sp, #20]
 8015226:	462b      	mov	r3, r5
 8015228:	bfa8      	it	ge
 801522a:	4643      	movge	r3, r8
 801522c:	1ad2      	subs	r2, r2, r3
 801522e:	9205      	str	r2, [sp, #20]
 8015230:	1aed      	subs	r5, r5, r3
 8015232:	eba8 0803 	sub.w	r8, r8, r3
 8015236:	9b07      	ldr	r3, [sp, #28]
 8015238:	b1eb      	cbz	r3, 8015276 <_dtoa_r+0x76e>
 801523a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801523c:	2b00      	cmp	r3, #0
 801523e:	d067      	beq.n	8015310 <_dtoa_r+0x808>
 8015240:	b18f      	cbz	r7, 8015266 <_dtoa_r+0x75e>
 8015242:	4631      	mov	r1, r6
 8015244:	463a      	mov	r2, r7
 8015246:	4620      	mov	r0, r4
 8015248:	f000 fd7e 	bl	8015d48 <__pow5mult>
 801524c:	9a04      	ldr	r2, [sp, #16]
 801524e:	4601      	mov	r1, r0
 8015250:	4606      	mov	r6, r0
 8015252:	4620      	mov	r0, r4
 8015254:	f000 fce1 	bl	8015c1a <__multiply>
 8015258:	9904      	ldr	r1, [sp, #16]
 801525a:	9008      	str	r0, [sp, #32]
 801525c:	4620      	mov	r0, r4
 801525e:	f000 fc33 	bl	8015ac8 <_Bfree>
 8015262:	9b08      	ldr	r3, [sp, #32]
 8015264:	9304      	str	r3, [sp, #16]
 8015266:	9b07      	ldr	r3, [sp, #28]
 8015268:	1bda      	subs	r2, r3, r7
 801526a:	d004      	beq.n	8015276 <_dtoa_r+0x76e>
 801526c:	9904      	ldr	r1, [sp, #16]
 801526e:	4620      	mov	r0, r4
 8015270:	f000 fd6a 	bl	8015d48 <__pow5mult>
 8015274:	9004      	str	r0, [sp, #16]
 8015276:	2101      	movs	r1, #1
 8015278:	4620      	mov	r0, r4
 801527a:	f000 fcc5 	bl	8015c08 <__i2b>
 801527e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015280:	4607      	mov	r7, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	f000 81d0 	beq.w	8015628 <_dtoa_r+0xb20>
 8015288:	461a      	mov	r2, r3
 801528a:	4601      	mov	r1, r0
 801528c:	4620      	mov	r0, r4
 801528e:	f000 fd5b 	bl	8015d48 <__pow5mult>
 8015292:	9b06      	ldr	r3, [sp, #24]
 8015294:	2b01      	cmp	r3, #1
 8015296:	4607      	mov	r7, r0
 8015298:	dc40      	bgt.n	801531c <_dtoa_r+0x814>
 801529a:	9b00      	ldr	r3, [sp, #0]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d139      	bne.n	8015314 <_dtoa_r+0x80c>
 80152a0:	9b01      	ldr	r3, [sp, #4]
 80152a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d136      	bne.n	8015318 <_dtoa_r+0x810>
 80152aa:	9b01      	ldr	r3, [sp, #4]
 80152ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80152b0:	0d1b      	lsrs	r3, r3, #20
 80152b2:	051b      	lsls	r3, r3, #20
 80152b4:	b12b      	cbz	r3, 80152c2 <_dtoa_r+0x7ba>
 80152b6:	9b05      	ldr	r3, [sp, #20]
 80152b8:	3301      	adds	r3, #1
 80152ba:	9305      	str	r3, [sp, #20]
 80152bc:	f108 0801 	add.w	r8, r8, #1
 80152c0:	2301      	movs	r3, #1
 80152c2:	9307      	str	r3, [sp, #28]
 80152c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d12a      	bne.n	8015320 <_dtoa_r+0x818>
 80152ca:	2001      	movs	r0, #1
 80152cc:	e030      	b.n	8015330 <_dtoa_r+0x828>
 80152ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80152d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80152d4:	e795      	b.n	8015202 <_dtoa_r+0x6fa>
 80152d6:	9b07      	ldr	r3, [sp, #28]
 80152d8:	f109 37ff 	add.w	r7, r9, #4294967295
 80152dc:	42bb      	cmp	r3, r7
 80152de:	bfbf      	itttt	lt
 80152e0:	9b07      	ldrlt	r3, [sp, #28]
 80152e2:	9707      	strlt	r7, [sp, #28]
 80152e4:	1afa      	sublt	r2, r7, r3
 80152e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80152e8:	bfbb      	ittet	lt
 80152ea:	189b      	addlt	r3, r3, r2
 80152ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 80152ee:	1bdf      	subge	r7, r3, r7
 80152f0:	2700      	movlt	r7, #0
 80152f2:	f1b9 0f00 	cmp.w	r9, #0
 80152f6:	bfb5      	itete	lt
 80152f8:	9b05      	ldrlt	r3, [sp, #20]
 80152fa:	9d05      	ldrge	r5, [sp, #20]
 80152fc:	eba3 0509 	sublt.w	r5, r3, r9
 8015300:	464b      	movge	r3, r9
 8015302:	bfb8      	it	lt
 8015304:	2300      	movlt	r3, #0
 8015306:	e77e      	b.n	8015206 <_dtoa_r+0x6fe>
 8015308:	9f07      	ldr	r7, [sp, #28]
 801530a:	9d05      	ldr	r5, [sp, #20]
 801530c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801530e:	e783      	b.n	8015218 <_dtoa_r+0x710>
 8015310:	9a07      	ldr	r2, [sp, #28]
 8015312:	e7ab      	b.n	801526c <_dtoa_r+0x764>
 8015314:	2300      	movs	r3, #0
 8015316:	e7d4      	b.n	80152c2 <_dtoa_r+0x7ba>
 8015318:	9b00      	ldr	r3, [sp, #0]
 801531a:	e7d2      	b.n	80152c2 <_dtoa_r+0x7ba>
 801531c:	2300      	movs	r3, #0
 801531e:	9307      	str	r3, [sp, #28]
 8015320:	693b      	ldr	r3, [r7, #16]
 8015322:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8015326:	6918      	ldr	r0, [r3, #16]
 8015328:	f000 fc20 	bl	8015b6c <__hi0bits>
 801532c:	f1c0 0020 	rsb	r0, r0, #32
 8015330:	4440      	add	r0, r8
 8015332:	f010 001f 	ands.w	r0, r0, #31
 8015336:	d047      	beq.n	80153c8 <_dtoa_r+0x8c0>
 8015338:	f1c0 0320 	rsb	r3, r0, #32
 801533c:	2b04      	cmp	r3, #4
 801533e:	dd3b      	ble.n	80153b8 <_dtoa_r+0x8b0>
 8015340:	9b05      	ldr	r3, [sp, #20]
 8015342:	f1c0 001c 	rsb	r0, r0, #28
 8015346:	4403      	add	r3, r0
 8015348:	9305      	str	r3, [sp, #20]
 801534a:	4405      	add	r5, r0
 801534c:	4480      	add	r8, r0
 801534e:	9b05      	ldr	r3, [sp, #20]
 8015350:	2b00      	cmp	r3, #0
 8015352:	dd05      	ble.n	8015360 <_dtoa_r+0x858>
 8015354:	461a      	mov	r2, r3
 8015356:	9904      	ldr	r1, [sp, #16]
 8015358:	4620      	mov	r0, r4
 801535a:	f000 fd43 	bl	8015de4 <__lshift>
 801535e:	9004      	str	r0, [sp, #16]
 8015360:	f1b8 0f00 	cmp.w	r8, #0
 8015364:	dd05      	ble.n	8015372 <_dtoa_r+0x86a>
 8015366:	4639      	mov	r1, r7
 8015368:	4642      	mov	r2, r8
 801536a:	4620      	mov	r0, r4
 801536c:	f000 fd3a 	bl	8015de4 <__lshift>
 8015370:	4607      	mov	r7, r0
 8015372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015374:	b353      	cbz	r3, 80153cc <_dtoa_r+0x8c4>
 8015376:	4639      	mov	r1, r7
 8015378:	9804      	ldr	r0, [sp, #16]
 801537a:	f000 fd87 	bl	8015e8c <__mcmp>
 801537e:	2800      	cmp	r0, #0
 8015380:	da24      	bge.n	80153cc <_dtoa_r+0x8c4>
 8015382:	2300      	movs	r3, #0
 8015384:	220a      	movs	r2, #10
 8015386:	9904      	ldr	r1, [sp, #16]
 8015388:	4620      	mov	r0, r4
 801538a:	f000 fbb4 	bl	8015af6 <__multadd>
 801538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015390:	9004      	str	r0, [sp, #16]
 8015392:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015396:	2b00      	cmp	r3, #0
 8015398:	f000 814d 	beq.w	8015636 <_dtoa_r+0xb2e>
 801539c:	2300      	movs	r3, #0
 801539e:	4631      	mov	r1, r6
 80153a0:	220a      	movs	r2, #10
 80153a2:	4620      	mov	r0, r4
 80153a4:	f000 fba7 	bl	8015af6 <__multadd>
 80153a8:	9b02      	ldr	r3, [sp, #8]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	4606      	mov	r6, r0
 80153ae:	dc4f      	bgt.n	8015450 <_dtoa_r+0x948>
 80153b0:	9b06      	ldr	r3, [sp, #24]
 80153b2:	2b02      	cmp	r3, #2
 80153b4:	dd4c      	ble.n	8015450 <_dtoa_r+0x948>
 80153b6:	e011      	b.n	80153dc <_dtoa_r+0x8d4>
 80153b8:	d0c9      	beq.n	801534e <_dtoa_r+0x846>
 80153ba:	9a05      	ldr	r2, [sp, #20]
 80153bc:	331c      	adds	r3, #28
 80153be:	441a      	add	r2, r3
 80153c0:	9205      	str	r2, [sp, #20]
 80153c2:	441d      	add	r5, r3
 80153c4:	4498      	add	r8, r3
 80153c6:	e7c2      	b.n	801534e <_dtoa_r+0x846>
 80153c8:	4603      	mov	r3, r0
 80153ca:	e7f6      	b.n	80153ba <_dtoa_r+0x8b2>
 80153cc:	f1b9 0f00 	cmp.w	r9, #0
 80153d0:	dc38      	bgt.n	8015444 <_dtoa_r+0x93c>
 80153d2:	9b06      	ldr	r3, [sp, #24]
 80153d4:	2b02      	cmp	r3, #2
 80153d6:	dd35      	ble.n	8015444 <_dtoa_r+0x93c>
 80153d8:	f8cd 9008 	str.w	r9, [sp, #8]
 80153dc:	9b02      	ldr	r3, [sp, #8]
 80153de:	b963      	cbnz	r3, 80153fa <_dtoa_r+0x8f2>
 80153e0:	4639      	mov	r1, r7
 80153e2:	2205      	movs	r2, #5
 80153e4:	4620      	mov	r0, r4
 80153e6:	f000 fb86 	bl	8015af6 <__multadd>
 80153ea:	4601      	mov	r1, r0
 80153ec:	4607      	mov	r7, r0
 80153ee:	9804      	ldr	r0, [sp, #16]
 80153f0:	f000 fd4c 	bl	8015e8c <__mcmp>
 80153f4:	2800      	cmp	r0, #0
 80153f6:	f73f adcc 	bgt.w	8014f92 <_dtoa_r+0x48a>
 80153fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80153fc:	465d      	mov	r5, fp
 80153fe:	ea6f 0a03 	mvn.w	sl, r3
 8015402:	f04f 0900 	mov.w	r9, #0
 8015406:	4639      	mov	r1, r7
 8015408:	4620      	mov	r0, r4
 801540a:	f000 fb5d 	bl	8015ac8 <_Bfree>
 801540e:	2e00      	cmp	r6, #0
 8015410:	f43f aeb7 	beq.w	8015182 <_dtoa_r+0x67a>
 8015414:	f1b9 0f00 	cmp.w	r9, #0
 8015418:	d005      	beq.n	8015426 <_dtoa_r+0x91e>
 801541a:	45b1      	cmp	r9, r6
 801541c:	d003      	beq.n	8015426 <_dtoa_r+0x91e>
 801541e:	4649      	mov	r1, r9
 8015420:	4620      	mov	r0, r4
 8015422:	f000 fb51 	bl	8015ac8 <_Bfree>
 8015426:	4631      	mov	r1, r6
 8015428:	4620      	mov	r0, r4
 801542a:	f000 fb4d 	bl	8015ac8 <_Bfree>
 801542e:	e6a8      	b.n	8015182 <_dtoa_r+0x67a>
 8015430:	2700      	movs	r7, #0
 8015432:	463e      	mov	r6, r7
 8015434:	e7e1      	b.n	80153fa <_dtoa_r+0x8f2>
 8015436:	f8dd a020 	ldr.w	sl, [sp, #32]
 801543a:	463e      	mov	r6, r7
 801543c:	e5a9      	b.n	8014f92 <_dtoa_r+0x48a>
 801543e:	bf00      	nop
 8015440:	40240000 	.word	0x40240000
 8015444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015446:	f8cd 9008 	str.w	r9, [sp, #8]
 801544a:	2b00      	cmp	r3, #0
 801544c:	f000 80fa 	beq.w	8015644 <_dtoa_r+0xb3c>
 8015450:	2d00      	cmp	r5, #0
 8015452:	dd05      	ble.n	8015460 <_dtoa_r+0x958>
 8015454:	4631      	mov	r1, r6
 8015456:	462a      	mov	r2, r5
 8015458:	4620      	mov	r0, r4
 801545a:	f000 fcc3 	bl	8015de4 <__lshift>
 801545e:	4606      	mov	r6, r0
 8015460:	9b07      	ldr	r3, [sp, #28]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d04c      	beq.n	8015500 <_dtoa_r+0x9f8>
 8015466:	6871      	ldr	r1, [r6, #4]
 8015468:	4620      	mov	r0, r4
 801546a:	f000 faf9 	bl	8015a60 <_Balloc>
 801546e:	6932      	ldr	r2, [r6, #16]
 8015470:	3202      	adds	r2, #2
 8015472:	4605      	mov	r5, r0
 8015474:	0092      	lsls	r2, r2, #2
 8015476:	f106 010c 	add.w	r1, r6, #12
 801547a:	300c      	adds	r0, #12
 801547c:	f7fe fc7e 	bl	8013d7c <memcpy>
 8015480:	2201      	movs	r2, #1
 8015482:	4629      	mov	r1, r5
 8015484:	4620      	mov	r0, r4
 8015486:	f000 fcad 	bl	8015de4 <__lshift>
 801548a:	9b00      	ldr	r3, [sp, #0]
 801548c:	f8cd b014 	str.w	fp, [sp, #20]
 8015490:	f003 0301 	and.w	r3, r3, #1
 8015494:	46b1      	mov	r9, r6
 8015496:	9307      	str	r3, [sp, #28]
 8015498:	4606      	mov	r6, r0
 801549a:	4639      	mov	r1, r7
 801549c:	9804      	ldr	r0, [sp, #16]
 801549e:	f7ff faa7 	bl	80149f0 <quorem>
 80154a2:	4649      	mov	r1, r9
 80154a4:	4605      	mov	r5, r0
 80154a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80154aa:	9804      	ldr	r0, [sp, #16]
 80154ac:	f000 fcee 	bl	8015e8c <__mcmp>
 80154b0:	4632      	mov	r2, r6
 80154b2:	9000      	str	r0, [sp, #0]
 80154b4:	4639      	mov	r1, r7
 80154b6:	4620      	mov	r0, r4
 80154b8:	f000 fd02 	bl	8015ec0 <__mdiff>
 80154bc:	68c3      	ldr	r3, [r0, #12]
 80154be:	4602      	mov	r2, r0
 80154c0:	bb03      	cbnz	r3, 8015504 <_dtoa_r+0x9fc>
 80154c2:	4601      	mov	r1, r0
 80154c4:	9008      	str	r0, [sp, #32]
 80154c6:	9804      	ldr	r0, [sp, #16]
 80154c8:	f000 fce0 	bl	8015e8c <__mcmp>
 80154cc:	9a08      	ldr	r2, [sp, #32]
 80154ce:	4603      	mov	r3, r0
 80154d0:	4611      	mov	r1, r2
 80154d2:	4620      	mov	r0, r4
 80154d4:	9308      	str	r3, [sp, #32]
 80154d6:	f000 faf7 	bl	8015ac8 <_Bfree>
 80154da:	9b08      	ldr	r3, [sp, #32]
 80154dc:	b9a3      	cbnz	r3, 8015508 <_dtoa_r+0xa00>
 80154de:	9a06      	ldr	r2, [sp, #24]
 80154e0:	b992      	cbnz	r2, 8015508 <_dtoa_r+0xa00>
 80154e2:	9a07      	ldr	r2, [sp, #28]
 80154e4:	b982      	cbnz	r2, 8015508 <_dtoa_r+0xa00>
 80154e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80154ea:	d029      	beq.n	8015540 <_dtoa_r+0xa38>
 80154ec:	9b00      	ldr	r3, [sp, #0]
 80154ee:	2b00      	cmp	r3, #0
 80154f0:	dd01      	ble.n	80154f6 <_dtoa_r+0x9ee>
 80154f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80154f6:	9b05      	ldr	r3, [sp, #20]
 80154f8:	1c5d      	adds	r5, r3, #1
 80154fa:	f883 8000 	strb.w	r8, [r3]
 80154fe:	e782      	b.n	8015406 <_dtoa_r+0x8fe>
 8015500:	4630      	mov	r0, r6
 8015502:	e7c2      	b.n	801548a <_dtoa_r+0x982>
 8015504:	2301      	movs	r3, #1
 8015506:	e7e3      	b.n	80154d0 <_dtoa_r+0x9c8>
 8015508:	9a00      	ldr	r2, [sp, #0]
 801550a:	2a00      	cmp	r2, #0
 801550c:	db04      	blt.n	8015518 <_dtoa_r+0xa10>
 801550e:	d125      	bne.n	801555c <_dtoa_r+0xa54>
 8015510:	9a06      	ldr	r2, [sp, #24]
 8015512:	bb1a      	cbnz	r2, 801555c <_dtoa_r+0xa54>
 8015514:	9a07      	ldr	r2, [sp, #28]
 8015516:	bb0a      	cbnz	r2, 801555c <_dtoa_r+0xa54>
 8015518:	2b00      	cmp	r3, #0
 801551a:	ddec      	ble.n	80154f6 <_dtoa_r+0x9ee>
 801551c:	2201      	movs	r2, #1
 801551e:	9904      	ldr	r1, [sp, #16]
 8015520:	4620      	mov	r0, r4
 8015522:	f000 fc5f 	bl	8015de4 <__lshift>
 8015526:	4639      	mov	r1, r7
 8015528:	9004      	str	r0, [sp, #16]
 801552a:	f000 fcaf 	bl	8015e8c <__mcmp>
 801552e:	2800      	cmp	r0, #0
 8015530:	dc03      	bgt.n	801553a <_dtoa_r+0xa32>
 8015532:	d1e0      	bne.n	80154f6 <_dtoa_r+0x9ee>
 8015534:	f018 0f01 	tst.w	r8, #1
 8015538:	d0dd      	beq.n	80154f6 <_dtoa_r+0x9ee>
 801553a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801553e:	d1d8      	bne.n	80154f2 <_dtoa_r+0x9ea>
 8015540:	9b05      	ldr	r3, [sp, #20]
 8015542:	9a05      	ldr	r2, [sp, #20]
 8015544:	1c5d      	adds	r5, r3, #1
 8015546:	2339      	movs	r3, #57	; 0x39
 8015548:	7013      	strb	r3, [r2, #0]
 801554a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801554e:	2b39      	cmp	r3, #57	; 0x39
 8015550:	f105 32ff 	add.w	r2, r5, #4294967295
 8015554:	d04f      	beq.n	80155f6 <_dtoa_r+0xaee>
 8015556:	3301      	adds	r3, #1
 8015558:	7013      	strb	r3, [r2, #0]
 801555a:	e754      	b.n	8015406 <_dtoa_r+0x8fe>
 801555c:	9a05      	ldr	r2, [sp, #20]
 801555e:	2b00      	cmp	r3, #0
 8015560:	f102 0501 	add.w	r5, r2, #1
 8015564:	dd06      	ble.n	8015574 <_dtoa_r+0xa6c>
 8015566:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801556a:	d0e9      	beq.n	8015540 <_dtoa_r+0xa38>
 801556c:	f108 0801 	add.w	r8, r8, #1
 8015570:	9b05      	ldr	r3, [sp, #20]
 8015572:	e7c2      	b.n	80154fa <_dtoa_r+0x9f2>
 8015574:	9a02      	ldr	r2, [sp, #8]
 8015576:	f805 8c01 	strb.w	r8, [r5, #-1]
 801557a:	eba5 030b 	sub.w	r3, r5, fp
 801557e:	4293      	cmp	r3, r2
 8015580:	d021      	beq.n	80155c6 <_dtoa_r+0xabe>
 8015582:	2300      	movs	r3, #0
 8015584:	220a      	movs	r2, #10
 8015586:	9904      	ldr	r1, [sp, #16]
 8015588:	4620      	mov	r0, r4
 801558a:	f000 fab4 	bl	8015af6 <__multadd>
 801558e:	45b1      	cmp	r9, r6
 8015590:	9004      	str	r0, [sp, #16]
 8015592:	f04f 0300 	mov.w	r3, #0
 8015596:	f04f 020a 	mov.w	r2, #10
 801559a:	4649      	mov	r1, r9
 801559c:	4620      	mov	r0, r4
 801559e:	d105      	bne.n	80155ac <_dtoa_r+0xaa4>
 80155a0:	f000 faa9 	bl	8015af6 <__multadd>
 80155a4:	4681      	mov	r9, r0
 80155a6:	4606      	mov	r6, r0
 80155a8:	9505      	str	r5, [sp, #20]
 80155aa:	e776      	b.n	801549a <_dtoa_r+0x992>
 80155ac:	f000 faa3 	bl	8015af6 <__multadd>
 80155b0:	4631      	mov	r1, r6
 80155b2:	4681      	mov	r9, r0
 80155b4:	2300      	movs	r3, #0
 80155b6:	220a      	movs	r2, #10
 80155b8:	4620      	mov	r0, r4
 80155ba:	f000 fa9c 	bl	8015af6 <__multadd>
 80155be:	4606      	mov	r6, r0
 80155c0:	e7f2      	b.n	80155a8 <_dtoa_r+0xaa0>
 80155c2:	f04f 0900 	mov.w	r9, #0
 80155c6:	2201      	movs	r2, #1
 80155c8:	9904      	ldr	r1, [sp, #16]
 80155ca:	4620      	mov	r0, r4
 80155cc:	f000 fc0a 	bl	8015de4 <__lshift>
 80155d0:	4639      	mov	r1, r7
 80155d2:	9004      	str	r0, [sp, #16]
 80155d4:	f000 fc5a 	bl	8015e8c <__mcmp>
 80155d8:	2800      	cmp	r0, #0
 80155da:	dcb6      	bgt.n	801554a <_dtoa_r+0xa42>
 80155dc:	d102      	bne.n	80155e4 <_dtoa_r+0xadc>
 80155de:	f018 0f01 	tst.w	r8, #1
 80155e2:	d1b2      	bne.n	801554a <_dtoa_r+0xa42>
 80155e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80155e8:	2b30      	cmp	r3, #48	; 0x30
 80155ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80155ee:	f47f af0a 	bne.w	8015406 <_dtoa_r+0x8fe>
 80155f2:	4615      	mov	r5, r2
 80155f4:	e7f6      	b.n	80155e4 <_dtoa_r+0xadc>
 80155f6:	4593      	cmp	fp, r2
 80155f8:	d105      	bne.n	8015606 <_dtoa_r+0xafe>
 80155fa:	2331      	movs	r3, #49	; 0x31
 80155fc:	f10a 0a01 	add.w	sl, sl, #1
 8015600:	f88b 3000 	strb.w	r3, [fp]
 8015604:	e6ff      	b.n	8015406 <_dtoa_r+0x8fe>
 8015606:	4615      	mov	r5, r2
 8015608:	e79f      	b.n	801554a <_dtoa_r+0xa42>
 801560a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8015670 <_dtoa_r+0xb68>
 801560e:	e007      	b.n	8015620 <_dtoa_r+0xb18>
 8015610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015612:	f8df b060 	ldr.w	fp, [pc, #96]	; 8015674 <_dtoa_r+0xb6c>
 8015616:	b11b      	cbz	r3, 8015620 <_dtoa_r+0xb18>
 8015618:	f10b 0308 	add.w	r3, fp, #8
 801561c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801561e:	6013      	str	r3, [r2, #0]
 8015620:	4658      	mov	r0, fp
 8015622:	b017      	add	sp, #92	; 0x5c
 8015624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015628:	9b06      	ldr	r3, [sp, #24]
 801562a:	2b01      	cmp	r3, #1
 801562c:	f77f ae35 	ble.w	801529a <_dtoa_r+0x792>
 8015630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015632:	9307      	str	r3, [sp, #28]
 8015634:	e649      	b.n	80152ca <_dtoa_r+0x7c2>
 8015636:	9b02      	ldr	r3, [sp, #8]
 8015638:	2b00      	cmp	r3, #0
 801563a:	dc03      	bgt.n	8015644 <_dtoa_r+0xb3c>
 801563c:	9b06      	ldr	r3, [sp, #24]
 801563e:	2b02      	cmp	r3, #2
 8015640:	f73f aecc 	bgt.w	80153dc <_dtoa_r+0x8d4>
 8015644:	465d      	mov	r5, fp
 8015646:	4639      	mov	r1, r7
 8015648:	9804      	ldr	r0, [sp, #16]
 801564a:	f7ff f9d1 	bl	80149f0 <quorem>
 801564e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8015652:	f805 8b01 	strb.w	r8, [r5], #1
 8015656:	9a02      	ldr	r2, [sp, #8]
 8015658:	eba5 030b 	sub.w	r3, r5, fp
 801565c:	429a      	cmp	r2, r3
 801565e:	ddb0      	ble.n	80155c2 <_dtoa_r+0xaba>
 8015660:	2300      	movs	r3, #0
 8015662:	220a      	movs	r2, #10
 8015664:	9904      	ldr	r1, [sp, #16]
 8015666:	4620      	mov	r0, r4
 8015668:	f000 fa45 	bl	8015af6 <__multadd>
 801566c:	9004      	str	r0, [sp, #16]
 801566e:	e7ea      	b.n	8015646 <_dtoa_r+0xb3e>
 8015670:	080198cc 	.word	0x080198cc
 8015674:	080198f0 	.word	0x080198f0

08015678 <__sflush_r>:
 8015678:	898a      	ldrh	r2, [r1, #12]
 801567a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801567e:	4605      	mov	r5, r0
 8015680:	0710      	lsls	r0, r2, #28
 8015682:	460c      	mov	r4, r1
 8015684:	d458      	bmi.n	8015738 <__sflush_r+0xc0>
 8015686:	684b      	ldr	r3, [r1, #4]
 8015688:	2b00      	cmp	r3, #0
 801568a:	dc05      	bgt.n	8015698 <__sflush_r+0x20>
 801568c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801568e:	2b00      	cmp	r3, #0
 8015690:	dc02      	bgt.n	8015698 <__sflush_r+0x20>
 8015692:	2000      	movs	r0, #0
 8015694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015698:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801569a:	2e00      	cmp	r6, #0
 801569c:	d0f9      	beq.n	8015692 <__sflush_r+0x1a>
 801569e:	2300      	movs	r3, #0
 80156a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80156a4:	682f      	ldr	r7, [r5, #0]
 80156a6:	6a21      	ldr	r1, [r4, #32]
 80156a8:	602b      	str	r3, [r5, #0]
 80156aa:	d032      	beq.n	8015712 <__sflush_r+0x9a>
 80156ac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80156ae:	89a3      	ldrh	r3, [r4, #12]
 80156b0:	075a      	lsls	r2, r3, #29
 80156b2:	d505      	bpl.n	80156c0 <__sflush_r+0x48>
 80156b4:	6863      	ldr	r3, [r4, #4]
 80156b6:	1ac0      	subs	r0, r0, r3
 80156b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80156ba:	b10b      	cbz	r3, 80156c0 <__sflush_r+0x48>
 80156bc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80156be:	1ac0      	subs	r0, r0, r3
 80156c0:	2300      	movs	r3, #0
 80156c2:	4602      	mov	r2, r0
 80156c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80156c6:	6a21      	ldr	r1, [r4, #32]
 80156c8:	4628      	mov	r0, r5
 80156ca:	47b0      	blx	r6
 80156cc:	1c43      	adds	r3, r0, #1
 80156ce:	89a3      	ldrh	r3, [r4, #12]
 80156d0:	d106      	bne.n	80156e0 <__sflush_r+0x68>
 80156d2:	6829      	ldr	r1, [r5, #0]
 80156d4:	291d      	cmp	r1, #29
 80156d6:	d848      	bhi.n	801576a <__sflush_r+0xf2>
 80156d8:	4a29      	ldr	r2, [pc, #164]	; (8015780 <__sflush_r+0x108>)
 80156da:	40ca      	lsrs	r2, r1
 80156dc:	07d6      	lsls	r6, r2, #31
 80156de:	d544      	bpl.n	801576a <__sflush_r+0xf2>
 80156e0:	2200      	movs	r2, #0
 80156e2:	6062      	str	r2, [r4, #4]
 80156e4:	04d9      	lsls	r1, r3, #19
 80156e6:	6922      	ldr	r2, [r4, #16]
 80156e8:	6022      	str	r2, [r4, #0]
 80156ea:	d504      	bpl.n	80156f6 <__sflush_r+0x7e>
 80156ec:	1c42      	adds	r2, r0, #1
 80156ee:	d101      	bne.n	80156f4 <__sflush_r+0x7c>
 80156f0:	682b      	ldr	r3, [r5, #0]
 80156f2:	b903      	cbnz	r3, 80156f6 <__sflush_r+0x7e>
 80156f4:	6560      	str	r0, [r4, #84]	; 0x54
 80156f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80156f8:	602f      	str	r7, [r5, #0]
 80156fa:	2900      	cmp	r1, #0
 80156fc:	d0c9      	beq.n	8015692 <__sflush_r+0x1a>
 80156fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015702:	4299      	cmp	r1, r3
 8015704:	d002      	beq.n	801570c <__sflush_r+0x94>
 8015706:	4628      	mov	r0, r5
 8015708:	f000 fc94 	bl	8016034 <_free_r>
 801570c:	2000      	movs	r0, #0
 801570e:	6360      	str	r0, [r4, #52]	; 0x34
 8015710:	e7c0      	b.n	8015694 <__sflush_r+0x1c>
 8015712:	2301      	movs	r3, #1
 8015714:	4628      	mov	r0, r5
 8015716:	47b0      	blx	r6
 8015718:	1c41      	adds	r1, r0, #1
 801571a:	d1c8      	bne.n	80156ae <__sflush_r+0x36>
 801571c:	682b      	ldr	r3, [r5, #0]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d0c5      	beq.n	80156ae <__sflush_r+0x36>
 8015722:	2b1d      	cmp	r3, #29
 8015724:	d001      	beq.n	801572a <__sflush_r+0xb2>
 8015726:	2b16      	cmp	r3, #22
 8015728:	d101      	bne.n	801572e <__sflush_r+0xb6>
 801572a:	602f      	str	r7, [r5, #0]
 801572c:	e7b1      	b.n	8015692 <__sflush_r+0x1a>
 801572e:	89a3      	ldrh	r3, [r4, #12]
 8015730:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015734:	81a3      	strh	r3, [r4, #12]
 8015736:	e7ad      	b.n	8015694 <__sflush_r+0x1c>
 8015738:	690f      	ldr	r7, [r1, #16]
 801573a:	2f00      	cmp	r7, #0
 801573c:	d0a9      	beq.n	8015692 <__sflush_r+0x1a>
 801573e:	0793      	lsls	r3, r2, #30
 8015740:	680e      	ldr	r6, [r1, #0]
 8015742:	bf08      	it	eq
 8015744:	694b      	ldreq	r3, [r1, #20]
 8015746:	600f      	str	r7, [r1, #0]
 8015748:	bf18      	it	ne
 801574a:	2300      	movne	r3, #0
 801574c:	eba6 0807 	sub.w	r8, r6, r7
 8015750:	608b      	str	r3, [r1, #8]
 8015752:	f1b8 0f00 	cmp.w	r8, #0
 8015756:	dd9c      	ble.n	8015692 <__sflush_r+0x1a>
 8015758:	4643      	mov	r3, r8
 801575a:	463a      	mov	r2, r7
 801575c:	6a21      	ldr	r1, [r4, #32]
 801575e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015760:	4628      	mov	r0, r5
 8015762:	47b0      	blx	r6
 8015764:	2800      	cmp	r0, #0
 8015766:	dc06      	bgt.n	8015776 <__sflush_r+0xfe>
 8015768:	89a3      	ldrh	r3, [r4, #12]
 801576a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801576e:	81a3      	strh	r3, [r4, #12]
 8015770:	f04f 30ff 	mov.w	r0, #4294967295
 8015774:	e78e      	b.n	8015694 <__sflush_r+0x1c>
 8015776:	4407      	add	r7, r0
 8015778:	eba8 0800 	sub.w	r8, r8, r0
 801577c:	e7e9      	b.n	8015752 <__sflush_r+0xda>
 801577e:	bf00      	nop
 8015780:	20400001 	.word	0x20400001

08015784 <_fflush_r>:
 8015784:	b538      	push	{r3, r4, r5, lr}
 8015786:	690b      	ldr	r3, [r1, #16]
 8015788:	4605      	mov	r5, r0
 801578a:	460c      	mov	r4, r1
 801578c:	b1db      	cbz	r3, 80157c6 <_fflush_r+0x42>
 801578e:	b118      	cbz	r0, 8015798 <_fflush_r+0x14>
 8015790:	6983      	ldr	r3, [r0, #24]
 8015792:	b90b      	cbnz	r3, 8015798 <_fflush_r+0x14>
 8015794:	f000 f860 	bl	8015858 <__sinit>
 8015798:	4b0c      	ldr	r3, [pc, #48]	; (80157cc <_fflush_r+0x48>)
 801579a:	429c      	cmp	r4, r3
 801579c:	d109      	bne.n	80157b2 <_fflush_r+0x2e>
 801579e:	686c      	ldr	r4, [r5, #4]
 80157a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80157a4:	b17b      	cbz	r3, 80157c6 <_fflush_r+0x42>
 80157a6:	4621      	mov	r1, r4
 80157a8:	4628      	mov	r0, r5
 80157aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80157ae:	f7ff bf63 	b.w	8015678 <__sflush_r>
 80157b2:	4b07      	ldr	r3, [pc, #28]	; (80157d0 <_fflush_r+0x4c>)
 80157b4:	429c      	cmp	r4, r3
 80157b6:	d101      	bne.n	80157bc <_fflush_r+0x38>
 80157b8:	68ac      	ldr	r4, [r5, #8]
 80157ba:	e7f1      	b.n	80157a0 <_fflush_r+0x1c>
 80157bc:	4b05      	ldr	r3, [pc, #20]	; (80157d4 <_fflush_r+0x50>)
 80157be:	429c      	cmp	r4, r3
 80157c0:	bf08      	it	eq
 80157c2:	68ec      	ldreq	r4, [r5, #12]
 80157c4:	e7ec      	b.n	80157a0 <_fflush_r+0x1c>
 80157c6:	2000      	movs	r0, #0
 80157c8:	bd38      	pop	{r3, r4, r5, pc}
 80157ca:	bf00      	nop
 80157cc:	08019920 	.word	0x08019920
 80157d0:	08019940 	.word	0x08019940
 80157d4:	08019900 	.word	0x08019900

080157d8 <std>:
 80157d8:	2300      	movs	r3, #0
 80157da:	b510      	push	{r4, lr}
 80157dc:	4604      	mov	r4, r0
 80157de:	e9c0 3300 	strd	r3, r3, [r0]
 80157e2:	6083      	str	r3, [r0, #8]
 80157e4:	8181      	strh	r1, [r0, #12]
 80157e6:	6643      	str	r3, [r0, #100]	; 0x64
 80157e8:	81c2      	strh	r2, [r0, #14]
 80157ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80157ee:	6183      	str	r3, [r0, #24]
 80157f0:	4619      	mov	r1, r3
 80157f2:	2208      	movs	r2, #8
 80157f4:	305c      	adds	r0, #92	; 0x5c
 80157f6:	f7fe facc 	bl	8013d92 <memset>
 80157fa:	4b05      	ldr	r3, [pc, #20]	; (8015810 <std+0x38>)
 80157fc:	6263      	str	r3, [r4, #36]	; 0x24
 80157fe:	4b05      	ldr	r3, [pc, #20]	; (8015814 <std+0x3c>)
 8015800:	62a3      	str	r3, [r4, #40]	; 0x28
 8015802:	4b05      	ldr	r3, [pc, #20]	; (8015818 <std+0x40>)
 8015804:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015806:	4b05      	ldr	r3, [pc, #20]	; (801581c <std+0x44>)
 8015808:	6224      	str	r4, [r4, #32]
 801580a:	6323      	str	r3, [r4, #48]	; 0x30
 801580c:	bd10      	pop	{r4, pc}
 801580e:	bf00      	nop
 8015810:	080166c9 	.word	0x080166c9
 8015814:	080166eb 	.word	0x080166eb
 8015818:	08016723 	.word	0x08016723
 801581c:	08016747 	.word	0x08016747

08015820 <_cleanup_r>:
 8015820:	4901      	ldr	r1, [pc, #4]	; (8015828 <_cleanup_r+0x8>)
 8015822:	f000 b885 	b.w	8015930 <_fwalk_reent>
 8015826:	bf00      	nop
 8015828:	08015785 	.word	0x08015785

0801582c <__sfmoreglue>:
 801582c:	b570      	push	{r4, r5, r6, lr}
 801582e:	1e4a      	subs	r2, r1, #1
 8015830:	2568      	movs	r5, #104	; 0x68
 8015832:	4355      	muls	r5, r2
 8015834:	460e      	mov	r6, r1
 8015836:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801583a:	f000 fc49 	bl	80160d0 <_malloc_r>
 801583e:	4604      	mov	r4, r0
 8015840:	b140      	cbz	r0, 8015854 <__sfmoreglue+0x28>
 8015842:	2100      	movs	r1, #0
 8015844:	e9c0 1600 	strd	r1, r6, [r0]
 8015848:	300c      	adds	r0, #12
 801584a:	60a0      	str	r0, [r4, #8]
 801584c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015850:	f7fe fa9f 	bl	8013d92 <memset>
 8015854:	4620      	mov	r0, r4
 8015856:	bd70      	pop	{r4, r5, r6, pc}

08015858 <__sinit>:
 8015858:	6983      	ldr	r3, [r0, #24]
 801585a:	b510      	push	{r4, lr}
 801585c:	4604      	mov	r4, r0
 801585e:	bb33      	cbnz	r3, 80158ae <__sinit+0x56>
 8015860:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8015864:	6503      	str	r3, [r0, #80]	; 0x50
 8015866:	4b12      	ldr	r3, [pc, #72]	; (80158b0 <__sinit+0x58>)
 8015868:	4a12      	ldr	r2, [pc, #72]	; (80158b4 <__sinit+0x5c>)
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	6282      	str	r2, [r0, #40]	; 0x28
 801586e:	4298      	cmp	r0, r3
 8015870:	bf04      	itt	eq
 8015872:	2301      	moveq	r3, #1
 8015874:	6183      	streq	r3, [r0, #24]
 8015876:	f000 f81f 	bl	80158b8 <__sfp>
 801587a:	6060      	str	r0, [r4, #4]
 801587c:	4620      	mov	r0, r4
 801587e:	f000 f81b 	bl	80158b8 <__sfp>
 8015882:	60a0      	str	r0, [r4, #8]
 8015884:	4620      	mov	r0, r4
 8015886:	f000 f817 	bl	80158b8 <__sfp>
 801588a:	2200      	movs	r2, #0
 801588c:	60e0      	str	r0, [r4, #12]
 801588e:	2104      	movs	r1, #4
 8015890:	6860      	ldr	r0, [r4, #4]
 8015892:	f7ff ffa1 	bl	80157d8 <std>
 8015896:	2201      	movs	r2, #1
 8015898:	2109      	movs	r1, #9
 801589a:	68a0      	ldr	r0, [r4, #8]
 801589c:	f7ff ff9c 	bl	80157d8 <std>
 80158a0:	2202      	movs	r2, #2
 80158a2:	2112      	movs	r1, #18
 80158a4:	68e0      	ldr	r0, [r4, #12]
 80158a6:	f7ff ff97 	bl	80157d8 <std>
 80158aa:	2301      	movs	r3, #1
 80158ac:	61a3      	str	r3, [r4, #24]
 80158ae:	bd10      	pop	{r4, pc}
 80158b0:	080198b8 	.word	0x080198b8
 80158b4:	08015821 	.word	0x08015821

080158b8 <__sfp>:
 80158b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ba:	4b1b      	ldr	r3, [pc, #108]	; (8015928 <__sfp+0x70>)
 80158bc:	681e      	ldr	r6, [r3, #0]
 80158be:	69b3      	ldr	r3, [r6, #24]
 80158c0:	4607      	mov	r7, r0
 80158c2:	b913      	cbnz	r3, 80158ca <__sfp+0x12>
 80158c4:	4630      	mov	r0, r6
 80158c6:	f7ff ffc7 	bl	8015858 <__sinit>
 80158ca:	3648      	adds	r6, #72	; 0x48
 80158cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80158d0:	3b01      	subs	r3, #1
 80158d2:	d503      	bpl.n	80158dc <__sfp+0x24>
 80158d4:	6833      	ldr	r3, [r6, #0]
 80158d6:	b133      	cbz	r3, 80158e6 <__sfp+0x2e>
 80158d8:	6836      	ldr	r6, [r6, #0]
 80158da:	e7f7      	b.n	80158cc <__sfp+0x14>
 80158dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80158e0:	b16d      	cbz	r5, 80158fe <__sfp+0x46>
 80158e2:	3468      	adds	r4, #104	; 0x68
 80158e4:	e7f4      	b.n	80158d0 <__sfp+0x18>
 80158e6:	2104      	movs	r1, #4
 80158e8:	4638      	mov	r0, r7
 80158ea:	f7ff ff9f 	bl	801582c <__sfmoreglue>
 80158ee:	6030      	str	r0, [r6, #0]
 80158f0:	2800      	cmp	r0, #0
 80158f2:	d1f1      	bne.n	80158d8 <__sfp+0x20>
 80158f4:	230c      	movs	r3, #12
 80158f6:	603b      	str	r3, [r7, #0]
 80158f8:	4604      	mov	r4, r0
 80158fa:	4620      	mov	r0, r4
 80158fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158fe:	4b0b      	ldr	r3, [pc, #44]	; (801592c <__sfp+0x74>)
 8015900:	6665      	str	r5, [r4, #100]	; 0x64
 8015902:	e9c4 5500 	strd	r5, r5, [r4]
 8015906:	60a5      	str	r5, [r4, #8]
 8015908:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801590c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8015910:	2208      	movs	r2, #8
 8015912:	4629      	mov	r1, r5
 8015914:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015918:	f7fe fa3b 	bl	8013d92 <memset>
 801591c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8015920:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8015924:	e7e9      	b.n	80158fa <__sfp+0x42>
 8015926:	bf00      	nop
 8015928:	080198b8 	.word	0x080198b8
 801592c:	ffff0001 	.word	0xffff0001

08015930 <_fwalk_reent>:
 8015930:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015934:	4680      	mov	r8, r0
 8015936:	4689      	mov	r9, r1
 8015938:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801593c:	2600      	movs	r6, #0
 801593e:	b914      	cbnz	r4, 8015946 <_fwalk_reent+0x16>
 8015940:	4630      	mov	r0, r6
 8015942:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015946:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801594a:	3f01      	subs	r7, #1
 801594c:	d501      	bpl.n	8015952 <_fwalk_reent+0x22>
 801594e:	6824      	ldr	r4, [r4, #0]
 8015950:	e7f5      	b.n	801593e <_fwalk_reent+0xe>
 8015952:	89ab      	ldrh	r3, [r5, #12]
 8015954:	2b01      	cmp	r3, #1
 8015956:	d907      	bls.n	8015968 <_fwalk_reent+0x38>
 8015958:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801595c:	3301      	adds	r3, #1
 801595e:	d003      	beq.n	8015968 <_fwalk_reent+0x38>
 8015960:	4629      	mov	r1, r5
 8015962:	4640      	mov	r0, r8
 8015964:	47c8      	blx	r9
 8015966:	4306      	orrs	r6, r0
 8015968:	3568      	adds	r5, #104	; 0x68
 801596a:	e7ee      	b.n	801594a <_fwalk_reent+0x1a>

0801596c <_localeconv_r>:
 801596c:	4b04      	ldr	r3, [pc, #16]	; (8015980 <_localeconv_r+0x14>)
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	6a18      	ldr	r0, [r3, #32]
 8015972:	4b04      	ldr	r3, [pc, #16]	; (8015984 <_localeconv_r+0x18>)
 8015974:	2800      	cmp	r0, #0
 8015976:	bf08      	it	eq
 8015978:	4618      	moveq	r0, r3
 801597a:	30f0      	adds	r0, #240	; 0xf0
 801597c:	4770      	bx	lr
 801597e:	bf00      	nop
 8015980:	20000024 	.word	0x20000024
 8015984:	20000088 	.word	0x20000088

08015988 <__swhatbuf_r>:
 8015988:	b570      	push	{r4, r5, r6, lr}
 801598a:	460e      	mov	r6, r1
 801598c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015990:	2900      	cmp	r1, #0
 8015992:	b096      	sub	sp, #88	; 0x58
 8015994:	4614      	mov	r4, r2
 8015996:	461d      	mov	r5, r3
 8015998:	da07      	bge.n	80159aa <__swhatbuf_r+0x22>
 801599a:	2300      	movs	r3, #0
 801599c:	602b      	str	r3, [r5, #0]
 801599e:	89b3      	ldrh	r3, [r6, #12]
 80159a0:	061a      	lsls	r2, r3, #24
 80159a2:	d410      	bmi.n	80159c6 <__swhatbuf_r+0x3e>
 80159a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80159a8:	e00e      	b.n	80159c8 <__swhatbuf_r+0x40>
 80159aa:	466a      	mov	r2, sp
 80159ac:	f000 fef2 	bl	8016794 <_fstat_r>
 80159b0:	2800      	cmp	r0, #0
 80159b2:	dbf2      	blt.n	801599a <__swhatbuf_r+0x12>
 80159b4:	9a01      	ldr	r2, [sp, #4]
 80159b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80159ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80159be:	425a      	negs	r2, r3
 80159c0:	415a      	adcs	r2, r3
 80159c2:	602a      	str	r2, [r5, #0]
 80159c4:	e7ee      	b.n	80159a4 <__swhatbuf_r+0x1c>
 80159c6:	2340      	movs	r3, #64	; 0x40
 80159c8:	2000      	movs	r0, #0
 80159ca:	6023      	str	r3, [r4, #0]
 80159cc:	b016      	add	sp, #88	; 0x58
 80159ce:	bd70      	pop	{r4, r5, r6, pc}

080159d0 <__smakebuf_r>:
 80159d0:	898b      	ldrh	r3, [r1, #12]
 80159d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80159d4:	079d      	lsls	r5, r3, #30
 80159d6:	4606      	mov	r6, r0
 80159d8:	460c      	mov	r4, r1
 80159da:	d507      	bpl.n	80159ec <__smakebuf_r+0x1c>
 80159dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80159e0:	6023      	str	r3, [r4, #0]
 80159e2:	6123      	str	r3, [r4, #16]
 80159e4:	2301      	movs	r3, #1
 80159e6:	6163      	str	r3, [r4, #20]
 80159e8:	b002      	add	sp, #8
 80159ea:	bd70      	pop	{r4, r5, r6, pc}
 80159ec:	ab01      	add	r3, sp, #4
 80159ee:	466a      	mov	r2, sp
 80159f0:	f7ff ffca 	bl	8015988 <__swhatbuf_r>
 80159f4:	9900      	ldr	r1, [sp, #0]
 80159f6:	4605      	mov	r5, r0
 80159f8:	4630      	mov	r0, r6
 80159fa:	f000 fb69 	bl	80160d0 <_malloc_r>
 80159fe:	b948      	cbnz	r0, 8015a14 <__smakebuf_r+0x44>
 8015a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015a04:	059a      	lsls	r2, r3, #22
 8015a06:	d4ef      	bmi.n	80159e8 <__smakebuf_r+0x18>
 8015a08:	f023 0303 	bic.w	r3, r3, #3
 8015a0c:	f043 0302 	orr.w	r3, r3, #2
 8015a10:	81a3      	strh	r3, [r4, #12]
 8015a12:	e7e3      	b.n	80159dc <__smakebuf_r+0xc>
 8015a14:	4b0d      	ldr	r3, [pc, #52]	; (8015a4c <__smakebuf_r+0x7c>)
 8015a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8015a18:	89a3      	ldrh	r3, [r4, #12]
 8015a1a:	6020      	str	r0, [r4, #0]
 8015a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a20:	81a3      	strh	r3, [r4, #12]
 8015a22:	9b00      	ldr	r3, [sp, #0]
 8015a24:	6163      	str	r3, [r4, #20]
 8015a26:	9b01      	ldr	r3, [sp, #4]
 8015a28:	6120      	str	r0, [r4, #16]
 8015a2a:	b15b      	cbz	r3, 8015a44 <__smakebuf_r+0x74>
 8015a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015a30:	4630      	mov	r0, r6
 8015a32:	f000 fec1 	bl	80167b8 <_isatty_r>
 8015a36:	b128      	cbz	r0, 8015a44 <__smakebuf_r+0x74>
 8015a38:	89a3      	ldrh	r3, [r4, #12]
 8015a3a:	f023 0303 	bic.w	r3, r3, #3
 8015a3e:	f043 0301 	orr.w	r3, r3, #1
 8015a42:	81a3      	strh	r3, [r4, #12]
 8015a44:	89a3      	ldrh	r3, [r4, #12]
 8015a46:	431d      	orrs	r5, r3
 8015a48:	81a5      	strh	r5, [r4, #12]
 8015a4a:	e7cd      	b.n	80159e8 <__smakebuf_r+0x18>
 8015a4c:	08015821 	.word	0x08015821

08015a50 <malloc>:
 8015a50:	4b02      	ldr	r3, [pc, #8]	; (8015a5c <malloc+0xc>)
 8015a52:	4601      	mov	r1, r0
 8015a54:	6818      	ldr	r0, [r3, #0]
 8015a56:	f000 bb3b 	b.w	80160d0 <_malloc_r>
 8015a5a:	bf00      	nop
 8015a5c:	20000024 	.word	0x20000024

08015a60 <_Balloc>:
 8015a60:	b570      	push	{r4, r5, r6, lr}
 8015a62:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015a64:	4604      	mov	r4, r0
 8015a66:	460e      	mov	r6, r1
 8015a68:	b93d      	cbnz	r5, 8015a7a <_Balloc+0x1a>
 8015a6a:	2010      	movs	r0, #16
 8015a6c:	f7ff fff0 	bl	8015a50 <malloc>
 8015a70:	6260      	str	r0, [r4, #36]	; 0x24
 8015a72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015a76:	6005      	str	r5, [r0, #0]
 8015a78:	60c5      	str	r5, [r0, #12]
 8015a7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015a7c:	68eb      	ldr	r3, [r5, #12]
 8015a7e:	b183      	cbz	r3, 8015aa2 <_Balloc+0x42>
 8015a80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015a82:	68db      	ldr	r3, [r3, #12]
 8015a84:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015a88:	b9b8      	cbnz	r0, 8015aba <_Balloc+0x5a>
 8015a8a:	2101      	movs	r1, #1
 8015a8c:	fa01 f506 	lsl.w	r5, r1, r6
 8015a90:	1d6a      	adds	r2, r5, #5
 8015a92:	0092      	lsls	r2, r2, #2
 8015a94:	4620      	mov	r0, r4
 8015a96:	f000 fabf 	bl	8016018 <_calloc_r>
 8015a9a:	b160      	cbz	r0, 8015ab6 <_Balloc+0x56>
 8015a9c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8015aa0:	e00e      	b.n	8015ac0 <_Balloc+0x60>
 8015aa2:	2221      	movs	r2, #33	; 0x21
 8015aa4:	2104      	movs	r1, #4
 8015aa6:	4620      	mov	r0, r4
 8015aa8:	f000 fab6 	bl	8016018 <_calloc_r>
 8015aac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015aae:	60e8      	str	r0, [r5, #12]
 8015ab0:	68db      	ldr	r3, [r3, #12]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d1e4      	bne.n	8015a80 <_Balloc+0x20>
 8015ab6:	2000      	movs	r0, #0
 8015ab8:	bd70      	pop	{r4, r5, r6, pc}
 8015aba:	6802      	ldr	r2, [r0, #0]
 8015abc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8015ac0:	2300      	movs	r3, #0
 8015ac2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8015ac6:	e7f7      	b.n	8015ab8 <_Balloc+0x58>

08015ac8 <_Bfree>:
 8015ac8:	b570      	push	{r4, r5, r6, lr}
 8015aca:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8015acc:	4606      	mov	r6, r0
 8015ace:	460d      	mov	r5, r1
 8015ad0:	b93c      	cbnz	r4, 8015ae2 <_Bfree+0x1a>
 8015ad2:	2010      	movs	r0, #16
 8015ad4:	f7ff ffbc 	bl	8015a50 <malloc>
 8015ad8:	6270      	str	r0, [r6, #36]	; 0x24
 8015ada:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015ade:	6004      	str	r4, [r0, #0]
 8015ae0:	60c4      	str	r4, [r0, #12]
 8015ae2:	b13d      	cbz	r5, 8015af4 <_Bfree+0x2c>
 8015ae4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8015ae6:	686a      	ldr	r2, [r5, #4]
 8015ae8:	68db      	ldr	r3, [r3, #12]
 8015aea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8015aee:	6029      	str	r1, [r5, #0]
 8015af0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8015af4:	bd70      	pop	{r4, r5, r6, pc}

08015af6 <__multadd>:
 8015af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015afa:	690d      	ldr	r5, [r1, #16]
 8015afc:	461f      	mov	r7, r3
 8015afe:	4606      	mov	r6, r0
 8015b00:	460c      	mov	r4, r1
 8015b02:	f101 0c14 	add.w	ip, r1, #20
 8015b06:	2300      	movs	r3, #0
 8015b08:	f8dc 0000 	ldr.w	r0, [ip]
 8015b0c:	b281      	uxth	r1, r0
 8015b0e:	fb02 7101 	mla	r1, r2, r1, r7
 8015b12:	0c0f      	lsrs	r7, r1, #16
 8015b14:	0c00      	lsrs	r0, r0, #16
 8015b16:	fb02 7000 	mla	r0, r2, r0, r7
 8015b1a:	b289      	uxth	r1, r1
 8015b1c:	3301      	adds	r3, #1
 8015b1e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8015b22:	429d      	cmp	r5, r3
 8015b24:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015b28:	f84c 1b04 	str.w	r1, [ip], #4
 8015b2c:	dcec      	bgt.n	8015b08 <__multadd+0x12>
 8015b2e:	b1d7      	cbz	r7, 8015b66 <__multadd+0x70>
 8015b30:	68a3      	ldr	r3, [r4, #8]
 8015b32:	42ab      	cmp	r3, r5
 8015b34:	dc12      	bgt.n	8015b5c <__multadd+0x66>
 8015b36:	6861      	ldr	r1, [r4, #4]
 8015b38:	4630      	mov	r0, r6
 8015b3a:	3101      	adds	r1, #1
 8015b3c:	f7ff ff90 	bl	8015a60 <_Balloc>
 8015b40:	6922      	ldr	r2, [r4, #16]
 8015b42:	3202      	adds	r2, #2
 8015b44:	f104 010c 	add.w	r1, r4, #12
 8015b48:	4680      	mov	r8, r0
 8015b4a:	0092      	lsls	r2, r2, #2
 8015b4c:	300c      	adds	r0, #12
 8015b4e:	f7fe f915 	bl	8013d7c <memcpy>
 8015b52:	4621      	mov	r1, r4
 8015b54:	4630      	mov	r0, r6
 8015b56:	f7ff ffb7 	bl	8015ac8 <_Bfree>
 8015b5a:	4644      	mov	r4, r8
 8015b5c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8015b60:	3501      	adds	r5, #1
 8015b62:	615f      	str	r7, [r3, #20]
 8015b64:	6125      	str	r5, [r4, #16]
 8015b66:	4620      	mov	r0, r4
 8015b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015b6c <__hi0bits>:
 8015b6c:	0c02      	lsrs	r2, r0, #16
 8015b6e:	0412      	lsls	r2, r2, #16
 8015b70:	4603      	mov	r3, r0
 8015b72:	b9b2      	cbnz	r2, 8015ba2 <__hi0bits+0x36>
 8015b74:	0403      	lsls	r3, r0, #16
 8015b76:	2010      	movs	r0, #16
 8015b78:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015b7c:	bf04      	itt	eq
 8015b7e:	021b      	lsleq	r3, r3, #8
 8015b80:	3008      	addeq	r0, #8
 8015b82:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8015b86:	bf04      	itt	eq
 8015b88:	011b      	lsleq	r3, r3, #4
 8015b8a:	3004      	addeq	r0, #4
 8015b8c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015b90:	bf04      	itt	eq
 8015b92:	009b      	lsleq	r3, r3, #2
 8015b94:	3002      	addeq	r0, #2
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	db06      	blt.n	8015ba8 <__hi0bits+0x3c>
 8015b9a:	005b      	lsls	r3, r3, #1
 8015b9c:	d503      	bpl.n	8015ba6 <__hi0bits+0x3a>
 8015b9e:	3001      	adds	r0, #1
 8015ba0:	4770      	bx	lr
 8015ba2:	2000      	movs	r0, #0
 8015ba4:	e7e8      	b.n	8015b78 <__hi0bits+0xc>
 8015ba6:	2020      	movs	r0, #32
 8015ba8:	4770      	bx	lr

08015baa <__lo0bits>:
 8015baa:	6803      	ldr	r3, [r0, #0]
 8015bac:	f013 0207 	ands.w	r2, r3, #7
 8015bb0:	4601      	mov	r1, r0
 8015bb2:	d00b      	beq.n	8015bcc <__lo0bits+0x22>
 8015bb4:	07da      	lsls	r2, r3, #31
 8015bb6:	d423      	bmi.n	8015c00 <__lo0bits+0x56>
 8015bb8:	0798      	lsls	r0, r3, #30
 8015bba:	bf49      	itett	mi
 8015bbc:	085b      	lsrmi	r3, r3, #1
 8015bbe:	089b      	lsrpl	r3, r3, #2
 8015bc0:	2001      	movmi	r0, #1
 8015bc2:	600b      	strmi	r3, [r1, #0]
 8015bc4:	bf5c      	itt	pl
 8015bc6:	600b      	strpl	r3, [r1, #0]
 8015bc8:	2002      	movpl	r0, #2
 8015bca:	4770      	bx	lr
 8015bcc:	b298      	uxth	r0, r3
 8015bce:	b9a8      	cbnz	r0, 8015bfc <__lo0bits+0x52>
 8015bd0:	0c1b      	lsrs	r3, r3, #16
 8015bd2:	2010      	movs	r0, #16
 8015bd4:	f013 0fff 	tst.w	r3, #255	; 0xff
 8015bd8:	bf04      	itt	eq
 8015bda:	0a1b      	lsreq	r3, r3, #8
 8015bdc:	3008      	addeq	r0, #8
 8015bde:	071a      	lsls	r2, r3, #28
 8015be0:	bf04      	itt	eq
 8015be2:	091b      	lsreq	r3, r3, #4
 8015be4:	3004      	addeq	r0, #4
 8015be6:	079a      	lsls	r2, r3, #30
 8015be8:	bf04      	itt	eq
 8015bea:	089b      	lsreq	r3, r3, #2
 8015bec:	3002      	addeq	r0, #2
 8015bee:	07da      	lsls	r2, r3, #31
 8015bf0:	d402      	bmi.n	8015bf8 <__lo0bits+0x4e>
 8015bf2:	085b      	lsrs	r3, r3, #1
 8015bf4:	d006      	beq.n	8015c04 <__lo0bits+0x5a>
 8015bf6:	3001      	adds	r0, #1
 8015bf8:	600b      	str	r3, [r1, #0]
 8015bfa:	4770      	bx	lr
 8015bfc:	4610      	mov	r0, r2
 8015bfe:	e7e9      	b.n	8015bd4 <__lo0bits+0x2a>
 8015c00:	2000      	movs	r0, #0
 8015c02:	4770      	bx	lr
 8015c04:	2020      	movs	r0, #32
 8015c06:	4770      	bx	lr

08015c08 <__i2b>:
 8015c08:	b510      	push	{r4, lr}
 8015c0a:	460c      	mov	r4, r1
 8015c0c:	2101      	movs	r1, #1
 8015c0e:	f7ff ff27 	bl	8015a60 <_Balloc>
 8015c12:	2201      	movs	r2, #1
 8015c14:	6144      	str	r4, [r0, #20]
 8015c16:	6102      	str	r2, [r0, #16]
 8015c18:	bd10      	pop	{r4, pc}

08015c1a <__multiply>:
 8015c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c1e:	4614      	mov	r4, r2
 8015c20:	690a      	ldr	r2, [r1, #16]
 8015c22:	6923      	ldr	r3, [r4, #16]
 8015c24:	429a      	cmp	r2, r3
 8015c26:	bfb8      	it	lt
 8015c28:	460b      	movlt	r3, r1
 8015c2a:	4688      	mov	r8, r1
 8015c2c:	bfbc      	itt	lt
 8015c2e:	46a0      	movlt	r8, r4
 8015c30:	461c      	movlt	r4, r3
 8015c32:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8015c36:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8015c3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8015c3e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8015c42:	eb07 0609 	add.w	r6, r7, r9
 8015c46:	42b3      	cmp	r3, r6
 8015c48:	bfb8      	it	lt
 8015c4a:	3101      	addlt	r1, #1
 8015c4c:	f7ff ff08 	bl	8015a60 <_Balloc>
 8015c50:	f100 0514 	add.w	r5, r0, #20
 8015c54:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8015c58:	462b      	mov	r3, r5
 8015c5a:	2200      	movs	r2, #0
 8015c5c:	4573      	cmp	r3, lr
 8015c5e:	d316      	bcc.n	8015c8e <__multiply+0x74>
 8015c60:	f104 0214 	add.w	r2, r4, #20
 8015c64:	f108 0114 	add.w	r1, r8, #20
 8015c68:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8015c6c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8015c70:	9300      	str	r3, [sp, #0]
 8015c72:	9b00      	ldr	r3, [sp, #0]
 8015c74:	9201      	str	r2, [sp, #4]
 8015c76:	4293      	cmp	r3, r2
 8015c78:	d80c      	bhi.n	8015c94 <__multiply+0x7a>
 8015c7a:	2e00      	cmp	r6, #0
 8015c7c:	dd03      	ble.n	8015c86 <__multiply+0x6c>
 8015c7e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d05d      	beq.n	8015d42 <__multiply+0x128>
 8015c86:	6106      	str	r6, [r0, #16]
 8015c88:	b003      	add	sp, #12
 8015c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c8e:	f843 2b04 	str.w	r2, [r3], #4
 8015c92:	e7e3      	b.n	8015c5c <__multiply+0x42>
 8015c94:	f8b2 b000 	ldrh.w	fp, [r2]
 8015c98:	f1bb 0f00 	cmp.w	fp, #0
 8015c9c:	d023      	beq.n	8015ce6 <__multiply+0xcc>
 8015c9e:	4689      	mov	r9, r1
 8015ca0:	46ac      	mov	ip, r5
 8015ca2:	f04f 0800 	mov.w	r8, #0
 8015ca6:	f859 4b04 	ldr.w	r4, [r9], #4
 8015caa:	f8dc a000 	ldr.w	sl, [ip]
 8015cae:	b2a3      	uxth	r3, r4
 8015cb0:	fa1f fa8a 	uxth.w	sl, sl
 8015cb4:	fb0b a303 	mla	r3, fp, r3, sl
 8015cb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015cbc:	f8dc 4000 	ldr.w	r4, [ip]
 8015cc0:	4443      	add	r3, r8
 8015cc2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015cc6:	fb0b 840a 	mla	r4, fp, sl, r8
 8015cca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015cce:	46e2      	mov	sl, ip
 8015cd0:	b29b      	uxth	r3, r3
 8015cd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015cd6:	454f      	cmp	r7, r9
 8015cd8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015cdc:	f84a 3b04 	str.w	r3, [sl], #4
 8015ce0:	d82b      	bhi.n	8015d3a <__multiply+0x120>
 8015ce2:	f8cc 8004 	str.w	r8, [ip, #4]
 8015ce6:	9b01      	ldr	r3, [sp, #4]
 8015ce8:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015cec:	3204      	adds	r2, #4
 8015cee:	f1ba 0f00 	cmp.w	sl, #0
 8015cf2:	d020      	beq.n	8015d36 <__multiply+0x11c>
 8015cf4:	682b      	ldr	r3, [r5, #0]
 8015cf6:	4689      	mov	r9, r1
 8015cf8:	46a8      	mov	r8, r5
 8015cfa:	f04f 0b00 	mov.w	fp, #0
 8015cfe:	f8b9 c000 	ldrh.w	ip, [r9]
 8015d02:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8015d06:	fb0a 440c 	mla	r4, sl, ip, r4
 8015d0a:	445c      	add	r4, fp
 8015d0c:	46c4      	mov	ip, r8
 8015d0e:	b29b      	uxth	r3, r3
 8015d10:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8015d14:	f84c 3b04 	str.w	r3, [ip], #4
 8015d18:	f859 3b04 	ldr.w	r3, [r9], #4
 8015d1c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8015d20:	0c1b      	lsrs	r3, r3, #16
 8015d22:	fb0a b303 	mla	r3, sl, r3, fp
 8015d26:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8015d2a:	454f      	cmp	r7, r9
 8015d2c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8015d30:	d805      	bhi.n	8015d3e <__multiply+0x124>
 8015d32:	f8c8 3004 	str.w	r3, [r8, #4]
 8015d36:	3504      	adds	r5, #4
 8015d38:	e79b      	b.n	8015c72 <__multiply+0x58>
 8015d3a:	46d4      	mov	ip, sl
 8015d3c:	e7b3      	b.n	8015ca6 <__multiply+0x8c>
 8015d3e:	46e0      	mov	r8, ip
 8015d40:	e7dd      	b.n	8015cfe <__multiply+0xe4>
 8015d42:	3e01      	subs	r6, #1
 8015d44:	e799      	b.n	8015c7a <__multiply+0x60>
	...

08015d48 <__pow5mult>:
 8015d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015d4c:	4615      	mov	r5, r2
 8015d4e:	f012 0203 	ands.w	r2, r2, #3
 8015d52:	4606      	mov	r6, r0
 8015d54:	460f      	mov	r7, r1
 8015d56:	d007      	beq.n	8015d68 <__pow5mult+0x20>
 8015d58:	3a01      	subs	r2, #1
 8015d5a:	4c21      	ldr	r4, [pc, #132]	; (8015de0 <__pow5mult+0x98>)
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8015d62:	f7ff fec8 	bl	8015af6 <__multadd>
 8015d66:	4607      	mov	r7, r0
 8015d68:	10ad      	asrs	r5, r5, #2
 8015d6a:	d035      	beq.n	8015dd8 <__pow5mult+0x90>
 8015d6c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8015d6e:	b93c      	cbnz	r4, 8015d80 <__pow5mult+0x38>
 8015d70:	2010      	movs	r0, #16
 8015d72:	f7ff fe6d 	bl	8015a50 <malloc>
 8015d76:	6270      	str	r0, [r6, #36]	; 0x24
 8015d78:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015d7c:	6004      	str	r4, [r0, #0]
 8015d7e:	60c4      	str	r4, [r0, #12]
 8015d80:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015d84:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8015d88:	b94c      	cbnz	r4, 8015d9e <__pow5mult+0x56>
 8015d8a:	f240 2171 	movw	r1, #625	; 0x271
 8015d8e:	4630      	mov	r0, r6
 8015d90:	f7ff ff3a 	bl	8015c08 <__i2b>
 8015d94:	2300      	movs	r3, #0
 8015d96:	f8c8 0008 	str.w	r0, [r8, #8]
 8015d9a:	4604      	mov	r4, r0
 8015d9c:	6003      	str	r3, [r0, #0]
 8015d9e:	f04f 0800 	mov.w	r8, #0
 8015da2:	07eb      	lsls	r3, r5, #31
 8015da4:	d50a      	bpl.n	8015dbc <__pow5mult+0x74>
 8015da6:	4639      	mov	r1, r7
 8015da8:	4622      	mov	r2, r4
 8015daa:	4630      	mov	r0, r6
 8015dac:	f7ff ff35 	bl	8015c1a <__multiply>
 8015db0:	4639      	mov	r1, r7
 8015db2:	4681      	mov	r9, r0
 8015db4:	4630      	mov	r0, r6
 8015db6:	f7ff fe87 	bl	8015ac8 <_Bfree>
 8015dba:	464f      	mov	r7, r9
 8015dbc:	106d      	asrs	r5, r5, #1
 8015dbe:	d00b      	beq.n	8015dd8 <__pow5mult+0x90>
 8015dc0:	6820      	ldr	r0, [r4, #0]
 8015dc2:	b938      	cbnz	r0, 8015dd4 <__pow5mult+0x8c>
 8015dc4:	4622      	mov	r2, r4
 8015dc6:	4621      	mov	r1, r4
 8015dc8:	4630      	mov	r0, r6
 8015dca:	f7ff ff26 	bl	8015c1a <__multiply>
 8015dce:	6020      	str	r0, [r4, #0]
 8015dd0:	f8c0 8000 	str.w	r8, [r0]
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	e7e4      	b.n	8015da2 <__pow5mult+0x5a>
 8015dd8:	4638      	mov	r0, r7
 8015dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015dde:	bf00      	nop
 8015de0:	08019a50 	.word	0x08019a50

08015de4 <__lshift>:
 8015de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015de8:	460c      	mov	r4, r1
 8015dea:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015dee:	6923      	ldr	r3, [r4, #16]
 8015df0:	6849      	ldr	r1, [r1, #4]
 8015df2:	eb0a 0903 	add.w	r9, sl, r3
 8015df6:	68a3      	ldr	r3, [r4, #8]
 8015df8:	4607      	mov	r7, r0
 8015dfa:	4616      	mov	r6, r2
 8015dfc:	f109 0501 	add.w	r5, r9, #1
 8015e00:	42ab      	cmp	r3, r5
 8015e02:	db32      	blt.n	8015e6a <__lshift+0x86>
 8015e04:	4638      	mov	r0, r7
 8015e06:	f7ff fe2b 	bl	8015a60 <_Balloc>
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	4680      	mov	r8, r0
 8015e0e:	f100 0114 	add.w	r1, r0, #20
 8015e12:	461a      	mov	r2, r3
 8015e14:	4553      	cmp	r3, sl
 8015e16:	db2b      	blt.n	8015e70 <__lshift+0x8c>
 8015e18:	6920      	ldr	r0, [r4, #16]
 8015e1a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015e1e:	f104 0314 	add.w	r3, r4, #20
 8015e22:	f016 021f 	ands.w	r2, r6, #31
 8015e26:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8015e2a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8015e2e:	d025      	beq.n	8015e7c <__lshift+0x98>
 8015e30:	f1c2 0e20 	rsb	lr, r2, #32
 8015e34:	2000      	movs	r0, #0
 8015e36:	681e      	ldr	r6, [r3, #0]
 8015e38:	468a      	mov	sl, r1
 8015e3a:	4096      	lsls	r6, r2
 8015e3c:	4330      	orrs	r0, r6
 8015e3e:	f84a 0b04 	str.w	r0, [sl], #4
 8015e42:	f853 0b04 	ldr.w	r0, [r3], #4
 8015e46:	459c      	cmp	ip, r3
 8015e48:	fa20 f00e 	lsr.w	r0, r0, lr
 8015e4c:	d814      	bhi.n	8015e78 <__lshift+0x94>
 8015e4e:	6048      	str	r0, [r1, #4]
 8015e50:	b108      	cbz	r0, 8015e56 <__lshift+0x72>
 8015e52:	f109 0502 	add.w	r5, r9, #2
 8015e56:	3d01      	subs	r5, #1
 8015e58:	4638      	mov	r0, r7
 8015e5a:	f8c8 5010 	str.w	r5, [r8, #16]
 8015e5e:	4621      	mov	r1, r4
 8015e60:	f7ff fe32 	bl	8015ac8 <_Bfree>
 8015e64:	4640      	mov	r0, r8
 8015e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e6a:	3101      	adds	r1, #1
 8015e6c:	005b      	lsls	r3, r3, #1
 8015e6e:	e7c7      	b.n	8015e00 <__lshift+0x1c>
 8015e70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8015e74:	3301      	adds	r3, #1
 8015e76:	e7cd      	b.n	8015e14 <__lshift+0x30>
 8015e78:	4651      	mov	r1, sl
 8015e7a:	e7dc      	b.n	8015e36 <__lshift+0x52>
 8015e7c:	3904      	subs	r1, #4
 8015e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8015e82:	f841 2f04 	str.w	r2, [r1, #4]!
 8015e86:	459c      	cmp	ip, r3
 8015e88:	d8f9      	bhi.n	8015e7e <__lshift+0x9a>
 8015e8a:	e7e4      	b.n	8015e56 <__lshift+0x72>

08015e8c <__mcmp>:
 8015e8c:	6903      	ldr	r3, [r0, #16]
 8015e8e:	690a      	ldr	r2, [r1, #16]
 8015e90:	1a9b      	subs	r3, r3, r2
 8015e92:	b530      	push	{r4, r5, lr}
 8015e94:	d10c      	bne.n	8015eb0 <__mcmp+0x24>
 8015e96:	0092      	lsls	r2, r2, #2
 8015e98:	3014      	adds	r0, #20
 8015e9a:	3114      	adds	r1, #20
 8015e9c:	1884      	adds	r4, r0, r2
 8015e9e:	4411      	add	r1, r2
 8015ea0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015ea4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8015ea8:	4295      	cmp	r5, r2
 8015eaa:	d003      	beq.n	8015eb4 <__mcmp+0x28>
 8015eac:	d305      	bcc.n	8015eba <__mcmp+0x2e>
 8015eae:	2301      	movs	r3, #1
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	bd30      	pop	{r4, r5, pc}
 8015eb4:	42a0      	cmp	r0, r4
 8015eb6:	d3f3      	bcc.n	8015ea0 <__mcmp+0x14>
 8015eb8:	e7fa      	b.n	8015eb0 <__mcmp+0x24>
 8015eba:	f04f 33ff 	mov.w	r3, #4294967295
 8015ebe:	e7f7      	b.n	8015eb0 <__mcmp+0x24>

08015ec0 <__mdiff>:
 8015ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015ec4:	460d      	mov	r5, r1
 8015ec6:	4607      	mov	r7, r0
 8015ec8:	4611      	mov	r1, r2
 8015eca:	4628      	mov	r0, r5
 8015ecc:	4614      	mov	r4, r2
 8015ece:	f7ff ffdd 	bl	8015e8c <__mcmp>
 8015ed2:	1e06      	subs	r6, r0, #0
 8015ed4:	d108      	bne.n	8015ee8 <__mdiff+0x28>
 8015ed6:	4631      	mov	r1, r6
 8015ed8:	4638      	mov	r0, r7
 8015eda:	f7ff fdc1 	bl	8015a60 <_Balloc>
 8015ede:	2301      	movs	r3, #1
 8015ee0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015ee8:	bfa4      	itt	ge
 8015eea:	4623      	movge	r3, r4
 8015eec:	462c      	movge	r4, r5
 8015eee:	4638      	mov	r0, r7
 8015ef0:	6861      	ldr	r1, [r4, #4]
 8015ef2:	bfa6      	itte	ge
 8015ef4:	461d      	movge	r5, r3
 8015ef6:	2600      	movge	r6, #0
 8015ef8:	2601      	movlt	r6, #1
 8015efa:	f7ff fdb1 	bl	8015a60 <_Balloc>
 8015efe:	692b      	ldr	r3, [r5, #16]
 8015f00:	60c6      	str	r6, [r0, #12]
 8015f02:	6926      	ldr	r6, [r4, #16]
 8015f04:	f105 0914 	add.w	r9, r5, #20
 8015f08:	f104 0214 	add.w	r2, r4, #20
 8015f0c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015f10:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015f14:	f100 0514 	add.w	r5, r0, #20
 8015f18:	f04f 0e00 	mov.w	lr, #0
 8015f1c:	f852 ab04 	ldr.w	sl, [r2], #4
 8015f20:	f859 4b04 	ldr.w	r4, [r9], #4
 8015f24:	fa1e f18a 	uxtah	r1, lr, sl
 8015f28:	b2a3      	uxth	r3, r4
 8015f2a:	1ac9      	subs	r1, r1, r3
 8015f2c:	0c23      	lsrs	r3, r4, #16
 8015f2e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8015f32:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8015f36:	b289      	uxth	r1, r1
 8015f38:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8015f3c:	45c8      	cmp	r8, r9
 8015f3e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8015f42:	4694      	mov	ip, r2
 8015f44:	f845 3b04 	str.w	r3, [r5], #4
 8015f48:	d8e8      	bhi.n	8015f1c <__mdiff+0x5c>
 8015f4a:	45bc      	cmp	ip, r7
 8015f4c:	d304      	bcc.n	8015f58 <__mdiff+0x98>
 8015f4e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8015f52:	b183      	cbz	r3, 8015f76 <__mdiff+0xb6>
 8015f54:	6106      	str	r6, [r0, #16]
 8015f56:	e7c5      	b.n	8015ee4 <__mdiff+0x24>
 8015f58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8015f5c:	fa1e f381 	uxtah	r3, lr, r1
 8015f60:	141a      	asrs	r2, r3, #16
 8015f62:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8015f66:	b29b      	uxth	r3, r3
 8015f68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015f6c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8015f70:	f845 3b04 	str.w	r3, [r5], #4
 8015f74:	e7e9      	b.n	8015f4a <__mdiff+0x8a>
 8015f76:	3e01      	subs	r6, #1
 8015f78:	e7e9      	b.n	8015f4e <__mdiff+0x8e>

08015f7a <__d2b>:
 8015f7a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015f7e:	460e      	mov	r6, r1
 8015f80:	2101      	movs	r1, #1
 8015f82:	ec59 8b10 	vmov	r8, r9, d0
 8015f86:	4615      	mov	r5, r2
 8015f88:	f7ff fd6a 	bl	8015a60 <_Balloc>
 8015f8c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015f90:	4607      	mov	r7, r0
 8015f92:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015f96:	bb34      	cbnz	r4, 8015fe6 <__d2b+0x6c>
 8015f98:	9301      	str	r3, [sp, #4]
 8015f9a:	f1b8 0300 	subs.w	r3, r8, #0
 8015f9e:	d027      	beq.n	8015ff0 <__d2b+0x76>
 8015fa0:	a802      	add	r0, sp, #8
 8015fa2:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015fa6:	f7ff fe00 	bl	8015baa <__lo0bits>
 8015faa:	9900      	ldr	r1, [sp, #0]
 8015fac:	b1f0      	cbz	r0, 8015fec <__d2b+0x72>
 8015fae:	9a01      	ldr	r2, [sp, #4]
 8015fb0:	f1c0 0320 	rsb	r3, r0, #32
 8015fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8015fb8:	430b      	orrs	r3, r1
 8015fba:	40c2      	lsrs	r2, r0
 8015fbc:	617b      	str	r3, [r7, #20]
 8015fbe:	9201      	str	r2, [sp, #4]
 8015fc0:	9b01      	ldr	r3, [sp, #4]
 8015fc2:	61bb      	str	r3, [r7, #24]
 8015fc4:	2b00      	cmp	r3, #0
 8015fc6:	bf14      	ite	ne
 8015fc8:	2102      	movne	r1, #2
 8015fca:	2101      	moveq	r1, #1
 8015fcc:	6139      	str	r1, [r7, #16]
 8015fce:	b1c4      	cbz	r4, 8016002 <__d2b+0x88>
 8015fd0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015fd4:	4404      	add	r4, r0
 8015fd6:	6034      	str	r4, [r6, #0]
 8015fd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015fdc:	6028      	str	r0, [r5, #0]
 8015fde:	4638      	mov	r0, r7
 8015fe0:	b003      	add	sp, #12
 8015fe2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015fea:	e7d5      	b.n	8015f98 <__d2b+0x1e>
 8015fec:	6179      	str	r1, [r7, #20]
 8015fee:	e7e7      	b.n	8015fc0 <__d2b+0x46>
 8015ff0:	a801      	add	r0, sp, #4
 8015ff2:	f7ff fdda 	bl	8015baa <__lo0bits>
 8015ff6:	9b01      	ldr	r3, [sp, #4]
 8015ff8:	617b      	str	r3, [r7, #20]
 8015ffa:	2101      	movs	r1, #1
 8015ffc:	6139      	str	r1, [r7, #16]
 8015ffe:	3020      	adds	r0, #32
 8016000:	e7e5      	b.n	8015fce <__d2b+0x54>
 8016002:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8016006:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801600a:	6030      	str	r0, [r6, #0]
 801600c:	6918      	ldr	r0, [r3, #16]
 801600e:	f7ff fdad 	bl	8015b6c <__hi0bits>
 8016012:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8016016:	e7e1      	b.n	8015fdc <__d2b+0x62>

08016018 <_calloc_r>:
 8016018:	b538      	push	{r3, r4, r5, lr}
 801601a:	fb02 f401 	mul.w	r4, r2, r1
 801601e:	4621      	mov	r1, r4
 8016020:	f000 f856 	bl	80160d0 <_malloc_r>
 8016024:	4605      	mov	r5, r0
 8016026:	b118      	cbz	r0, 8016030 <_calloc_r+0x18>
 8016028:	4622      	mov	r2, r4
 801602a:	2100      	movs	r1, #0
 801602c:	f7fd feb1 	bl	8013d92 <memset>
 8016030:	4628      	mov	r0, r5
 8016032:	bd38      	pop	{r3, r4, r5, pc}

08016034 <_free_r>:
 8016034:	b538      	push	{r3, r4, r5, lr}
 8016036:	4605      	mov	r5, r0
 8016038:	2900      	cmp	r1, #0
 801603a:	d045      	beq.n	80160c8 <_free_r+0x94>
 801603c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016040:	1f0c      	subs	r4, r1, #4
 8016042:	2b00      	cmp	r3, #0
 8016044:	bfb8      	it	lt
 8016046:	18e4      	addlt	r4, r4, r3
 8016048:	f000 fc03 	bl	8016852 <__malloc_lock>
 801604c:	4a1f      	ldr	r2, [pc, #124]	; (80160cc <_free_r+0x98>)
 801604e:	6813      	ldr	r3, [r2, #0]
 8016050:	4610      	mov	r0, r2
 8016052:	b933      	cbnz	r3, 8016062 <_free_r+0x2e>
 8016054:	6063      	str	r3, [r4, #4]
 8016056:	6014      	str	r4, [r2, #0]
 8016058:	4628      	mov	r0, r5
 801605a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801605e:	f000 bbf9 	b.w	8016854 <__malloc_unlock>
 8016062:	42a3      	cmp	r3, r4
 8016064:	d90c      	bls.n	8016080 <_free_r+0x4c>
 8016066:	6821      	ldr	r1, [r4, #0]
 8016068:	1862      	adds	r2, r4, r1
 801606a:	4293      	cmp	r3, r2
 801606c:	bf04      	itt	eq
 801606e:	681a      	ldreq	r2, [r3, #0]
 8016070:	685b      	ldreq	r3, [r3, #4]
 8016072:	6063      	str	r3, [r4, #4]
 8016074:	bf04      	itt	eq
 8016076:	1852      	addeq	r2, r2, r1
 8016078:	6022      	streq	r2, [r4, #0]
 801607a:	6004      	str	r4, [r0, #0]
 801607c:	e7ec      	b.n	8016058 <_free_r+0x24>
 801607e:	4613      	mov	r3, r2
 8016080:	685a      	ldr	r2, [r3, #4]
 8016082:	b10a      	cbz	r2, 8016088 <_free_r+0x54>
 8016084:	42a2      	cmp	r2, r4
 8016086:	d9fa      	bls.n	801607e <_free_r+0x4a>
 8016088:	6819      	ldr	r1, [r3, #0]
 801608a:	1858      	adds	r0, r3, r1
 801608c:	42a0      	cmp	r0, r4
 801608e:	d10b      	bne.n	80160a8 <_free_r+0x74>
 8016090:	6820      	ldr	r0, [r4, #0]
 8016092:	4401      	add	r1, r0
 8016094:	1858      	adds	r0, r3, r1
 8016096:	4282      	cmp	r2, r0
 8016098:	6019      	str	r1, [r3, #0]
 801609a:	d1dd      	bne.n	8016058 <_free_r+0x24>
 801609c:	6810      	ldr	r0, [r2, #0]
 801609e:	6852      	ldr	r2, [r2, #4]
 80160a0:	605a      	str	r2, [r3, #4]
 80160a2:	4401      	add	r1, r0
 80160a4:	6019      	str	r1, [r3, #0]
 80160a6:	e7d7      	b.n	8016058 <_free_r+0x24>
 80160a8:	d902      	bls.n	80160b0 <_free_r+0x7c>
 80160aa:	230c      	movs	r3, #12
 80160ac:	602b      	str	r3, [r5, #0]
 80160ae:	e7d3      	b.n	8016058 <_free_r+0x24>
 80160b0:	6820      	ldr	r0, [r4, #0]
 80160b2:	1821      	adds	r1, r4, r0
 80160b4:	428a      	cmp	r2, r1
 80160b6:	bf04      	itt	eq
 80160b8:	6811      	ldreq	r1, [r2, #0]
 80160ba:	6852      	ldreq	r2, [r2, #4]
 80160bc:	6062      	str	r2, [r4, #4]
 80160be:	bf04      	itt	eq
 80160c0:	1809      	addeq	r1, r1, r0
 80160c2:	6021      	streq	r1, [r4, #0]
 80160c4:	605c      	str	r4, [r3, #4]
 80160c6:	e7c7      	b.n	8016058 <_free_r+0x24>
 80160c8:	bd38      	pop	{r3, r4, r5, pc}
 80160ca:	bf00      	nop
 80160cc:	2002e064 	.word	0x2002e064

080160d0 <_malloc_r>:
 80160d0:	b570      	push	{r4, r5, r6, lr}
 80160d2:	1ccd      	adds	r5, r1, #3
 80160d4:	f025 0503 	bic.w	r5, r5, #3
 80160d8:	3508      	adds	r5, #8
 80160da:	2d0c      	cmp	r5, #12
 80160dc:	bf38      	it	cc
 80160de:	250c      	movcc	r5, #12
 80160e0:	2d00      	cmp	r5, #0
 80160e2:	4606      	mov	r6, r0
 80160e4:	db01      	blt.n	80160ea <_malloc_r+0x1a>
 80160e6:	42a9      	cmp	r1, r5
 80160e8:	d903      	bls.n	80160f2 <_malloc_r+0x22>
 80160ea:	230c      	movs	r3, #12
 80160ec:	6033      	str	r3, [r6, #0]
 80160ee:	2000      	movs	r0, #0
 80160f0:	bd70      	pop	{r4, r5, r6, pc}
 80160f2:	f000 fbae 	bl	8016852 <__malloc_lock>
 80160f6:	4a21      	ldr	r2, [pc, #132]	; (801617c <_malloc_r+0xac>)
 80160f8:	6814      	ldr	r4, [r2, #0]
 80160fa:	4621      	mov	r1, r4
 80160fc:	b991      	cbnz	r1, 8016124 <_malloc_r+0x54>
 80160fe:	4c20      	ldr	r4, [pc, #128]	; (8016180 <_malloc_r+0xb0>)
 8016100:	6823      	ldr	r3, [r4, #0]
 8016102:	b91b      	cbnz	r3, 801610c <_malloc_r+0x3c>
 8016104:	4630      	mov	r0, r6
 8016106:	f000 facf 	bl	80166a8 <_sbrk_r>
 801610a:	6020      	str	r0, [r4, #0]
 801610c:	4629      	mov	r1, r5
 801610e:	4630      	mov	r0, r6
 8016110:	f000 faca 	bl	80166a8 <_sbrk_r>
 8016114:	1c43      	adds	r3, r0, #1
 8016116:	d124      	bne.n	8016162 <_malloc_r+0x92>
 8016118:	230c      	movs	r3, #12
 801611a:	6033      	str	r3, [r6, #0]
 801611c:	4630      	mov	r0, r6
 801611e:	f000 fb99 	bl	8016854 <__malloc_unlock>
 8016122:	e7e4      	b.n	80160ee <_malloc_r+0x1e>
 8016124:	680b      	ldr	r3, [r1, #0]
 8016126:	1b5b      	subs	r3, r3, r5
 8016128:	d418      	bmi.n	801615c <_malloc_r+0x8c>
 801612a:	2b0b      	cmp	r3, #11
 801612c:	d90f      	bls.n	801614e <_malloc_r+0x7e>
 801612e:	600b      	str	r3, [r1, #0]
 8016130:	50cd      	str	r5, [r1, r3]
 8016132:	18cc      	adds	r4, r1, r3
 8016134:	4630      	mov	r0, r6
 8016136:	f000 fb8d 	bl	8016854 <__malloc_unlock>
 801613a:	f104 000b 	add.w	r0, r4, #11
 801613e:	1d23      	adds	r3, r4, #4
 8016140:	f020 0007 	bic.w	r0, r0, #7
 8016144:	1ac3      	subs	r3, r0, r3
 8016146:	d0d3      	beq.n	80160f0 <_malloc_r+0x20>
 8016148:	425a      	negs	r2, r3
 801614a:	50e2      	str	r2, [r4, r3]
 801614c:	e7d0      	b.n	80160f0 <_malloc_r+0x20>
 801614e:	428c      	cmp	r4, r1
 8016150:	684b      	ldr	r3, [r1, #4]
 8016152:	bf16      	itet	ne
 8016154:	6063      	strne	r3, [r4, #4]
 8016156:	6013      	streq	r3, [r2, #0]
 8016158:	460c      	movne	r4, r1
 801615a:	e7eb      	b.n	8016134 <_malloc_r+0x64>
 801615c:	460c      	mov	r4, r1
 801615e:	6849      	ldr	r1, [r1, #4]
 8016160:	e7cc      	b.n	80160fc <_malloc_r+0x2c>
 8016162:	1cc4      	adds	r4, r0, #3
 8016164:	f024 0403 	bic.w	r4, r4, #3
 8016168:	42a0      	cmp	r0, r4
 801616a:	d005      	beq.n	8016178 <_malloc_r+0xa8>
 801616c:	1a21      	subs	r1, r4, r0
 801616e:	4630      	mov	r0, r6
 8016170:	f000 fa9a 	bl	80166a8 <_sbrk_r>
 8016174:	3001      	adds	r0, #1
 8016176:	d0cf      	beq.n	8016118 <_malloc_r+0x48>
 8016178:	6025      	str	r5, [r4, #0]
 801617a:	e7db      	b.n	8016134 <_malloc_r+0x64>
 801617c:	2002e064 	.word	0x2002e064
 8016180:	2002e068 	.word	0x2002e068

08016184 <__ssputs_r>:
 8016184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016188:	688e      	ldr	r6, [r1, #8]
 801618a:	429e      	cmp	r6, r3
 801618c:	4682      	mov	sl, r0
 801618e:	460c      	mov	r4, r1
 8016190:	4690      	mov	r8, r2
 8016192:	4699      	mov	r9, r3
 8016194:	d837      	bhi.n	8016206 <__ssputs_r+0x82>
 8016196:	898a      	ldrh	r2, [r1, #12]
 8016198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801619c:	d031      	beq.n	8016202 <__ssputs_r+0x7e>
 801619e:	6825      	ldr	r5, [r4, #0]
 80161a0:	6909      	ldr	r1, [r1, #16]
 80161a2:	1a6f      	subs	r7, r5, r1
 80161a4:	6965      	ldr	r5, [r4, #20]
 80161a6:	2302      	movs	r3, #2
 80161a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80161ac:	fb95 f5f3 	sdiv	r5, r5, r3
 80161b0:	f109 0301 	add.w	r3, r9, #1
 80161b4:	443b      	add	r3, r7
 80161b6:	429d      	cmp	r5, r3
 80161b8:	bf38      	it	cc
 80161ba:	461d      	movcc	r5, r3
 80161bc:	0553      	lsls	r3, r2, #21
 80161be:	d530      	bpl.n	8016222 <__ssputs_r+0x9e>
 80161c0:	4629      	mov	r1, r5
 80161c2:	f7ff ff85 	bl	80160d0 <_malloc_r>
 80161c6:	4606      	mov	r6, r0
 80161c8:	b950      	cbnz	r0, 80161e0 <__ssputs_r+0x5c>
 80161ca:	230c      	movs	r3, #12
 80161cc:	f8ca 3000 	str.w	r3, [sl]
 80161d0:	89a3      	ldrh	r3, [r4, #12]
 80161d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80161d6:	81a3      	strh	r3, [r4, #12]
 80161d8:	f04f 30ff 	mov.w	r0, #4294967295
 80161dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161e0:	463a      	mov	r2, r7
 80161e2:	6921      	ldr	r1, [r4, #16]
 80161e4:	f7fd fdca 	bl	8013d7c <memcpy>
 80161e8:	89a3      	ldrh	r3, [r4, #12]
 80161ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80161ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80161f2:	81a3      	strh	r3, [r4, #12]
 80161f4:	6126      	str	r6, [r4, #16]
 80161f6:	6165      	str	r5, [r4, #20]
 80161f8:	443e      	add	r6, r7
 80161fa:	1bed      	subs	r5, r5, r7
 80161fc:	6026      	str	r6, [r4, #0]
 80161fe:	60a5      	str	r5, [r4, #8]
 8016200:	464e      	mov	r6, r9
 8016202:	454e      	cmp	r6, r9
 8016204:	d900      	bls.n	8016208 <__ssputs_r+0x84>
 8016206:	464e      	mov	r6, r9
 8016208:	4632      	mov	r2, r6
 801620a:	4641      	mov	r1, r8
 801620c:	6820      	ldr	r0, [r4, #0]
 801620e:	f000 fb07 	bl	8016820 <memmove>
 8016212:	68a3      	ldr	r3, [r4, #8]
 8016214:	1b9b      	subs	r3, r3, r6
 8016216:	60a3      	str	r3, [r4, #8]
 8016218:	6823      	ldr	r3, [r4, #0]
 801621a:	441e      	add	r6, r3
 801621c:	6026      	str	r6, [r4, #0]
 801621e:	2000      	movs	r0, #0
 8016220:	e7dc      	b.n	80161dc <__ssputs_r+0x58>
 8016222:	462a      	mov	r2, r5
 8016224:	f000 fb17 	bl	8016856 <_realloc_r>
 8016228:	4606      	mov	r6, r0
 801622a:	2800      	cmp	r0, #0
 801622c:	d1e2      	bne.n	80161f4 <__ssputs_r+0x70>
 801622e:	6921      	ldr	r1, [r4, #16]
 8016230:	4650      	mov	r0, sl
 8016232:	f7ff feff 	bl	8016034 <_free_r>
 8016236:	e7c8      	b.n	80161ca <__ssputs_r+0x46>

08016238 <_svfiprintf_r>:
 8016238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801623c:	461d      	mov	r5, r3
 801623e:	898b      	ldrh	r3, [r1, #12]
 8016240:	061f      	lsls	r7, r3, #24
 8016242:	b09d      	sub	sp, #116	; 0x74
 8016244:	4680      	mov	r8, r0
 8016246:	460c      	mov	r4, r1
 8016248:	4616      	mov	r6, r2
 801624a:	d50f      	bpl.n	801626c <_svfiprintf_r+0x34>
 801624c:	690b      	ldr	r3, [r1, #16]
 801624e:	b96b      	cbnz	r3, 801626c <_svfiprintf_r+0x34>
 8016250:	2140      	movs	r1, #64	; 0x40
 8016252:	f7ff ff3d 	bl	80160d0 <_malloc_r>
 8016256:	6020      	str	r0, [r4, #0]
 8016258:	6120      	str	r0, [r4, #16]
 801625a:	b928      	cbnz	r0, 8016268 <_svfiprintf_r+0x30>
 801625c:	230c      	movs	r3, #12
 801625e:	f8c8 3000 	str.w	r3, [r8]
 8016262:	f04f 30ff 	mov.w	r0, #4294967295
 8016266:	e0c8      	b.n	80163fa <_svfiprintf_r+0x1c2>
 8016268:	2340      	movs	r3, #64	; 0x40
 801626a:	6163      	str	r3, [r4, #20]
 801626c:	2300      	movs	r3, #0
 801626e:	9309      	str	r3, [sp, #36]	; 0x24
 8016270:	2320      	movs	r3, #32
 8016272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016276:	2330      	movs	r3, #48	; 0x30
 8016278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801627c:	9503      	str	r5, [sp, #12]
 801627e:	f04f 0b01 	mov.w	fp, #1
 8016282:	4637      	mov	r7, r6
 8016284:	463d      	mov	r5, r7
 8016286:	f815 3b01 	ldrb.w	r3, [r5], #1
 801628a:	b10b      	cbz	r3, 8016290 <_svfiprintf_r+0x58>
 801628c:	2b25      	cmp	r3, #37	; 0x25
 801628e:	d13e      	bne.n	801630e <_svfiprintf_r+0xd6>
 8016290:	ebb7 0a06 	subs.w	sl, r7, r6
 8016294:	d00b      	beq.n	80162ae <_svfiprintf_r+0x76>
 8016296:	4653      	mov	r3, sl
 8016298:	4632      	mov	r2, r6
 801629a:	4621      	mov	r1, r4
 801629c:	4640      	mov	r0, r8
 801629e:	f7ff ff71 	bl	8016184 <__ssputs_r>
 80162a2:	3001      	adds	r0, #1
 80162a4:	f000 80a4 	beq.w	80163f0 <_svfiprintf_r+0x1b8>
 80162a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80162aa:	4453      	add	r3, sl
 80162ac:	9309      	str	r3, [sp, #36]	; 0x24
 80162ae:	783b      	ldrb	r3, [r7, #0]
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	f000 809d 	beq.w	80163f0 <_svfiprintf_r+0x1b8>
 80162b6:	2300      	movs	r3, #0
 80162b8:	f04f 32ff 	mov.w	r2, #4294967295
 80162bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80162c0:	9304      	str	r3, [sp, #16]
 80162c2:	9307      	str	r3, [sp, #28]
 80162c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80162c8:	931a      	str	r3, [sp, #104]	; 0x68
 80162ca:	462f      	mov	r7, r5
 80162cc:	2205      	movs	r2, #5
 80162ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 80162d2:	4850      	ldr	r0, [pc, #320]	; (8016414 <_svfiprintf_r+0x1dc>)
 80162d4:	f7e9 ff5c 	bl	8000190 <memchr>
 80162d8:	9b04      	ldr	r3, [sp, #16]
 80162da:	b9d0      	cbnz	r0, 8016312 <_svfiprintf_r+0xda>
 80162dc:	06d9      	lsls	r1, r3, #27
 80162de:	bf44      	itt	mi
 80162e0:	2220      	movmi	r2, #32
 80162e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80162e6:	071a      	lsls	r2, r3, #28
 80162e8:	bf44      	itt	mi
 80162ea:	222b      	movmi	r2, #43	; 0x2b
 80162ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80162f0:	782a      	ldrb	r2, [r5, #0]
 80162f2:	2a2a      	cmp	r2, #42	; 0x2a
 80162f4:	d015      	beq.n	8016322 <_svfiprintf_r+0xea>
 80162f6:	9a07      	ldr	r2, [sp, #28]
 80162f8:	462f      	mov	r7, r5
 80162fa:	2000      	movs	r0, #0
 80162fc:	250a      	movs	r5, #10
 80162fe:	4639      	mov	r1, r7
 8016300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016304:	3b30      	subs	r3, #48	; 0x30
 8016306:	2b09      	cmp	r3, #9
 8016308:	d94d      	bls.n	80163a6 <_svfiprintf_r+0x16e>
 801630a:	b1b8      	cbz	r0, 801633c <_svfiprintf_r+0x104>
 801630c:	e00f      	b.n	801632e <_svfiprintf_r+0xf6>
 801630e:	462f      	mov	r7, r5
 8016310:	e7b8      	b.n	8016284 <_svfiprintf_r+0x4c>
 8016312:	4a40      	ldr	r2, [pc, #256]	; (8016414 <_svfiprintf_r+0x1dc>)
 8016314:	1a80      	subs	r0, r0, r2
 8016316:	fa0b f000 	lsl.w	r0, fp, r0
 801631a:	4318      	orrs	r0, r3
 801631c:	9004      	str	r0, [sp, #16]
 801631e:	463d      	mov	r5, r7
 8016320:	e7d3      	b.n	80162ca <_svfiprintf_r+0x92>
 8016322:	9a03      	ldr	r2, [sp, #12]
 8016324:	1d11      	adds	r1, r2, #4
 8016326:	6812      	ldr	r2, [r2, #0]
 8016328:	9103      	str	r1, [sp, #12]
 801632a:	2a00      	cmp	r2, #0
 801632c:	db01      	blt.n	8016332 <_svfiprintf_r+0xfa>
 801632e:	9207      	str	r2, [sp, #28]
 8016330:	e004      	b.n	801633c <_svfiprintf_r+0x104>
 8016332:	4252      	negs	r2, r2
 8016334:	f043 0302 	orr.w	r3, r3, #2
 8016338:	9207      	str	r2, [sp, #28]
 801633a:	9304      	str	r3, [sp, #16]
 801633c:	783b      	ldrb	r3, [r7, #0]
 801633e:	2b2e      	cmp	r3, #46	; 0x2e
 8016340:	d10c      	bne.n	801635c <_svfiprintf_r+0x124>
 8016342:	787b      	ldrb	r3, [r7, #1]
 8016344:	2b2a      	cmp	r3, #42	; 0x2a
 8016346:	d133      	bne.n	80163b0 <_svfiprintf_r+0x178>
 8016348:	9b03      	ldr	r3, [sp, #12]
 801634a:	1d1a      	adds	r2, r3, #4
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	9203      	str	r2, [sp, #12]
 8016350:	2b00      	cmp	r3, #0
 8016352:	bfb8      	it	lt
 8016354:	f04f 33ff 	movlt.w	r3, #4294967295
 8016358:	3702      	adds	r7, #2
 801635a:	9305      	str	r3, [sp, #20]
 801635c:	4d2e      	ldr	r5, [pc, #184]	; (8016418 <_svfiprintf_r+0x1e0>)
 801635e:	7839      	ldrb	r1, [r7, #0]
 8016360:	2203      	movs	r2, #3
 8016362:	4628      	mov	r0, r5
 8016364:	f7e9 ff14 	bl	8000190 <memchr>
 8016368:	b138      	cbz	r0, 801637a <_svfiprintf_r+0x142>
 801636a:	2340      	movs	r3, #64	; 0x40
 801636c:	1b40      	subs	r0, r0, r5
 801636e:	fa03 f000 	lsl.w	r0, r3, r0
 8016372:	9b04      	ldr	r3, [sp, #16]
 8016374:	4303      	orrs	r3, r0
 8016376:	3701      	adds	r7, #1
 8016378:	9304      	str	r3, [sp, #16]
 801637a:	7839      	ldrb	r1, [r7, #0]
 801637c:	4827      	ldr	r0, [pc, #156]	; (801641c <_svfiprintf_r+0x1e4>)
 801637e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016382:	2206      	movs	r2, #6
 8016384:	1c7e      	adds	r6, r7, #1
 8016386:	f7e9 ff03 	bl	8000190 <memchr>
 801638a:	2800      	cmp	r0, #0
 801638c:	d038      	beq.n	8016400 <_svfiprintf_r+0x1c8>
 801638e:	4b24      	ldr	r3, [pc, #144]	; (8016420 <_svfiprintf_r+0x1e8>)
 8016390:	bb13      	cbnz	r3, 80163d8 <_svfiprintf_r+0x1a0>
 8016392:	9b03      	ldr	r3, [sp, #12]
 8016394:	3307      	adds	r3, #7
 8016396:	f023 0307 	bic.w	r3, r3, #7
 801639a:	3308      	adds	r3, #8
 801639c:	9303      	str	r3, [sp, #12]
 801639e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163a0:	444b      	add	r3, r9
 80163a2:	9309      	str	r3, [sp, #36]	; 0x24
 80163a4:	e76d      	b.n	8016282 <_svfiprintf_r+0x4a>
 80163a6:	fb05 3202 	mla	r2, r5, r2, r3
 80163aa:	2001      	movs	r0, #1
 80163ac:	460f      	mov	r7, r1
 80163ae:	e7a6      	b.n	80162fe <_svfiprintf_r+0xc6>
 80163b0:	2300      	movs	r3, #0
 80163b2:	3701      	adds	r7, #1
 80163b4:	9305      	str	r3, [sp, #20]
 80163b6:	4619      	mov	r1, r3
 80163b8:	250a      	movs	r5, #10
 80163ba:	4638      	mov	r0, r7
 80163bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80163c0:	3a30      	subs	r2, #48	; 0x30
 80163c2:	2a09      	cmp	r2, #9
 80163c4:	d903      	bls.n	80163ce <_svfiprintf_r+0x196>
 80163c6:	2b00      	cmp	r3, #0
 80163c8:	d0c8      	beq.n	801635c <_svfiprintf_r+0x124>
 80163ca:	9105      	str	r1, [sp, #20]
 80163cc:	e7c6      	b.n	801635c <_svfiprintf_r+0x124>
 80163ce:	fb05 2101 	mla	r1, r5, r1, r2
 80163d2:	2301      	movs	r3, #1
 80163d4:	4607      	mov	r7, r0
 80163d6:	e7f0      	b.n	80163ba <_svfiprintf_r+0x182>
 80163d8:	ab03      	add	r3, sp, #12
 80163da:	9300      	str	r3, [sp, #0]
 80163dc:	4622      	mov	r2, r4
 80163de:	4b11      	ldr	r3, [pc, #68]	; (8016424 <_svfiprintf_r+0x1ec>)
 80163e0:	a904      	add	r1, sp, #16
 80163e2:	4640      	mov	r0, r8
 80163e4:	f7fd fd72 	bl	8013ecc <_printf_float>
 80163e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80163ec:	4681      	mov	r9, r0
 80163ee:	d1d6      	bne.n	801639e <_svfiprintf_r+0x166>
 80163f0:	89a3      	ldrh	r3, [r4, #12]
 80163f2:	065b      	lsls	r3, r3, #25
 80163f4:	f53f af35 	bmi.w	8016262 <_svfiprintf_r+0x2a>
 80163f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80163fa:	b01d      	add	sp, #116	; 0x74
 80163fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016400:	ab03      	add	r3, sp, #12
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	4622      	mov	r2, r4
 8016406:	4b07      	ldr	r3, [pc, #28]	; (8016424 <_svfiprintf_r+0x1ec>)
 8016408:	a904      	add	r1, sp, #16
 801640a:	4640      	mov	r0, r8
 801640c:	f7fe f814 	bl	8014438 <_printf_i>
 8016410:	e7ea      	b.n	80163e8 <_svfiprintf_r+0x1b0>
 8016412:	bf00      	nop
 8016414:	08019a5c 	.word	0x08019a5c
 8016418:	08019a62 	.word	0x08019a62
 801641c:	08019a66 	.word	0x08019a66
 8016420:	08013ecd 	.word	0x08013ecd
 8016424:	08016185 	.word	0x08016185

08016428 <__sfputc_r>:
 8016428:	6893      	ldr	r3, [r2, #8]
 801642a:	3b01      	subs	r3, #1
 801642c:	2b00      	cmp	r3, #0
 801642e:	b410      	push	{r4}
 8016430:	6093      	str	r3, [r2, #8]
 8016432:	da08      	bge.n	8016446 <__sfputc_r+0x1e>
 8016434:	6994      	ldr	r4, [r2, #24]
 8016436:	42a3      	cmp	r3, r4
 8016438:	db01      	blt.n	801643e <__sfputc_r+0x16>
 801643a:	290a      	cmp	r1, #10
 801643c:	d103      	bne.n	8016446 <__sfputc_r+0x1e>
 801643e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016442:	f7fe ba15 	b.w	8014870 <__swbuf_r>
 8016446:	6813      	ldr	r3, [r2, #0]
 8016448:	1c58      	adds	r0, r3, #1
 801644a:	6010      	str	r0, [r2, #0]
 801644c:	7019      	strb	r1, [r3, #0]
 801644e:	4608      	mov	r0, r1
 8016450:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016454:	4770      	bx	lr

08016456 <__sfputs_r>:
 8016456:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016458:	4606      	mov	r6, r0
 801645a:	460f      	mov	r7, r1
 801645c:	4614      	mov	r4, r2
 801645e:	18d5      	adds	r5, r2, r3
 8016460:	42ac      	cmp	r4, r5
 8016462:	d101      	bne.n	8016468 <__sfputs_r+0x12>
 8016464:	2000      	movs	r0, #0
 8016466:	e007      	b.n	8016478 <__sfputs_r+0x22>
 8016468:	463a      	mov	r2, r7
 801646a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801646e:	4630      	mov	r0, r6
 8016470:	f7ff ffda 	bl	8016428 <__sfputc_r>
 8016474:	1c43      	adds	r3, r0, #1
 8016476:	d1f3      	bne.n	8016460 <__sfputs_r+0xa>
 8016478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801647c <_vfiprintf_r>:
 801647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016480:	460c      	mov	r4, r1
 8016482:	b09d      	sub	sp, #116	; 0x74
 8016484:	4617      	mov	r7, r2
 8016486:	461d      	mov	r5, r3
 8016488:	4606      	mov	r6, r0
 801648a:	b118      	cbz	r0, 8016494 <_vfiprintf_r+0x18>
 801648c:	6983      	ldr	r3, [r0, #24]
 801648e:	b90b      	cbnz	r3, 8016494 <_vfiprintf_r+0x18>
 8016490:	f7ff f9e2 	bl	8015858 <__sinit>
 8016494:	4b7c      	ldr	r3, [pc, #496]	; (8016688 <_vfiprintf_r+0x20c>)
 8016496:	429c      	cmp	r4, r3
 8016498:	d158      	bne.n	801654c <_vfiprintf_r+0xd0>
 801649a:	6874      	ldr	r4, [r6, #4]
 801649c:	89a3      	ldrh	r3, [r4, #12]
 801649e:	0718      	lsls	r0, r3, #28
 80164a0:	d55e      	bpl.n	8016560 <_vfiprintf_r+0xe4>
 80164a2:	6923      	ldr	r3, [r4, #16]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d05b      	beq.n	8016560 <_vfiprintf_r+0xe4>
 80164a8:	2300      	movs	r3, #0
 80164aa:	9309      	str	r3, [sp, #36]	; 0x24
 80164ac:	2320      	movs	r3, #32
 80164ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80164b2:	2330      	movs	r3, #48	; 0x30
 80164b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80164b8:	9503      	str	r5, [sp, #12]
 80164ba:	f04f 0b01 	mov.w	fp, #1
 80164be:	46b8      	mov	r8, r7
 80164c0:	4645      	mov	r5, r8
 80164c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80164c6:	b10b      	cbz	r3, 80164cc <_vfiprintf_r+0x50>
 80164c8:	2b25      	cmp	r3, #37	; 0x25
 80164ca:	d154      	bne.n	8016576 <_vfiprintf_r+0xfa>
 80164cc:	ebb8 0a07 	subs.w	sl, r8, r7
 80164d0:	d00b      	beq.n	80164ea <_vfiprintf_r+0x6e>
 80164d2:	4653      	mov	r3, sl
 80164d4:	463a      	mov	r2, r7
 80164d6:	4621      	mov	r1, r4
 80164d8:	4630      	mov	r0, r6
 80164da:	f7ff ffbc 	bl	8016456 <__sfputs_r>
 80164de:	3001      	adds	r0, #1
 80164e0:	f000 80c2 	beq.w	8016668 <_vfiprintf_r+0x1ec>
 80164e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80164e6:	4453      	add	r3, sl
 80164e8:	9309      	str	r3, [sp, #36]	; 0x24
 80164ea:	f898 3000 	ldrb.w	r3, [r8]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	f000 80ba 	beq.w	8016668 <_vfiprintf_r+0x1ec>
 80164f4:	2300      	movs	r3, #0
 80164f6:	f04f 32ff 	mov.w	r2, #4294967295
 80164fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164fe:	9304      	str	r3, [sp, #16]
 8016500:	9307      	str	r3, [sp, #28]
 8016502:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016506:	931a      	str	r3, [sp, #104]	; 0x68
 8016508:	46a8      	mov	r8, r5
 801650a:	2205      	movs	r2, #5
 801650c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8016510:	485e      	ldr	r0, [pc, #376]	; (801668c <_vfiprintf_r+0x210>)
 8016512:	f7e9 fe3d 	bl	8000190 <memchr>
 8016516:	9b04      	ldr	r3, [sp, #16]
 8016518:	bb78      	cbnz	r0, 801657a <_vfiprintf_r+0xfe>
 801651a:	06d9      	lsls	r1, r3, #27
 801651c:	bf44      	itt	mi
 801651e:	2220      	movmi	r2, #32
 8016520:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016524:	071a      	lsls	r2, r3, #28
 8016526:	bf44      	itt	mi
 8016528:	222b      	movmi	r2, #43	; 0x2b
 801652a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801652e:	782a      	ldrb	r2, [r5, #0]
 8016530:	2a2a      	cmp	r2, #42	; 0x2a
 8016532:	d02a      	beq.n	801658a <_vfiprintf_r+0x10e>
 8016534:	9a07      	ldr	r2, [sp, #28]
 8016536:	46a8      	mov	r8, r5
 8016538:	2000      	movs	r0, #0
 801653a:	250a      	movs	r5, #10
 801653c:	4641      	mov	r1, r8
 801653e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016542:	3b30      	subs	r3, #48	; 0x30
 8016544:	2b09      	cmp	r3, #9
 8016546:	d969      	bls.n	801661c <_vfiprintf_r+0x1a0>
 8016548:	b360      	cbz	r0, 80165a4 <_vfiprintf_r+0x128>
 801654a:	e024      	b.n	8016596 <_vfiprintf_r+0x11a>
 801654c:	4b50      	ldr	r3, [pc, #320]	; (8016690 <_vfiprintf_r+0x214>)
 801654e:	429c      	cmp	r4, r3
 8016550:	d101      	bne.n	8016556 <_vfiprintf_r+0xda>
 8016552:	68b4      	ldr	r4, [r6, #8]
 8016554:	e7a2      	b.n	801649c <_vfiprintf_r+0x20>
 8016556:	4b4f      	ldr	r3, [pc, #316]	; (8016694 <_vfiprintf_r+0x218>)
 8016558:	429c      	cmp	r4, r3
 801655a:	bf08      	it	eq
 801655c:	68f4      	ldreq	r4, [r6, #12]
 801655e:	e79d      	b.n	801649c <_vfiprintf_r+0x20>
 8016560:	4621      	mov	r1, r4
 8016562:	4630      	mov	r0, r6
 8016564:	f7fe f9d6 	bl	8014914 <__swsetup_r>
 8016568:	2800      	cmp	r0, #0
 801656a:	d09d      	beq.n	80164a8 <_vfiprintf_r+0x2c>
 801656c:	f04f 30ff 	mov.w	r0, #4294967295
 8016570:	b01d      	add	sp, #116	; 0x74
 8016572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016576:	46a8      	mov	r8, r5
 8016578:	e7a2      	b.n	80164c0 <_vfiprintf_r+0x44>
 801657a:	4a44      	ldr	r2, [pc, #272]	; (801668c <_vfiprintf_r+0x210>)
 801657c:	1a80      	subs	r0, r0, r2
 801657e:	fa0b f000 	lsl.w	r0, fp, r0
 8016582:	4318      	orrs	r0, r3
 8016584:	9004      	str	r0, [sp, #16]
 8016586:	4645      	mov	r5, r8
 8016588:	e7be      	b.n	8016508 <_vfiprintf_r+0x8c>
 801658a:	9a03      	ldr	r2, [sp, #12]
 801658c:	1d11      	adds	r1, r2, #4
 801658e:	6812      	ldr	r2, [r2, #0]
 8016590:	9103      	str	r1, [sp, #12]
 8016592:	2a00      	cmp	r2, #0
 8016594:	db01      	blt.n	801659a <_vfiprintf_r+0x11e>
 8016596:	9207      	str	r2, [sp, #28]
 8016598:	e004      	b.n	80165a4 <_vfiprintf_r+0x128>
 801659a:	4252      	negs	r2, r2
 801659c:	f043 0302 	orr.w	r3, r3, #2
 80165a0:	9207      	str	r2, [sp, #28]
 80165a2:	9304      	str	r3, [sp, #16]
 80165a4:	f898 3000 	ldrb.w	r3, [r8]
 80165a8:	2b2e      	cmp	r3, #46	; 0x2e
 80165aa:	d10e      	bne.n	80165ca <_vfiprintf_r+0x14e>
 80165ac:	f898 3001 	ldrb.w	r3, [r8, #1]
 80165b0:	2b2a      	cmp	r3, #42	; 0x2a
 80165b2:	d138      	bne.n	8016626 <_vfiprintf_r+0x1aa>
 80165b4:	9b03      	ldr	r3, [sp, #12]
 80165b6:	1d1a      	adds	r2, r3, #4
 80165b8:	681b      	ldr	r3, [r3, #0]
 80165ba:	9203      	str	r2, [sp, #12]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	bfb8      	it	lt
 80165c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80165c4:	f108 0802 	add.w	r8, r8, #2
 80165c8:	9305      	str	r3, [sp, #20]
 80165ca:	4d33      	ldr	r5, [pc, #204]	; (8016698 <_vfiprintf_r+0x21c>)
 80165cc:	f898 1000 	ldrb.w	r1, [r8]
 80165d0:	2203      	movs	r2, #3
 80165d2:	4628      	mov	r0, r5
 80165d4:	f7e9 fddc 	bl	8000190 <memchr>
 80165d8:	b140      	cbz	r0, 80165ec <_vfiprintf_r+0x170>
 80165da:	2340      	movs	r3, #64	; 0x40
 80165dc:	1b40      	subs	r0, r0, r5
 80165de:	fa03 f000 	lsl.w	r0, r3, r0
 80165e2:	9b04      	ldr	r3, [sp, #16]
 80165e4:	4303      	orrs	r3, r0
 80165e6:	f108 0801 	add.w	r8, r8, #1
 80165ea:	9304      	str	r3, [sp, #16]
 80165ec:	f898 1000 	ldrb.w	r1, [r8]
 80165f0:	482a      	ldr	r0, [pc, #168]	; (801669c <_vfiprintf_r+0x220>)
 80165f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80165f6:	2206      	movs	r2, #6
 80165f8:	f108 0701 	add.w	r7, r8, #1
 80165fc:	f7e9 fdc8 	bl	8000190 <memchr>
 8016600:	2800      	cmp	r0, #0
 8016602:	d037      	beq.n	8016674 <_vfiprintf_r+0x1f8>
 8016604:	4b26      	ldr	r3, [pc, #152]	; (80166a0 <_vfiprintf_r+0x224>)
 8016606:	bb1b      	cbnz	r3, 8016650 <_vfiprintf_r+0x1d4>
 8016608:	9b03      	ldr	r3, [sp, #12]
 801660a:	3307      	adds	r3, #7
 801660c:	f023 0307 	bic.w	r3, r3, #7
 8016610:	3308      	adds	r3, #8
 8016612:	9303      	str	r3, [sp, #12]
 8016614:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016616:	444b      	add	r3, r9
 8016618:	9309      	str	r3, [sp, #36]	; 0x24
 801661a:	e750      	b.n	80164be <_vfiprintf_r+0x42>
 801661c:	fb05 3202 	mla	r2, r5, r2, r3
 8016620:	2001      	movs	r0, #1
 8016622:	4688      	mov	r8, r1
 8016624:	e78a      	b.n	801653c <_vfiprintf_r+0xc0>
 8016626:	2300      	movs	r3, #0
 8016628:	f108 0801 	add.w	r8, r8, #1
 801662c:	9305      	str	r3, [sp, #20]
 801662e:	4619      	mov	r1, r3
 8016630:	250a      	movs	r5, #10
 8016632:	4640      	mov	r0, r8
 8016634:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016638:	3a30      	subs	r2, #48	; 0x30
 801663a:	2a09      	cmp	r2, #9
 801663c:	d903      	bls.n	8016646 <_vfiprintf_r+0x1ca>
 801663e:	2b00      	cmp	r3, #0
 8016640:	d0c3      	beq.n	80165ca <_vfiprintf_r+0x14e>
 8016642:	9105      	str	r1, [sp, #20]
 8016644:	e7c1      	b.n	80165ca <_vfiprintf_r+0x14e>
 8016646:	fb05 2101 	mla	r1, r5, r1, r2
 801664a:	2301      	movs	r3, #1
 801664c:	4680      	mov	r8, r0
 801664e:	e7f0      	b.n	8016632 <_vfiprintf_r+0x1b6>
 8016650:	ab03      	add	r3, sp, #12
 8016652:	9300      	str	r3, [sp, #0]
 8016654:	4622      	mov	r2, r4
 8016656:	4b13      	ldr	r3, [pc, #76]	; (80166a4 <_vfiprintf_r+0x228>)
 8016658:	a904      	add	r1, sp, #16
 801665a:	4630      	mov	r0, r6
 801665c:	f7fd fc36 	bl	8013ecc <_printf_float>
 8016660:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016664:	4681      	mov	r9, r0
 8016666:	d1d5      	bne.n	8016614 <_vfiprintf_r+0x198>
 8016668:	89a3      	ldrh	r3, [r4, #12]
 801666a:	065b      	lsls	r3, r3, #25
 801666c:	f53f af7e 	bmi.w	801656c <_vfiprintf_r+0xf0>
 8016670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016672:	e77d      	b.n	8016570 <_vfiprintf_r+0xf4>
 8016674:	ab03      	add	r3, sp, #12
 8016676:	9300      	str	r3, [sp, #0]
 8016678:	4622      	mov	r2, r4
 801667a:	4b0a      	ldr	r3, [pc, #40]	; (80166a4 <_vfiprintf_r+0x228>)
 801667c:	a904      	add	r1, sp, #16
 801667e:	4630      	mov	r0, r6
 8016680:	f7fd feda 	bl	8014438 <_printf_i>
 8016684:	e7ec      	b.n	8016660 <_vfiprintf_r+0x1e4>
 8016686:	bf00      	nop
 8016688:	08019920 	.word	0x08019920
 801668c:	08019a5c 	.word	0x08019a5c
 8016690:	08019940 	.word	0x08019940
 8016694:	08019900 	.word	0x08019900
 8016698:	08019a62 	.word	0x08019a62
 801669c:	08019a66 	.word	0x08019a66
 80166a0:	08013ecd 	.word	0x08013ecd
 80166a4:	08016457 	.word	0x08016457

080166a8 <_sbrk_r>:
 80166a8:	b538      	push	{r3, r4, r5, lr}
 80166aa:	4c06      	ldr	r4, [pc, #24]	; (80166c4 <_sbrk_r+0x1c>)
 80166ac:	2300      	movs	r3, #0
 80166ae:	4605      	mov	r5, r0
 80166b0:	4608      	mov	r0, r1
 80166b2:	6023      	str	r3, [r4, #0]
 80166b4:	f7f0 fdb6 	bl	8007224 <_sbrk>
 80166b8:	1c43      	adds	r3, r0, #1
 80166ba:	d102      	bne.n	80166c2 <_sbrk_r+0x1a>
 80166bc:	6823      	ldr	r3, [r4, #0]
 80166be:	b103      	cbz	r3, 80166c2 <_sbrk_r+0x1a>
 80166c0:	602b      	str	r3, [r5, #0]
 80166c2:	bd38      	pop	{r3, r4, r5, pc}
 80166c4:	2002e3f0 	.word	0x2002e3f0

080166c8 <__sread>:
 80166c8:	b510      	push	{r4, lr}
 80166ca:	460c      	mov	r4, r1
 80166cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166d0:	f000 f8e8 	bl	80168a4 <_read_r>
 80166d4:	2800      	cmp	r0, #0
 80166d6:	bfab      	itete	ge
 80166d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80166da:	89a3      	ldrhlt	r3, [r4, #12]
 80166dc:	181b      	addge	r3, r3, r0
 80166de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80166e2:	bfac      	ite	ge
 80166e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80166e6:	81a3      	strhlt	r3, [r4, #12]
 80166e8:	bd10      	pop	{r4, pc}

080166ea <__swrite>:
 80166ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166ee:	461f      	mov	r7, r3
 80166f0:	898b      	ldrh	r3, [r1, #12]
 80166f2:	05db      	lsls	r3, r3, #23
 80166f4:	4605      	mov	r5, r0
 80166f6:	460c      	mov	r4, r1
 80166f8:	4616      	mov	r6, r2
 80166fa:	d505      	bpl.n	8016708 <__swrite+0x1e>
 80166fc:	2302      	movs	r3, #2
 80166fe:	2200      	movs	r2, #0
 8016700:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016704:	f000 f868 	bl	80167d8 <_lseek_r>
 8016708:	89a3      	ldrh	r3, [r4, #12]
 801670a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801670e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016712:	81a3      	strh	r3, [r4, #12]
 8016714:	4632      	mov	r2, r6
 8016716:	463b      	mov	r3, r7
 8016718:	4628      	mov	r0, r5
 801671a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801671e:	f000 b817 	b.w	8016750 <_write_r>

08016722 <__sseek>:
 8016722:	b510      	push	{r4, lr}
 8016724:	460c      	mov	r4, r1
 8016726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801672a:	f000 f855 	bl	80167d8 <_lseek_r>
 801672e:	1c43      	adds	r3, r0, #1
 8016730:	89a3      	ldrh	r3, [r4, #12]
 8016732:	bf15      	itete	ne
 8016734:	6560      	strne	r0, [r4, #84]	; 0x54
 8016736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801673a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801673e:	81a3      	strheq	r3, [r4, #12]
 8016740:	bf18      	it	ne
 8016742:	81a3      	strhne	r3, [r4, #12]
 8016744:	bd10      	pop	{r4, pc}

08016746 <__sclose>:
 8016746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801674a:	f000 b813 	b.w	8016774 <_close_r>
	...

08016750 <_write_r>:
 8016750:	b538      	push	{r3, r4, r5, lr}
 8016752:	4c07      	ldr	r4, [pc, #28]	; (8016770 <_write_r+0x20>)
 8016754:	4605      	mov	r5, r0
 8016756:	4608      	mov	r0, r1
 8016758:	4611      	mov	r1, r2
 801675a:	2200      	movs	r2, #0
 801675c:	6022      	str	r2, [r4, #0]
 801675e:	461a      	mov	r2, r3
 8016760:	f7f8 fb80 	bl	800ee64 <_write>
 8016764:	1c43      	adds	r3, r0, #1
 8016766:	d102      	bne.n	801676e <_write_r+0x1e>
 8016768:	6823      	ldr	r3, [r4, #0]
 801676a:	b103      	cbz	r3, 801676e <_write_r+0x1e>
 801676c:	602b      	str	r3, [r5, #0]
 801676e:	bd38      	pop	{r3, r4, r5, pc}
 8016770:	2002e3f0 	.word	0x2002e3f0

08016774 <_close_r>:
 8016774:	b538      	push	{r3, r4, r5, lr}
 8016776:	4c06      	ldr	r4, [pc, #24]	; (8016790 <_close_r+0x1c>)
 8016778:	2300      	movs	r3, #0
 801677a:	4605      	mov	r5, r0
 801677c:	4608      	mov	r0, r1
 801677e:	6023      	str	r3, [r4, #0]
 8016780:	f7f0 fd1b 	bl	80071ba <_close>
 8016784:	1c43      	adds	r3, r0, #1
 8016786:	d102      	bne.n	801678e <_close_r+0x1a>
 8016788:	6823      	ldr	r3, [r4, #0]
 801678a:	b103      	cbz	r3, 801678e <_close_r+0x1a>
 801678c:	602b      	str	r3, [r5, #0]
 801678e:	bd38      	pop	{r3, r4, r5, pc}
 8016790:	2002e3f0 	.word	0x2002e3f0

08016794 <_fstat_r>:
 8016794:	b538      	push	{r3, r4, r5, lr}
 8016796:	4c07      	ldr	r4, [pc, #28]	; (80167b4 <_fstat_r+0x20>)
 8016798:	2300      	movs	r3, #0
 801679a:	4605      	mov	r5, r0
 801679c:	4608      	mov	r0, r1
 801679e:	4611      	mov	r1, r2
 80167a0:	6023      	str	r3, [r4, #0]
 80167a2:	f7f0 fd16 	bl	80071d2 <_fstat>
 80167a6:	1c43      	adds	r3, r0, #1
 80167a8:	d102      	bne.n	80167b0 <_fstat_r+0x1c>
 80167aa:	6823      	ldr	r3, [r4, #0]
 80167ac:	b103      	cbz	r3, 80167b0 <_fstat_r+0x1c>
 80167ae:	602b      	str	r3, [r5, #0]
 80167b0:	bd38      	pop	{r3, r4, r5, pc}
 80167b2:	bf00      	nop
 80167b4:	2002e3f0 	.word	0x2002e3f0

080167b8 <_isatty_r>:
 80167b8:	b538      	push	{r3, r4, r5, lr}
 80167ba:	4c06      	ldr	r4, [pc, #24]	; (80167d4 <_isatty_r+0x1c>)
 80167bc:	2300      	movs	r3, #0
 80167be:	4605      	mov	r5, r0
 80167c0:	4608      	mov	r0, r1
 80167c2:	6023      	str	r3, [r4, #0]
 80167c4:	f7f0 fd15 	bl	80071f2 <_isatty>
 80167c8:	1c43      	adds	r3, r0, #1
 80167ca:	d102      	bne.n	80167d2 <_isatty_r+0x1a>
 80167cc:	6823      	ldr	r3, [r4, #0]
 80167ce:	b103      	cbz	r3, 80167d2 <_isatty_r+0x1a>
 80167d0:	602b      	str	r3, [r5, #0]
 80167d2:	bd38      	pop	{r3, r4, r5, pc}
 80167d4:	2002e3f0 	.word	0x2002e3f0

080167d8 <_lseek_r>:
 80167d8:	b538      	push	{r3, r4, r5, lr}
 80167da:	4c07      	ldr	r4, [pc, #28]	; (80167f8 <_lseek_r+0x20>)
 80167dc:	4605      	mov	r5, r0
 80167de:	4608      	mov	r0, r1
 80167e0:	4611      	mov	r1, r2
 80167e2:	2200      	movs	r2, #0
 80167e4:	6022      	str	r2, [r4, #0]
 80167e6:	461a      	mov	r2, r3
 80167e8:	f7f0 fd0e 	bl	8007208 <_lseek>
 80167ec:	1c43      	adds	r3, r0, #1
 80167ee:	d102      	bne.n	80167f6 <_lseek_r+0x1e>
 80167f0:	6823      	ldr	r3, [r4, #0]
 80167f2:	b103      	cbz	r3, 80167f6 <_lseek_r+0x1e>
 80167f4:	602b      	str	r3, [r5, #0]
 80167f6:	bd38      	pop	{r3, r4, r5, pc}
 80167f8:	2002e3f0 	.word	0x2002e3f0

080167fc <__ascii_mbtowc>:
 80167fc:	b082      	sub	sp, #8
 80167fe:	b901      	cbnz	r1, 8016802 <__ascii_mbtowc+0x6>
 8016800:	a901      	add	r1, sp, #4
 8016802:	b142      	cbz	r2, 8016816 <__ascii_mbtowc+0x1a>
 8016804:	b14b      	cbz	r3, 801681a <__ascii_mbtowc+0x1e>
 8016806:	7813      	ldrb	r3, [r2, #0]
 8016808:	600b      	str	r3, [r1, #0]
 801680a:	7812      	ldrb	r2, [r2, #0]
 801680c:	1c10      	adds	r0, r2, #0
 801680e:	bf18      	it	ne
 8016810:	2001      	movne	r0, #1
 8016812:	b002      	add	sp, #8
 8016814:	4770      	bx	lr
 8016816:	4610      	mov	r0, r2
 8016818:	e7fb      	b.n	8016812 <__ascii_mbtowc+0x16>
 801681a:	f06f 0001 	mvn.w	r0, #1
 801681e:	e7f8      	b.n	8016812 <__ascii_mbtowc+0x16>

08016820 <memmove>:
 8016820:	4288      	cmp	r0, r1
 8016822:	b510      	push	{r4, lr}
 8016824:	eb01 0302 	add.w	r3, r1, r2
 8016828:	d807      	bhi.n	801683a <memmove+0x1a>
 801682a:	1e42      	subs	r2, r0, #1
 801682c:	4299      	cmp	r1, r3
 801682e:	d00a      	beq.n	8016846 <memmove+0x26>
 8016830:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016834:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016838:	e7f8      	b.n	801682c <memmove+0xc>
 801683a:	4283      	cmp	r3, r0
 801683c:	d9f5      	bls.n	801682a <memmove+0xa>
 801683e:	1881      	adds	r1, r0, r2
 8016840:	1ad2      	subs	r2, r2, r3
 8016842:	42d3      	cmn	r3, r2
 8016844:	d100      	bne.n	8016848 <memmove+0x28>
 8016846:	bd10      	pop	{r4, pc}
 8016848:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801684c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016850:	e7f7      	b.n	8016842 <memmove+0x22>

08016852 <__malloc_lock>:
 8016852:	4770      	bx	lr

08016854 <__malloc_unlock>:
 8016854:	4770      	bx	lr

08016856 <_realloc_r>:
 8016856:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016858:	4607      	mov	r7, r0
 801685a:	4614      	mov	r4, r2
 801685c:	460e      	mov	r6, r1
 801685e:	b921      	cbnz	r1, 801686a <_realloc_r+0x14>
 8016860:	4611      	mov	r1, r2
 8016862:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016866:	f7ff bc33 	b.w	80160d0 <_malloc_r>
 801686a:	b922      	cbnz	r2, 8016876 <_realloc_r+0x20>
 801686c:	f7ff fbe2 	bl	8016034 <_free_r>
 8016870:	4625      	mov	r5, r4
 8016872:	4628      	mov	r0, r5
 8016874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016876:	f000 f834 	bl	80168e2 <_malloc_usable_size_r>
 801687a:	42a0      	cmp	r0, r4
 801687c:	d20f      	bcs.n	801689e <_realloc_r+0x48>
 801687e:	4621      	mov	r1, r4
 8016880:	4638      	mov	r0, r7
 8016882:	f7ff fc25 	bl	80160d0 <_malloc_r>
 8016886:	4605      	mov	r5, r0
 8016888:	2800      	cmp	r0, #0
 801688a:	d0f2      	beq.n	8016872 <_realloc_r+0x1c>
 801688c:	4631      	mov	r1, r6
 801688e:	4622      	mov	r2, r4
 8016890:	f7fd fa74 	bl	8013d7c <memcpy>
 8016894:	4631      	mov	r1, r6
 8016896:	4638      	mov	r0, r7
 8016898:	f7ff fbcc 	bl	8016034 <_free_r>
 801689c:	e7e9      	b.n	8016872 <_realloc_r+0x1c>
 801689e:	4635      	mov	r5, r6
 80168a0:	e7e7      	b.n	8016872 <_realloc_r+0x1c>
	...

080168a4 <_read_r>:
 80168a4:	b538      	push	{r3, r4, r5, lr}
 80168a6:	4c07      	ldr	r4, [pc, #28]	; (80168c4 <_read_r+0x20>)
 80168a8:	4605      	mov	r5, r0
 80168aa:	4608      	mov	r0, r1
 80168ac:	4611      	mov	r1, r2
 80168ae:	2200      	movs	r2, #0
 80168b0:	6022      	str	r2, [r4, #0]
 80168b2:	461a      	mov	r2, r3
 80168b4:	f7f0 fc64 	bl	8007180 <_read>
 80168b8:	1c43      	adds	r3, r0, #1
 80168ba:	d102      	bne.n	80168c2 <_read_r+0x1e>
 80168bc:	6823      	ldr	r3, [r4, #0]
 80168be:	b103      	cbz	r3, 80168c2 <_read_r+0x1e>
 80168c0:	602b      	str	r3, [r5, #0]
 80168c2:	bd38      	pop	{r3, r4, r5, pc}
 80168c4:	2002e3f0 	.word	0x2002e3f0

080168c8 <__ascii_wctomb>:
 80168c8:	b149      	cbz	r1, 80168de <__ascii_wctomb+0x16>
 80168ca:	2aff      	cmp	r2, #255	; 0xff
 80168cc:	bf85      	ittet	hi
 80168ce:	238a      	movhi	r3, #138	; 0x8a
 80168d0:	6003      	strhi	r3, [r0, #0]
 80168d2:	700a      	strbls	r2, [r1, #0]
 80168d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80168d8:	bf98      	it	ls
 80168da:	2001      	movls	r0, #1
 80168dc:	4770      	bx	lr
 80168de:	4608      	mov	r0, r1
 80168e0:	4770      	bx	lr

080168e2 <_malloc_usable_size_r>:
 80168e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80168e6:	1f18      	subs	r0, r3, #4
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	bfbc      	itt	lt
 80168ec:	580b      	ldrlt	r3, [r1, r0]
 80168ee:	18c0      	addlt	r0, r0, r3
 80168f0:	4770      	bx	lr
	...

080168f4 <round>:
 80168f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168f6:	ec57 6b10 	vmov	r6, r7, d0
 80168fa:	f3c7 500a 	ubfx	r0, r7, #20, #11
 80168fe:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8016902:	2c13      	cmp	r4, #19
 8016904:	463b      	mov	r3, r7
 8016906:	463d      	mov	r5, r7
 8016908:	dc17      	bgt.n	801693a <round+0x46>
 801690a:	2c00      	cmp	r4, #0
 801690c:	da09      	bge.n	8016922 <round+0x2e>
 801690e:	3401      	adds	r4, #1
 8016910:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8016914:	d103      	bne.n	801691e <round+0x2a>
 8016916:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801691a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801691e:	2100      	movs	r1, #0
 8016920:	e02c      	b.n	801697c <round+0x88>
 8016922:	4a18      	ldr	r2, [pc, #96]	; (8016984 <round+0x90>)
 8016924:	4122      	asrs	r2, r4
 8016926:	4217      	tst	r7, r2
 8016928:	d100      	bne.n	801692c <round+0x38>
 801692a:	b19e      	cbz	r6, 8016954 <round+0x60>
 801692c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8016930:	4123      	asrs	r3, r4
 8016932:	442b      	add	r3, r5
 8016934:	ea23 0302 	bic.w	r3, r3, r2
 8016938:	e7f1      	b.n	801691e <round+0x2a>
 801693a:	2c33      	cmp	r4, #51	; 0x33
 801693c:	dd0d      	ble.n	801695a <round+0x66>
 801693e:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8016942:	d107      	bne.n	8016954 <round+0x60>
 8016944:	4630      	mov	r0, r6
 8016946:	4639      	mov	r1, r7
 8016948:	ee10 2a10 	vmov	r2, s0
 801694c:	f7e9 fc76 	bl	800023c <__adddf3>
 8016950:	4606      	mov	r6, r0
 8016952:	460f      	mov	r7, r1
 8016954:	ec47 6b10 	vmov	d0, r6, r7
 8016958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801695a:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 801695e:	f04f 30ff 	mov.w	r0, #4294967295
 8016962:	40d0      	lsrs	r0, r2
 8016964:	4206      	tst	r6, r0
 8016966:	d0f5      	beq.n	8016954 <round+0x60>
 8016968:	2201      	movs	r2, #1
 801696a:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801696e:	fa02 f404 	lsl.w	r4, r2, r4
 8016972:	1931      	adds	r1, r6, r4
 8016974:	bf28      	it	cs
 8016976:	189b      	addcs	r3, r3, r2
 8016978:	ea21 0100 	bic.w	r1, r1, r0
 801697c:	461f      	mov	r7, r3
 801697e:	460e      	mov	r6, r1
 8016980:	e7e8      	b.n	8016954 <round+0x60>
 8016982:	bf00      	nop
 8016984:	000fffff 	.word	0x000fffff

08016988 <pow>:
 8016988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801698c:	ed2d 8b04 	vpush	{d8-d9}
 8016990:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8016c64 <pow+0x2dc>
 8016994:	b08d      	sub	sp, #52	; 0x34
 8016996:	ec57 6b10 	vmov	r6, r7, d0
 801699a:	ec55 4b11 	vmov	r4, r5, d1
 801699e:	f000 f963 	bl	8016c68 <__ieee754_pow>
 80169a2:	f999 3000 	ldrsb.w	r3, [r9]
 80169a6:	9300      	str	r3, [sp, #0]
 80169a8:	3301      	adds	r3, #1
 80169aa:	eeb0 8a40 	vmov.f32	s16, s0
 80169ae:	eef0 8a60 	vmov.f32	s17, s1
 80169b2:	46c8      	mov	r8, r9
 80169b4:	d05f      	beq.n	8016a76 <pow+0xee>
 80169b6:	4622      	mov	r2, r4
 80169b8:	462b      	mov	r3, r5
 80169ba:	4620      	mov	r0, r4
 80169bc:	4629      	mov	r1, r5
 80169be:	f7ea f88d 	bl	8000adc <__aeabi_dcmpun>
 80169c2:	4683      	mov	fp, r0
 80169c4:	2800      	cmp	r0, #0
 80169c6:	d156      	bne.n	8016a76 <pow+0xee>
 80169c8:	4632      	mov	r2, r6
 80169ca:	463b      	mov	r3, r7
 80169cc:	4630      	mov	r0, r6
 80169ce:	4639      	mov	r1, r7
 80169d0:	f7ea f884 	bl	8000adc <__aeabi_dcmpun>
 80169d4:	9001      	str	r0, [sp, #4]
 80169d6:	b1e8      	cbz	r0, 8016a14 <pow+0x8c>
 80169d8:	2200      	movs	r2, #0
 80169da:	2300      	movs	r3, #0
 80169dc:	4620      	mov	r0, r4
 80169de:	4629      	mov	r1, r5
 80169e0:	f7ea f84a 	bl	8000a78 <__aeabi_dcmpeq>
 80169e4:	2800      	cmp	r0, #0
 80169e6:	d046      	beq.n	8016a76 <pow+0xee>
 80169e8:	2301      	movs	r3, #1
 80169ea:	9302      	str	r3, [sp, #8]
 80169ec:	4b96      	ldr	r3, [pc, #600]	; (8016c48 <pow+0x2c0>)
 80169ee:	9303      	str	r3, [sp, #12]
 80169f0:	4b96      	ldr	r3, [pc, #600]	; (8016c4c <pow+0x2c4>)
 80169f2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80169f6:	2200      	movs	r2, #0
 80169f8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80169fc:	9b00      	ldr	r3, [sp, #0]
 80169fe:	2b02      	cmp	r3, #2
 8016a00:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016a04:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016a08:	d033      	beq.n	8016a72 <pow+0xea>
 8016a0a:	a802      	add	r0, sp, #8
 8016a0c:	f000 fefb 	bl	8017806 <matherr>
 8016a10:	bb48      	cbnz	r0, 8016a66 <pow+0xde>
 8016a12:	e05d      	b.n	8016ad0 <pow+0x148>
 8016a14:	f04f 0a00 	mov.w	sl, #0
 8016a18:	f04f 0b00 	mov.w	fp, #0
 8016a1c:	4652      	mov	r2, sl
 8016a1e:	465b      	mov	r3, fp
 8016a20:	4630      	mov	r0, r6
 8016a22:	4639      	mov	r1, r7
 8016a24:	f7ea f828 	bl	8000a78 <__aeabi_dcmpeq>
 8016a28:	ec4b ab19 	vmov	d9, sl, fp
 8016a2c:	2800      	cmp	r0, #0
 8016a2e:	d054      	beq.n	8016ada <pow+0x152>
 8016a30:	4652      	mov	r2, sl
 8016a32:	465b      	mov	r3, fp
 8016a34:	4620      	mov	r0, r4
 8016a36:	4629      	mov	r1, r5
 8016a38:	f7ea f81e 	bl	8000a78 <__aeabi_dcmpeq>
 8016a3c:	4680      	mov	r8, r0
 8016a3e:	b318      	cbz	r0, 8016a88 <pow+0x100>
 8016a40:	2301      	movs	r3, #1
 8016a42:	9302      	str	r3, [sp, #8]
 8016a44:	4b80      	ldr	r3, [pc, #512]	; (8016c48 <pow+0x2c0>)
 8016a46:	9303      	str	r3, [sp, #12]
 8016a48:	9b01      	ldr	r3, [sp, #4]
 8016a4a:	930a      	str	r3, [sp, #40]	; 0x28
 8016a4c:	9b00      	ldr	r3, [sp, #0]
 8016a4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016a52:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016a56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d0d5      	beq.n	8016a0a <pow+0x82>
 8016a5e:	4b7b      	ldr	r3, [pc, #492]	; (8016c4c <pow+0x2c4>)
 8016a60:	2200      	movs	r2, #0
 8016a62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016a66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a68:	b11b      	cbz	r3, 8016a72 <pow+0xea>
 8016a6a:	f7fd f95d 	bl	8013d28 <__errno>
 8016a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016a70:	6003      	str	r3, [r0, #0]
 8016a72:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016a76:	eeb0 0a48 	vmov.f32	s0, s16
 8016a7a:	eef0 0a68 	vmov.f32	s1, s17
 8016a7e:	b00d      	add	sp, #52	; 0x34
 8016a80:	ecbd 8b04 	vpop	{d8-d9}
 8016a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a88:	ec45 4b10 	vmov	d0, r4, r5
 8016a8c:	f000 feb3 	bl	80177f6 <finite>
 8016a90:	2800      	cmp	r0, #0
 8016a92:	d0f0      	beq.n	8016a76 <pow+0xee>
 8016a94:	4652      	mov	r2, sl
 8016a96:	465b      	mov	r3, fp
 8016a98:	4620      	mov	r0, r4
 8016a9a:	4629      	mov	r1, r5
 8016a9c:	f7e9 fff6 	bl	8000a8c <__aeabi_dcmplt>
 8016aa0:	2800      	cmp	r0, #0
 8016aa2:	d0e8      	beq.n	8016a76 <pow+0xee>
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	9302      	str	r3, [sp, #8]
 8016aa8:	4b67      	ldr	r3, [pc, #412]	; (8016c48 <pow+0x2c0>)
 8016aaa:	9303      	str	r3, [sp, #12]
 8016aac:	f999 3000 	ldrsb.w	r3, [r9]
 8016ab0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8016ab4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016ab8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016abc:	b913      	cbnz	r3, 8016ac4 <pow+0x13c>
 8016abe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016ac2:	e7a2      	b.n	8016a0a <pow+0x82>
 8016ac4:	4962      	ldr	r1, [pc, #392]	; (8016c50 <pow+0x2c8>)
 8016ac6:	2000      	movs	r0, #0
 8016ac8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016acc:	2b02      	cmp	r3, #2
 8016ace:	d19c      	bne.n	8016a0a <pow+0x82>
 8016ad0:	f7fd f92a 	bl	8013d28 <__errno>
 8016ad4:	2321      	movs	r3, #33	; 0x21
 8016ad6:	6003      	str	r3, [r0, #0]
 8016ad8:	e7c5      	b.n	8016a66 <pow+0xde>
 8016ada:	eeb0 0a48 	vmov.f32	s0, s16
 8016ade:	eef0 0a68 	vmov.f32	s1, s17
 8016ae2:	f000 fe88 	bl	80177f6 <finite>
 8016ae6:	9000      	str	r0, [sp, #0]
 8016ae8:	2800      	cmp	r0, #0
 8016aea:	f040 8081 	bne.w	8016bf0 <pow+0x268>
 8016aee:	ec47 6b10 	vmov	d0, r6, r7
 8016af2:	f000 fe80 	bl	80177f6 <finite>
 8016af6:	2800      	cmp	r0, #0
 8016af8:	d07a      	beq.n	8016bf0 <pow+0x268>
 8016afa:	ec45 4b10 	vmov	d0, r4, r5
 8016afe:	f000 fe7a 	bl	80177f6 <finite>
 8016b02:	2800      	cmp	r0, #0
 8016b04:	d074      	beq.n	8016bf0 <pow+0x268>
 8016b06:	ec53 2b18 	vmov	r2, r3, d8
 8016b0a:	ee18 0a10 	vmov	r0, s16
 8016b0e:	4619      	mov	r1, r3
 8016b10:	f7e9 ffe4 	bl	8000adc <__aeabi_dcmpun>
 8016b14:	f999 9000 	ldrsb.w	r9, [r9]
 8016b18:	4b4b      	ldr	r3, [pc, #300]	; (8016c48 <pow+0x2c0>)
 8016b1a:	b1b0      	cbz	r0, 8016b4a <pow+0x1c2>
 8016b1c:	2201      	movs	r2, #1
 8016b1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016b22:	9b00      	ldr	r3, [sp, #0]
 8016b24:	930a      	str	r3, [sp, #40]	; 0x28
 8016b26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016b2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016b2e:	f1b9 0f00 	cmp.w	r9, #0
 8016b32:	d0c4      	beq.n	8016abe <pow+0x136>
 8016b34:	4652      	mov	r2, sl
 8016b36:	465b      	mov	r3, fp
 8016b38:	4650      	mov	r0, sl
 8016b3a:	4659      	mov	r1, fp
 8016b3c:	f7e9 fe5e 	bl	80007fc <__aeabi_ddiv>
 8016b40:	f1b9 0f02 	cmp.w	r9, #2
 8016b44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016b48:	e7c1      	b.n	8016ace <pow+0x146>
 8016b4a:	2203      	movs	r2, #3
 8016b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016b50:	900a      	str	r0, [sp, #40]	; 0x28
 8016b52:	4629      	mov	r1, r5
 8016b54:	4620      	mov	r0, r4
 8016b56:	2200      	movs	r2, #0
 8016b58:	4b3e      	ldr	r3, [pc, #248]	; (8016c54 <pow+0x2cc>)
 8016b5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016b5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016b62:	f7e9 fd21 	bl	80005a8 <__aeabi_dmul>
 8016b66:	4604      	mov	r4, r0
 8016b68:	460d      	mov	r5, r1
 8016b6a:	f1b9 0f00 	cmp.w	r9, #0
 8016b6e:	d124      	bne.n	8016bba <pow+0x232>
 8016b70:	4b39      	ldr	r3, [pc, #228]	; (8016c58 <pow+0x2d0>)
 8016b72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016b76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016b7a:	4630      	mov	r0, r6
 8016b7c:	4652      	mov	r2, sl
 8016b7e:	465b      	mov	r3, fp
 8016b80:	4639      	mov	r1, r7
 8016b82:	f7e9 ff83 	bl	8000a8c <__aeabi_dcmplt>
 8016b86:	2800      	cmp	r0, #0
 8016b88:	d056      	beq.n	8016c38 <pow+0x2b0>
 8016b8a:	ec45 4b10 	vmov	d0, r4, r5
 8016b8e:	f000 fe47 	bl	8017820 <rint>
 8016b92:	4622      	mov	r2, r4
 8016b94:	462b      	mov	r3, r5
 8016b96:	ec51 0b10 	vmov	r0, r1, d0
 8016b9a:	f7e9 ff6d 	bl	8000a78 <__aeabi_dcmpeq>
 8016b9e:	b920      	cbnz	r0, 8016baa <pow+0x222>
 8016ba0:	4b2e      	ldr	r3, [pc, #184]	; (8016c5c <pow+0x2d4>)
 8016ba2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016ba6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016baa:	f998 3000 	ldrsb.w	r3, [r8]
 8016bae:	2b02      	cmp	r3, #2
 8016bb0:	d142      	bne.n	8016c38 <pow+0x2b0>
 8016bb2:	f7fd f8b9 	bl	8013d28 <__errno>
 8016bb6:	2322      	movs	r3, #34	; 0x22
 8016bb8:	e78d      	b.n	8016ad6 <pow+0x14e>
 8016bba:	4b29      	ldr	r3, [pc, #164]	; (8016c60 <pow+0x2d8>)
 8016bbc:	2200      	movs	r2, #0
 8016bbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016bc2:	4630      	mov	r0, r6
 8016bc4:	4652      	mov	r2, sl
 8016bc6:	465b      	mov	r3, fp
 8016bc8:	4639      	mov	r1, r7
 8016bca:	f7e9 ff5f 	bl	8000a8c <__aeabi_dcmplt>
 8016bce:	2800      	cmp	r0, #0
 8016bd0:	d0eb      	beq.n	8016baa <pow+0x222>
 8016bd2:	ec45 4b10 	vmov	d0, r4, r5
 8016bd6:	f000 fe23 	bl	8017820 <rint>
 8016bda:	4622      	mov	r2, r4
 8016bdc:	462b      	mov	r3, r5
 8016bde:	ec51 0b10 	vmov	r0, r1, d0
 8016be2:	f7e9 ff49 	bl	8000a78 <__aeabi_dcmpeq>
 8016be6:	2800      	cmp	r0, #0
 8016be8:	d1df      	bne.n	8016baa <pow+0x222>
 8016bea:	2200      	movs	r2, #0
 8016bec:	4b18      	ldr	r3, [pc, #96]	; (8016c50 <pow+0x2c8>)
 8016bee:	e7da      	b.n	8016ba6 <pow+0x21e>
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	2300      	movs	r3, #0
 8016bf4:	ec51 0b18 	vmov	r0, r1, d8
 8016bf8:	f7e9 ff3e 	bl	8000a78 <__aeabi_dcmpeq>
 8016bfc:	2800      	cmp	r0, #0
 8016bfe:	f43f af3a 	beq.w	8016a76 <pow+0xee>
 8016c02:	ec47 6b10 	vmov	d0, r6, r7
 8016c06:	f000 fdf6 	bl	80177f6 <finite>
 8016c0a:	2800      	cmp	r0, #0
 8016c0c:	f43f af33 	beq.w	8016a76 <pow+0xee>
 8016c10:	ec45 4b10 	vmov	d0, r4, r5
 8016c14:	f000 fdef 	bl	80177f6 <finite>
 8016c18:	2800      	cmp	r0, #0
 8016c1a:	f43f af2c 	beq.w	8016a76 <pow+0xee>
 8016c1e:	2304      	movs	r3, #4
 8016c20:	9302      	str	r3, [sp, #8]
 8016c22:	4b09      	ldr	r3, [pc, #36]	; (8016c48 <pow+0x2c0>)
 8016c24:	9303      	str	r3, [sp, #12]
 8016c26:	2300      	movs	r3, #0
 8016c28:	930a      	str	r3, [sp, #40]	; 0x28
 8016c2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016c2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016c32:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016c36:	e7b8      	b.n	8016baa <pow+0x222>
 8016c38:	a802      	add	r0, sp, #8
 8016c3a:	f000 fde4 	bl	8017806 <matherr>
 8016c3e:	2800      	cmp	r0, #0
 8016c40:	f47f af11 	bne.w	8016a66 <pow+0xde>
 8016c44:	e7b5      	b.n	8016bb2 <pow+0x22a>
 8016c46:	bf00      	nop
 8016c48:	08019b78 	.word	0x08019b78
 8016c4c:	3ff00000 	.word	0x3ff00000
 8016c50:	fff00000 	.word	0xfff00000
 8016c54:	3fe00000 	.word	0x3fe00000
 8016c58:	47efffff 	.word	0x47efffff
 8016c5c:	c7efffff 	.word	0xc7efffff
 8016c60:	7ff00000 	.word	0x7ff00000
 8016c64:	200001f4 	.word	0x200001f4

08016c68 <__ieee754_pow>:
 8016c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c6c:	b091      	sub	sp, #68	; 0x44
 8016c6e:	ed8d 1b00 	vstr	d1, [sp]
 8016c72:	e9dd 2900 	ldrd	r2, r9, [sp]
 8016c76:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016c7a:	ea58 0302 	orrs.w	r3, r8, r2
 8016c7e:	ec57 6b10 	vmov	r6, r7, d0
 8016c82:	f000 84be 	beq.w	8017602 <__ieee754_pow+0x99a>
 8016c86:	4b7a      	ldr	r3, [pc, #488]	; (8016e70 <__ieee754_pow+0x208>)
 8016c88:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016c8c:	429c      	cmp	r4, r3
 8016c8e:	463d      	mov	r5, r7
 8016c90:	ee10 aa10 	vmov	sl, s0
 8016c94:	dc09      	bgt.n	8016caa <__ieee754_pow+0x42>
 8016c96:	d103      	bne.n	8016ca0 <__ieee754_pow+0x38>
 8016c98:	b93e      	cbnz	r6, 8016caa <__ieee754_pow+0x42>
 8016c9a:	45a0      	cmp	r8, r4
 8016c9c:	dc0d      	bgt.n	8016cba <__ieee754_pow+0x52>
 8016c9e:	e001      	b.n	8016ca4 <__ieee754_pow+0x3c>
 8016ca0:	4598      	cmp	r8, r3
 8016ca2:	dc02      	bgt.n	8016caa <__ieee754_pow+0x42>
 8016ca4:	4598      	cmp	r8, r3
 8016ca6:	d10e      	bne.n	8016cc6 <__ieee754_pow+0x5e>
 8016ca8:	b16a      	cbz	r2, 8016cc6 <__ieee754_pow+0x5e>
 8016caa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016cae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016cb2:	ea54 030a 	orrs.w	r3, r4, sl
 8016cb6:	f000 84a4 	beq.w	8017602 <__ieee754_pow+0x99a>
 8016cba:	486e      	ldr	r0, [pc, #440]	; (8016e74 <__ieee754_pow+0x20c>)
 8016cbc:	b011      	add	sp, #68	; 0x44
 8016cbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc2:	f000 bda5 	b.w	8017810 <nan>
 8016cc6:	2d00      	cmp	r5, #0
 8016cc8:	da53      	bge.n	8016d72 <__ieee754_pow+0x10a>
 8016cca:	4b6b      	ldr	r3, [pc, #428]	; (8016e78 <__ieee754_pow+0x210>)
 8016ccc:	4598      	cmp	r8, r3
 8016cce:	dc4d      	bgt.n	8016d6c <__ieee754_pow+0x104>
 8016cd0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016cd4:	4598      	cmp	r8, r3
 8016cd6:	dd4c      	ble.n	8016d72 <__ieee754_pow+0x10a>
 8016cd8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016cdc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016ce0:	2b14      	cmp	r3, #20
 8016ce2:	dd26      	ble.n	8016d32 <__ieee754_pow+0xca>
 8016ce4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016ce8:	fa22 f103 	lsr.w	r1, r2, r3
 8016cec:	fa01 f303 	lsl.w	r3, r1, r3
 8016cf0:	4293      	cmp	r3, r2
 8016cf2:	d13e      	bne.n	8016d72 <__ieee754_pow+0x10a>
 8016cf4:	f001 0101 	and.w	r1, r1, #1
 8016cf8:	f1c1 0b02 	rsb	fp, r1, #2
 8016cfc:	2a00      	cmp	r2, #0
 8016cfe:	d15b      	bne.n	8016db8 <__ieee754_pow+0x150>
 8016d00:	4b5b      	ldr	r3, [pc, #364]	; (8016e70 <__ieee754_pow+0x208>)
 8016d02:	4598      	cmp	r8, r3
 8016d04:	d124      	bne.n	8016d50 <__ieee754_pow+0xe8>
 8016d06:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016d0a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016d0e:	ea53 030a 	orrs.w	r3, r3, sl
 8016d12:	f000 8476 	beq.w	8017602 <__ieee754_pow+0x99a>
 8016d16:	4b59      	ldr	r3, [pc, #356]	; (8016e7c <__ieee754_pow+0x214>)
 8016d18:	429c      	cmp	r4, r3
 8016d1a:	dd2d      	ble.n	8016d78 <__ieee754_pow+0x110>
 8016d1c:	f1b9 0f00 	cmp.w	r9, #0
 8016d20:	f280 8473 	bge.w	801760a <__ieee754_pow+0x9a2>
 8016d24:	2000      	movs	r0, #0
 8016d26:	2100      	movs	r1, #0
 8016d28:	ec41 0b10 	vmov	d0, r0, r1
 8016d2c:	b011      	add	sp, #68	; 0x44
 8016d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d32:	2a00      	cmp	r2, #0
 8016d34:	d13e      	bne.n	8016db4 <__ieee754_pow+0x14c>
 8016d36:	f1c3 0314 	rsb	r3, r3, #20
 8016d3a:	fa48 f103 	asr.w	r1, r8, r3
 8016d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8016d42:	4543      	cmp	r3, r8
 8016d44:	f040 8469 	bne.w	801761a <__ieee754_pow+0x9b2>
 8016d48:	f001 0101 	and.w	r1, r1, #1
 8016d4c:	f1c1 0b02 	rsb	fp, r1, #2
 8016d50:	4b4b      	ldr	r3, [pc, #300]	; (8016e80 <__ieee754_pow+0x218>)
 8016d52:	4598      	cmp	r8, r3
 8016d54:	d118      	bne.n	8016d88 <__ieee754_pow+0x120>
 8016d56:	f1b9 0f00 	cmp.w	r9, #0
 8016d5a:	f280 845a 	bge.w	8017612 <__ieee754_pow+0x9aa>
 8016d5e:	4948      	ldr	r1, [pc, #288]	; (8016e80 <__ieee754_pow+0x218>)
 8016d60:	4632      	mov	r2, r6
 8016d62:	463b      	mov	r3, r7
 8016d64:	2000      	movs	r0, #0
 8016d66:	f7e9 fd49 	bl	80007fc <__aeabi_ddiv>
 8016d6a:	e7dd      	b.n	8016d28 <__ieee754_pow+0xc0>
 8016d6c:	f04f 0b02 	mov.w	fp, #2
 8016d70:	e7c4      	b.n	8016cfc <__ieee754_pow+0x94>
 8016d72:	f04f 0b00 	mov.w	fp, #0
 8016d76:	e7c1      	b.n	8016cfc <__ieee754_pow+0x94>
 8016d78:	f1b9 0f00 	cmp.w	r9, #0
 8016d7c:	dad2      	bge.n	8016d24 <__ieee754_pow+0xbc>
 8016d7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8016d82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016d86:	e7cf      	b.n	8016d28 <__ieee754_pow+0xc0>
 8016d88:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016d8c:	d106      	bne.n	8016d9c <__ieee754_pow+0x134>
 8016d8e:	4632      	mov	r2, r6
 8016d90:	463b      	mov	r3, r7
 8016d92:	4610      	mov	r0, r2
 8016d94:	4619      	mov	r1, r3
 8016d96:	f7e9 fc07 	bl	80005a8 <__aeabi_dmul>
 8016d9a:	e7c5      	b.n	8016d28 <__ieee754_pow+0xc0>
 8016d9c:	4b39      	ldr	r3, [pc, #228]	; (8016e84 <__ieee754_pow+0x21c>)
 8016d9e:	4599      	cmp	r9, r3
 8016da0:	d10a      	bne.n	8016db8 <__ieee754_pow+0x150>
 8016da2:	2d00      	cmp	r5, #0
 8016da4:	db08      	blt.n	8016db8 <__ieee754_pow+0x150>
 8016da6:	ec47 6b10 	vmov	d0, r6, r7
 8016daa:	b011      	add	sp, #68	; 0x44
 8016dac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016db0:	f000 bc68 	b.w	8017684 <__ieee754_sqrt>
 8016db4:	f04f 0b00 	mov.w	fp, #0
 8016db8:	ec47 6b10 	vmov	d0, r6, r7
 8016dbc:	f000 fd12 	bl	80177e4 <fabs>
 8016dc0:	ec51 0b10 	vmov	r0, r1, d0
 8016dc4:	f1ba 0f00 	cmp.w	sl, #0
 8016dc8:	d127      	bne.n	8016e1a <__ieee754_pow+0x1b2>
 8016dca:	b124      	cbz	r4, 8016dd6 <__ieee754_pow+0x16e>
 8016dcc:	4b2c      	ldr	r3, [pc, #176]	; (8016e80 <__ieee754_pow+0x218>)
 8016dce:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8016dd2:	429a      	cmp	r2, r3
 8016dd4:	d121      	bne.n	8016e1a <__ieee754_pow+0x1b2>
 8016dd6:	f1b9 0f00 	cmp.w	r9, #0
 8016dda:	da05      	bge.n	8016de8 <__ieee754_pow+0x180>
 8016ddc:	4602      	mov	r2, r0
 8016dde:	460b      	mov	r3, r1
 8016de0:	2000      	movs	r0, #0
 8016de2:	4927      	ldr	r1, [pc, #156]	; (8016e80 <__ieee754_pow+0x218>)
 8016de4:	f7e9 fd0a 	bl	80007fc <__aeabi_ddiv>
 8016de8:	2d00      	cmp	r5, #0
 8016dea:	da9d      	bge.n	8016d28 <__ieee754_pow+0xc0>
 8016dec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016df0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016df4:	ea54 030b 	orrs.w	r3, r4, fp
 8016df8:	d108      	bne.n	8016e0c <__ieee754_pow+0x1a4>
 8016dfa:	4602      	mov	r2, r0
 8016dfc:	460b      	mov	r3, r1
 8016dfe:	4610      	mov	r0, r2
 8016e00:	4619      	mov	r1, r3
 8016e02:	f7e9 fa19 	bl	8000238 <__aeabi_dsub>
 8016e06:	4602      	mov	r2, r0
 8016e08:	460b      	mov	r3, r1
 8016e0a:	e7ac      	b.n	8016d66 <__ieee754_pow+0xfe>
 8016e0c:	f1bb 0f01 	cmp.w	fp, #1
 8016e10:	d18a      	bne.n	8016d28 <__ieee754_pow+0xc0>
 8016e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016e16:	4619      	mov	r1, r3
 8016e18:	e786      	b.n	8016d28 <__ieee754_pow+0xc0>
 8016e1a:	0fed      	lsrs	r5, r5, #31
 8016e1c:	1e6b      	subs	r3, r5, #1
 8016e1e:	930d      	str	r3, [sp, #52]	; 0x34
 8016e20:	ea5b 0303 	orrs.w	r3, fp, r3
 8016e24:	d102      	bne.n	8016e2c <__ieee754_pow+0x1c4>
 8016e26:	4632      	mov	r2, r6
 8016e28:	463b      	mov	r3, r7
 8016e2a:	e7e8      	b.n	8016dfe <__ieee754_pow+0x196>
 8016e2c:	4b16      	ldr	r3, [pc, #88]	; (8016e88 <__ieee754_pow+0x220>)
 8016e2e:	4598      	cmp	r8, r3
 8016e30:	f340 80fe 	ble.w	8017030 <__ieee754_pow+0x3c8>
 8016e34:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8016e38:	4598      	cmp	r8, r3
 8016e3a:	dd0a      	ble.n	8016e52 <__ieee754_pow+0x1ea>
 8016e3c:	4b0f      	ldr	r3, [pc, #60]	; (8016e7c <__ieee754_pow+0x214>)
 8016e3e:	429c      	cmp	r4, r3
 8016e40:	dc0d      	bgt.n	8016e5e <__ieee754_pow+0x1f6>
 8016e42:	f1b9 0f00 	cmp.w	r9, #0
 8016e46:	f6bf af6d 	bge.w	8016d24 <__ieee754_pow+0xbc>
 8016e4a:	a307      	add	r3, pc, #28	; (adr r3, 8016e68 <__ieee754_pow+0x200>)
 8016e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e50:	e79f      	b.n	8016d92 <__ieee754_pow+0x12a>
 8016e52:	4b0e      	ldr	r3, [pc, #56]	; (8016e8c <__ieee754_pow+0x224>)
 8016e54:	429c      	cmp	r4, r3
 8016e56:	ddf4      	ble.n	8016e42 <__ieee754_pow+0x1da>
 8016e58:	4b09      	ldr	r3, [pc, #36]	; (8016e80 <__ieee754_pow+0x218>)
 8016e5a:	429c      	cmp	r4, r3
 8016e5c:	dd18      	ble.n	8016e90 <__ieee754_pow+0x228>
 8016e5e:	f1b9 0f00 	cmp.w	r9, #0
 8016e62:	dcf2      	bgt.n	8016e4a <__ieee754_pow+0x1e2>
 8016e64:	e75e      	b.n	8016d24 <__ieee754_pow+0xbc>
 8016e66:	bf00      	nop
 8016e68:	8800759c 	.word	0x8800759c
 8016e6c:	7e37e43c 	.word	0x7e37e43c
 8016e70:	7ff00000 	.word	0x7ff00000
 8016e74:	08019a61 	.word	0x08019a61
 8016e78:	433fffff 	.word	0x433fffff
 8016e7c:	3fefffff 	.word	0x3fefffff
 8016e80:	3ff00000 	.word	0x3ff00000
 8016e84:	3fe00000 	.word	0x3fe00000
 8016e88:	41e00000 	.word	0x41e00000
 8016e8c:	3feffffe 	.word	0x3feffffe
 8016e90:	2200      	movs	r2, #0
 8016e92:	4b63      	ldr	r3, [pc, #396]	; (8017020 <__ieee754_pow+0x3b8>)
 8016e94:	f7e9 f9d0 	bl	8000238 <__aeabi_dsub>
 8016e98:	a355      	add	r3, pc, #340	; (adr r3, 8016ff0 <__ieee754_pow+0x388>)
 8016e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e9e:	4604      	mov	r4, r0
 8016ea0:	460d      	mov	r5, r1
 8016ea2:	f7e9 fb81 	bl	80005a8 <__aeabi_dmul>
 8016ea6:	a354      	add	r3, pc, #336	; (adr r3, 8016ff8 <__ieee754_pow+0x390>)
 8016ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eac:	4606      	mov	r6, r0
 8016eae:	460f      	mov	r7, r1
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	4629      	mov	r1, r5
 8016eb4:	f7e9 fb78 	bl	80005a8 <__aeabi_dmul>
 8016eb8:	2200      	movs	r2, #0
 8016eba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016ebe:	4b59      	ldr	r3, [pc, #356]	; (8017024 <__ieee754_pow+0x3bc>)
 8016ec0:	4620      	mov	r0, r4
 8016ec2:	4629      	mov	r1, r5
 8016ec4:	f7e9 fb70 	bl	80005a8 <__aeabi_dmul>
 8016ec8:	4602      	mov	r2, r0
 8016eca:	460b      	mov	r3, r1
 8016ecc:	a14c      	add	r1, pc, #304	; (adr r1, 8017000 <__ieee754_pow+0x398>)
 8016ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016ed2:	f7e9 f9b1 	bl	8000238 <__aeabi_dsub>
 8016ed6:	4622      	mov	r2, r4
 8016ed8:	462b      	mov	r3, r5
 8016eda:	f7e9 fb65 	bl	80005a8 <__aeabi_dmul>
 8016ede:	4602      	mov	r2, r0
 8016ee0:	460b      	mov	r3, r1
 8016ee2:	2000      	movs	r0, #0
 8016ee4:	4950      	ldr	r1, [pc, #320]	; (8017028 <__ieee754_pow+0x3c0>)
 8016ee6:	f7e9 f9a7 	bl	8000238 <__aeabi_dsub>
 8016eea:	4622      	mov	r2, r4
 8016eec:	462b      	mov	r3, r5
 8016eee:	4680      	mov	r8, r0
 8016ef0:	4689      	mov	r9, r1
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	4629      	mov	r1, r5
 8016ef6:	f7e9 fb57 	bl	80005a8 <__aeabi_dmul>
 8016efa:	4602      	mov	r2, r0
 8016efc:	460b      	mov	r3, r1
 8016efe:	4640      	mov	r0, r8
 8016f00:	4649      	mov	r1, r9
 8016f02:	f7e9 fb51 	bl	80005a8 <__aeabi_dmul>
 8016f06:	a340      	add	r3, pc, #256	; (adr r3, 8017008 <__ieee754_pow+0x3a0>)
 8016f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016f0c:	f7e9 fb4c 	bl	80005a8 <__aeabi_dmul>
 8016f10:	4602      	mov	r2, r0
 8016f12:	460b      	mov	r3, r1
 8016f14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016f18:	f7e9 f98e 	bl	8000238 <__aeabi_dsub>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	460b      	mov	r3, r1
 8016f20:	4604      	mov	r4, r0
 8016f22:	460d      	mov	r5, r1
 8016f24:	4630      	mov	r0, r6
 8016f26:	4639      	mov	r1, r7
 8016f28:	f7e9 f988 	bl	800023c <__adddf3>
 8016f2c:	2000      	movs	r0, #0
 8016f2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8016f32:	4632      	mov	r2, r6
 8016f34:	463b      	mov	r3, r7
 8016f36:	f7e9 f97f 	bl	8000238 <__aeabi_dsub>
 8016f3a:	4602      	mov	r2, r0
 8016f3c:	460b      	mov	r3, r1
 8016f3e:	4620      	mov	r0, r4
 8016f40:	4629      	mov	r1, r5
 8016f42:	f7e9 f979 	bl	8000238 <__aeabi_dsub>
 8016f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016f48:	f10b 33ff 	add.w	r3, fp, #4294967295
 8016f4c:	4313      	orrs	r3, r2
 8016f4e:	4606      	mov	r6, r0
 8016f50:	460f      	mov	r7, r1
 8016f52:	f040 81eb 	bne.w	801732c <__ieee754_pow+0x6c4>
 8016f56:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017010 <__ieee754_pow+0x3a8>
 8016f5a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8016f5e:	2400      	movs	r4, #0
 8016f60:	4622      	mov	r2, r4
 8016f62:	462b      	mov	r3, r5
 8016f64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8016f6c:	f7e9 f964 	bl	8000238 <__aeabi_dsub>
 8016f70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016f74:	f7e9 fb18 	bl	80005a8 <__aeabi_dmul>
 8016f78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016f7c:	4680      	mov	r8, r0
 8016f7e:	4689      	mov	r9, r1
 8016f80:	4630      	mov	r0, r6
 8016f82:	4639      	mov	r1, r7
 8016f84:	f7e9 fb10 	bl	80005a8 <__aeabi_dmul>
 8016f88:	4602      	mov	r2, r0
 8016f8a:	460b      	mov	r3, r1
 8016f8c:	4640      	mov	r0, r8
 8016f8e:	4649      	mov	r1, r9
 8016f90:	f7e9 f954 	bl	800023c <__adddf3>
 8016f94:	4622      	mov	r2, r4
 8016f96:	462b      	mov	r3, r5
 8016f98:	4680      	mov	r8, r0
 8016f9a:	4689      	mov	r9, r1
 8016f9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8016fa0:	f7e9 fb02 	bl	80005a8 <__aeabi_dmul>
 8016fa4:	460b      	mov	r3, r1
 8016fa6:	4604      	mov	r4, r0
 8016fa8:	460d      	mov	r5, r1
 8016faa:	4602      	mov	r2, r0
 8016fac:	4649      	mov	r1, r9
 8016fae:	4640      	mov	r0, r8
 8016fb0:	e9cd 4500 	strd	r4, r5, [sp]
 8016fb4:	f7e9 f942 	bl	800023c <__adddf3>
 8016fb8:	4b1c      	ldr	r3, [pc, #112]	; (801702c <__ieee754_pow+0x3c4>)
 8016fba:	4299      	cmp	r1, r3
 8016fbc:	4606      	mov	r6, r0
 8016fbe:	460f      	mov	r7, r1
 8016fc0:	468b      	mov	fp, r1
 8016fc2:	f340 82f7 	ble.w	80175b4 <__ieee754_pow+0x94c>
 8016fc6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8016fca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8016fce:	4303      	orrs	r3, r0
 8016fd0:	f000 81ea 	beq.w	80173a8 <__ieee754_pow+0x740>
 8016fd4:	a310      	add	r3, pc, #64	; (adr r3, 8017018 <__ieee754_pow+0x3b0>)
 8016fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016fde:	f7e9 fae3 	bl	80005a8 <__aeabi_dmul>
 8016fe2:	a30d      	add	r3, pc, #52	; (adr r3, 8017018 <__ieee754_pow+0x3b0>)
 8016fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe8:	e6d5      	b.n	8016d96 <__ieee754_pow+0x12e>
 8016fea:	bf00      	nop
 8016fec:	f3af 8000 	nop.w
 8016ff0:	60000000 	.word	0x60000000
 8016ff4:	3ff71547 	.word	0x3ff71547
 8016ff8:	f85ddf44 	.word	0xf85ddf44
 8016ffc:	3e54ae0b 	.word	0x3e54ae0b
 8017000:	55555555 	.word	0x55555555
 8017004:	3fd55555 	.word	0x3fd55555
 8017008:	652b82fe 	.word	0x652b82fe
 801700c:	3ff71547 	.word	0x3ff71547
 8017010:	00000000 	.word	0x00000000
 8017014:	bff00000 	.word	0xbff00000
 8017018:	8800759c 	.word	0x8800759c
 801701c:	7e37e43c 	.word	0x7e37e43c
 8017020:	3ff00000 	.word	0x3ff00000
 8017024:	3fd00000 	.word	0x3fd00000
 8017028:	3fe00000 	.word	0x3fe00000
 801702c:	408fffff 	.word	0x408fffff
 8017030:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017034:	f04f 0200 	mov.w	r2, #0
 8017038:	da05      	bge.n	8017046 <__ieee754_pow+0x3de>
 801703a:	4bd3      	ldr	r3, [pc, #844]	; (8017388 <__ieee754_pow+0x720>)
 801703c:	f7e9 fab4 	bl	80005a8 <__aeabi_dmul>
 8017040:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017044:	460c      	mov	r4, r1
 8017046:	1523      	asrs	r3, r4, #20
 8017048:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801704c:	4413      	add	r3, r2
 801704e:	9309      	str	r3, [sp, #36]	; 0x24
 8017050:	4bce      	ldr	r3, [pc, #824]	; (801738c <__ieee754_pow+0x724>)
 8017052:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017056:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801705a:	429c      	cmp	r4, r3
 801705c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8017060:	dd08      	ble.n	8017074 <__ieee754_pow+0x40c>
 8017062:	4bcb      	ldr	r3, [pc, #812]	; (8017390 <__ieee754_pow+0x728>)
 8017064:	429c      	cmp	r4, r3
 8017066:	f340 815e 	ble.w	8017326 <__ieee754_pow+0x6be>
 801706a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801706c:	3301      	adds	r3, #1
 801706e:	9309      	str	r3, [sp, #36]	; 0x24
 8017070:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8017074:	f04f 0a00 	mov.w	sl, #0
 8017078:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801707c:	930c      	str	r3, [sp, #48]	; 0x30
 801707e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017080:	4bc4      	ldr	r3, [pc, #784]	; (8017394 <__ieee754_pow+0x72c>)
 8017082:	4413      	add	r3, r2
 8017084:	ed93 7b00 	vldr	d7, [r3]
 8017088:	4629      	mov	r1, r5
 801708a:	ec53 2b17 	vmov	r2, r3, d7
 801708e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8017092:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8017096:	f7e9 f8cf 	bl	8000238 <__aeabi_dsub>
 801709a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801709e:	4606      	mov	r6, r0
 80170a0:	460f      	mov	r7, r1
 80170a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80170a6:	f7e9 f8c9 	bl	800023c <__adddf3>
 80170aa:	4602      	mov	r2, r0
 80170ac:	460b      	mov	r3, r1
 80170ae:	2000      	movs	r0, #0
 80170b0:	49b9      	ldr	r1, [pc, #740]	; (8017398 <__ieee754_pow+0x730>)
 80170b2:	f7e9 fba3 	bl	80007fc <__aeabi_ddiv>
 80170b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80170ba:	4602      	mov	r2, r0
 80170bc:	460b      	mov	r3, r1
 80170be:	4630      	mov	r0, r6
 80170c0:	4639      	mov	r1, r7
 80170c2:	f7e9 fa71 	bl	80005a8 <__aeabi_dmul>
 80170c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80170ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80170ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80170d2:	2300      	movs	r3, #0
 80170d4:	9302      	str	r3, [sp, #8]
 80170d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80170da:	106d      	asrs	r5, r5, #1
 80170dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80170e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80170e4:	2200      	movs	r2, #0
 80170e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80170ea:	4640      	mov	r0, r8
 80170ec:	4649      	mov	r1, r9
 80170ee:	4614      	mov	r4, r2
 80170f0:	461d      	mov	r5, r3
 80170f2:	f7e9 fa59 	bl	80005a8 <__aeabi_dmul>
 80170f6:	4602      	mov	r2, r0
 80170f8:	460b      	mov	r3, r1
 80170fa:	4630      	mov	r0, r6
 80170fc:	4639      	mov	r1, r7
 80170fe:	f7e9 f89b 	bl	8000238 <__aeabi_dsub>
 8017102:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017106:	4606      	mov	r6, r0
 8017108:	460f      	mov	r7, r1
 801710a:	4620      	mov	r0, r4
 801710c:	4629      	mov	r1, r5
 801710e:	f7e9 f893 	bl	8000238 <__aeabi_dsub>
 8017112:	4602      	mov	r2, r0
 8017114:	460b      	mov	r3, r1
 8017116:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801711a:	f7e9 f88d 	bl	8000238 <__aeabi_dsub>
 801711e:	4642      	mov	r2, r8
 8017120:	464b      	mov	r3, r9
 8017122:	f7e9 fa41 	bl	80005a8 <__aeabi_dmul>
 8017126:	4602      	mov	r2, r0
 8017128:	460b      	mov	r3, r1
 801712a:	4630      	mov	r0, r6
 801712c:	4639      	mov	r1, r7
 801712e:	f7e9 f883 	bl	8000238 <__aeabi_dsub>
 8017132:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8017136:	f7e9 fa37 	bl	80005a8 <__aeabi_dmul>
 801713a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801713e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8017142:	4610      	mov	r0, r2
 8017144:	4619      	mov	r1, r3
 8017146:	f7e9 fa2f 	bl	80005a8 <__aeabi_dmul>
 801714a:	a37b      	add	r3, pc, #492	; (adr r3, 8017338 <__ieee754_pow+0x6d0>)
 801714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017150:	4604      	mov	r4, r0
 8017152:	460d      	mov	r5, r1
 8017154:	f7e9 fa28 	bl	80005a8 <__aeabi_dmul>
 8017158:	a379      	add	r3, pc, #484	; (adr r3, 8017340 <__ieee754_pow+0x6d8>)
 801715a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715e:	f7e9 f86d 	bl	800023c <__adddf3>
 8017162:	4622      	mov	r2, r4
 8017164:	462b      	mov	r3, r5
 8017166:	f7e9 fa1f 	bl	80005a8 <__aeabi_dmul>
 801716a:	a377      	add	r3, pc, #476	; (adr r3, 8017348 <__ieee754_pow+0x6e0>)
 801716c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017170:	f7e9 f864 	bl	800023c <__adddf3>
 8017174:	4622      	mov	r2, r4
 8017176:	462b      	mov	r3, r5
 8017178:	f7e9 fa16 	bl	80005a8 <__aeabi_dmul>
 801717c:	a374      	add	r3, pc, #464	; (adr r3, 8017350 <__ieee754_pow+0x6e8>)
 801717e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017182:	f7e9 f85b 	bl	800023c <__adddf3>
 8017186:	4622      	mov	r2, r4
 8017188:	462b      	mov	r3, r5
 801718a:	f7e9 fa0d 	bl	80005a8 <__aeabi_dmul>
 801718e:	a372      	add	r3, pc, #456	; (adr r3, 8017358 <__ieee754_pow+0x6f0>)
 8017190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017194:	f7e9 f852 	bl	800023c <__adddf3>
 8017198:	4622      	mov	r2, r4
 801719a:	462b      	mov	r3, r5
 801719c:	f7e9 fa04 	bl	80005a8 <__aeabi_dmul>
 80171a0:	a36f      	add	r3, pc, #444	; (adr r3, 8017360 <__ieee754_pow+0x6f8>)
 80171a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80171a6:	f7e9 f849 	bl	800023c <__adddf3>
 80171aa:	4622      	mov	r2, r4
 80171ac:	4606      	mov	r6, r0
 80171ae:	460f      	mov	r7, r1
 80171b0:	462b      	mov	r3, r5
 80171b2:	4620      	mov	r0, r4
 80171b4:	4629      	mov	r1, r5
 80171b6:	f7e9 f9f7 	bl	80005a8 <__aeabi_dmul>
 80171ba:	4602      	mov	r2, r0
 80171bc:	460b      	mov	r3, r1
 80171be:	4630      	mov	r0, r6
 80171c0:	4639      	mov	r1, r7
 80171c2:	f7e9 f9f1 	bl	80005a8 <__aeabi_dmul>
 80171c6:	4642      	mov	r2, r8
 80171c8:	4604      	mov	r4, r0
 80171ca:	460d      	mov	r5, r1
 80171cc:	464b      	mov	r3, r9
 80171ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80171d2:	f7e9 f833 	bl	800023c <__adddf3>
 80171d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80171da:	f7e9 f9e5 	bl	80005a8 <__aeabi_dmul>
 80171de:	4622      	mov	r2, r4
 80171e0:	462b      	mov	r3, r5
 80171e2:	f7e9 f82b 	bl	800023c <__adddf3>
 80171e6:	4642      	mov	r2, r8
 80171e8:	4606      	mov	r6, r0
 80171ea:	460f      	mov	r7, r1
 80171ec:	464b      	mov	r3, r9
 80171ee:	4640      	mov	r0, r8
 80171f0:	4649      	mov	r1, r9
 80171f2:	f7e9 f9d9 	bl	80005a8 <__aeabi_dmul>
 80171f6:	2200      	movs	r2, #0
 80171f8:	4b68      	ldr	r3, [pc, #416]	; (801739c <__ieee754_pow+0x734>)
 80171fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80171fe:	f7e9 f81d 	bl	800023c <__adddf3>
 8017202:	4632      	mov	r2, r6
 8017204:	463b      	mov	r3, r7
 8017206:	f7e9 f819 	bl	800023c <__adddf3>
 801720a:	9802      	ldr	r0, [sp, #8]
 801720c:	460d      	mov	r5, r1
 801720e:	4604      	mov	r4, r0
 8017210:	4602      	mov	r2, r0
 8017212:	460b      	mov	r3, r1
 8017214:	4640      	mov	r0, r8
 8017216:	4649      	mov	r1, r9
 8017218:	f7e9 f9c6 	bl	80005a8 <__aeabi_dmul>
 801721c:	2200      	movs	r2, #0
 801721e:	4680      	mov	r8, r0
 8017220:	4689      	mov	r9, r1
 8017222:	4b5e      	ldr	r3, [pc, #376]	; (801739c <__ieee754_pow+0x734>)
 8017224:	4620      	mov	r0, r4
 8017226:	4629      	mov	r1, r5
 8017228:	f7e9 f806 	bl	8000238 <__aeabi_dsub>
 801722c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017230:	f7e9 f802 	bl	8000238 <__aeabi_dsub>
 8017234:	4602      	mov	r2, r0
 8017236:	460b      	mov	r3, r1
 8017238:	4630      	mov	r0, r6
 801723a:	4639      	mov	r1, r7
 801723c:	f7e8 fffc 	bl	8000238 <__aeabi_dsub>
 8017240:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017244:	f7e9 f9b0 	bl	80005a8 <__aeabi_dmul>
 8017248:	4622      	mov	r2, r4
 801724a:	4606      	mov	r6, r0
 801724c:	460f      	mov	r7, r1
 801724e:	462b      	mov	r3, r5
 8017250:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017254:	f7e9 f9a8 	bl	80005a8 <__aeabi_dmul>
 8017258:	4602      	mov	r2, r0
 801725a:	460b      	mov	r3, r1
 801725c:	4630      	mov	r0, r6
 801725e:	4639      	mov	r1, r7
 8017260:	f7e8 ffec 	bl	800023c <__adddf3>
 8017264:	4606      	mov	r6, r0
 8017266:	460f      	mov	r7, r1
 8017268:	4602      	mov	r2, r0
 801726a:	460b      	mov	r3, r1
 801726c:	4640      	mov	r0, r8
 801726e:	4649      	mov	r1, r9
 8017270:	f7e8 ffe4 	bl	800023c <__adddf3>
 8017274:	9802      	ldr	r0, [sp, #8]
 8017276:	a33c      	add	r3, pc, #240	; (adr r3, 8017368 <__ieee754_pow+0x700>)
 8017278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801727c:	4604      	mov	r4, r0
 801727e:	460d      	mov	r5, r1
 8017280:	f7e9 f992 	bl	80005a8 <__aeabi_dmul>
 8017284:	4642      	mov	r2, r8
 8017286:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801728a:	464b      	mov	r3, r9
 801728c:	4620      	mov	r0, r4
 801728e:	4629      	mov	r1, r5
 8017290:	f7e8 ffd2 	bl	8000238 <__aeabi_dsub>
 8017294:	4602      	mov	r2, r0
 8017296:	460b      	mov	r3, r1
 8017298:	4630      	mov	r0, r6
 801729a:	4639      	mov	r1, r7
 801729c:	f7e8 ffcc 	bl	8000238 <__aeabi_dsub>
 80172a0:	a333      	add	r3, pc, #204	; (adr r3, 8017370 <__ieee754_pow+0x708>)
 80172a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172a6:	f7e9 f97f 	bl	80005a8 <__aeabi_dmul>
 80172aa:	a333      	add	r3, pc, #204	; (adr r3, 8017378 <__ieee754_pow+0x710>)
 80172ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172b0:	4606      	mov	r6, r0
 80172b2:	460f      	mov	r7, r1
 80172b4:	4620      	mov	r0, r4
 80172b6:	4629      	mov	r1, r5
 80172b8:	f7e9 f976 	bl	80005a8 <__aeabi_dmul>
 80172bc:	4602      	mov	r2, r0
 80172be:	460b      	mov	r3, r1
 80172c0:	4630      	mov	r0, r6
 80172c2:	4639      	mov	r1, r7
 80172c4:	f7e8 ffba 	bl	800023c <__adddf3>
 80172c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80172ca:	4b35      	ldr	r3, [pc, #212]	; (80173a0 <__ieee754_pow+0x738>)
 80172cc:	4413      	add	r3, r2
 80172ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80172d2:	f7e8 ffb3 	bl	800023c <__adddf3>
 80172d6:	4604      	mov	r4, r0
 80172d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80172da:	460d      	mov	r5, r1
 80172dc:	f7e9 f8fa 	bl	80004d4 <__aeabi_i2d>
 80172e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80172e2:	4b30      	ldr	r3, [pc, #192]	; (80173a4 <__ieee754_pow+0x73c>)
 80172e4:	4413      	add	r3, r2
 80172e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80172ea:	4606      	mov	r6, r0
 80172ec:	460f      	mov	r7, r1
 80172ee:	4622      	mov	r2, r4
 80172f0:	462b      	mov	r3, r5
 80172f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80172f6:	f7e8 ffa1 	bl	800023c <__adddf3>
 80172fa:	4642      	mov	r2, r8
 80172fc:	464b      	mov	r3, r9
 80172fe:	f7e8 ff9d 	bl	800023c <__adddf3>
 8017302:	4632      	mov	r2, r6
 8017304:	463b      	mov	r3, r7
 8017306:	f7e8 ff99 	bl	800023c <__adddf3>
 801730a:	9802      	ldr	r0, [sp, #8]
 801730c:	4632      	mov	r2, r6
 801730e:	463b      	mov	r3, r7
 8017310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017314:	f7e8 ff90 	bl	8000238 <__aeabi_dsub>
 8017318:	4642      	mov	r2, r8
 801731a:	464b      	mov	r3, r9
 801731c:	f7e8 ff8c 	bl	8000238 <__aeabi_dsub>
 8017320:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8017324:	e607      	b.n	8016f36 <__ieee754_pow+0x2ce>
 8017326:	f04f 0a01 	mov.w	sl, #1
 801732a:	e6a5      	b.n	8017078 <__ieee754_pow+0x410>
 801732c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8017380 <__ieee754_pow+0x718>
 8017330:	e613      	b.n	8016f5a <__ieee754_pow+0x2f2>
 8017332:	bf00      	nop
 8017334:	f3af 8000 	nop.w
 8017338:	4a454eef 	.word	0x4a454eef
 801733c:	3fca7e28 	.word	0x3fca7e28
 8017340:	93c9db65 	.word	0x93c9db65
 8017344:	3fcd864a 	.word	0x3fcd864a
 8017348:	a91d4101 	.word	0xa91d4101
 801734c:	3fd17460 	.word	0x3fd17460
 8017350:	518f264d 	.word	0x518f264d
 8017354:	3fd55555 	.word	0x3fd55555
 8017358:	db6fabff 	.word	0xdb6fabff
 801735c:	3fdb6db6 	.word	0x3fdb6db6
 8017360:	33333303 	.word	0x33333303
 8017364:	3fe33333 	.word	0x3fe33333
 8017368:	e0000000 	.word	0xe0000000
 801736c:	3feec709 	.word	0x3feec709
 8017370:	dc3a03fd 	.word	0xdc3a03fd
 8017374:	3feec709 	.word	0x3feec709
 8017378:	145b01f5 	.word	0x145b01f5
 801737c:	be3e2fe0 	.word	0xbe3e2fe0
 8017380:	00000000 	.word	0x00000000
 8017384:	3ff00000 	.word	0x3ff00000
 8017388:	43400000 	.word	0x43400000
 801738c:	0003988e 	.word	0x0003988e
 8017390:	000bb679 	.word	0x000bb679
 8017394:	08019b80 	.word	0x08019b80
 8017398:	3ff00000 	.word	0x3ff00000
 801739c:	40080000 	.word	0x40080000
 80173a0:	08019ba0 	.word	0x08019ba0
 80173a4:	08019b90 	.word	0x08019b90
 80173a8:	a3b4      	add	r3, pc, #720	; (adr r3, 801767c <__ieee754_pow+0xa14>)
 80173aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ae:	4640      	mov	r0, r8
 80173b0:	4649      	mov	r1, r9
 80173b2:	f7e8 ff43 	bl	800023c <__adddf3>
 80173b6:	4622      	mov	r2, r4
 80173b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80173bc:	462b      	mov	r3, r5
 80173be:	4630      	mov	r0, r6
 80173c0:	4639      	mov	r1, r7
 80173c2:	f7e8 ff39 	bl	8000238 <__aeabi_dsub>
 80173c6:	4602      	mov	r2, r0
 80173c8:	460b      	mov	r3, r1
 80173ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80173ce:	f7e9 fb7b 	bl	8000ac8 <__aeabi_dcmpgt>
 80173d2:	2800      	cmp	r0, #0
 80173d4:	f47f adfe 	bne.w	8016fd4 <__ieee754_pow+0x36c>
 80173d8:	4aa3      	ldr	r2, [pc, #652]	; (8017668 <__ieee754_pow+0xa00>)
 80173da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80173de:	4293      	cmp	r3, r2
 80173e0:	f340 810a 	ble.w	80175f8 <__ieee754_pow+0x990>
 80173e4:	151b      	asrs	r3, r3, #20
 80173e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80173ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80173ee:	fa4a f303 	asr.w	r3, sl, r3
 80173f2:	445b      	add	r3, fp
 80173f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80173f8:	4e9c      	ldr	r6, [pc, #624]	; (801766c <__ieee754_pow+0xa04>)
 80173fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80173fe:	4116      	asrs	r6, r2
 8017400:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017404:	2000      	movs	r0, #0
 8017406:	ea23 0106 	bic.w	r1, r3, r6
 801740a:	f1c2 0214 	rsb	r2, r2, #20
 801740e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017412:	fa4a fa02 	asr.w	sl, sl, r2
 8017416:	f1bb 0f00 	cmp.w	fp, #0
 801741a:	4602      	mov	r2, r0
 801741c:	460b      	mov	r3, r1
 801741e:	4620      	mov	r0, r4
 8017420:	4629      	mov	r1, r5
 8017422:	bfb8      	it	lt
 8017424:	f1ca 0a00 	rsblt	sl, sl, #0
 8017428:	f7e8 ff06 	bl	8000238 <__aeabi_dsub>
 801742c:	e9cd 0100 	strd	r0, r1, [sp]
 8017430:	4642      	mov	r2, r8
 8017432:	464b      	mov	r3, r9
 8017434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017438:	f7e8 ff00 	bl	800023c <__adddf3>
 801743c:	2000      	movs	r0, #0
 801743e:	a378      	add	r3, pc, #480	; (adr r3, 8017620 <__ieee754_pow+0x9b8>)
 8017440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017444:	4604      	mov	r4, r0
 8017446:	460d      	mov	r5, r1
 8017448:	f7e9 f8ae 	bl	80005a8 <__aeabi_dmul>
 801744c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017450:	4606      	mov	r6, r0
 8017452:	460f      	mov	r7, r1
 8017454:	4620      	mov	r0, r4
 8017456:	4629      	mov	r1, r5
 8017458:	f7e8 feee 	bl	8000238 <__aeabi_dsub>
 801745c:	4602      	mov	r2, r0
 801745e:	460b      	mov	r3, r1
 8017460:	4640      	mov	r0, r8
 8017462:	4649      	mov	r1, r9
 8017464:	f7e8 fee8 	bl	8000238 <__aeabi_dsub>
 8017468:	a36f      	add	r3, pc, #444	; (adr r3, 8017628 <__ieee754_pow+0x9c0>)
 801746a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801746e:	f7e9 f89b 	bl	80005a8 <__aeabi_dmul>
 8017472:	a36f      	add	r3, pc, #444	; (adr r3, 8017630 <__ieee754_pow+0x9c8>)
 8017474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017478:	4680      	mov	r8, r0
 801747a:	4689      	mov	r9, r1
 801747c:	4620      	mov	r0, r4
 801747e:	4629      	mov	r1, r5
 8017480:	f7e9 f892 	bl	80005a8 <__aeabi_dmul>
 8017484:	4602      	mov	r2, r0
 8017486:	460b      	mov	r3, r1
 8017488:	4640      	mov	r0, r8
 801748a:	4649      	mov	r1, r9
 801748c:	f7e8 fed6 	bl	800023c <__adddf3>
 8017490:	4604      	mov	r4, r0
 8017492:	460d      	mov	r5, r1
 8017494:	4602      	mov	r2, r0
 8017496:	460b      	mov	r3, r1
 8017498:	4630      	mov	r0, r6
 801749a:	4639      	mov	r1, r7
 801749c:	f7e8 fece 	bl	800023c <__adddf3>
 80174a0:	4632      	mov	r2, r6
 80174a2:	463b      	mov	r3, r7
 80174a4:	4680      	mov	r8, r0
 80174a6:	4689      	mov	r9, r1
 80174a8:	f7e8 fec6 	bl	8000238 <__aeabi_dsub>
 80174ac:	4602      	mov	r2, r0
 80174ae:	460b      	mov	r3, r1
 80174b0:	4620      	mov	r0, r4
 80174b2:	4629      	mov	r1, r5
 80174b4:	f7e8 fec0 	bl	8000238 <__aeabi_dsub>
 80174b8:	4642      	mov	r2, r8
 80174ba:	4606      	mov	r6, r0
 80174bc:	460f      	mov	r7, r1
 80174be:	464b      	mov	r3, r9
 80174c0:	4640      	mov	r0, r8
 80174c2:	4649      	mov	r1, r9
 80174c4:	f7e9 f870 	bl	80005a8 <__aeabi_dmul>
 80174c8:	a35b      	add	r3, pc, #364	; (adr r3, 8017638 <__ieee754_pow+0x9d0>)
 80174ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ce:	4604      	mov	r4, r0
 80174d0:	460d      	mov	r5, r1
 80174d2:	f7e9 f869 	bl	80005a8 <__aeabi_dmul>
 80174d6:	a35a      	add	r3, pc, #360	; (adr r3, 8017640 <__ieee754_pow+0x9d8>)
 80174d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174dc:	f7e8 feac 	bl	8000238 <__aeabi_dsub>
 80174e0:	4622      	mov	r2, r4
 80174e2:	462b      	mov	r3, r5
 80174e4:	f7e9 f860 	bl	80005a8 <__aeabi_dmul>
 80174e8:	a357      	add	r3, pc, #348	; (adr r3, 8017648 <__ieee754_pow+0x9e0>)
 80174ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174ee:	f7e8 fea5 	bl	800023c <__adddf3>
 80174f2:	4622      	mov	r2, r4
 80174f4:	462b      	mov	r3, r5
 80174f6:	f7e9 f857 	bl	80005a8 <__aeabi_dmul>
 80174fa:	a355      	add	r3, pc, #340	; (adr r3, 8017650 <__ieee754_pow+0x9e8>)
 80174fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017500:	f7e8 fe9a 	bl	8000238 <__aeabi_dsub>
 8017504:	4622      	mov	r2, r4
 8017506:	462b      	mov	r3, r5
 8017508:	f7e9 f84e 	bl	80005a8 <__aeabi_dmul>
 801750c:	a352      	add	r3, pc, #328	; (adr r3, 8017658 <__ieee754_pow+0x9f0>)
 801750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017512:	f7e8 fe93 	bl	800023c <__adddf3>
 8017516:	4622      	mov	r2, r4
 8017518:	462b      	mov	r3, r5
 801751a:	f7e9 f845 	bl	80005a8 <__aeabi_dmul>
 801751e:	4602      	mov	r2, r0
 8017520:	460b      	mov	r3, r1
 8017522:	4640      	mov	r0, r8
 8017524:	4649      	mov	r1, r9
 8017526:	f7e8 fe87 	bl	8000238 <__aeabi_dsub>
 801752a:	4604      	mov	r4, r0
 801752c:	460d      	mov	r5, r1
 801752e:	4602      	mov	r2, r0
 8017530:	460b      	mov	r3, r1
 8017532:	4640      	mov	r0, r8
 8017534:	4649      	mov	r1, r9
 8017536:	f7e9 f837 	bl	80005a8 <__aeabi_dmul>
 801753a:	2200      	movs	r2, #0
 801753c:	e9cd 0100 	strd	r0, r1, [sp]
 8017540:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017544:	4620      	mov	r0, r4
 8017546:	4629      	mov	r1, r5
 8017548:	f7e8 fe76 	bl	8000238 <__aeabi_dsub>
 801754c:	4602      	mov	r2, r0
 801754e:	460b      	mov	r3, r1
 8017550:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017554:	f7e9 f952 	bl	80007fc <__aeabi_ddiv>
 8017558:	4632      	mov	r2, r6
 801755a:	4604      	mov	r4, r0
 801755c:	460d      	mov	r5, r1
 801755e:	463b      	mov	r3, r7
 8017560:	4640      	mov	r0, r8
 8017562:	4649      	mov	r1, r9
 8017564:	f7e9 f820 	bl	80005a8 <__aeabi_dmul>
 8017568:	4632      	mov	r2, r6
 801756a:	463b      	mov	r3, r7
 801756c:	f7e8 fe66 	bl	800023c <__adddf3>
 8017570:	4602      	mov	r2, r0
 8017572:	460b      	mov	r3, r1
 8017574:	4620      	mov	r0, r4
 8017576:	4629      	mov	r1, r5
 8017578:	f7e8 fe5e 	bl	8000238 <__aeabi_dsub>
 801757c:	4642      	mov	r2, r8
 801757e:	464b      	mov	r3, r9
 8017580:	f7e8 fe5a 	bl	8000238 <__aeabi_dsub>
 8017584:	4602      	mov	r2, r0
 8017586:	460b      	mov	r3, r1
 8017588:	2000      	movs	r0, #0
 801758a:	4939      	ldr	r1, [pc, #228]	; (8017670 <__ieee754_pow+0xa08>)
 801758c:	f7e8 fe54 	bl	8000238 <__aeabi_dsub>
 8017590:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8017594:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017598:	4602      	mov	r2, r0
 801759a:	460b      	mov	r3, r1
 801759c:	da2f      	bge.n	80175fe <__ieee754_pow+0x996>
 801759e:	4650      	mov	r0, sl
 80175a0:	ec43 2b10 	vmov	d0, r2, r3
 80175a4:	f000 f9c0 	bl	8017928 <scalbn>
 80175a8:	ec51 0b10 	vmov	r0, r1, d0
 80175ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80175b0:	f7ff bbf1 	b.w	8016d96 <__ieee754_pow+0x12e>
 80175b4:	4b2f      	ldr	r3, [pc, #188]	; (8017674 <__ieee754_pow+0xa0c>)
 80175b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80175ba:	429e      	cmp	r6, r3
 80175bc:	f77f af0c 	ble.w	80173d8 <__ieee754_pow+0x770>
 80175c0:	4b2d      	ldr	r3, [pc, #180]	; (8017678 <__ieee754_pow+0xa10>)
 80175c2:	440b      	add	r3, r1
 80175c4:	4303      	orrs	r3, r0
 80175c6:	d00b      	beq.n	80175e0 <__ieee754_pow+0x978>
 80175c8:	a325      	add	r3, pc, #148	; (adr r3, 8017660 <__ieee754_pow+0x9f8>)
 80175ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80175d2:	f7e8 ffe9 	bl	80005a8 <__aeabi_dmul>
 80175d6:	a322      	add	r3, pc, #136	; (adr r3, 8017660 <__ieee754_pow+0x9f8>)
 80175d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175dc:	f7ff bbdb 	b.w	8016d96 <__ieee754_pow+0x12e>
 80175e0:	4622      	mov	r2, r4
 80175e2:	462b      	mov	r3, r5
 80175e4:	f7e8 fe28 	bl	8000238 <__aeabi_dsub>
 80175e8:	4642      	mov	r2, r8
 80175ea:	464b      	mov	r3, r9
 80175ec:	f7e9 fa62 	bl	8000ab4 <__aeabi_dcmpge>
 80175f0:	2800      	cmp	r0, #0
 80175f2:	f43f aef1 	beq.w	80173d8 <__ieee754_pow+0x770>
 80175f6:	e7e7      	b.n	80175c8 <__ieee754_pow+0x960>
 80175f8:	f04f 0a00 	mov.w	sl, #0
 80175fc:	e718      	b.n	8017430 <__ieee754_pow+0x7c8>
 80175fe:	4621      	mov	r1, r4
 8017600:	e7d4      	b.n	80175ac <__ieee754_pow+0x944>
 8017602:	2000      	movs	r0, #0
 8017604:	491a      	ldr	r1, [pc, #104]	; (8017670 <__ieee754_pow+0xa08>)
 8017606:	f7ff bb8f 	b.w	8016d28 <__ieee754_pow+0xc0>
 801760a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801760e:	f7ff bb8b 	b.w	8016d28 <__ieee754_pow+0xc0>
 8017612:	4630      	mov	r0, r6
 8017614:	4639      	mov	r1, r7
 8017616:	f7ff bb87 	b.w	8016d28 <__ieee754_pow+0xc0>
 801761a:	4693      	mov	fp, r2
 801761c:	f7ff bb98 	b.w	8016d50 <__ieee754_pow+0xe8>
 8017620:	00000000 	.word	0x00000000
 8017624:	3fe62e43 	.word	0x3fe62e43
 8017628:	fefa39ef 	.word	0xfefa39ef
 801762c:	3fe62e42 	.word	0x3fe62e42
 8017630:	0ca86c39 	.word	0x0ca86c39
 8017634:	be205c61 	.word	0xbe205c61
 8017638:	72bea4d0 	.word	0x72bea4d0
 801763c:	3e663769 	.word	0x3e663769
 8017640:	c5d26bf1 	.word	0xc5d26bf1
 8017644:	3ebbbd41 	.word	0x3ebbbd41
 8017648:	af25de2c 	.word	0xaf25de2c
 801764c:	3f11566a 	.word	0x3f11566a
 8017650:	16bebd93 	.word	0x16bebd93
 8017654:	3f66c16c 	.word	0x3f66c16c
 8017658:	5555553e 	.word	0x5555553e
 801765c:	3fc55555 	.word	0x3fc55555
 8017660:	c2f8f359 	.word	0xc2f8f359
 8017664:	01a56e1f 	.word	0x01a56e1f
 8017668:	3fe00000 	.word	0x3fe00000
 801766c:	000fffff 	.word	0x000fffff
 8017670:	3ff00000 	.word	0x3ff00000
 8017674:	4090cbff 	.word	0x4090cbff
 8017678:	3f6f3400 	.word	0x3f6f3400
 801767c:	652b82fe 	.word	0x652b82fe
 8017680:	3c971547 	.word	0x3c971547

08017684 <__ieee754_sqrt>:
 8017684:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017688:	4955      	ldr	r1, [pc, #340]	; (80177e0 <__ieee754_sqrt+0x15c>)
 801768a:	ec55 4b10 	vmov	r4, r5, d0
 801768e:	43a9      	bics	r1, r5
 8017690:	462b      	mov	r3, r5
 8017692:	462a      	mov	r2, r5
 8017694:	d112      	bne.n	80176bc <__ieee754_sqrt+0x38>
 8017696:	ee10 2a10 	vmov	r2, s0
 801769a:	ee10 0a10 	vmov	r0, s0
 801769e:	4629      	mov	r1, r5
 80176a0:	f7e8 ff82 	bl	80005a8 <__aeabi_dmul>
 80176a4:	4602      	mov	r2, r0
 80176a6:	460b      	mov	r3, r1
 80176a8:	4620      	mov	r0, r4
 80176aa:	4629      	mov	r1, r5
 80176ac:	f7e8 fdc6 	bl	800023c <__adddf3>
 80176b0:	4604      	mov	r4, r0
 80176b2:	460d      	mov	r5, r1
 80176b4:	ec45 4b10 	vmov	d0, r4, r5
 80176b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176bc:	2d00      	cmp	r5, #0
 80176be:	ee10 0a10 	vmov	r0, s0
 80176c2:	4621      	mov	r1, r4
 80176c4:	dc0f      	bgt.n	80176e6 <__ieee754_sqrt+0x62>
 80176c6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80176ca:	4330      	orrs	r0, r6
 80176cc:	d0f2      	beq.n	80176b4 <__ieee754_sqrt+0x30>
 80176ce:	b155      	cbz	r5, 80176e6 <__ieee754_sqrt+0x62>
 80176d0:	ee10 2a10 	vmov	r2, s0
 80176d4:	4620      	mov	r0, r4
 80176d6:	4629      	mov	r1, r5
 80176d8:	f7e8 fdae 	bl	8000238 <__aeabi_dsub>
 80176dc:	4602      	mov	r2, r0
 80176de:	460b      	mov	r3, r1
 80176e0:	f7e9 f88c 	bl	80007fc <__aeabi_ddiv>
 80176e4:	e7e4      	b.n	80176b0 <__ieee754_sqrt+0x2c>
 80176e6:	151b      	asrs	r3, r3, #20
 80176e8:	d073      	beq.n	80177d2 <__ieee754_sqrt+0x14e>
 80176ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80176ee:	07dd      	lsls	r5, r3, #31
 80176f0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80176f4:	bf48      	it	mi
 80176f6:	0fc8      	lsrmi	r0, r1, #31
 80176f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80176fc:	bf44      	itt	mi
 80176fe:	0049      	lslmi	r1, r1, #1
 8017700:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8017704:	2500      	movs	r5, #0
 8017706:	1058      	asrs	r0, r3, #1
 8017708:	0fcb      	lsrs	r3, r1, #31
 801770a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801770e:	0049      	lsls	r1, r1, #1
 8017710:	2316      	movs	r3, #22
 8017712:	462c      	mov	r4, r5
 8017714:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8017718:	19a7      	adds	r7, r4, r6
 801771a:	4297      	cmp	r7, r2
 801771c:	bfde      	ittt	le
 801771e:	19bc      	addle	r4, r7, r6
 8017720:	1bd2      	suble	r2, r2, r7
 8017722:	19ad      	addle	r5, r5, r6
 8017724:	0fcf      	lsrs	r7, r1, #31
 8017726:	3b01      	subs	r3, #1
 8017728:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801772c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017730:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8017734:	d1f0      	bne.n	8017718 <__ieee754_sqrt+0x94>
 8017736:	f04f 0c20 	mov.w	ip, #32
 801773a:	469e      	mov	lr, r3
 801773c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8017740:	42a2      	cmp	r2, r4
 8017742:	eb06 070e 	add.w	r7, r6, lr
 8017746:	dc02      	bgt.n	801774e <__ieee754_sqrt+0xca>
 8017748:	d112      	bne.n	8017770 <__ieee754_sqrt+0xec>
 801774a:	428f      	cmp	r7, r1
 801774c:	d810      	bhi.n	8017770 <__ieee754_sqrt+0xec>
 801774e:	2f00      	cmp	r7, #0
 8017750:	eb07 0e06 	add.w	lr, r7, r6
 8017754:	da42      	bge.n	80177dc <__ieee754_sqrt+0x158>
 8017756:	f1be 0f00 	cmp.w	lr, #0
 801775a:	db3f      	blt.n	80177dc <__ieee754_sqrt+0x158>
 801775c:	f104 0801 	add.w	r8, r4, #1
 8017760:	1b12      	subs	r2, r2, r4
 8017762:	428f      	cmp	r7, r1
 8017764:	bf88      	it	hi
 8017766:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801776a:	1bc9      	subs	r1, r1, r7
 801776c:	4433      	add	r3, r6
 801776e:	4644      	mov	r4, r8
 8017770:	0052      	lsls	r2, r2, #1
 8017772:	f1bc 0c01 	subs.w	ip, ip, #1
 8017776:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801777a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801777e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8017782:	d1dd      	bne.n	8017740 <__ieee754_sqrt+0xbc>
 8017784:	430a      	orrs	r2, r1
 8017786:	d006      	beq.n	8017796 <__ieee754_sqrt+0x112>
 8017788:	1c5c      	adds	r4, r3, #1
 801778a:	bf13      	iteet	ne
 801778c:	3301      	addne	r3, #1
 801778e:	3501      	addeq	r5, #1
 8017790:	4663      	moveq	r3, ip
 8017792:	f023 0301 	bicne.w	r3, r3, #1
 8017796:	106a      	asrs	r2, r5, #1
 8017798:	085b      	lsrs	r3, r3, #1
 801779a:	07e9      	lsls	r1, r5, #31
 801779c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80177a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80177a4:	bf48      	it	mi
 80177a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80177aa:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80177ae:	461c      	mov	r4, r3
 80177b0:	e780      	b.n	80176b4 <__ieee754_sqrt+0x30>
 80177b2:	0aca      	lsrs	r2, r1, #11
 80177b4:	3815      	subs	r0, #21
 80177b6:	0549      	lsls	r1, r1, #21
 80177b8:	2a00      	cmp	r2, #0
 80177ba:	d0fa      	beq.n	80177b2 <__ieee754_sqrt+0x12e>
 80177bc:	02d6      	lsls	r6, r2, #11
 80177be:	d50a      	bpl.n	80177d6 <__ieee754_sqrt+0x152>
 80177c0:	f1c3 0420 	rsb	r4, r3, #32
 80177c4:	fa21 f404 	lsr.w	r4, r1, r4
 80177c8:	1e5d      	subs	r5, r3, #1
 80177ca:	4099      	lsls	r1, r3
 80177cc:	4322      	orrs	r2, r4
 80177ce:	1b43      	subs	r3, r0, r5
 80177d0:	e78b      	b.n	80176ea <__ieee754_sqrt+0x66>
 80177d2:	4618      	mov	r0, r3
 80177d4:	e7f0      	b.n	80177b8 <__ieee754_sqrt+0x134>
 80177d6:	0052      	lsls	r2, r2, #1
 80177d8:	3301      	adds	r3, #1
 80177da:	e7ef      	b.n	80177bc <__ieee754_sqrt+0x138>
 80177dc:	46a0      	mov	r8, r4
 80177de:	e7bf      	b.n	8017760 <__ieee754_sqrt+0xdc>
 80177e0:	7ff00000 	.word	0x7ff00000

080177e4 <fabs>:
 80177e4:	ec51 0b10 	vmov	r0, r1, d0
 80177e8:	ee10 2a10 	vmov	r2, s0
 80177ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80177f0:	ec43 2b10 	vmov	d0, r2, r3
 80177f4:	4770      	bx	lr

080177f6 <finite>:
 80177f6:	ee10 3a90 	vmov	r3, s1
 80177fa:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80177fe:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017802:	0fc0      	lsrs	r0, r0, #31
 8017804:	4770      	bx	lr

08017806 <matherr>:
 8017806:	2000      	movs	r0, #0
 8017808:	4770      	bx	lr
 801780a:	0000      	movs	r0, r0
 801780c:	0000      	movs	r0, r0
	...

08017810 <nan>:
 8017810:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017818 <nan+0x8>
 8017814:	4770      	bx	lr
 8017816:	bf00      	nop
 8017818:	00000000 	.word	0x00000000
 801781c:	7ff80000 	.word	0x7ff80000

08017820 <rint>:
 8017820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017822:	ec51 0b10 	vmov	r0, r1, d0
 8017826:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801782a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801782e:	2e13      	cmp	r6, #19
 8017830:	460b      	mov	r3, r1
 8017832:	ee10 4a10 	vmov	r4, s0
 8017836:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801783a:	dc56      	bgt.n	80178ea <rint+0xca>
 801783c:	2e00      	cmp	r6, #0
 801783e:	da2b      	bge.n	8017898 <rint+0x78>
 8017840:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017844:	4302      	orrs	r2, r0
 8017846:	d023      	beq.n	8017890 <rint+0x70>
 8017848:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801784c:	4302      	orrs	r2, r0
 801784e:	4254      	negs	r4, r2
 8017850:	4314      	orrs	r4, r2
 8017852:	0c4b      	lsrs	r3, r1, #17
 8017854:	0b24      	lsrs	r4, r4, #12
 8017856:	045b      	lsls	r3, r3, #17
 8017858:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801785c:	ea44 0103 	orr.w	r1, r4, r3
 8017860:	460b      	mov	r3, r1
 8017862:	492f      	ldr	r1, [pc, #188]	; (8017920 <rint+0x100>)
 8017864:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8017868:	e9d1 6700 	ldrd	r6, r7, [r1]
 801786c:	4602      	mov	r2, r0
 801786e:	4639      	mov	r1, r7
 8017870:	4630      	mov	r0, r6
 8017872:	f7e8 fce3 	bl	800023c <__adddf3>
 8017876:	e9cd 0100 	strd	r0, r1, [sp]
 801787a:	463b      	mov	r3, r7
 801787c:	4632      	mov	r2, r6
 801787e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017882:	f7e8 fcd9 	bl	8000238 <__aeabi_dsub>
 8017886:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801788a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801788e:	4639      	mov	r1, r7
 8017890:	ec41 0b10 	vmov	d0, r0, r1
 8017894:	b003      	add	sp, #12
 8017896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017898:	4a22      	ldr	r2, [pc, #136]	; (8017924 <rint+0x104>)
 801789a:	4132      	asrs	r2, r6
 801789c:	ea01 0702 	and.w	r7, r1, r2
 80178a0:	4307      	orrs	r7, r0
 80178a2:	d0f5      	beq.n	8017890 <rint+0x70>
 80178a4:	0852      	lsrs	r2, r2, #1
 80178a6:	4011      	ands	r1, r2
 80178a8:	430c      	orrs	r4, r1
 80178aa:	d00b      	beq.n	80178c4 <rint+0xa4>
 80178ac:	ea23 0202 	bic.w	r2, r3, r2
 80178b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80178b4:	2e13      	cmp	r6, #19
 80178b6:	fa43 f306 	asr.w	r3, r3, r6
 80178ba:	bf0c      	ite	eq
 80178bc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80178c0:	2400      	movne	r4, #0
 80178c2:	4313      	orrs	r3, r2
 80178c4:	4916      	ldr	r1, [pc, #88]	; (8017920 <rint+0x100>)
 80178c6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80178ca:	4622      	mov	r2, r4
 80178cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 80178d0:	4620      	mov	r0, r4
 80178d2:	4629      	mov	r1, r5
 80178d4:	f7e8 fcb2 	bl	800023c <__adddf3>
 80178d8:	e9cd 0100 	strd	r0, r1, [sp]
 80178dc:	4622      	mov	r2, r4
 80178de:	462b      	mov	r3, r5
 80178e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80178e4:	f7e8 fca8 	bl	8000238 <__aeabi_dsub>
 80178e8:	e7d2      	b.n	8017890 <rint+0x70>
 80178ea:	2e33      	cmp	r6, #51	; 0x33
 80178ec:	dd07      	ble.n	80178fe <rint+0xde>
 80178ee:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80178f2:	d1cd      	bne.n	8017890 <rint+0x70>
 80178f4:	ee10 2a10 	vmov	r2, s0
 80178f8:	f7e8 fca0 	bl	800023c <__adddf3>
 80178fc:	e7c8      	b.n	8017890 <rint+0x70>
 80178fe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8017902:	f04f 32ff 	mov.w	r2, #4294967295
 8017906:	40f2      	lsrs	r2, r6
 8017908:	4210      	tst	r0, r2
 801790a:	d0c1      	beq.n	8017890 <rint+0x70>
 801790c:	0852      	lsrs	r2, r2, #1
 801790e:	4210      	tst	r0, r2
 8017910:	bf1f      	itttt	ne
 8017912:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8017916:	ea20 0202 	bicne.w	r2, r0, r2
 801791a:	4134      	asrne	r4, r6
 801791c:	4314      	orrne	r4, r2
 801791e:	e7d1      	b.n	80178c4 <rint+0xa4>
 8017920:	08019bb0 	.word	0x08019bb0
 8017924:	000fffff 	.word	0x000fffff

08017928 <scalbn>:
 8017928:	b570      	push	{r4, r5, r6, lr}
 801792a:	ec55 4b10 	vmov	r4, r5, d0
 801792e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017932:	4606      	mov	r6, r0
 8017934:	462b      	mov	r3, r5
 8017936:	b9aa      	cbnz	r2, 8017964 <scalbn+0x3c>
 8017938:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801793c:	4323      	orrs	r3, r4
 801793e:	d03b      	beq.n	80179b8 <scalbn+0x90>
 8017940:	4b31      	ldr	r3, [pc, #196]	; (8017a08 <scalbn+0xe0>)
 8017942:	4629      	mov	r1, r5
 8017944:	2200      	movs	r2, #0
 8017946:	ee10 0a10 	vmov	r0, s0
 801794a:	f7e8 fe2d 	bl	80005a8 <__aeabi_dmul>
 801794e:	4b2f      	ldr	r3, [pc, #188]	; (8017a0c <scalbn+0xe4>)
 8017950:	429e      	cmp	r6, r3
 8017952:	4604      	mov	r4, r0
 8017954:	460d      	mov	r5, r1
 8017956:	da12      	bge.n	801797e <scalbn+0x56>
 8017958:	a327      	add	r3, pc, #156	; (adr r3, 80179f8 <scalbn+0xd0>)
 801795a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795e:	f7e8 fe23 	bl	80005a8 <__aeabi_dmul>
 8017962:	e009      	b.n	8017978 <scalbn+0x50>
 8017964:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017968:	428a      	cmp	r2, r1
 801796a:	d10c      	bne.n	8017986 <scalbn+0x5e>
 801796c:	ee10 2a10 	vmov	r2, s0
 8017970:	4620      	mov	r0, r4
 8017972:	4629      	mov	r1, r5
 8017974:	f7e8 fc62 	bl	800023c <__adddf3>
 8017978:	4604      	mov	r4, r0
 801797a:	460d      	mov	r5, r1
 801797c:	e01c      	b.n	80179b8 <scalbn+0x90>
 801797e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017982:	460b      	mov	r3, r1
 8017984:	3a36      	subs	r2, #54	; 0x36
 8017986:	4432      	add	r2, r6
 8017988:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801798c:	428a      	cmp	r2, r1
 801798e:	dd0b      	ble.n	80179a8 <scalbn+0x80>
 8017990:	ec45 4b11 	vmov	d1, r4, r5
 8017994:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8017a00 <scalbn+0xd8>
 8017998:	f000 f83c 	bl	8017a14 <copysign>
 801799c:	a318      	add	r3, pc, #96	; (adr r3, 8017a00 <scalbn+0xd8>)
 801799e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179a2:	ec51 0b10 	vmov	r0, r1, d0
 80179a6:	e7da      	b.n	801795e <scalbn+0x36>
 80179a8:	2a00      	cmp	r2, #0
 80179aa:	dd08      	ble.n	80179be <scalbn+0x96>
 80179ac:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80179b0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80179b4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80179b8:	ec45 4b10 	vmov	d0, r4, r5
 80179bc:	bd70      	pop	{r4, r5, r6, pc}
 80179be:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80179c2:	da0d      	bge.n	80179e0 <scalbn+0xb8>
 80179c4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80179c8:	429e      	cmp	r6, r3
 80179ca:	ec45 4b11 	vmov	d1, r4, r5
 80179ce:	dce1      	bgt.n	8017994 <scalbn+0x6c>
 80179d0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80179f8 <scalbn+0xd0>
 80179d4:	f000 f81e 	bl	8017a14 <copysign>
 80179d8:	a307      	add	r3, pc, #28	; (adr r3, 80179f8 <scalbn+0xd0>)
 80179da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80179de:	e7e0      	b.n	80179a2 <scalbn+0x7a>
 80179e0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80179e4:	3236      	adds	r2, #54	; 0x36
 80179e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80179ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80179ee:	4620      	mov	r0, r4
 80179f0:	4629      	mov	r1, r5
 80179f2:	2200      	movs	r2, #0
 80179f4:	4b06      	ldr	r3, [pc, #24]	; (8017a10 <scalbn+0xe8>)
 80179f6:	e7b2      	b.n	801795e <scalbn+0x36>
 80179f8:	c2f8f359 	.word	0xc2f8f359
 80179fc:	01a56e1f 	.word	0x01a56e1f
 8017a00:	8800759c 	.word	0x8800759c
 8017a04:	7e37e43c 	.word	0x7e37e43c
 8017a08:	43500000 	.word	0x43500000
 8017a0c:	ffff3cb0 	.word	0xffff3cb0
 8017a10:	3c900000 	.word	0x3c900000

08017a14 <copysign>:
 8017a14:	ec51 0b10 	vmov	r0, r1, d0
 8017a18:	ee11 0a90 	vmov	r0, s3
 8017a1c:	ee10 2a10 	vmov	r2, s0
 8017a20:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8017a24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017a28:	ea41 0300 	orr.w	r3, r1, r0
 8017a2c:	ec43 2b10 	vmov	d0, r2, r3
 8017a30:	4770      	bx	lr
	...

08017a34 <_init>:
 8017a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a36:	bf00      	nop
 8017a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a3a:	bc08      	pop	{r3}
 8017a3c:	469e      	mov	lr, r3
 8017a3e:	4770      	bx	lr

08017a40 <_fini>:
 8017a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a42:	bf00      	nop
 8017a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017a46:	bc08      	pop	{r3}
 8017a48:	469e      	mov	lr, r3
 8017a4a:	4770      	bx	lr
