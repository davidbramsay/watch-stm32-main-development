
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b31c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a68  0800b45c  0800b45c  0001b45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bec4  0800bec4  0001bec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800becc  0800becc  0001becc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bed0  0800bed0  0001bed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a8  20000004  0800bed4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 TIMERSERVER_CONTEXT 00000099  200000ac  0800bf7c  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_APP_CONTEXT 00000090  20000148  0800c015  00020148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_DRIVER_CONTEXT 00000025  200001d8  0800c0a5  000201d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 SYSTEM_DRIVER_CONTEXT 00000011  20000200  0800c0ca  00020200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00001390  20000214  0800c0db  00020214  2**2
                  ALLOC
 12 ._user_heap_stack 00001404  200015a4  0800c0db  000215a4  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY
 14 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 15 MB_MEM1       000001b8  20030028  20030028  00030000  2**2
                  ALLOC
 16 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 17 .debug_info   00039ae5  00000000  00000000  00020241  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_abbrev 00006c31  00000000  00000000  00059d26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_aranges 00002788  00000000  00000000  00060958  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 000024b0  00000000  00000000  000630e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_macro  0002d8c5  00000000  00000000  00065590  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_line   0002547a  00000000  00000000  00092e55  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_str    000f77bb  00000000  00000000  000b82cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .comment      0000007b  00000000  00000000  001afa8a  2**0
                  CONTENTS, READONLY
 25 .debug_frame  0000a918  00000000  00000000  001afb08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000214 	.word	0x20000214
 800015c:	00000000 	.word	0x00000000
 8000160:	0800b444 	.word	0x0800b444

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000218 	.word	0x20000218
 800017c:	0800b444 	.word	0x0800b444

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b972 	b.w	800052c <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	4604      	mov	r4, r0
 8000268:	4688      	mov	r8, r1
 800026a:	2b00      	cmp	r3, #0
 800026c:	d14b      	bne.n	8000306 <__udivmoddi4+0xa6>
 800026e:	428a      	cmp	r2, r1
 8000270:	4615      	mov	r5, r2
 8000272:	d967      	bls.n	8000344 <__udivmoddi4+0xe4>
 8000274:	fab2 f282 	clz	r2, r2
 8000278:	b14a      	cbz	r2, 800028e <__udivmoddi4+0x2e>
 800027a:	f1c2 0720 	rsb	r7, r2, #32
 800027e:	fa01 f302 	lsl.w	r3, r1, r2
 8000282:	fa20 f707 	lsr.w	r7, r0, r7
 8000286:	4095      	lsls	r5, r2
 8000288:	ea47 0803 	orr.w	r8, r7, r3
 800028c:	4094      	lsls	r4, r2
 800028e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000292:	0c23      	lsrs	r3, r4, #16
 8000294:	fbb8 f7fe 	udiv	r7, r8, lr
 8000298:	fa1f fc85 	uxth.w	ip, r5
 800029c:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002a4:	fb07 f10c 	mul.w	r1, r7, ip
 80002a8:	4299      	cmp	r1, r3
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x60>
 80002ac:	18eb      	adds	r3, r5, r3
 80002ae:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002b2:	f080 811b 	bcs.w	80004ec <__udivmoddi4+0x28c>
 80002b6:	4299      	cmp	r1, r3
 80002b8:	f240 8118 	bls.w	80004ec <__udivmoddi4+0x28c>
 80002bc:	3f02      	subs	r7, #2
 80002be:	442b      	add	r3, r5
 80002c0:	1a5b      	subs	r3, r3, r1
 80002c2:	b2a4      	uxth	r4, r4
 80002c4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002c8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002cc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002d4:	45a4      	cmp	ip, r4
 80002d6:	d909      	bls.n	80002ec <__udivmoddi4+0x8c>
 80002d8:	192c      	adds	r4, r5, r4
 80002da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002e2:	45a4      	cmp	ip, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002e8:	3802      	subs	r0, #2
 80002ea:	442c      	add	r4, r5
 80002ec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f0:	eba4 040c 	sub.w	r4, r4, ip
 80002f4:	2700      	movs	r7, #0
 80002f6:	b11e      	cbz	r6, 8000300 <__udivmoddi4+0xa0>
 80002f8:	40d4      	lsrs	r4, r2
 80002fa:	2300      	movs	r3, #0
 80002fc:	e9c6 4300 	strd	r4, r3, [r6]
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d909      	bls.n	800031e <__udivmoddi4+0xbe>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80eb 	beq.w	80004e6 <__udivmoddi4+0x286>
 8000310:	2700      	movs	r7, #0
 8000312:	e9c6 0100 	strd	r0, r1, [r6]
 8000316:	4638      	mov	r0, r7
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	fab3 f783 	clz	r7, r3
 8000322:	2f00      	cmp	r7, #0
 8000324:	d147      	bne.n	80003b6 <__udivmoddi4+0x156>
 8000326:	428b      	cmp	r3, r1
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xd0>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 80fa 	bhi.w	8000524 <__udivmoddi4+0x2c4>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb61 0303 	sbc.w	r3, r1, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4698      	mov	r8, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d0e0      	beq.n	8000300 <__udivmoddi4+0xa0>
 800033e:	e9c6 4800 	strd	r4, r8, [r6]
 8000342:	e7dd      	b.n	8000300 <__udivmoddi4+0xa0>
 8000344:	b902      	cbnz	r2, 8000348 <__udivmoddi4+0xe8>
 8000346:	deff      	udf	#255	; 0xff
 8000348:	fab2 f282 	clz	r2, r2
 800034c:	2a00      	cmp	r2, #0
 800034e:	f040 808f 	bne.w	8000470 <__udivmoddi4+0x210>
 8000352:	1b49      	subs	r1, r1, r5
 8000354:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000358:	fa1f f885 	uxth.w	r8, r5
 800035c:	2701      	movs	r7, #1
 800035e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000362:	0c23      	lsrs	r3, r4, #16
 8000364:	fb0e 111c 	mls	r1, lr, ip, r1
 8000368:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800036c:	fb08 f10c 	mul.w	r1, r8, ip
 8000370:	4299      	cmp	r1, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x124>
 8000374:	18eb      	adds	r3, r5, r3
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4299      	cmp	r1, r3
 800037e:	f200 80cd 	bhi.w	800051c <__udivmoddi4+0x2bc>
 8000382:	4684      	mov	ip, r0
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000390:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x14c>
 800039c:	192c      	adds	r4, r5, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x14a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80b6 	bhi.w	8000516 <__udivmoddi4+0x2b6>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e79f      	b.n	80002f6 <__udivmoddi4+0x96>
 80003b6:	f1c7 0c20 	rsb	ip, r7, #32
 80003ba:	40bb      	lsls	r3, r7
 80003bc:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003c4:	fa01 f407 	lsl.w	r4, r1, r7
 80003c8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003cc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003d4:	4325      	orrs	r5, r4
 80003d6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003da:	0c2c      	lsrs	r4, r5, #16
 80003dc:	fb08 3319 	mls	r3, r8, r9, r3
 80003e0:	fa1f fa8e 	uxth.w	sl, lr
 80003e4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003e8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ec:	429c      	cmp	r4, r3
 80003ee:	fa02 f207 	lsl.w	r2, r2, r7
 80003f2:	fa00 f107 	lsl.w	r1, r0, r7
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1e 0303 	adds.w	r3, lr, r3
 80003fc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000400:	f080 8087 	bcs.w	8000512 <__udivmoddi4+0x2b2>
 8000404:	429c      	cmp	r4, r3
 8000406:	f240 8084 	bls.w	8000512 <__udivmoddi4+0x2b2>
 800040a:	f1a9 0902 	sub.w	r9, r9, #2
 800040e:	4473      	add	r3, lr
 8000410:	1b1b      	subs	r3, r3, r4
 8000412:	b2ad      	uxth	r5, r5
 8000414:	fbb3 f0f8 	udiv	r0, r3, r8
 8000418:	fb08 3310 	mls	r3, r8, r0, r3
 800041c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000420:	fb00 fa0a 	mul.w	sl, r0, sl
 8000424:	45a2      	cmp	sl, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1e 0404 	adds.w	r4, lr, r4
 800042c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000430:	d26b      	bcs.n	800050a <__udivmoddi4+0x2aa>
 8000432:	45a2      	cmp	sl, r4
 8000434:	d969      	bls.n	800050a <__udivmoddi4+0x2aa>
 8000436:	3802      	subs	r0, #2
 8000438:	4474      	add	r4, lr
 800043a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800043e:	fba0 8902 	umull	r8, r9, r0, r2
 8000442:	eba4 040a 	sub.w	r4, r4, sl
 8000446:	454c      	cmp	r4, r9
 8000448:	46c2      	mov	sl, r8
 800044a:	464b      	mov	r3, r9
 800044c:	d354      	bcc.n	80004f8 <__udivmoddi4+0x298>
 800044e:	d051      	beq.n	80004f4 <__udivmoddi4+0x294>
 8000450:	2e00      	cmp	r6, #0
 8000452:	d069      	beq.n	8000528 <__udivmoddi4+0x2c8>
 8000454:	ebb1 050a 	subs.w	r5, r1, sl
 8000458:	eb64 0403 	sbc.w	r4, r4, r3
 800045c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000460:	40fd      	lsrs	r5, r7
 8000462:	40fc      	lsrs	r4, r7
 8000464:	ea4c 0505 	orr.w	r5, ip, r5
 8000468:	e9c6 5400 	strd	r5, r4, [r6]
 800046c:	2700      	movs	r7, #0
 800046e:	e747      	b.n	8000300 <__udivmoddi4+0xa0>
 8000470:	f1c2 0320 	rsb	r3, r2, #32
 8000474:	fa20 f703 	lsr.w	r7, r0, r3
 8000478:	4095      	lsls	r5, r2
 800047a:	fa01 f002 	lsl.w	r0, r1, r2
 800047e:	fa21 f303 	lsr.w	r3, r1, r3
 8000482:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000486:	4338      	orrs	r0, r7
 8000488:	0c01      	lsrs	r1, r0, #16
 800048a:	fbb3 f7fe 	udiv	r7, r3, lr
 800048e:	fa1f f885 	uxth.w	r8, r5
 8000492:	fb0e 3317 	mls	r3, lr, r7, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb07 f308 	mul.w	r3, r7, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	fa04 f402 	lsl.w	r4, r4, r2
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x256>
 80004a6:	1869      	adds	r1, r5, r1
 80004a8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004ac:	d22f      	bcs.n	800050e <__udivmoddi4+0x2ae>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d92d      	bls.n	800050e <__udivmoddi4+0x2ae>
 80004b2:	3f02      	subs	r7, #2
 80004b4:	4429      	add	r1, r5
 80004b6:	1acb      	subs	r3, r1, r3
 80004b8:	b281      	uxth	r1, r0
 80004ba:	fbb3 f0fe 	udiv	r0, r3, lr
 80004be:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c6:	fb00 f308 	mul.w	r3, r0, r8
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d907      	bls.n	80004de <__udivmoddi4+0x27e>
 80004ce:	1869      	adds	r1, r5, r1
 80004d0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004d4:	d217      	bcs.n	8000506 <__udivmoddi4+0x2a6>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d915      	bls.n	8000506 <__udivmoddi4+0x2a6>
 80004da:	3802      	subs	r0, #2
 80004dc:	4429      	add	r1, r5
 80004de:	1ac9      	subs	r1, r1, r3
 80004e0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004e4:	e73b      	b.n	800035e <__udivmoddi4+0xfe>
 80004e6:	4637      	mov	r7, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e709      	b.n	8000300 <__udivmoddi4+0xa0>
 80004ec:	4607      	mov	r7, r0
 80004ee:	e6e7      	b.n	80002c0 <__udivmoddi4+0x60>
 80004f0:	4618      	mov	r0, r3
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x8c>
 80004f4:	4541      	cmp	r1, r8
 80004f6:	d2ab      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004f8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004fc:	eb69 020e 	sbc.w	r2, r9, lr
 8000500:	3801      	subs	r0, #1
 8000502:	4613      	mov	r3, r2
 8000504:	e7a4      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000506:	4660      	mov	r0, ip
 8000508:	e7e9      	b.n	80004de <__udivmoddi4+0x27e>
 800050a:	4618      	mov	r0, r3
 800050c:	e795      	b.n	800043a <__udivmoddi4+0x1da>
 800050e:	4667      	mov	r7, ip
 8000510:	e7d1      	b.n	80004b6 <__udivmoddi4+0x256>
 8000512:	4681      	mov	r9, r0
 8000514:	e77c      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000516:	3802      	subs	r0, #2
 8000518:	442c      	add	r4, r5
 800051a:	e747      	b.n	80003ac <__udivmoddi4+0x14c>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	442b      	add	r3, r5
 8000522:	e72f      	b.n	8000384 <__udivmoddi4+0x124>
 8000524:	4638      	mov	r0, r7
 8000526:	e708      	b.n	800033a <__udivmoddi4+0xda>
 8000528:	4637      	mov	r7, r6
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0xa0>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_EXTI_EnableIT_32_63+0x24>)
 800053a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800053e:	4905      	ldr	r1, [pc, #20]	; (8000554 <LL_EXTI_EnableIT_32_63+0x24>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	4313      	orrs	r3, r2
 8000544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	58000800 	.word	0x58000800

08000558 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000560:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000564:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000566:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4013      	ands	r3, r2
 800057a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057c:	68fb      	ldr	r3, [r7, #12]
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr

0800058a <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800058a:	b480      	push	{r7}
 800058c:	b085      	sub	sp, #20
 800058e:	af00      	add	r7, sp, #0
 8000590:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000596:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 800059a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 80005a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005aa:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	4013      	ands	r3, r2
 80005b2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b4:	68fb      	ldr	r3, [r7, #12]
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr

080005c2 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 80005c6:	f003 fa37 	bl	8003a38 <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 80005ca:	f003 fa3b 	bl	8003a44 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 80005ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80005d2:	f7ff ffad 	bl	8000530 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 80005d6:	f008 f871 	bl	80086bc <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 80005da:	f000 f821 	bl	8000620 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 80005de:	f000 f8bf 	bl	8000760 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 80005e2:	bf00      	nop
}
 80005e4:	bd80      	pop	{r7, pc}
	...

080005e8 <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 80005e8:	b5b0      	push	{r4, r5, r7, lr}
 80005ea:	b088      	sub	sp, #32
 80005ec:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 80005ee:	4b0b      	ldr	r3, [pc, #44]	; (800061c <APPD_EnableCPU2+0x34>)
 80005f0:	1d3c      	adds	r4, r7, #4
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	c403      	stmia	r4!, {r0, r1}
 80005fe:	8022      	strh	r2, [r4, #0]
 8000600:	3402      	adds	r4, #2
 8000602:	0c13      	lsrs	r3, r2, #16
 8000604:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000606:	f009 fcb9 	bl	8009f7c <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	4618      	mov	r0, r3
 800060e:	f008 fbee 	bl	8008dee <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000612:	bf00      	nop
}
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}
 800061a:	bf00      	nop
 800061c:	0800b45c 	.word	0x0800b45c

08000620 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 800063c:	2300      	movs	r3, #0
 800063e:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000640:	2300      	movs	r3, #0
 8000642:	77fb      	strb	r3, [r7, #31]
 8000644:	e033      	b.n	80006ae <APPD_SetCPU2GpioConfig+0x8e>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000646:	7ffb      	ldrb	r3, [r7, #31]
 8000648:	4a42      	ldr	r2, [pc, #264]	; (8000754 <APPD_SetCPU2GpioConfig+0x134>)
 800064a:	00db      	lsls	r3, r3, #3
 800064c:	4413      	add	r3, r2
 800064e:	799b      	ldrb	r3, [r3, #6]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d028      	beq.n	80006a6 <APPD_SetCPU2GpioConfig+0x86>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000654:	7ffb      	ldrb	r3, [r7, #31]
 8000656:	4a3f      	ldr	r2, [pc, #252]	; (8000754 <APPD_SetCPU2GpioConfig+0x134>)
 8000658:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800065c:	4a3e      	ldr	r2, [pc, #248]	; (8000758 <APPD_SetCPU2GpioConfig+0x138>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d00f      	beq.n	8000682 <APPD_SetCPU2GpioConfig+0x62>
 8000662:	4a3e      	ldr	r2, [pc, #248]	; (800075c <APPD_SetCPU2GpioConfig+0x13c>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d015      	beq.n	8000694 <APPD_SetCPU2GpioConfig+0x74>
 8000668:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800066c:	d000      	beq.n	8000670 <APPD_SetCPU2GpioConfig+0x50>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 800066e:	e01b      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x88>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000670:	7ffb      	ldrb	r3, [r7, #31]
 8000672:	4a38      	ldr	r2, [pc, #224]	; (8000754 <APPD_SetCPU2GpioConfig+0x134>)
 8000674:	00db      	lsls	r3, r3, #3
 8000676:	4413      	add	r3, r2
 8000678:	889a      	ldrh	r2, [r3, #4]
 800067a:	8bbb      	ldrh	r3, [r7, #28]
 800067c:	4313      	orrs	r3, r2
 800067e:	83bb      	strh	r3, [r7, #28]
          break;
 8000680:	e012      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x88>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000682:	7ffb      	ldrb	r3, [r7, #31]
 8000684:	4a33      	ldr	r2, [pc, #204]	; (8000754 <APPD_SetCPU2GpioConfig+0x134>)
 8000686:	00db      	lsls	r3, r3, #3
 8000688:	4413      	add	r3, r2
 800068a:	889a      	ldrh	r2, [r3, #4]
 800068c:	8b7b      	ldrh	r3, [r7, #26]
 800068e:	4313      	orrs	r3, r2
 8000690:	837b      	strh	r3, [r7, #26]
          break;
 8000692:	e009      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x88>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000694:	7ffb      	ldrb	r3, [r7, #31]
 8000696:	4a2f      	ldr	r2, [pc, #188]	; (8000754 <APPD_SetCPU2GpioConfig+0x134>)
 8000698:	00db      	lsls	r3, r3, #3
 800069a:	4413      	add	r3, r2
 800069c:	889a      	ldrh	r2, [r3, #4]
 800069e:	8b3b      	ldrh	r3, [r7, #24]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	833b      	strh	r3, [r7, #24]
          break;
 80006a4:	e000      	b.n	80006a8 <APPD_SetCPU2GpioConfig+0x88>
      }
    }
 80006a6:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 80006a8:	7ffb      	ldrb	r3, [r7, #31]
 80006aa:	3301      	adds	r3, #1
 80006ac:	77fb      	strb	r3, [r7, #31]
 80006ae:	7ffb      	ldrb	r3, [r7, #31]
 80006b0:	2b21      	cmp	r3, #33	; 0x21
 80006b2:	d9c8      	bls.n	8000646 <APPD_SetCPU2GpioConfig+0x26>
  }

  gpio_config.Pull = GPIO_NOPULL;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 80006b8:	2301      	movs	r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 80006c0:	8bbb      	ldrh	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d014      	beq.n	80006f0 <APPD_SetCPU2GpioConfig+0xd0>
  {
    gpio_config.Pin = gpioa_pin_list;
 80006c6:	8bbb      	ldrh	r3, [r7, #28]
 80006c8:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	2001      	movs	r0, #1
 80006cc:	f7ff ff44 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff ff5a 	bl	800058a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006de:	f003 fe63 	bl	80043a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80006e2:	8bbb      	ldrh	r3, [r7, #28]
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f003 ffcc 	bl	8004688 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80006f0:	8b7b      	ldrh	r3, [r7, #26]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d012      	beq.n	800071c <APPD_SetCPU2GpioConfig+0xfc>
  {
    gpio_config.Pin = gpiob_pin_list;
 80006f6:	8b7b      	ldrh	r3, [r7, #26]
 80006f8:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	2002      	movs	r0, #2
 80006fc:	f7ff ff2c 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 8000700:	2002      	movs	r0, #2
 8000702:	f7ff ff42 	bl	800058a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4619      	mov	r1, r3
 800070a:	4813      	ldr	r0, [pc, #76]	; (8000758 <APPD_SetCPU2GpioConfig+0x138>)
 800070c:	f003 fe4c 	bl	80043a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 8000710:	8b7b      	ldrh	r3, [r7, #26]
 8000712:	2200      	movs	r2, #0
 8000714:	4619      	mov	r1, r3
 8000716:	4810      	ldr	r0, [pc, #64]	; (8000758 <APPD_SetCPU2GpioConfig+0x138>)
 8000718:	f003 ffb6 	bl	8004688 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 800071c:	8b3b      	ldrh	r3, [r7, #24]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d013      	beq.n	800074a <APPD_SetCPU2GpioConfig+0x12a>
  {
    gpio_config.Pin = gpioc_pin_list;
 8000722:	8b3b      	ldrh	r3, [r7, #24]
 8000724:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2004      	movs	r0, #4
 8000728:	f7ff ff16 	bl	8000558 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 800072c:	2004      	movs	r0, #4
 800072e:	f7ff ff2c 	bl	800058a <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4619      	mov	r1, r3
 8000736:	4809      	ldr	r0, [pc, #36]	; (800075c <APPD_SetCPU2GpioConfig+0x13c>)
 8000738:	f003 fe36 	bl	80043a8 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 800073c:	8b3b      	ldrh	r3, [r7, #24]
 800073e:	2200      	movs	r2, #0
 8000740:	4619      	mov	r1, r3
 8000742:	4806      	ldr	r0, [pc, #24]	; (800075c <APPD_SetCPU2GpioConfig+0x13c>)
 8000744:	f003 ffa0 	bl	8004688 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8000748:	bf00      	nop
 800074a:	bf00      	nop
}
 800074c:	3720      	adds	r7, #32
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	0800bc10 	.word	0x0800bc10
 8000758:	48000400 	.word	0x48000400
 800075c:	48000800 	.word	0x48000800

08000760 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 8000764:	bf00      	nop
}
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr

0800076e <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 800076e:	b580      	push	{r7, lr}
 8000770:	af00      	add	r7, sp, #0
#endif
}
else if (CFG_DEBUG_TRACE_UART == hw_uart1)
{
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 8000772:	f001 fa85 	bl	8001c80 <MX_USART1_UART_Init>
#endif
}
#endif

/* USER CODE END DbgOutputInit */
  return;
 8000776:	bf00      	nop
}
 8000778:	bd80      	pop	{r7, pc}

0800077a <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	460b      	mov	r3, r1
 8000784:	607a      	str	r2, [r7, #4]
 8000786:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8000788:	897a      	ldrh	r2, [r7, #10]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	68f9      	ldr	r1, [r7, #12]
 800078e:	2000      	movs	r0, #0
 8000790:	f000 ffb2 	bl	80016f8 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 8000794:	bf00      	nop
}
 8000796:	3710      	adds	r7, #16
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80007a4:	4b07      	ldr	r3, [pc, #28]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007aa:	f023 0207 	bic.w	r2, r3, #7
 80007ae:	4905      	ldr	r1, [pc, #20]	; (80007c4 <LL_C2_PWR_SetPowerMode+0x28>)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	4313      	orrs	r3, r2
 80007b4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	58000400 	.word	0x58000400

080007c8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80007d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80007da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4313      	orrs	r3, r2
 80007e2:	608b      	str	r3, [r1, #8]
}
 80007e4:	bf00      	nop
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <APPE_Init>:
static void Button_Init( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init( void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  SystemPower_Config(); /**< Configure the system Power Mode */
 80007f4:	f000 f814 	bl	8000820 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <APPE_Init+0x2c>)
 80007fa:	2000      	movs	r0, #0
 80007fc:	f000 fd02 	bl	8001204 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 8000800:	f7ff fedf 	bl	80005c2 <APPD_Init>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8000804:	2101      	movs	r1, #1
 8000806:	2001      	movs	r0, #1
 8000808:	f009 fc5a 	bl	800a0c0 <UTIL_LPM_SetOffMode>

  Led_Init();
 800080c:	f000 f867 	bl	80008de <Led_Init>

  Button_Init();
 8000810:	f000 f875 	bl	80008fe <Button_Init>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8000814:	f000 f812 	bl	800083c <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8000818:	bf00      	nop
}
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20001510 	.word	0x20001510

08000820 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000824:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000828:	f7ff ffce 	bl	80007c8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 800082c:	f009 fc36 	bl	800a09c <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000830:	2004      	movs	r0, #4
 8000832:	f7ff ffb3 	bl	800079c <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8000836:	bf00      	nop
}
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8000842:	f009 f9e5 	bl	8009c10 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <appe_Tl_Init+0x50>)
 8000848:	2100      	movs	r1, #0
 800084a:	2010      	movs	r0, #16
 800084c:	f009 fd46 	bl	800a2dc <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8000850:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <appe_Tl_Init+0x54>)
 8000852:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000854:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <appe_Tl_Init+0x58>)
 8000856:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	480e      	ldr	r0, [pc, #56]	; (8000898 <appe_Tl_Init+0x5c>)
 800085e:	f008 fadd 	bl	8008e1c <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <appe_Tl_Init+0x60>)
 8000864:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8000866:	4b0e      	ldr	r3, [pc, #56]	; (80008a0 <appe_Tl_Init+0x64>)
 8000868:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <appe_Tl_Init+0x68>)
 800086c:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800086e:	f240 533c 	movw	r3, #1340	; 0x53c
 8000872:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8000874:	f107 0308 	add.w	r3, r7, #8
 8000878:	4618      	mov	r0, r3
 800087a:	f009 fb0b 	bl	8009e94 <TL_MM_Init>

  TL_Enable();
 800087e:	f009 f9c1 	bl	8009c04 <TL_Enable>

  return;
 8000882:	bf00      	nop
}
 8000884:	3720      	adds	r7, #32
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	08008e55 	.word	0x08008e55
 8000890:	20030724 	.word	0x20030724
 8000894:	080008a9 	.word	0x080008a9
 8000898:	080008bf 	.word	0x080008bf
 800089c:	2003093c 	.word	0x2003093c
 80008a0:	20030830 	.word	0x20030830
 80008a4:	200301e8 	.word	0x200301e8

080008a8 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80008b2:	bf00      	nop
}
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	b082      	sub	sp, #8
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  UNUSED(pPayload);
  /* Traces channel initialization */
  APPD_EnableCPU2( );
 80008c6:	f7ff fe8f 	bl	80005e8 <APPD_EnableCPU2>

  APP_BLE_Init( );
 80008ca:	f001 fe13 	bl	80024f4 <APP_BLE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80008ce:	2100      	movs	r1, #0
 80008d0:	2001      	movs	r0, #1
 80008d2:	f009 fbf5 	bl	800a0c0 <UTIL_LPM_SetOffMode>
  return;
 80008d6:	bf00      	nop
}
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80008e2:	2000      	movs	r0, #0
 80008e4:	f002 fec0 	bl	8003668 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f002 febd 	bl	8003668 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f002 feba 	bl	8003668 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 80008f4:	2001      	movs	r0, #1
 80008f6:	f002 fef1 	bl	80036dc <BSP_LED_On>
#endif

  return;
 80008fa:	bf00      	nop
}
 80008fc:	bd80      	pop	{r7, pc}

080008fe <Button_Init>:

static void Button_Init( void )
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8000902:	2101      	movs	r1, #1
 8000904:	2000      	movs	r0, #0
 8000906:	f002 ff1d 	bl	8003744 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800090a:	2101      	movs	r1, #1
 800090c:	2001      	movs	r0, #1
 800090e:	f002 ff19 	bl	8003744 <BSP_PB_Init>
#endif

  return;
 8000912:	bf00      	nop
}
 8000914:	bd80      	pop	{r7, pc}

08000916 <UTIL_SEQ_Idle>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle( void )
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 800091a:	bf00      	nop
}
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800092e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000932:	f009 fbf3 	bl	800a11c <UTIL_SEQ_Run>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b082      	sub	sp, #8
 8000942:	af00      	add	r7, sp, #0
 8000944:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000946:	2100      	movs	r1, #0
 8000948:	2010      	movs	r0, #16
 800094a:	f009 fce7 	bl	800a31c <UTIL_SEQ_SetTask>
  return;
 800094e:	bf00      	nop
}
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}

08000956 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8000956:	b580      	push	{r7, lr}
 8000958:	b082      	sub	sp, #8
 800095a:	af00      	add	r7, sp, #0
 800095c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800095e:	2002      	movs	r0, #2
 8000960:	f009 fd42 	bl	800a3e8 <UTIL_SEQ_SetEvt>
  return;
 8000964:	bf00      	nop
}
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 8000974:	2002      	movs	r0, #2
 8000976:	f009 fd55 	bl	800a424 <UTIL_SEQ_WaitEvt>
  return;
 800097a:	bf00      	nop
}
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 800098c:	88fb      	ldrh	r3, [r7, #6]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d00a      	beq.n	80009a8 <HAL_GPIO_EXTI_Callback+0x26>
 8000992:	2b10      	cmp	r3, #16
 8000994:	d002      	beq.n	800099c <HAL_GPIO_EXTI_Callback+0x1a>
 8000996:	2b01      	cmp	r3, #1
 8000998:	d003      	beq.n	80009a2 <HAL_GPIO_EXTI_Callback+0x20>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 800099a:	e008      	b.n	80009ae <HAL_GPIO_EXTI_Callback+0x2c>
     APP_BLE_Key_Button1_Action();
 800099c:	f001 ffd2 	bl	8002944 <APP_BLE_Key_Button1_Action>
      break; 
 80009a0:	e005      	b.n	80009ae <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button2_Action();
 80009a2:	f001 ffd5 	bl	8002950 <APP_BLE_Key_Button2_Action>
      break; 
 80009a6:	e002      	b.n	80009ae <HAL_GPIO_EXTI_Callback+0x2c>
      APP_BLE_Key_Button3_Action();
 80009a8:	f001 ffda 	bl	8002960 <APP_BLE_Key_Button3_Action>
      break;
 80009ac:	bf00      	nop

  }
  return;
 80009ae:	bf00      	nop
}
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <LL_EXTI_EnableIT_0_31>:
{
 80009b8:	b480      	push	{r7}
 80009ba:	b083      	sub	sp, #12
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <LL_EXTI_EnableIT_0_31+0x24>)
 80009c2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80009c6:	4905      	ldr	r1, [pc, #20]	; (80009dc <LL_EXTI_EnableIT_0_31+0x24>)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80009d0:	bf00      	nop
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	58000800 	.word	0x58000800

080009e0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4904      	ldr	r1, [pc, #16]	; (8000a00 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	600b      	str	r3, [r1, #0]

}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	58000800 	.word	0x58000800

08000a04 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <ReadRtcSsrValue+0x3c>)
 8000a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <ReadRtcSsrValue+0x3c>)
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	b29b      	uxth	r3, r3
 8000a18:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8000a1a:	e005      	b.n	8000a28 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8000a20:	4b07      	ldr	r3, [pc, #28]	; (8000a40 <ReadRtcSsrValue+0x3c>)
 8000a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d1f5      	bne.n	8000a1c <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8000a30:	683b      	ldr	r3, [r7, #0]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	40002800 	.word	0x40002800

08000a44 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b085      	sub	sp, #20
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8000a54:	79ba      	ldrb	r2, [r7, #6]
 8000a56:	491d      	ldr	r1, [pc, #116]	; (8000acc <LinkTimerAfter+0x88>)
 8000a58:	4613      	mov	r3, r2
 8000a5a:	005b      	lsls	r3, r3, #1
 8000a5c:	4413      	add	r3, r2
 8000a5e:	00db      	lsls	r3, r3, #3
 8000a60:	440b      	add	r3, r1
 8000a62:	3315      	adds	r3, #21
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000a68:	7bfb      	ldrb	r3, [r7, #15]
 8000a6a:	2b06      	cmp	r3, #6
 8000a6c:	d009      	beq.n	8000a82 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8000a6e:	7bfa      	ldrb	r2, [r7, #15]
 8000a70:	4916      	ldr	r1, [pc, #88]	; (8000acc <LinkTimerAfter+0x88>)
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3314      	adds	r3, #20
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8000a82:	79fa      	ldrb	r2, [r7, #7]
 8000a84:	4911      	ldr	r1, [pc, #68]	; (8000acc <LinkTimerAfter+0x88>)
 8000a86:	4613      	mov	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	4413      	add	r3, r2
 8000a8c:	00db      	lsls	r3, r3, #3
 8000a8e:	440b      	add	r3, r1
 8000a90:	3315      	adds	r3, #21
 8000a92:	7bfa      	ldrb	r2, [r7, #15]
 8000a94:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8000a96:	79fa      	ldrb	r2, [r7, #7]
 8000a98:	490c      	ldr	r1, [pc, #48]	; (8000acc <LinkTimerAfter+0x88>)
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	4413      	add	r3, r2
 8000aa0:	00db      	lsls	r3, r3, #3
 8000aa2:	440b      	add	r3, r1
 8000aa4:	3314      	adds	r3, #20
 8000aa6:	79ba      	ldrb	r2, [r7, #6]
 8000aa8:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8000aaa:	79ba      	ldrb	r2, [r7, #6]
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <LinkTimerAfter+0x88>)
 8000aae:	4613      	mov	r3, r2
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	4413      	add	r3, r2
 8000ab4:	00db      	lsls	r3, r3, #3
 8000ab6:	440b      	add	r3, r1
 8000ab8:	3315      	adds	r3, #21
 8000aba:	79fa      	ldrb	r2, [r7, #7]
 8000abc:	701a      	strb	r2, [r3, #0]

  return;
 8000abe:	bf00      	nop
}
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000ac 	.word	0x200000ac

08000ad0 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8000ae0:	4b29      	ldr	r3, [pc, #164]	; (8000b88 <LinkTimerBefore+0xb8>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	79ba      	ldrb	r2, [r7, #6]
 8000ae8:	429a      	cmp	r2, r3
 8000aea:	d032      	beq.n	8000b52 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8000aec:	79ba      	ldrb	r2, [r7, #6]
 8000aee:	4927      	ldr	r1, [pc, #156]	; (8000b8c <LinkTimerBefore+0xbc>)
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	00db      	lsls	r3, r3, #3
 8000af8:	440b      	add	r3, r1
 8000afa:	3314      	adds	r3, #20
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8000b00:	7bfa      	ldrb	r2, [r7, #15]
 8000b02:	4922      	ldr	r1, [pc, #136]	; (8000b8c <LinkTimerBefore+0xbc>)
 8000b04:	4613      	mov	r3, r2
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	4413      	add	r3, r2
 8000b0a:	00db      	lsls	r3, r3, #3
 8000b0c:	440b      	add	r3, r1
 8000b0e:	3315      	adds	r3, #21
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b14:	79fa      	ldrb	r2, [r7, #7]
 8000b16:	491d      	ldr	r1, [pc, #116]	; (8000b8c <LinkTimerBefore+0xbc>)
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	440b      	add	r3, r1
 8000b22:	3315      	adds	r3, #21
 8000b24:	79ba      	ldrb	r2, [r7, #6]
 8000b26:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8000b28:	79fa      	ldrb	r2, [r7, #7]
 8000b2a:	4918      	ldr	r1, [pc, #96]	; (8000b8c <LinkTimerBefore+0xbc>)
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	4413      	add	r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3314      	adds	r3, #20
 8000b38:	7bfa      	ldrb	r2, [r7, #15]
 8000b3a:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b3c:	79ba      	ldrb	r2, [r7, #6]
 8000b3e:	4913      	ldr	r1, [pc, #76]	; (8000b8c <LinkTimerBefore+0xbc>)
 8000b40:	4613      	mov	r3, r2
 8000b42:	005b      	lsls	r3, r3, #1
 8000b44:	4413      	add	r3, r2
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	440b      	add	r3, r1
 8000b4a:	3314      	adds	r3, #20
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8000b50:	e014      	b.n	8000b7c <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8000b52:	79fa      	ldrb	r2, [r7, #7]
 8000b54:	490d      	ldr	r1, [pc, #52]	; (8000b8c <LinkTimerBefore+0xbc>)
 8000b56:	4613      	mov	r3, r2
 8000b58:	005b      	lsls	r3, r3, #1
 8000b5a:	4413      	add	r3, r2
 8000b5c:	00db      	lsls	r3, r3, #3
 8000b5e:	440b      	add	r3, r1
 8000b60:	3315      	adds	r3, #21
 8000b62:	79ba      	ldrb	r2, [r7, #6]
 8000b64:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8000b66:	79ba      	ldrb	r2, [r7, #6]
 8000b68:	4908      	ldr	r1, [pc, #32]	; (8000b8c <LinkTimerBefore+0xbc>)
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	4413      	add	r3, r2
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	440b      	add	r3, r1
 8000b74:	3314      	adds	r3, #20
 8000b76:	79fa      	ldrb	r2, [r7, #7]
 8000b78:	701a      	strb	r2, [r3, #0]
  return;
 8000b7a:	bf00      	nop
}
 8000b7c:	3714      	adds	r7, #20
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	2000013c 	.word	0x2000013c
 8000b8c:	200000ac 	.word	0x200000ac

08000b90 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000b9a:	4b4e      	ldr	r3, [pc, #312]	; (8000cd4 <linkTimer+0x144>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b06      	cmp	r3, #6
 8000ba2:	d118      	bne.n	8000bd6 <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000ba4:	4b4b      	ldr	r3, [pc, #300]	; (8000cd4 <linkTimer+0x144>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b4b      	ldr	r3, [pc, #300]	; (8000cd8 <linkTimer+0x148>)
 8000bac:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8000bae:	4a49      	ldr	r2, [pc, #292]	; (8000cd4 <linkTimer+0x144>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8000bb4:	79fa      	ldrb	r2, [r7, #7]
 8000bb6:	4949      	ldr	r1, [pc, #292]	; (8000cdc <linkTimer+0x14c>)
 8000bb8:	4613      	mov	r3, r2
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	4413      	add	r3, r2
 8000bbe:	00db      	lsls	r3, r3, #3
 8000bc0:	440b      	add	r3, r1
 8000bc2:	3315      	adds	r3, #21
 8000bc4:	2206      	movs	r2, #6
 8000bc6:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000bc8:	4b45      	ldr	r3, [pc, #276]	; (8000ce0 <linkTimer+0x150>)
 8000bca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bce:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	81fb      	strh	r3, [r7, #14]
 8000bd4:	e078      	b.n	8000cc8 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8000bd6:	f000 f909 	bl	8000dec <ReturnTimeElapsed>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8000bde:	79fa      	ldrb	r2, [r7, #7]
 8000be0:	493e      	ldr	r1, [pc, #248]	; (8000cdc <linkTimer+0x14c>)
 8000be2:	4613      	mov	r3, r2
 8000be4:	005b      	lsls	r3, r3, #1
 8000be6:	4413      	add	r3, r2
 8000be8:	00db      	lsls	r3, r3, #3
 8000bea:	440b      	add	r3, r1
 8000bec:	3308      	adds	r3, #8
 8000bee:	6819      	ldr	r1, [r3, #0]
 8000bf0:	89fb      	ldrh	r3, [r7, #14]
 8000bf2:	79fa      	ldrb	r2, [r7, #7]
 8000bf4:	4419      	add	r1, r3
 8000bf6:	4839      	ldr	r0, [pc, #228]	; (8000cdc <linkTimer+0x14c>)
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4413      	add	r3, r2
 8000bfe:	00db      	lsls	r3, r3, #3
 8000c00:	4403      	add	r3, r0
 8000c02:	3308      	adds	r3, #8
 8000c04:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8000c06:	79fa      	ldrb	r2, [r7, #7]
 8000c08:	4934      	ldr	r1, [pc, #208]	; (8000cdc <linkTimer+0x14c>)
 8000c0a:	4613      	mov	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4413      	add	r3, r2
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	440b      	add	r3, r1
 8000c14:	3308      	adds	r3, #8
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <linkTimer+0x144>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	b2db      	uxtb	r3, r3
 8000c20:	4619      	mov	r1, r3
 8000c22:	4a2e      	ldr	r2, [pc, #184]	; (8000cdc <linkTimer+0x14c>)
 8000c24:	460b      	mov	r3, r1
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	440b      	add	r3, r1
 8000c2a:	00db      	lsls	r3, r3, #3
 8000c2c:	4413      	add	r3, r2
 8000c2e:	3308      	adds	r3, #8
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d337      	bcc.n	8000ca8 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8000c38:	4b26      	ldr	r3, [pc, #152]	; (8000cd4 <linkTimer+0x144>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8000c3e:	7b7a      	ldrb	r2, [r7, #13]
 8000c40:	4926      	ldr	r1, [pc, #152]	; (8000cdc <linkTimer+0x14c>)
 8000c42:	4613      	mov	r3, r2
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	4413      	add	r3, r2
 8000c48:	00db      	lsls	r3, r3, #3
 8000c4a:	440b      	add	r3, r1
 8000c4c:	3315      	adds	r3, #21
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c52:	e013      	b.n	8000c7c <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8000c54:	7b7a      	ldrb	r2, [r7, #13]
 8000c56:	4921      	ldr	r1, [pc, #132]	; (8000cdc <linkTimer+0x14c>)
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	00db      	lsls	r3, r3, #3
 8000c60:	440b      	add	r3, r1
 8000c62:	3315      	adds	r3, #21
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8000c68:	7b7a      	ldrb	r2, [r7, #13]
 8000c6a:	491c      	ldr	r1, [pc, #112]	; (8000cdc <linkTimer+0x14c>)
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	00db      	lsls	r3, r3, #3
 8000c74:	440b      	add	r3, r1
 8000c76:	3315      	adds	r3, #21
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	2b06      	cmp	r3, #6
 8000c80:	d00b      	beq.n	8000c9a <linkTimer+0x10a>
 8000c82:	7b3a      	ldrb	r2, [r7, #12]
 8000c84:	4915      	ldr	r1, [pc, #84]	; (8000cdc <linkTimer+0x14c>)
 8000c86:	4613      	mov	r3, r2
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4413      	add	r3, r2
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	440b      	add	r3, r1
 8000c90:	3308      	adds	r3, #8
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68ba      	ldr	r2, [r7, #8]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d2dc      	bcs.n	8000c54 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8000c9a:	7b7a      	ldrb	r2, [r7, #13]
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	4611      	mov	r1, r2
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f7ff fecf 	bl	8000a44 <LinkTimerAfter>
 8000ca6:	e00f      	b.n	8000cc8 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <linkTimer+0x144>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	79fb      	ldrb	r3, [r7, #7]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff ff0c 	bl	8000ad0 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <linkTimer+0x144>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <linkTimer+0x148>)
 8000cc0:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <linkTimer+0x144>)
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8000cc8:	89fb      	ldrh	r3, [r7, #14]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	2000013c 	.word	0x2000013c
 8000cd8:	2000013d 	.word	0x2000013d
 8000cdc:	200000ac 	.word	0x200000ac
 8000ce0:	20000140 	.word	0x20000140

08000ce4 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	460a      	mov	r2, r1
 8000cee:	71fb      	strb	r3, [r7, #7]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8000cf4:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <UnlinkTimer+0xf8>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	79fa      	ldrb	r2, [r7, #7]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	d111      	bne.n	8000d24 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8000d00:	4b36      	ldr	r3, [pc, #216]	; (8000ddc <UnlinkTimer+0xf8>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b36      	ldr	r3, [pc, #216]	; (8000de0 <UnlinkTimer+0xfc>)
 8000d08:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8000d0a:	79fa      	ldrb	r2, [r7, #7]
 8000d0c:	4935      	ldr	r1, [pc, #212]	; (8000de4 <UnlinkTimer+0x100>)
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	00db      	lsls	r3, r3, #3
 8000d16:	440b      	add	r3, r1
 8000d18:	3315      	adds	r3, #21
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2da      	uxtb	r2, r3
 8000d1e:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <UnlinkTimer+0xf8>)
 8000d20:	701a      	strb	r2, [r3, #0]
 8000d22:	e03e      	b.n	8000da2 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8000d24:	79fa      	ldrb	r2, [r7, #7]
 8000d26:	492f      	ldr	r1, [pc, #188]	; (8000de4 <UnlinkTimer+0x100>)
 8000d28:	4613      	mov	r3, r2
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	4413      	add	r3, r2
 8000d2e:	00db      	lsls	r3, r3, #3
 8000d30:	440b      	add	r3, r1
 8000d32:	3314      	adds	r3, #20
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8000d38:	79fa      	ldrb	r2, [r7, #7]
 8000d3a:	492a      	ldr	r1, [pc, #168]	; (8000de4 <UnlinkTimer+0x100>)
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	005b      	lsls	r3, r3, #1
 8000d40:	4413      	add	r3, r2
 8000d42:	00db      	lsls	r3, r3, #3
 8000d44:	440b      	add	r3, r1
 8000d46:	3315      	adds	r3, #21
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8000d4c:	79f9      	ldrb	r1, [r7, #7]
 8000d4e:	7bfa      	ldrb	r2, [r7, #15]
 8000d50:	4824      	ldr	r0, [pc, #144]	; (8000de4 <UnlinkTimer+0x100>)
 8000d52:	460b      	mov	r3, r1
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	440b      	add	r3, r1
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	4403      	add	r3, r0
 8000d5c:	3315      	adds	r3, #21
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2d8      	uxtb	r0, r3
 8000d62:	4920      	ldr	r1, [pc, #128]	; (8000de4 <UnlinkTimer+0x100>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	4413      	add	r3, r2
 8000d6a:	00db      	lsls	r3, r3, #3
 8000d6c:	440b      	add	r3, r1
 8000d6e:	3315      	adds	r3, #21
 8000d70:	4602      	mov	r2, r0
 8000d72:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000d74:	7bbb      	ldrb	r3, [r7, #14]
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d013      	beq.n	8000da2 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8000d7a:	79f9      	ldrb	r1, [r7, #7]
 8000d7c:	7bba      	ldrb	r2, [r7, #14]
 8000d7e:	4819      	ldr	r0, [pc, #100]	; (8000de4 <UnlinkTimer+0x100>)
 8000d80:	460b      	mov	r3, r1
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	440b      	add	r3, r1
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	4403      	add	r3, r0
 8000d8a:	3314      	adds	r3, #20
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	b2d8      	uxtb	r0, r3
 8000d90:	4914      	ldr	r1, [pc, #80]	; (8000de4 <UnlinkTimer+0x100>)
 8000d92:	4613      	mov	r3, r2
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	4413      	add	r3, r2
 8000d98:	00db      	lsls	r3, r3, #3
 8000d9a:	440b      	add	r3, r1
 8000d9c:	3314      	adds	r3, #20
 8000d9e:	4602      	mov	r2, r0
 8000da0:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8000da2:	79fa      	ldrb	r2, [r7, #7]
 8000da4:	490f      	ldr	r1, [pc, #60]	; (8000de4 <UnlinkTimer+0x100>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	00db      	lsls	r3, r3, #3
 8000dae:	440b      	add	r3, r1
 8000db0:	330c      	adds	r3, #12
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <UnlinkTimer+0xf8>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	2b06      	cmp	r3, #6
 8000dbe:	d107      	bne.n	8000dd0 <UnlinkTimer+0xec>
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d104      	bne.n	8000dd0 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000dc6:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <UnlinkTimer+0x104>)
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dcc:	601a      	str	r2, [r3, #0]
  }

  return;
 8000dce:	bf00      	nop
 8000dd0:	bf00      	nop
}
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	2000013c 	.word	0x2000013c
 8000de0:	2000013d 	.word	0x2000013d
 8000de4:	200000ac 	.word	0x200000ac
 8000de8:	20000140 	.word	0x20000140

08000dec <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <ReturnTimeElapsed+0x70>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000dfa:	d026      	beq.n	8000e4a <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8000dfc:	f7ff fe02 	bl	8000a04 <ReadRtcSsrValue>
 8000e00:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8000e02:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <ReturnTimeElapsed+0x70>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d805      	bhi.n	8000e18 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <ReturnTimeElapsed+0x70>)
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	607b      	str	r3, [r7, #4]
 8000e16:	e00a      	b.n	8000e2e <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8000e18:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <ReturnTimeElapsed+0x74>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8000e24:	4b0d      	ldr	r3, [pc, #52]	; (8000e5c <ReturnTimeElapsed+0x70>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	683a      	ldr	r2, [r7, #0]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8000e2e:	4b0d      	ldr	r3, [pc, #52]	; (8000e64 <ReturnTimeElapsed+0x78>)
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	461a      	mov	r2, r3
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	fb02 f303 	mul.w	r3, r2, r3
 8000e3a:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8000e3c:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <ReturnTimeElapsed+0x7c>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	40d3      	lsrs	r3, r2
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	e001      	b.n	8000e4e <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	b29b      	uxth	r3, r3
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000140 	.word	0x20000140
 8000e60:	20000236 	.word	0x20000236
 8000e64:	20000235 	.word	0x20000235
 8000e68:	20000234 	.word	0x20000234

08000e6c <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
   */

  if(Value == 0)
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d108      	bne.n	8000e8e <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000e7c:	f7ff fdc2 	bl	8000a04 <ReadRtcSsrValue>
 8000e80:	4602      	mov	r2, r0
 8000e82:	4b24      	ldr	r3, [pc, #144]	; (8000f14 <RestartWakeupCounter+0xa8>)
 8000e84:	601a      	str	r2, [r3, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000e86:	2003      	movs	r0, #3
 8000e88:	f002 ff5d 	bl	8003d46 <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8000e8c:	e03e      	b.n	8000f0c <RestartWakeupCounter+0xa0>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d803      	bhi.n	8000e9c <RestartWakeupCounter+0x30>
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <RestartWakeupCounter+0xac>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d002      	beq.n	8000ea2 <RestartWakeupCounter+0x36>
      Value -= 1;
 8000e9c:	88fb      	ldrh	r3, [r7, #6]
 8000e9e:	3b01      	subs	r3, #1
 8000ea0:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 8000ea2:	bf00      	nop
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	; (8000f1c <RestartWakeupCounter+0xb0>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0f7      	beq.n	8000ea4 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8000eb4:	4b19      	ldr	r3, [pc, #100]	; (8000f1c <RestartWakeupCounter+0xb0>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <RestartWakeupCounter+0xb0>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8000ec8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <RestartWakeupCounter+0xb4>)
 8000ecc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ed0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8000ed2:	2003      	movs	r0, #3
 8000ed4:	f002 ff45 	bl	8003d62 <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <RestartWakeupCounter+0xb8>)
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	0c1b      	lsrs	r3, r3, #16
 8000ede:	041b      	lsls	r3, r3, #16
 8000ee0:	88fa      	ldrh	r2, [r7, #6]
 8000ee2:	4910      	ldr	r1, [pc, #64]	; (8000f24 <RestartWakeupCounter+0xb8>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8000ee8:	f7ff fd8c 	bl	8000a04 <ReadRtcSsrValue>
 8000eec:	4602      	mov	r2, r0
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <RestartWakeupCounter+0xa8>)
 8000ef0:	601a      	str	r2, [r3, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(phrtc);    /**<  Enable the Wakeup Timer */
 8000ef2:	4b0a      	ldr	r3, [pc, #40]	; (8000f1c <RestartWakeupCounter+0xb0>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689a      	ldr	r2, [r3, #8]
 8000efa:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <RestartWakeupCounter+0xb0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f04:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8000f06:	f3af 8000 	nop.w
  return ;
 8000f0a:	bf00      	nop
}
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000140 	.word	0x20000140
 8000f18:	20000234 	.word	0x20000234
 8000f1c:	20000230 	.word	0x20000230
 8000f20:	58000800 	.word	0x58000800
 8000f24:	40002800 	.word	0x40002800

08000f28 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8000f2e:	4b47      	ldr	r3, [pc, #284]	; (800104c <RescheduleTimerList+0x124>)
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f3a:	d108      	bne.n	8000f4e <RescheduleTimerList+0x26>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8000f3c:	bf00      	nop
 8000f3e:	4b44      	ldr	r3, [pc, #272]	; (8001050 <RescheduleTimerList+0x128>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d1f7      	bne.n	8000f3e <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 8000f4e:	4b40      	ldr	r3, [pc, #256]	; (8001050 <RescheduleTimerList+0x128>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689a      	ldr	r2, [r3, #8]
 8000f56:	4b3e      	ldr	r3, [pc, #248]	; (8001050 <RescheduleTimerList+0x128>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f60:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8000f62:	4b3c      	ldr	r3, [pc, #240]	; (8001054 <RescheduleTimerList+0x12c>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8000f68:	7bfa      	ldrb	r2, [r7, #15]
 8000f6a:	493b      	ldr	r1, [pc, #236]	; (8001058 <RescheduleTimerList+0x130>)
 8000f6c:	4613      	mov	r3, r2
 8000f6e:	005b      	lsls	r3, r3, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	00db      	lsls	r3, r3, #3
 8000f74:	440b      	add	r3, r1
 8000f76:	3308      	adds	r3, #8
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8000f7c:	f7ff ff36 	bl	8000dec <ReturnTimeElapsed>
 8000f80:	4603      	mov	r3, r0
 8000f82:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d205      	bcs.n	8000f98 <RescheduleTimerList+0x70>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000f90:	4b32      	ldr	r3, [pc, #200]	; (800105c <RescheduleTimerList+0x134>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	e04d      	b.n	8001034 <RescheduleTimerList+0x10c>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8000f98:	88fb      	ldrh	r3, [r7, #6]
 8000f9a:	4a31      	ldr	r2, [pc, #196]	; (8001060 <RescheduleTimerList+0x138>)
 8000f9c:	8812      	ldrh	r2, [r2, #0]
 8000f9e:	b292      	uxth	r2, r2
 8000fa0:	4413      	add	r3, r2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d906      	bls.n	8000fb8 <RescheduleTimerList+0x90>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8000faa:	4b2d      	ldr	r3, [pc, #180]	; (8001060 <RescheduleTimerList+0x138>)
 8000fac:	881b      	ldrh	r3, [r3, #0]
 8000fae:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <RescheduleTimerList+0x134>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e03d      	b.n	8001034 <RescheduleTimerList+0x10c>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	88fb      	ldrh	r3, [r7, #6]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <RescheduleTimerList+0x134>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8000fc8:	e034      	b.n	8001034 <RescheduleTimerList+0x10c>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8000fca:	7bfa      	ldrb	r2, [r7, #15]
 8000fcc:	4922      	ldr	r1, [pc, #136]	; (8001058 <RescheduleTimerList+0x130>)
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	440b      	add	r3, r1
 8000fd8:	3308      	adds	r3, #8
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	429a      	cmp	r2, r3
 8000fe0:	d20a      	bcs.n	8000ff8 <RescheduleTimerList+0xd0>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	491c      	ldr	r1, [pc, #112]	; (8001058 <RescheduleTimerList+0x130>)
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	4413      	add	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	440b      	add	r3, r1
 8000ff0:	3308      	adds	r3, #8
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e013      	b.n	8001020 <RescheduleTimerList+0xf8>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	4917      	ldr	r1, [pc, #92]	; (8001058 <RescheduleTimerList+0x130>)
 8000ffc:	4613      	mov	r3, r2
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	4413      	add	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	440b      	add	r3, r1
 8001006:	3308      	adds	r3, #8
 8001008:	6819      	ldr	r1, [r3, #0]
 800100a:	88fb      	ldrh	r3, [r7, #6]
 800100c:	7bfa      	ldrb	r2, [r7, #15]
 800100e:	1ac9      	subs	r1, r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	; (8001058 <RescheduleTimerList+0x130>)
 8001012:	4613      	mov	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4403      	add	r3, r0
 800101c:	3308      	adds	r3, #8
 800101e:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <RescheduleTimerList+0x130>)
 8001024:	4613      	mov	r3, r2
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	4413      	add	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	440b      	add	r3, r1
 800102e:	3315      	adds	r3, #21
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001034:	7bfb      	ldrb	r3, [r7, #15]
 8001036:	2b06      	cmp	r3, #6
 8001038:	d1c7      	bne.n	8000fca <RescheduleTimerList+0xa2>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800103a:	89bb      	ldrh	r3, [r7, #12]
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff15 	bl	8000e6c <RestartWakeupCounter>

  return ;
 8001042:	bf00      	nop
}
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40002800 	.word	0x40002800
 8001050:	20000230 	.word	0x20000230
 8001054:	2000013c 	.word	0x2000013c
 8001058:	200000ac 	.word	0x200000ac
 800105c:	20000144 	.word	0x20000144
 8001060:	20000238 	.word	0x20000238

08001064 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08a      	sub	sp, #40	; 0x28
 8001068:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800106a:	f3ef 8310 	mrs	r3, PRIMASK
 800106e:	617b      	str	r3, [r7, #20]
  return(result);
 8001070:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8001074:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001076:	4b5e      	ldr	r3, [pc, #376]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	22ca      	movs	r2, #202	; 0xca
 800107e:	625a      	str	r2, [r3, #36]	; 0x24
 8001080:	4b5b      	ldr	r3, [pc, #364]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2253      	movs	r2, #83	; 0x53
 8001088:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);
 800108a:	4b59      	ldr	r3, [pc, #356]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	689a      	ldr	r2, [r3, #8]
 8001092:	4b57      	ldr	r3, [pc, #348]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800109c:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800109e:	4b55      	ldr	r3, [pc, #340]	; (80011f4 <HW_TS_RTC_Wakeup_Handler+0x190>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80010a6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010aa:	4953      	ldr	r1, [pc, #332]	; (80011f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	440b      	add	r3, r1
 80010b6:	330c      	adds	r3, #12
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b02      	cmp	r3, #2
 80010be:	d170      	bne.n	80011a2 <HW_TS_RTC_Wakeup_Handler+0x13e>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80010c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010c4:	494c      	ldr	r1, [pc, #304]	; (80011f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010c6:	4613      	mov	r3, r2
 80010c8:	005b      	lsls	r3, r3, #1
 80010ca:	4413      	add	r3, r2
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	440b      	add	r3, r1
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80010d4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010d8:	4947      	ldr	r1, [pc, #284]	; (80011f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010da:	4613      	mov	r3, r2
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	4413      	add	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	440b      	add	r3, r1
 80010e4:	3310      	adds	r3, #16
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80010ea:	4b44      	ldr	r3, [pc, #272]	; (80011fc <HW_TS_RTC_Wakeup_Handler+0x198>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d04e      	beq.n	8001192 <HW_TS_RTC_Wakeup_Handler+0x12e>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80010f4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80010f8:	493f      	ldr	r1, [pc, #252]	; (80011f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 80010fa:	4613      	mov	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4413      	add	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	440b      	add	r3, r1
 8001104:	330d      	adds	r3, #13
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	2b01      	cmp	r3, #1
 800110c:	d125      	bne.n	800115a <HW_TS_RTC_Wakeup_Handler+0xf6>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800110e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001112:	2101      	movs	r1, #1
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fde5 	bl	8000ce4 <UnlinkTimer>
 800111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800111c:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	f383 8810 	msr	PRIMASK, r3
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8001124:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001128:	4933      	ldr	r1, [pc, #204]	; (80011f8 <HW_TS_RTC_Wakeup_Handler+0x194>)
 800112a:	4613      	mov	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	4413      	add	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	440b      	add	r3, r1
 8001134:	3304      	adds	r3, #4
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fa46 	bl	80015d0 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001144:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	22ca      	movs	r2, #202	; 0xca
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
 800114e:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2253      	movs	r2, #83	; 0x53
 8001156:	625a      	str	r2, [r3, #36]	; 0x24
 8001158:	e013      	b.n	8001182 <HW_TS_RTC_Wakeup_Handler+0x11e>
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f383 8810 	msr	PRIMASK, r3
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8001164:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f9a7 	bl	80014bc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800116e:	4b20      	ldr	r3, [pc, #128]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	22ca      	movs	r2, #202	; 0xca
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
 8001178:	4b1d      	ldr	r3, [pc, #116]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2253      	movs	r2, #83	; 0x53
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8001182:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001186:	69fa      	ldr	r2, [r7, #28]
 8001188:	4619      	mov	r1, r3
 800118a:	69b8      	ldr	r0, [r7, #24]
 800118c:	f000 faa6 	bl	80016dc <HW_TS_RTC_Int_AppNot>
 8001190:	e024      	b.n	80011dc <HW_TS_RTC_Wakeup_Handler+0x178>
    }
    else
    {
      RescheduleTimerList();
 8001192:	f7ff fec9 	bl	8000f28 <RescheduleTimerList>
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	f383 8810 	msr	PRIMASK, r3
 80011a0:	e01c      	b.n	80011dc <HW_TS_RTC_Wakeup_Handler+0x178>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 80011a2:	bf00      	nop
 80011a4:	4b12      	ldr	r3, [pc, #72]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	f003 0304 	and.w	r3, r3, #4
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f7      	beq.n	80011a4 <HW_TS_RTC_Wakeup_Handler+0x140>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80011b4:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80011c8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <HW_TS_RTC_Wakeup_Handler+0x19c>)
 80011cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f383 8810 	msr	PRIMASK, r3
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	22ff      	movs	r2, #255	; 0xff
 80011e4:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 80011e6:	bf00      	nop
}
 80011e8:	3728      	adds	r7, #40	; 0x28
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000230 	.word	0x20000230
 80011f4:	2000013c 	.word	0x2000013c
 80011f8:	200000ac 	.word	0x200000ac
 80011fc:	20000144 	.word	0x20000144
 8001200:	58000800 	.word	0x58000800

08001204 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b088      	sub	sp, #32
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	6039      	str	r1, [r7, #0]
 800120e:	71fb      	strb	r3, [r7, #7]
  uint32_t localmaxwakeuptimersetup;

  /**
   * Get RTC handler
   */
  phrtc = hrtc;
 8001210:	4a64      	ldr	r2, [pc, #400]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	6013      	str	r3, [r2, #0]

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 8001216:	4b63      	ldr	r3, [pc, #396]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	22ca      	movs	r2, #202	; 0xca
 800121e:	625a      	str	r2, [r3, #36]	; 0x24
 8001220:	4b60      	ldr	r3, [pc, #384]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2253      	movs	r2, #83	; 0x53
 8001228:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800122a:	4b5f      	ldr	r3, [pc, #380]	; (80013a8 <HW_TS_Init+0x1a4>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	4a5e      	ldr	r2, [pc, #376]	; (80013a8 <HW_TS_Init+0x1a4>)
 8001230:	f043 0320 	orr.w	r3, r3, #32
 8001234:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8001236:	4b5c      	ldr	r3, [pc, #368]	; (80013a8 <HW_TS_Init+0x1a4>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f1c3 0304 	rsb	r3, r3, #4
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b58      	ldr	r3, [pc, #352]	; (80013ac <HW_TS_Init+0x1a8>)
 800124a:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800124c:	4b56      	ldr	r3, [pc, #344]	; (80013a8 <HW_TS_Init+0x1a4>)
 800124e:	691b      	ldr	r3, [r3, #16]
 8001250:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001254:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8001258:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	fa92 f2a2 	rbit	r2, r2
 8001260:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	2a00      	cmp	r2, #0
 800126a:	d101      	bne.n	8001270 <HW_TS_Init+0x6c>
  {
    return 32U;
 800126c:	2220      	movs	r2, #32
 800126e:	e003      	b.n	8001278 <HW_TS_Init+0x74>
  }
  return __builtin_clz(value);
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	fab2 f282 	clz	r2, r2
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	40d3      	lsrs	r3, r2
 800127a:	b2db      	uxtb	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b4b      	ldr	r3, [pc, #300]	; (80013b0 <HW_TS_Init+0x1ac>)
 8001282:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8001284:	4b48      	ldr	r3, [pc, #288]	; (80013a8 <HW_TS_Init+0x1a4>)
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	b29b      	uxth	r3, r3
 800128a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800128e:	b29b      	uxth	r3, r3
 8001290:	3301      	adds	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HW_TS_Init+0x1b0>)
 8001296:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8001298:	4b46      	ldr	r3, [pc, #280]	; (80013b4 <HW_TS_Init+0x1b0>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	3b01      	subs	r3, #1
 800129e:	4a44      	ldr	r2, [pc, #272]	; (80013b0 <HW_TS_Init+0x1ac>)
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	fb02 f303 	mul.w	r3, r2, r3
 80012a6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80012aa:	4a40      	ldr	r2, [pc, #256]	; (80013ac <HW_TS_Init+0x1a8>)
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	40d3      	lsrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d904      	bls.n	80012c6 <HW_TS_Init+0xc2>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80012bc:	4b3e      	ldr	r3, [pc, #248]	; (80013b8 <HW_TS_Init+0x1b4>)
 80012be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012c2:	801a      	strh	r2, [r3, #0]
 80012c4:	e003      	b.n	80012ce <HW_TS_Init+0xca>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HW_TS_Init+0x1b4>)
 80012cc:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012d2:	f7ff fb85 	bl	80009e0 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80012d6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80012da:	f7ff fb6d 	bl	80009b8 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80012de:	79fb      	ldrb	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d143      	bne.n	800136c <HW_TS_Init+0x168>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80012e4:	4b35      	ldr	r3, [pc, #212]	; (80013bc <HW_TS_Init+0x1b8>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80012ea:	4b35      	ldr	r3, [pc, #212]	; (80013c0 <HW_TS_Init+0x1bc>)
 80012ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012f0:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	77fb      	strb	r3, [r7, #31]
 80012f6:	e00c      	b.n	8001312 <HW_TS_Init+0x10e>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 80012f8:	7ffa      	ldrb	r2, [r7, #31]
 80012fa:	4932      	ldr	r1, [pc, #200]	; (80013c4 <HW_TS_Init+0x1c0>)
 80012fc:	4613      	mov	r3, r2
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	4413      	add	r3, r2
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	440b      	add	r3, r1
 8001306:	330c      	adds	r3, #12
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	3301      	adds	r3, #1
 8001310:	77fb      	strb	r3, [r7, #31]
 8001312:	7ffb      	ldrb	r3, [r7, #31]
 8001314:	2b05      	cmp	r3, #5
 8001316:	d9ef      	bls.n	80012f8 <HW_TS_Init+0xf4>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HW_TS_Init+0x1c4>)
 800131a:	2206      	movs	r2, #6
 800131c:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);                       /**<  Disable the Wakeup Timer */
 800131e:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689a      	ldr	r2, [r3, #8]
 8001326:	4b1f      	ldr	r3, [pc, #124]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001330:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	4b19      	ldr	r3, [pc, #100]	; (80013a4 <HW_TS_Init+0x1a0>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001346:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <HW_TS_Init+0x1c8>)
 800134a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800134e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8001350:	2003      	movs	r0, #3
 8001352:	f002 fd06 	bl	8003d62 <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8001356:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	e00a      	b.n	8001382 <HW_TS_Init+0x17e>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET)
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HW_TS_Init+0x1a0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HW_TS_Init+0x17e>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800137c:	2003      	movs	r0, #3
 800137e:	f002 fce2 	bl	8003d46 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HW_TS_Init+0x1a0>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	22ff      	movs	r2, #255	; 0xff
 800138a:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 800138c:	2200      	movs	r2, #0
 800138e:	2103      	movs	r1, #3
 8001390:	2003      	movs	r0, #3
 8001392:	f002 fc96 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8001396:	2003      	movs	r0, #3
 8001398:	f002 fcad 	bl	8003cf6 <HAL_NVIC_EnableIRQ>

  return;
 800139c:	bf00      	nop
}
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000230 	.word	0x20000230
 80013a8:	40002800 	.word	0x40002800
 80013ac:	20000234 	.word	0x20000234
 80013b0:	20000235 	.word	0x20000235
 80013b4:	20000236 	.word	0x20000236
 80013b8:	20000238 	.word	0x20000238
 80013bc:	20000144 	.word	0x20000144
 80013c0:	20000140 	.word	0x20000140
 80013c4:	200000ac 	.word	0x200000ac
 80013c8:	2000013c 	.word	0x2000013c
 80013cc:	58000800 	.word	0x58000800

080013d0 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b08b      	sub	sp, #44	; 0x2c
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	4613      	mov	r3, r2
 80013de:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80013e6:	f3ef 8310 	mrs	r3, PRIMASK
 80013ea:	61fb      	str	r3, [r7, #28]
  return(result);
 80013ec:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80013ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80013f0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80013f2:	e004      	b.n	80013fe <HW_TS_Create+0x2e>
  {
    loop++;
 80013f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80013f8:	3301      	adds	r3, #1
 80013fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 80013fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001402:	2b05      	cmp	r3, #5
 8001404:	d80c      	bhi.n	8001420 <HW_TS_Create+0x50>
 8001406:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800140a:	492b      	ldr	r1, [pc, #172]	; (80014b8 <HW_TS_Create+0xe8>)
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	440b      	add	r3, r1
 8001416:	330c      	adds	r3, #12
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e9      	bne.n	80013f4 <HW_TS_Create+0x24>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001420:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001424:	2b06      	cmp	r3, #6
 8001426:	d037      	beq.n	8001498 <HW_TS_Create+0xc8>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8001428:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800142c:	4922      	ldr	r1, [pc, #136]	; (80014b8 <HW_TS_Create+0xe8>)
 800142e:	4613      	mov	r3, r2
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4413      	add	r3, r2
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	440b      	add	r3, r1
 8001438:	330c      	adds	r3, #12
 800143a:	2201      	movs	r2, #1
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	6a3b      	ldr	r3, [r7, #32]
 8001440:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8001448:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800144c:	491a      	ldr	r1, [pc, #104]	; (80014b8 <HW_TS_Create+0xe8>)
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	00db      	lsls	r3, r3, #3
 8001456:	440b      	add	r3, r1
 8001458:	3310      	adds	r3, #16
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800145e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001462:	4915      	ldr	r1, [pc, #84]	; (80014b8 <HW_TS_Create+0xe8>)
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	00db      	lsls	r3, r3, #3
 800146c:	440b      	add	r3, r1
 800146e:	330d      	adds	r3, #13
 8001470:	79fa      	ldrb	r2, [r7, #7]
 8001472:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 8001474:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001478:	490f      	ldr	r1, [pc, #60]	; (80014b8 <HW_TS_Create+0xe8>)
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	440b      	add	r3, r1
 8001484:	683a      	ldr	r2, [r7, #0]
 8001486:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800148e:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001496:	e007      	b.n	80014a8 <HW_TS_Create+0xd8>
 8001498:	6a3b      	ldr	r3, [r7, #32]
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f383 8810 	msr	PRIMASK, r3
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80014a2:	2301      	movs	r3, #1
 80014a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80014a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	372c      	adds	r7, #44	; 0x2c
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	200000ac 	.word	0x200000ac

080014bc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80014c6:	f3ef 8310 	mrs	r3, PRIMASK
 80014ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80014cc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80014ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 80014d2:	2003      	movs	r0, #3
 80014d4:	f002 fc1d 	bl	8003d12 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 80014d8:	4b37      	ldr	r3, [pc, #220]	; (80015b8 <HW_TS_Stop+0xfc>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	22ca      	movs	r2, #202	; 0xca
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HW_TS_Stop+0xfc>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2253      	movs	r2, #83	; 0x53
 80014ea:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	4933      	ldr	r1, [pc, #204]	; (80015bc <HW_TS_Stop+0x100>)
 80014f0:	4613      	mov	r3, r2
 80014f2:	005b      	lsls	r3, r3, #1
 80014f4:	4413      	add	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	440b      	add	r3, r1
 80014fa:	330c      	adds	r3, #12
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d148      	bne.n	8001596 <HW_TS_Stop+0xda>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	2100      	movs	r1, #0
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff fbeb 	bl	8000ce4 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800150e:	4b2c      	ldr	r3, [pc, #176]	; (80015c0 <HW_TS_Stop+0x104>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001514:	7cfb      	ldrb	r3, [r7, #19]
 8001516:	2b06      	cmp	r3, #6
 8001518:	d135      	bne.n	8001586 <HW_TS_Stop+0xca>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800151a:	4b2a      	ldr	r3, [pc, #168]	; (80015c4 <HW_TS_Stop+0x108>)
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001526:	d108      	bne.n	800153a <HW_TS_Stop+0x7e>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == SET);
 8001528:	bf00      	nop
 800152a:	4b23      	ldr	r3, [pc, #140]	; (80015b8 <HW_TS_Stop+0xfc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68db      	ldr	r3, [r3, #12]
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f7      	bne.n	800152a <HW_TS_Stop+0x6e>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(phrtc);   /**<  Disable the Wakeup Timer */
 800153a:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HW_TS_Stop+0xfc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	689a      	ldr	r2, [r3, #8]
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HW_TS_Stop+0xfc>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800154c:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTWF) == RESET);
 800154e:	bf00      	nop
 8001550:	4b19      	ldr	r3, [pc, #100]	; (80015b8 <HW_TS_Stop+0xfc>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f7      	beq.n	8001550 <HW_TS_Stop+0x94>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <HW_TS_Stop+0xfc>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b13      	ldr	r3, [pc, #76]	; (80015b8 <HW_TS_Stop+0xfc>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001574:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001576:	4b14      	ldr	r3, [pc, #80]	; (80015c8 <HW_TS_Stop+0x10c>)
 8001578:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800157c:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 800157e:	2003      	movs	r0, #3
 8001580:	f002 fbef 	bl	8003d62 <HAL_NVIC_ClearPendingIRQ>
 8001584:	e007      	b.n	8001596 <HW_TS_Stop+0xda>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HW_TS_Stop+0x110>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	7cfa      	ldrb	r2, [r7, #19]
 800158e:	429a      	cmp	r2, r3
 8001590:	d001      	beq.n	8001596 <HW_TS_Stop+0xda>
    {
      RescheduleTimerList();
 8001592:	f7ff fcc9 	bl	8000f28 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 8001596:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HW_TS_Stop+0xfc>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	22ff      	movs	r2, #255	; 0xff
 800159e:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80015a0:	2003      	movs	r0, #3
 80015a2:	f002 fba8 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80015b0:	bf00      	nop
}
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20000230 	.word	0x20000230
 80015bc:	200000ac 	.word	0x200000ac
 80015c0:	2000013c 	.word	0x2000013c
 80015c4:	40002800 	.word	0x40002800
 80015c8:	58000800 	.word	0x58000800
 80015cc:	2000013d 	.word	0x2000013d

080015d0 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	4603      	mov	r3, r0
 80015d8:	6039      	str	r1, [r7, #0]
 80015da:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 80015dc:	79fa      	ldrb	r2, [r7, #7]
 80015de:	493b      	ldr	r1, [pc, #236]	; (80016cc <HW_TS_Start+0xfc>)
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	00db      	lsls	r3, r3, #3
 80015e8:	440b      	add	r3, r1
 80015ea:	330c      	adds	r3, #12
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d103      	bne.n	80015fc <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff ff60 	bl	80014bc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80015fc:	f3ef 8310 	mrs	r3, PRIMASK
 8001600:	60fb      	str	r3, [r7, #12]
  return(result);
 8001602:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8001604:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8001606:	b672      	cpsid	i
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8001608:	2003      	movs	r0, #3
 800160a:	f002 fb82 	bl	8003d12 <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( phrtc );
 800160e:	4b30      	ldr	r3, [pc, #192]	; (80016d0 <HW_TS_Start+0x100>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	22ca      	movs	r2, #202	; 0xca
 8001616:	625a      	str	r2, [r3, #36]	; 0x24
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <HW_TS_Start+0x100>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2253      	movs	r2, #83	; 0x53
 8001620:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8001622:	79fa      	ldrb	r2, [r7, #7]
 8001624:	4929      	ldr	r1, [pc, #164]	; (80016cc <HW_TS_Start+0xfc>)
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	330c      	adds	r3, #12
 8001632:	2202      	movs	r2, #2
 8001634:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8001636:	79fa      	ldrb	r2, [r7, #7]
 8001638:	4924      	ldr	r1, [pc, #144]	; (80016cc <HW_TS_Start+0xfc>)
 800163a:	4613      	mov	r3, r2
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	3308      	adds	r3, #8
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800164a:	79fa      	ldrb	r2, [r7, #7]
 800164c:	491f      	ldr	r1, [pc, #124]	; (80016cc <HW_TS_Start+0xfc>)
 800164e:	4613      	mov	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	3304      	adds	r3, #4
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fa95 	bl	8000b90 <linkTimer>
 8001666:	4603      	mov	r3, r0
 8001668:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <HW_TS_Start+0x104>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HW_TS_Start+0x108>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	7c7a      	ldrb	r2, [r7, #17]
 8001678:	429a      	cmp	r2, r3
 800167a:	d002      	beq.n	8001682 <HW_TS_Start+0xb2>
  {
    RescheduleTimerList();
 800167c:	f7ff fc54 	bl	8000f28 <RescheduleTimerList>
 8001680:	e013      	b.n	80016aa <HW_TS_Start+0xda>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8001682:	79fa      	ldrb	r2, [r7, #7]
 8001684:	4911      	ldr	r1, [pc, #68]	; (80016cc <HW_TS_Start+0xfc>)
 8001686:	4613      	mov	r3, r2
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	3308      	adds	r3, #8
 8001692:	6819      	ldr	r1, [r3, #0]
 8001694:	8a7b      	ldrh	r3, [r7, #18]
 8001696:	79fa      	ldrb	r2, [r7, #7]
 8001698:	1ac9      	subs	r1, r1, r3
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <HW_TS_Start+0xfc>)
 800169c:	4613      	mov	r3, r2
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4413      	add	r3, r2
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	4403      	add	r3, r0
 80016a6:	3308      	adds	r3, #8
 80016a8:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( phrtc );
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HW_TS_Start+0x100>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	22ff      	movs	r2, #255	; 0xff
 80016b2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80016b4:	2003      	movs	r0, #3
 80016b6:	f002 fb1e 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	f383 8810 	msr	PRIMASK, r3

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80016c4:	bf00      	nop
}
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200000ac 	.word	0x200000ac
 80016d0:	20000230 	.word	0x20000230
 80016d4:	2000013c 	.word	0x2000013c
 80016d8:	2000013d 	.word	0x2000013d

080016dc <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	460b      	mov	r3, r1
 80016e6:	607a      	str	r2, [r7, #4]
 80016e8:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4798      	blx	r3

  return;
 80016ee:	bf00      	nop
}
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
	...

080016f8 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
 8001706:	4613      	mov	r3, r2
 8001708:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 800170e:	2300      	movs	r3, #0
 8001710:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <HW_UART_Transmit_DMA+0x26>
 8001718:	2b02      	cmp	r3, #2
 800171a:	d00f      	beq.n	800173c <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800171c:	e01d      	b.n	800175a <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 800171e:	4a1f      	ldr	r2, [pc, #124]	; (800179c <HW_UART_Transmit_DMA+0xa4>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8001724:	4b1e      	ldr	r3, [pc, #120]	; (80017a0 <HW_UART_Transmit_DMA+0xa8>)
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HW_UART_Transmit_DMA+0xac>)
 8001728:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 800172a:	89bb      	ldrh	r3, [r7, #12]
 800172c:	461a      	mov	r2, r3
 800172e:	68b9      	ldr	r1, [r7, #8]
 8001730:	481b      	ldr	r0, [pc, #108]	; (80017a0 <HW_UART_Transmit_DMA+0xa8>)
 8001732:	f004 ff77 	bl	8006624 <HAL_UART_Transmit_DMA>
 8001736:	4603      	mov	r3, r0
 8001738:	75fb      	strb	r3, [r7, #23]
            break;
 800173a:	e00e      	b.n	800175a <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 800173c:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <HW_UART_Transmit_DMA+0xb0>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HW_UART_Transmit_DMA+0xb4>)
 8001744:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <HW_UART_Transmit_DMA+0xb8>)
 8001746:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8001748:	89bb      	ldrh	r3, [r7, #12]
 800174a:	461a      	mov	r2, r3
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	4817      	ldr	r0, [pc, #92]	; (80017ac <HW_UART_Transmit_DMA+0xb4>)
 8001750:	f004 ff68 	bl	8006624 <HAL_UART_Transmit_DMA>
 8001754:	4603      	mov	r3, r0
 8001756:	75fb      	strb	r3, [r7, #23]
            break;
 8001758:	bf00      	nop
    }

    switch (hal_status)
 800175a:	7dfb      	ldrb	r3, [r7, #23]
 800175c:	2b03      	cmp	r3, #3
 800175e:	d817      	bhi.n	8001790 <HW_UART_Transmit_DMA+0x98>
 8001760:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <HW_UART_Transmit_DMA+0x70>)
 8001762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001766:	bf00      	nop
 8001768:	08001779 	.word	0x08001779
 800176c:	0800177f 	.word	0x0800177f
 8001770:	08001785 	.word	0x08001785
 8001774:	0800178b 	.word	0x0800178b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8001778:	2300      	movs	r3, #0
 800177a:	75bb      	strb	r3, [r7, #22]
            break;
 800177c:	e009      	b.n	8001792 <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800177e:	2301      	movs	r3, #1
 8001780:	75bb      	strb	r3, [r7, #22]
            break;
 8001782:	e006      	b.n	8001792 <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8001784:	2302      	movs	r3, #2
 8001786:	75bb      	strb	r3, [r7, #22]
            break;
 8001788:	e003      	b.n	8001792 <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800178a:	2303      	movs	r3, #3
 800178c:	75bb      	strb	r3, [r7, #22]
            break;
 800178e:	e000      	b.n	8001792 <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 8001790:	bf00      	nop
    }

    return hw_status;
 8001792:	7dbb      	ldrb	r3, [r7, #22]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20001394 	.word	0x20001394
 80017a0:	20001484 	.word	0x20001484
 80017a4:	40013800 	.word	0x40013800
 80017a8:	20001388 	.word	0x20001388
 80017ac:	20001398 	.word	0x20001398
 80017b0:	40008000 	.word	0x40008000

080017b4 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0e      	ldr	r2, [pc, #56]	; (80017fc <HAL_UART_TxCpltCallback+0x48>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d00b      	beq.n	80017de <HAL_UART_TxCpltCallback+0x2a>
 80017c6:	4a0e      	ldr	r2, [pc, #56]	; (8001800 <HAL_UART_TxCpltCallback+0x4c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d000      	beq.n	80017ce <HAL_UART_TxCpltCallback+0x1a>
            }
            break;
#endif

        default:
            break;
 80017cc:	e012      	b.n	80017f4 <HAL_UART_TxCpltCallback+0x40>
            if(HW_huart1TxCb)
 80017ce:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_UART_TxCpltCallback+0x50>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_UART_TxCpltCallback+0x3a>
                HW_huart1TxCb();
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_UART_TxCpltCallback+0x50>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4798      	blx	r3
            break;
 80017dc:	e007      	b.n	80017ee <HAL_UART_TxCpltCallback+0x3a>
            if(HW_hlpuart1TxCb)
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_UART_TxCpltCallback+0x54>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d005      	beq.n	80017f2 <HAL_UART_TxCpltCallback+0x3e>
                HW_hlpuart1TxCb();
 80017e6:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_UART_TxCpltCallback+0x54>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4798      	blx	r3
            break;
 80017ec:	e001      	b.n	80017f2 <HAL_UART_TxCpltCallback+0x3e>
            break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <HAL_UART_TxCpltCallback+0x40>
            break;
 80017f2:	bf00      	nop
    }

    return;
 80017f4:	bf00      	nop
}
 80017f6:	3708      	adds	r7, #8
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40008000 	.word	0x40008000
 8001800:	40013800 	.word	0x40013800
 8001804:	20001394 	.word	0x20001394
 8001808:	20001388 	.word	0x20001388

0800180c <LL_EXTI_DisableIT_0_31>:
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001814:	4b07      	ldr	r3, [pc, #28]	; (8001834 <LL_EXTI_DisableIT_0_31+0x28>)
 8001816:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	43db      	mvns	r3, r3
 800181e:	4905      	ldr	r1, [pc, #20]	; (8001834 <LL_EXTI_DisableIT_0_31+0x28>)
 8001820:	4013      	ands	r3, r2
 8001822:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	58000800 	.word	0x58000800

08001838 <LL_EXTI_DisableIT_32_63>:
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001840:	4b07      	ldr	r3, [pc, #28]	; (8001860 <LL_EXTI_DisableIT_32_63+0x28>)
 8001842:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	43db      	mvns	r3, r3
 800184a:	4905      	ldr	r1, [pc, #20]	; (8001860 <LL_EXTI_DisableIT_32_63+0x28>)
 800184c:	4013      	ands	r3, r2
 800184e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	58000800 	.word	0x58000800

08001864 <LL_RCC_HSE_SetCapacitorTuning>:
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 800186c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001870:	4a0a      	ldr	r2, [pc, #40]	; (800189c <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001872:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8001876:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800187e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	021b      	lsls	r3, r3, #8
 8001886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800188a:	4313      	orrs	r3, r2
 800188c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	cafecafe 	.word	0xcafecafe

080018a0 <LL_RCC_LSE_SetDriveCapability>:
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80018a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b0:	f023 0218 	bic.w	r2, r3, #24
 80018b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80018c0:	bf00      	nop
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80018d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80018f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001906:	bf00      	nop
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001914:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800191c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001924:	d101      	bne.n	800192a <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8001926:	2301      	movs	r3, #1
 8001928:	e000      	b.n	800192c <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800193a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800194a:	d101      	bne.n	8001950 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_AHB1_GRP1_EnableClock>:
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800196a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4313      	orrs	r3, r2
 8001972:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4013      	ands	r3, r2
 800197e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001980:	68fb      	ldr	r3, [r7, #12]
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr

0800198e <LL_AHB2_GRP1_EnableClock>:
{
 800198e:	b480      	push	{r7}
 8001990:	b085      	sub	sp, #20
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001996:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800199c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80019a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4013      	ands	r3, r2
 80019b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	bf00      	nop
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <LL_AHB3_GRP1_EnableClock>:
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80019c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80019d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4013      	ands	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80019e4:	68fb      	ldr	r3, [r7, #12]
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80019f2:	b480      	push	{r7}
 80019f4:	b083      	sub	sp, #12
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
 80019fa:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	605a      	str	r2, [r3, #4]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr

08001a16 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
 8001a1e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	605a      	str	r2, [r3, #4]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	615a      	str	r2, [r3, #20]
}
 8001a50:	bf00      	nop
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	615a      	str	r2, [r3, #20]
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
 8001a86:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	609a      	str	r2, [r3, #8]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <LL_LPM_EnableSleep+0x1c>)
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <LL_LPM_EnableSleep+0x1c>)
 8001ac2:	f023 0304 	bic.w	r3, r3, #4
 8001ac6:	6113      	str	r3, [r2, #16]
}
 8001ac8:	bf00      	nop
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	22ff      	movs	r2, #255	; 0xff
 8001ae4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b083      	sub	sp, #12
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	22ca      	movs	r2, #202	; 0xca
 8001afe:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2253      	movs	r2, #83	; 0x53
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr

08001b12 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
 8001b1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 0207 	bic.w	r2, r3, #7
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0

  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <main+0x44>)
 8001b3e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b42:	611a      	str	r2, [r3, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b44:	f001 fee6 	bl	8003914 <HAL_Init>

  /* USER CODE BEGIN Init */
  Reset_Device();
 8001b48:	f000 f969 	bl	8001e1e <Reset_Device>
  Config_HSE();
 8001b4c:	f000 f953 	bl	8001df6 <Config_HSE>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b50:	f000 f816 	bl	8001b80 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PeriphClock_Config();
 8001b54:	f000 f948 	bl	8001de8 <PeriphClock_Config>
  Init_Exti(); /**< Configure the system Power Mode */
 8001b58:	f000 f9a3 	bl	8001ea2 <Init_Exti>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b5c:	f000 f937 	bl	8001dce <MX_GPIO_Init>
  MX_DMA_Init();
 8001b60:	f000 f918 	bl	8001d94 <MX_DMA_Init>
  MX_RF_Init();
 8001b64:	f000 f8da 	bl	8001d1c <MX_RF_Init>
  MX_RTC_Init();
 8001b68:	f000 f8e0 	bl	8001d2c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  APPE_Init();
 8001b6c:	f7fe fe40 	bl	80007f0 <APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
		UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b74:	f008 fad2 	bl	800a11c <UTIL_SEQ_Run>
 8001b78:	e7fa      	b.n	8001b70 <main+0x38>
 8001b7a:	bf00      	nop
 8001b7c:	58004000 	.word	0x58004000

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b0ae      	sub	sp, #184	; 0xb8
 8001b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001b8a:	2248      	movs	r2, #72	; 0x48
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f008 fd07 	bl	800a5a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
 8001ba4:	615a      	str	r2, [r3, #20]
 8001ba6:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2250      	movs	r2, #80	; 0x50
 8001bac:	2100      	movs	r1, #0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f008 fcf7 	bl	800a5a2 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001bb4:	f002 fdbc 	bl	8004730 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fe71 	bl	80018a0 <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bbe:	4b2f      	ldr	r3, [pc, #188]	; (8001c7c <SystemClock_Config+0xfc>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bc6:	4a2d      	ldr	r2, [pc, #180]	; (8001c7c <SystemClock_Config+0xfc>)
 8001bc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <SystemClock_Config+0xfc>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd6:	603b      	str	r3, [r7, #0]
 8001bd8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 8001bda:	2307      	movs	r3, #7
 8001bdc:	673b      	str	r3, [r7, #112]	; 0x70
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001be4:	2301      	movs	r3, #1
 8001be6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bec:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bee:	2340      	movs	r3, #64	; 0x40
 8001bf0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f003 f92a 	bl	8004e58 <HAL_RCC_OscConfig>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001c0a:	f000 f97a 	bl	8001f02 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8001c0e:	236f      	movs	r3, #111	; 0x6f
 8001c10:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001c12:	2302      	movs	r3, #2
 8001c14:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c16:	2300      	movs	r3, #0
 8001c18:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 fc9d 	bl	8005570 <HAL_RCC_ClockConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c3c:	f000 f961 	bl	8001f02 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP
 8001c40:	f643 0303 	movw	r3, #14339	; 0x3803
 8001c44:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_LPUART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c46:	2300      	movs	r3, #0
 8001c48:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8001c54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c58:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001c5e:	2310      	movs	r3, #16
 8001c60:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	4618      	mov	r0, r3
 8001c66:	f004 f8c2 	bl	8005dee <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c70:	f000 f947 	bl	8001f02 <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 8001c74:	bf00      	nop
 8001c76:	37b8      	adds	r7, #184	; 0xb8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	58000400 	.word	0x58000400

08001c80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001c86:	4a24      	ldr	r2, [pc, #144]	; (8001d18 <MX_USART1_UART_Init+0x98>)
 8001c88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c8a:	4b22      	ldr	r3, [pc, #136]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001c8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c98:	4b1e      	ldr	r3, [pc, #120]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c9e:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ca4:	4b1b      	ldr	r3, [pc, #108]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001cb2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cb6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cb8:	4b16      	ldr	r3, [pc, #88]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cc4:	4b13      	ldr	r3, [pc, #76]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cca:	4812      	ldr	r0, [pc, #72]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001ccc:	f004 fc59 	bl	8006582 <HAL_UART_Init>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001cd6:	f000 f914 	bl	8001f02 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cda:	2100      	movs	r1, #0
 8001cdc:	480d      	ldr	r0, [pc, #52]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001cde:	f005 fb6d 	bl	80073bc <HAL_UARTEx_SetTxFifoThreshold>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8001ce8:	f000 f90b 	bl	8001f02 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cec:	2100      	movs	r1, #0
 8001cee:	4809      	ldr	r0, [pc, #36]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001cf0:	f005 fba2 	bl	8007438 <HAL_UARTEx_SetRxFifoThreshold>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8001cfa:	f000 f902 	bl	8001f02 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART1_UART_Init+0x94>)
 8001d00:	f005 fb23 	bl	800734a <HAL_UARTEx_DisableFifoMode>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8001d0a:	f000 f8fa 	bl	8001f02 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20001484 	.word	0x20001484
 8001d18:	40013800 	.word	0x40013800

08001d1c <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8001d20:	bf00      	nop
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
	...

08001d2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d32:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <MX_RTC_Init+0x64>)
 8001d34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d3e:	220f      	movs	r2, #15
 8001d40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8001d42:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001d48:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001d56:	4b0d      	ldr	r3, [pc, #52]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001d5c:	4b0b      	ldr	r3, [pc, #44]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001d62:	480a      	ldr	r0, [pc, #40]	; (8001d8c <MX_RTC_Init+0x60>)
 8001d64:	f004 fac9 	bl	80062fa <HAL_RTC_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8001d6e:	f000 f8c8 	bl	8001f02 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <MX_RTC_Init+0x64>)
 8001d74:	f7ff febd 	bl	8001af2 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001d78:	2100      	movs	r1, #0
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_RTC_Init+0x64>)
 8001d7c:	f7ff fec9 	bl	8001b12 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <MX_RTC_Init+0x64>)
 8001d82:	f7ff fea9 	bl	8001ad8 <LL_RTC_EnableWriteProtection>
  /* USER CODE END RTC_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001510 	.word	0x20001510
 8001d90:	40002800 	.word	0x40002800

08001d94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001d98:	2004      	movs	r0, #4
 8001d9a:	f7ff fddf 	bl	800195c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001d9e:	2001      	movs	r0, #1
 8001da0:	f7ff fddc 	bl	800195c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001da4:	2002      	movs	r0, #2
 8001da6:	f7ff fdd9 	bl	800195c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	210f      	movs	r1, #15
 8001dae:	200e      	movs	r0, #14
 8001db0:	f001 ff87 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001db4:	200e      	movs	r0, #14
 8001db6:	f001 ff9e 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	210f      	movs	r1, #15
 8001dbe:	203a      	movs	r0, #58	; 0x3a
 8001dc0:	f001 ff7f 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8001dc4:	203a      	movs	r0, #58	; 0x3a
 8001dc6:	f001 ff96 	bl	8003cf6 <HAL_NVIC_EnableIRQ>

}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}

08001dce <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dd2:	2004      	movs	r0, #4
 8001dd4:	f7ff fddb 	bl	800198e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f7ff fdd8 	bl	800198e <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2002      	movs	r0, #2
 8001de0:	f7ff fdd5 	bl	800198e <LL_AHB2_GRP1_EnableClock>

}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <PeriphClock_Config>:

/* USER CODE BEGIN 4 */

void PeriphClock_Config(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0

	/* Start automatic synchronization */
	HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
#endif

	return;
 8001dec:	bf00      	nop
}
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr

08001df6 <Config_HSE>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/

static void Config_HSE(void)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	f006 fe8d 	bl	8008b1c <OTP_Read>
 8001e02:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d005      	beq.n	8001e16 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	799b      	ldrb	r3, [r3, #6]
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff fd28 	bl	8001864 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
}  
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <Reset_Device>:


static void Reset_Device( void )
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
	Reset_BackupDomain();
 8001e22:	f000 f827 	bl	8001e74 <Reset_BackupDomain>

	Reset_IPCC();
 8001e26:	f000 f803 	bl	8001e30 <Reset_IPCC>
#endif

	return;
 8001e2a:	bf00      	nop
}
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001e34:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001e38:	f7ff fdc2 	bl	80019c0 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_ClearFlag_CHx(
 8001e3c:	213f      	movs	r1, #63	; 0x3f
 8001e3e:	480c      	ldr	r0, [pc, #48]	; (8001e70 <Reset_IPCC+0x40>)
 8001e40:	f7ff fe1d 	bl	8001a7e <LL_C1_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_ClearFlag_CHx(
 8001e44:	213f      	movs	r1, #63	; 0x3f
 8001e46:	480a      	ldr	r0, [pc, #40]	; (8001e70 <Reset_IPCC+0x40>)
 8001e48:	f7ff fe27 	bl	8001a9a <LL_C2_IPCC_ClearFlag_CHx>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableTransmitChannel(
 8001e4c:	213f      	movs	r1, #63	; 0x3f
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <Reset_IPCC+0x40>)
 8001e50:	f7ff fdcf 	bl	80019f2 <LL_C1_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableTransmitChannel(
 8001e54:	213f      	movs	r1, #63	; 0x3f
 8001e56:	4806      	ldr	r0, [pc, #24]	; (8001e70 <Reset_IPCC+0x40>)
 8001e58:	f7ff fdee 	bl	8001a38 <LL_C2_IPCC_DisableTransmitChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C1_IPCC_DisableReceiveChannel(
 8001e5c:	213f      	movs	r1, #63	; 0x3f
 8001e5e:	4804      	ldr	r0, [pc, #16]	; (8001e70 <Reset_IPCC+0x40>)
 8001e60:	f7ff fdd9 	bl	8001a16 <LL_C1_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	LL_C2_IPCC_DisableReceiveChannel(
 8001e64:	213f      	movs	r1, #63	; 0x3f
 8001e66:	4802      	ldr	r0, [pc, #8]	; (8001e70 <Reset_IPCC+0x40>)
 8001e68:	f7ff fdf8 	bl	8001a5c <LL_C2_IPCC_DisableReceiveChannel>
			IPCC,
			LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
			| LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

	return;
 8001e6c:	bf00      	nop
}
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	58000c00 	.word	0x58000c00

08001e74 <Reset_BackupDomain>:

static void Reset_BackupDomain( void )
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001e78:	f7ff fd4a 	bl	8001910 <LL_RCC_IsActiveFlag_PINRST>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00d      	beq.n	8001e9e <Reset_BackupDomain+0x2a>
 8001e82:	f7ff fd58 	bl	8001936 <LL_RCC_IsActiveFlag_SFTRST>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d108      	bne.n	8001e9e <Reset_BackupDomain+0x2a>
	{
		HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001e8c:	f002 fc50 	bl	8004730 <HAL_PWR_EnableBkUpAccess>

		/**
		 *  Write twice the value to flush the APB-AHB bridge
		 *  This bit shall be written in the register before writing the next one
		 */
		HAL_PWR_EnableBkUpAccess();
 8001e90:	f002 fc4e 	bl	8004730 <HAL_PWR_EnableBkUpAccess>

		__HAL_RCC_BACKUPRESET_FORCE();
 8001e94:	f7ff fd1a 	bl	80018cc <LL_RCC_ForceBackupDomainReset>
		__HAL_RCC_BACKUPRESET_RELEASE();
 8001e98:	f7ff fd29 	bl	80018ee <LL_RCC_ReleaseBackupDomainReset>
	}

	return;
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
}
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <Init_Exti>:

static void Init_Exti( void )
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	af00      	add	r7, sp, #0
  /**< Disable all wakeup interrupt on CPU1  except IPCC(36), HSEM(38) */
  LL_EXTI_DisableIT_0_31(~0);
 8001ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eaa:	f7ff fcaf 	bl	800180c <LL_EXTI_DisableIT_0_31>
  LL_EXTI_DisableIT_32_63( (~0) & (~(LL_EXTI_LINE_36 | LL_EXTI_LINE_38)) );
 8001eae:	f06f 0050 	mvn.w	r0, #80	; 0x50
 8001eb2:	f7ff fcc1 	bl	8001838 <LL_EXTI_DisableIT_32_63>

  return;
 8001eb6:	bf00      	nop
}
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ec2:	f001 fd95 	bl	80039f0 <HAL_GetTick>
 8001ec6:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ed2:	d00a      	beq.n	8001eea <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001ed4:	f001 fda4 	bl	8003a20 <HAL_GetTickFreq>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ee2:	e002      	b.n	8001eea <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001ee4:	f7ff fde8 	bl	8001ab8 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif

    __WFI( );
 8001ee8:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	f001 fd81 	bl	80039f0 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d8f4      	bhi.n	8001ee4 <HAL_Delay+0x2a>
  }
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
 
  /* USER CODE END Error_Handler_Debug */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <LL_RCC_SetRTCClockSource>:
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8001f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001f30:	bf00      	nop
 8001f32:	370c      	adds	r7, #12
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr

08001f3c <LL_RCC_EnableRTC>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001f40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr

08001f5e <LL_AHB2_GRP1_EnableClock>:
{
 8001f5e:	b480      	push	{r7}
 8001f60:	b085      	sub	sp, #20
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f6c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f82:	68fb      	ldr	r3, [r7, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <LL_AHB3_GRP1_EnableClock>:
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
}
 8001fb6:	bf00      	nop
 8001fb8:	3714      	adds	r7, #20
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr

08001fc2 <LL_APB1_GRP1_EnableClock>:
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fd0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
}
 8001fe8:	bf00      	nop
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <LL_APB1_GRP2_EnableClock>:
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002000:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002002:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4313      	orrs	r3, r2
 800200a:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800200c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4013      	ands	r3, r2
 8002016:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002018:	68fb      	ldr	r3, [r7, #12]
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_APB2_GRP1_EnableClock>:
{
 8002026:	b480      	push	{r7}
 8002028:	b085      	sub	sp, #20
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800202e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002032:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002034:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4313      	orrs	r3, r2
 800203c:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800203e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4013      	ands	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800204a:	68fb      	ldr	r3, [r7, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800205c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002060:	f7ff ff96 	bl	8001f90 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	202e      	movs	r0, #46	; 0x2e
 800206a:	f001 fe2a 	bl	8003cc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800206e:	202e      	movs	r0, #46	; 0x2e
 8002070:	f001 fe41 	bl	8003cf6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08c      	sub	sp, #48	; 0x30
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 031c 	add.w	r3, r7, #28
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  if(huart->Instance==LPUART1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a6c      	ldr	r2, [pc, #432]	; (8002248 <HAL_UART_MspInit+0x1d0>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d16f      	bne.n	800217a <HAL_UART_MspInit+0x102>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800209a:	2001      	movs	r0, #1
 800209c:	f7ff ffaa 	bl	8001ff4 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a0:	2001      	movs	r0, #1
 80020a2:	f7ff ff5c 	bl	8001f5e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    PA6     ------> LPUART1_CTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a6:	230c      	movs	r3, #12
 80020a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020aa:	2302      	movs	r3, #2
 80020ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020b2:	2303      	movs	r3, #3
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020b6:	2308      	movs	r3, #8
 80020b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	4619      	mov	r1, r3
 80020c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020c4:	f002 f970 	bl	80043a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020c8:	2340      	movs	r3, #64	; 0x40
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80020d8:	2308      	movs	r3, #8
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020e6:	f002 f95f 	bl	80043a8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 80020ea:	4b58      	ldr	r3, [pc, #352]	; (800224c <HAL_UART_MspInit+0x1d4>)
 80020ec:	4a58      	ldr	r2, [pc, #352]	; (8002250 <HAL_UART_MspInit+0x1d8>)
 80020ee:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 80020f0:	4b56      	ldr	r3, [pc, #344]	; (800224c <HAL_UART_MspInit+0x1d4>)
 80020f2:	2211      	movs	r2, #17
 80020f4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020f6:	4b55      	ldr	r3, [pc, #340]	; (800224c <HAL_UART_MspInit+0x1d4>)
 80020f8:	2210      	movs	r2, #16
 80020fa:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fc:	4b53      	ldr	r3, [pc, #332]	; (800224c <HAL_UART_MspInit+0x1d4>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002102:	4b52      	ldr	r3, [pc, #328]	; (800224c <HAL_UART_MspInit+0x1d4>)
 8002104:	2280      	movs	r2, #128	; 0x80
 8002106:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_UART_MspInit+0x1d4>)
 800210a:	2200      	movs	r2, #0
 800210c:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800210e:	4b4f      	ldr	r3, [pc, #316]	; (800224c <HAL_UART_MspInit+0x1d4>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002114:	4b4d      	ldr	r3, [pc, #308]	; (800224c <HAL_UART_MspInit+0x1d4>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800211a:	4b4c      	ldr	r3, [pc, #304]	; (800224c <HAL_UART_MspInit+0x1d4>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002120:	484a      	ldr	r0, [pc, #296]	; (800224c <HAL_UART_MspInit+0x1d4>)
 8002122:	f001 fe2d 	bl	8003d80 <HAL_DMA_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 800212c:	f7ff fee9 	bl	8001f02 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002130:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002134:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 800213a:	2300      	movs	r3, #0
 800213c:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = DISABLE;
 800213e:	2300      	movs	r3, #0
 8002140:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 8002142:	2301      	movs	r3, #1
 8002144:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4619      	mov	r1, r3
 800214c:	483f      	ldr	r0, [pc, #252]	; (800224c <HAL_UART_MspInit+0x1d4>)
 800214e:	f002 f8eb 	bl	8004328 <HAL_DMAEx_ConfigMuxSync>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8002158:	f7ff fed3 	bl	8001f02 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3b      	ldr	r2, [pc, #236]	; (800224c <HAL_UART_MspInit+0x1d4>)
 8002160:	675a      	str	r2, [r3, #116]	; 0x74
 8002162:	4a3a      	ldr	r2, [pc, #232]	; (800224c <HAL_UART_MspInit+0x1d4>)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002168:	2200      	movs	r2, #0
 800216a:	2100      	movs	r1, #0
 800216c:	2025      	movs	r0, #37	; 0x25
 800216e:	f001 fda8 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002172:	2025      	movs	r0, #37	; 0x25
 8002174:	f001 fdbf 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002178:	e061      	b.n	800223e <HAL_UART_MspInit+0x1c6>
  else if(huart->Instance==USART1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a35      	ldr	r2, [pc, #212]	; (8002254 <HAL_UART_MspInit+0x1dc>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d15c      	bne.n	800223e <HAL_UART_MspInit+0x1c6>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002184:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002188:	f7ff ff4d 	bl	8002026 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218c:	2001      	movs	r0, #1
 800218e:	f7ff fee6 	bl	8001f5e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	2002      	movs	r0, #2
 8002194:	f7ff fee3 	bl	8001f5e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002198:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800219c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021aa:	2307      	movs	r3, #7
 80021ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021b8:	f002 f8f6 	bl	80043a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80021bc:	23c0      	movs	r3, #192	; 0xc0
 80021be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	2302      	movs	r3, #2
 80021c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021c8:	2303      	movs	r3, #3
 80021ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80021cc:	2307      	movs	r3, #7
 80021ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4820      	ldr	r0, [pc, #128]	; (8002258 <HAL_UART_MspInit+0x1e0>)
 80021d8:	f002 f8e6 	bl	80043a8 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80021dc:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_UART_MspInit+0x1e4>)
 80021de:	4a20      	ldr	r2, [pc, #128]	; (8002260 <HAL_UART_MspInit+0x1e8>)
 80021e0:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80021e2:	4b1e      	ldr	r3, [pc, #120]	; (800225c <HAL_UART_MspInit+0x1e4>)
 80021e4:	220f      	movs	r2, #15
 80021e6:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e8:	4b1c      	ldr	r3, [pc, #112]	; (800225c <HAL_UART_MspInit+0x1e4>)
 80021ea:	2210      	movs	r2, #16
 80021ec:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ee:	4b1b      	ldr	r3, [pc, #108]	; (800225c <HAL_UART_MspInit+0x1e4>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f4:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_UART_MspInit+0x1e4>)
 80021f6:	2280      	movs	r2, #128	; 0x80
 80021f8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021fa:	4b18      	ldr	r3, [pc, #96]	; (800225c <HAL_UART_MspInit+0x1e4>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002200:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_UART_MspInit+0x1e4>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_UART_MspInit+0x1e4>)
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800220c:	4b13      	ldr	r3, [pc, #76]	; (800225c <HAL_UART_MspInit+0x1e4>)
 800220e:	2200      	movs	r2, #0
 8002210:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002212:	4812      	ldr	r0, [pc, #72]	; (800225c <HAL_UART_MspInit+0x1e4>)
 8002214:	f001 fdb4 	bl	8003d80 <HAL_DMA_Init>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 800221e:	f7ff fe70 	bl	8001f02 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a0d      	ldr	r2, [pc, #52]	; (800225c <HAL_UART_MspInit+0x1e4>)
 8002226:	675a      	str	r2, [r3, #116]	; 0x74
 8002228:	4a0c      	ldr	r2, [pc, #48]	; (800225c <HAL_UART_MspInit+0x1e4>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800222e:	2200      	movs	r2, #0
 8002230:	2100      	movs	r1, #0
 8002232:	2024      	movs	r0, #36	; 0x24
 8002234:	f001 fd45 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002238:	2024      	movs	r0, #36	; 0x24
 800223a:	f001 fd5c 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
}
 800223e:	bf00      	nop
 8002240:	3730      	adds	r7, #48	; 0x30
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	40008000 	.word	0x40008000
 800224c:	20001534 	.word	0x20001534
 8002250:	40020044 	.word	0x40020044
 8002254:	40013800 	.word	0x40013800
 8002258:	48000400 	.word	0x48000400
 800225c:	20001424 	.word	0x20001424
 8002260:	40020444 	.word	0x40020444

08002264 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a0b      	ldr	r2, [pc, #44]	; (80022a0 <HAL_RTC_MspInit+0x3c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d110      	bne.n	8002298 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */
  HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8002276:	f002 fa5b 	bl	8004730 <HAL_PWR_EnableBkUpAccess>

  /**
  *  Write twice the value to flush the APB-AHB bridge
  *  This bit shall be written in the register before writing the next one
  */
  HAL_PWR_EnableBkUpAccess();
 800227a:	f002 fa59 	bl	8004730 <HAL_PWR_EnableBkUpAccess>

  __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSE); /**< Select LSI as RTC Input */
 800227e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002282:	f7ff fe45 	bl	8001f10 <LL_RCC_SetRTCClockSource>
  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002286:	f7ff fe59 	bl	8001f3c <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800228a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800228e:	f7ff fe98 	bl	8001fc2 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f004 f91f 	bl	80064d6 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40002800 	.word	0x40002800

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b2:	b480      	push	{r7}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b6:	e7fe      	b.n	80022b6 <HardFault_Handler+0x4>

080022b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022bc:	e7fe      	b.n	80022bc <MemManage_Handler+0x4>

080022be <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022be:	b480      	push	{r7}
 80022c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c2:	e7fe      	b.n	80022c2 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	e7fe      	b.n	80022c8 <UsageFault_Handler+0x4>

080022ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022ca:	b480      	push	{r7}
 80022cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ce:	bf00      	nop
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr

080022e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e6:	b480      	push	{r7}
 80022e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022f8:	f001 fb66 	bl	80039c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002304:	4802      	ldr	r0, [pc, #8]	; (8002310 <DMA1_Channel4_IRQHandler+0x10>)
 8002306:	f001 febd 	bl	8004084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20001534 	.word	0x20001534

08002314 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <USART1_IRQHandler+0x10>)
 800231a:	f004 fa03 	bl	8006724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20001484 	.word	0x20001484

08002328 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <LPUART1_IRQHandler+0x10>)
 800232e:	f004 f9f9 	bl	8006724 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	20001398 	.word	0x20001398

0800233c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002340:	f002 f9d2 	bl	80046e8 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}

08002348 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <DMA2_Channel4_IRQHandler+0x10>)
 800234e:	f001 fe99 	bl	8004084 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20001424 	.word	0x20001424

0800235c <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 8002360:	2010      	movs	r0, #16
 8002362:	f002 f9a9 	bl	80046b8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}

0800236a <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800236e:	2001      	movs	r0, #1
 8002370:	f002 f9a2 	bl	80046b8 <HAL_GPIO_EXTI_IRQHandler>
}
 8002374:	bf00      	nop
 8002376:	bd80      	pop	{r7, pc}

08002378 <RTC_WKUP_IRQHandler>:

void RTC_WKUP_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 800237c:	f7fe fe72 	bl	8001064 <HW_TS_RTC_Wakeup_Handler>
}
 8002380:	bf00      	nop
 8002382:	bd80      	pop	{r7, pc}

08002384 <IPCC_C1_TX_IRQHandler>:

void IPCC_C1_TX_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
  HW_IPCC_Tx_Handler();
 8002388:	f001 f802 	bl	8003390 <HW_IPCC_Tx_Handler>

  return;
 800238c:	bf00      	nop
}
 800238e:	bd80      	pop	{r7, pc}

08002390 <IPCC_C1_RX_IRQHandler>:

void IPCC_C1_RX_IRQHandler(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  HW_IPCC_Rx_Handler();
 8002394:	f000 ffc4 	bl	8003320 <HW_IPCC_Rx_Handler>
  return;
 8002398:	bf00      	nop
}
 800239a:	bd80      	pop	{r7, pc}

0800239c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	617b      	str	r3, [r7, #20]
 80023ac:	e00a      	b.n	80023c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ae:	f3af 8000 	nop.w
 80023b2:	4601      	mov	r1, r0
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	60ba      	str	r2, [r7, #8]
 80023ba:	b2ca      	uxtb	r2, r1
 80023bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dbf0      	blt.n	80023ae <_read+0x12>
	}

return len;
 80023cc:	687b      	ldr	r3, [r7, #4]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
	return -1;
 80023de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023ee:	b480      	push	{r7}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002400:	2300      	movs	r3, #0
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_isatty>:

int _isatty(int file)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
	return 1;
 8002416:	2301      	movs	r3, #1
}
 8002418:	4618      	mov	r0, r3
 800241a:	370c      	adds	r7, #12
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	607a      	str	r2, [r7, #4]
	return 0;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
	...

08002440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002448:	4a14      	ldr	r2, [pc, #80]	; (800249c <_sbrk+0x5c>)
 800244a:	4b15      	ldr	r3, [pc, #84]	; (80024a0 <_sbrk+0x60>)
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002454:	4b13      	ldr	r3, [pc, #76]	; (80024a4 <_sbrk+0x64>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d102      	bne.n	8002462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_sbrk+0x64>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <_sbrk+0x68>)
 8002460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <_sbrk+0x64>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4413      	add	r3, r2
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	429a      	cmp	r2, r3
 800246e:	d207      	bcs.n	8002480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002470:	f008 f862 	bl	800a538 <__errno>
 8002474:	4602      	mov	r2, r0
 8002476:	230c      	movs	r3, #12
 8002478:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800247a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800247e:	e009      	b.n	8002494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002480:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <_sbrk+0x64>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <_sbrk+0x64>)
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4413      	add	r3, r2
 800248e:	4a05      	ldr	r2, [pc, #20]	; (80024a4 <_sbrk+0x64>)
 8002490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002492:	68fb      	ldr	r3, [r7, #12]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20030000 	.word	0x20030000
 80024a0:	00001000 	.word	0x00001000
 80024a4:	2000023c 	.word	0x2000023c
 80024a8:	200015a8 	.word	0x200015a8

080024ac <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <LL_FLASH_GetUDN+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	1fff7580 	.word	0x1fff7580

080024c4 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80024c8:	4b03      	ldr	r3, [pc, #12]	; (80024d8 <LL_FLASH_GetDeviceID+0x14>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	b2db      	uxtb	r3, r3
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	1fff7584 	.word	0x1fff7584

080024dc <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <LL_FLASH_GetSTCompanyID+0x14>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	0a1b      	lsrs	r3, r3, #8
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr
 80024f0:	1fff7584 	.word	0x1fff7584

080024f4 <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 80024f4:	b5b0      	push	{r4, r5, r7, lr}
 80024f6:	b08c      	sub	sp, #48	; 0x30
 80024f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80024fa:	4b2f      	ldr	r3, [pc, #188]	; (80025b8 <APP_BLE_Init+0xc4>)
 80024fc:	463c      	mov	r4, r7
 80024fe:	461d      	mov	r5, r3
 8002500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002508:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800250c:	c407      	stmia	r4!, {r0, r1, r2}
 800250e:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8002510:	f000 fa2e 	bl	8002970 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8002514:	2101      	movs	r1, #1
 8002516:	2002      	movs	r0, #2
 8002518:	f007 fdd2 	bl	800a0c0 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 800251c:	4a27      	ldr	r2, [pc, #156]	; (80025bc <APP_BLE_Init+0xc8>)
 800251e:	2100      	movs	r1, #0
 8002520:	2008      	movs	r0, #8
 8002522:	f007 fedb 	bl	800a2dc <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  if (SHCI_C2_BLE_Init( &ble_init_cmd_packet ) != SHCI_Success)
 8002526:	463b      	mov	r3, r7
 8002528:	4618      	mov	r0, r3
 800252a:	f006 fc49 	bl	8008dc0 <SHCI_C2_BLE_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <APP_BLE_Init+0x44>
  {
    Error_Handler();
 8002534:	f7ff fce5 	bl	8001f02 <Error_Handler>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8002538:	f000 fa30 	bl	800299c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800253c:	f007 fac2 	bl	8009ac4 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <APP_BLE_Init+0xcc>)
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8002548:	4b1d      	ldr	r3, [pc, #116]	; (80025c0 <APP_BLE_Init+0xcc>)
 800254a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800254e:	82da      	strh	r2, [r3, #22]
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 8002550:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <APP_BLE_Init+0xd0>)
 8002552:	2100      	movs	r1, #0
 8002554:	2001      	movs	r0, #1
 8002556:	f007 fec1 	bl	800a2dc <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  UTIL_SEQ_RegTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 800255a:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <APP_BLE_Init+0xd4>)
 800255c:	2100      	movs	r1, #0
 800255e:	2004      	movs	r0, #4
 8002560:	f007 febc 	bl	800a2dc <UTIL_SEQ_RegTask>
   */
#if(BLE_CFG_OTA_REBOOT_CHAR != 0)
  manuf_data[sizeof(manuf_data)-8] = CFG_FEATURE_OTA_REBOOT;
#endif
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 8002564:	2006      	movs	r0, #6
 8002566:	f005 feb2 	bl	80082ce <aci_hal_set_radio_activity_mask>
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
  index_con_int = 0;
 800256a:	4b18      	ldr	r3, [pc, #96]	; (80025cc <APP_BLE_Init+0xd8>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 8002570:	4b17      	ldr	r3, [pc, #92]	; (80025d0 <APP_BLE_Init+0xdc>)
 8002572:	2201      	movs	r2, #1
 8002574:	701a      	strb	r2, [r3, #0]
#endif
  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8002576:	f000 fd6d 	bl	8003054 <P2PS_APP_Init>

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 800257a:	4b16      	ldr	r3, [pc, #88]	; (80025d4 <APP_BLE_Init+0xe0>)
 800257c:	2200      	movs	r2, #0
 800257e:	4916      	ldr	r1, [pc, #88]	; (80025d8 <APP_BLE_Init+0xe4>)
 8002580:	2000      	movs	r0, #0
 8002582:	f7fe ff25 	bl	80013d0 <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8002586:	4b15      	ldr	r3, [pc, #84]	; (80025dc <APP_BLE_Init+0xe8>)
 8002588:	2200      	movs	r2, #0
 800258a:	4915      	ldr	r1, [pc, #84]	; (80025e0 <APP_BLE_Init+0xec>)
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe ff1f 	bl	80013d0 <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 8002592:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <APP_BLE_Init+0xcc>)
 8002594:	2200      	movs	r2, #0
 8002596:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8002598:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <APP_BLE_Init+0xcc>)
 800259a:	2200      	movs	r2, #0
 800259c:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800259e:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <APP_BLE_Init+0xf0>)
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <APP_BLE_Init+0xf4>)
 80025a6:	22a0      	movs	r2, #160	; 0xa0
 80025a8:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80025aa:	2001      	movs	r0, #1
 80025ac:	f000 fab8 	bl	8002b20 <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80025b0:	bf00      	nop
}
 80025b2:	3730      	adds	r7, #48	; 0x30
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bdb0      	pop	{r4, r5, r7, pc}
 80025b8:	0800b478 	.word	0x0800b478
 80025bc:	080087e9 	.word	0x080087e9
 80025c0:	20000148 	.word	0x20000148
 80025c4:	08002cf5 	.word	0x08002cf5
 80025c8:	08002e3d 	.word	0x08002e3d
 80025cc:	20001599 	.word	0x20001599
 80025d0:	20001598 	.word	0x20001598
 80025d4:	08002d55 	.word	0x08002d55
 80025d8:	200001c9 	.word	0x200001c9
 80025dc:	08002d65 	.word	0x08002d65
 80025e0:	200001ca 	.word	0x200001ca
 80025e4:	200001cc 	.word	0x200001cc
 80025e8:	200001ce 	.word	0x200001ce

080025ec <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;
  hci_le_phy_update_complete_event_rp0 *evt_le_phy_update_complete;
  uint8_t TX_PHY, RX_PHY;
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 80025f4:	2342      	movs	r3, #66	; 0x42
 80025f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3301      	adds	r3, #1
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b3e      	cmp	r3, #62	; 0x3e
 8002606:	d028      	beq.n	800265a <SVCCTL_App_Notification+0x6e>
 8002608:	2bff      	cmp	r3, #255	; 0xff
 800260a:	f000 80af 	beq.w	800276c <SVCCTL_App_Notification+0x180>
 800260e:	2b05      	cmp	r3, #5
 8002610:	d000      	beq.n	8002614 <SVCCTL_App_Notification+0x28>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8002612:	e15a      	b.n	80028ca <SVCCTL_App_Notification+0x2de>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	3302      	adds	r3, #2
 8002618:	613b      	str	r3, [r7, #16]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8002620:	b29a      	uxth	r2, r3
 8002622:	4bac      	ldr	r3, [pc, #688]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 8002624:	8adb      	ldrh	r3, [r3, #22]
 8002626:	429a      	cmp	r2, r3
 8002628:	d109      	bne.n	800263e <SVCCTL_App_Notification+0x52>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800262a:	4baa      	ldr	r3, [pc, #680]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800262c:	2200      	movs	r2, #0
 800262e:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002630:	4ba8      	ldr	r3, [pc, #672]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG("\r\n\r** DISCONNECTION EVENT WITH CLIENT \n");
 8002638:	48a7      	ldr	r0, [pc, #668]	; (80028d8 <SVCCTL_App_Notification+0x2ec>)
 800263a:	f008 f82f 	bl	800a69c <puts>
      Adv_Request(APP_BLE_FAST_ADV);
 800263e:	2001      	movs	r0, #1
 8002640:	f000 fa6e 	bl	8002b20 <Adv_Request>
      handleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 8002644:	4ba5      	ldr	r3, [pc, #660]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800264a:	4ba2      	ldr	r3, [pc, #648]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800264c:	8ada      	ldrh	r2, [r3, #22]
 800264e:	4ba3      	ldr	r3, [pc, #652]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002650:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&handleNotification);
 8002652:	48a2      	ldr	r0, [pc, #648]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002654:	f000 fcea 	bl	800302c <P2PS_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8002658:	e137      	b.n	80028ca <SVCCTL_App_Notification+0x2de>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 800265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800265c:	3302      	adds	r3, #2
 800265e:	61fb      	str	r3, [r7, #28]
      switch (meta_evt->subevent)
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d004      	beq.n	8002672 <SVCCTL_App_Notification+0x86>
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d006      	beq.n	800267a <SVCCTL_App_Notification+0x8e>
 800266c:	2b01      	cmp	r3, #1
 800266e:	d042      	beq.n	80026f6 <SVCCTL_App_Notification+0x10a>
          break;
 8002670:	e07b      	b.n	800276a <SVCCTL_App_Notification+0x17e>
          APP_DBG_MSG("\r\n\r** CONNECTION UPDATE EVENT WITH CLIENT \n");
 8002672:	489b      	ldr	r0, [pc, #620]	; (80028e0 <SVCCTL_App_Notification+0x2f4>)
 8002674:	f008 f812 	bl	800a69c <puts>
          break;
 8002678:	e077      	b.n	800276a <SVCCTL_App_Notification+0x17e>
          APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE \n");
 800267a:	489a      	ldr	r0, [pc, #616]	; (80028e4 <SVCCTL_App_Notification+0x2f8>)
 800267c:	f008 f80e 	bl	800a69c <puts>
          evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)meta_evt->data;
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	3301      	adds	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
          if (evt_le_phy_update_complete->Status == 0)
 8002686:	69bb      	ldr	r3, [r7, #24]
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <SVCCTL_App_Notification+0xaa>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status ok \n");
 800268e:	4896      	ldr	r0, [pc, #600]	; (80028e8 <SVCCTL_App_Notification+0x2fc>)
 8002690:	f008 f804 	bl	800a69c <puts>
 8002694:	e002      	b.n	800269c <SVCCTL_App_Notification+0xb0>
            APP_DBG_MSG("EVT_UPDATE_PHY_COMPLETE, status nok \n");
 8002696:	4895      	ldr	r0, [pc, #596]	; (80028ec <SVCCTL_App_Notification+0x300>)
 8002698:	f008 f800 	bl	800a69c <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,&TX_PHY,&RX_PHY);
 800269c:	4b8d      	ldr	r3, [pc, #564]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800269e:	8adb      	ldrh	r3, [r3, #22]
 80026a0:	f107 020e 	add.w	r2, r7, #14
 80026a4:	f107 010f 	add.w	r1, r7, #15
 80026a8:	4618      	mov	r0, r3
 80026aa:	f005 fe7e 	bl	80083aa <hci_le_read_phy>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret == BLE_STATUS_SUCCESS)
 80026b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d118      	bne.n	80026ee <SVCCTL_App_Notification+0x102>
            APP_DBG_MSG("Read_PHY success \n");
 80026bc:	488c      	ldr	r0, [pc, #560]	; (80028f0 <SVCCTL_App_Notification+0x304>)
 80026be:	f007 ffed 	bl	800a69c <puts>
            if ((TX_PHY == TX_2M) && (RX_PHY == RX_2M))
 80026c2:	7bfb      	ldrb	r3, [r7, #15]
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d10a      	bne.n	80026de <SVCCTL_App_Notification+0xf2>
 80026c8:	7bbb      	ldrb	r3, [r7, #14]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d107      	bne.n	80026de <SVCCTL_App_Notification+0xf2>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 80026ce:	7bfb      	ldrb	r3, [r7, #15]
 80026d0:	4619      	mov	r1, r3
 80026d2:	7bbb      	ldrb	r3, [r7, #14]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4887      	ldr	r0, [pc, #540]	; (80028f4 <SVCCTL_App_Notification+0x308>)
 80026d8:	f007 ff6c 	bl	800a5b4 <iprintf>
          break;
 80026dc:	e045      	b.n	800276a <SVCCTL_App_Notification+0x17e>
              APP_DBG_MSG("PHY Param  TX= %d, RX= %d \n", TX_PHY, RX_PHY);
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	4619      	mov	r1, r3
 80026e2:	7bbb      	ldrb	r3, [r7, #14]
 80026e4:	461a      	mov	r2, r3
 80026e6:	4883      	ldr	r0, [pc, #524]	; (80028f4 <SVCCTL_App_Notification+0x308>)
 80026e8:	f007 ff64 	bl	800a5b4 <iprintf>
          break;
 80026ec:	e03d      	b.n	800276a <SVCCTL_App_Notification+0x17e>
            APP_DBG_MSG("Read conf not succeess \n");
 80026ee:	4882      	ldr	r0, [pc, #520]	; (80028f8 <SVCCTL_App_Notification+0x30c>)
 80026f0:	f007 ffd4 	bl	800a69c <puts>
          break;
 80026f4:	e039      	b.n	800276a <SVCCTL_App_Notification+0x17e>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	3301      	adds	r3, #1
 80026fa:	617b      	str	r3, [r7, #20]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 80026fc:	4b75      	ldr	r3, [pc, #468]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 80026fe:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe feda 	bl	80014bc <HW_TS_Stop>
          APP_DBG_MSG("EVT_LE_CONN_COMPLETE for connection handle 0x%x\n", connection_complete_event->Connection_Handle);
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800270e:	b29b      	uxth	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	487a      	ldr	r0, [pc, #488]	; (80028fc <SVCCTL_App_Notification+0x310>)
 8002714:	f007 ff4e 	bl	800a5b4 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8002718:	4b6e      	ldr	r3, [pc, #440]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800271a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800271e:	2b04      	cmp	r3, #4
 8002720:	d104      	bne.n	800272c <SVCCTL_App_Notification+0x140>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8002722:	4b6c      	ldr	r3, [pc, #432]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 8002724:	2206      	movs	r2, #6
 8002726:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 800272a:	e003      	b.n	8002734 <SVCCTL_App_Notification+0x148>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 800272c:	4b69      	ldr	r3, [pc, #420]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800272e:	2205      	movs	r2, #5
 8002730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800273a:	b29a      	uxth	r2, r3
 800273c:	4b65      	ldr	r3, [pc, #404]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800273e:	82da      	strh	r2, [r3, #22]
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002740:	4b66      	ldr	r3, [pc, #408]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002742:	2200      	movs	r2, #0
 8002744:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8002746:	4b63      	ldr	r3, [pc, #396]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 8002748:	8ada      	ldrh	r2, [r3, #22]
 800274a:	4b64      	ldr	r3, [pc, #400]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 800274c:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 800274e:	4863      	ldr	r0, [pc, #396]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002750:	f000 fc6c 	bl	800302c <P2PS_APP_Notification>
          handleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8002754:	4b61      	ldr	r3, [pc, #388]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800275a:	4b5e      	ldr	r3, [pc, #376]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800275c:	8ada      	ldrh	r2, [r3, #22]
 800275e:	4b5f      	ldr	r3, [pc, #380]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002760:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&handleNotification);
 8002762:	485e      	ldr	r0, [pc, #376]	; (80028dc <SVCCTL_App_Notification+0x2f0>)
 8002764:	f000 fc62 	bl	800302c <P2PS_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 8002768:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800276a:	e0ae      	b.n	80028ca <SVCCTL_App_Notification+0x2de>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	3302      	adds	r3, #2
 8002770:	627b      	str	r3, [r7, #36]	; 0x24
      switch (blue_evt->ecode)
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	881b      	ldrh	r3, [r3, #0]
 8002776:	b29b      	uxth	r3, r3
 8002778:	f240 4205 	movw	r2, #1029	; 0x405
 800277c:	4293      	cmp	r3, r2
 800277e:	d049      	beq.n	8002814 <SVCCTL_App_Notification+0x228>
 8002780:	f240 4205 	movw	r2, #1029	; 0x405
 8002784:	4293      	cmp	r3, r2
 8002786:	dc17      	bgt.n	80027b8 <SVCCTL_App_Notification+0x1cc>
 8002788:	f240 4201 	movw	r2, #1025	; 0x401
 800278c:	4293      	cmp	r3, r2
 800278e:	d073      	beq.n	8002878 <SVCCTL_App_Notification+0x28c>
 8002790:	f240 4201 	movw	r2, #1025	; 0x401
 8002794:	4293      	cmp	r3, r2
 8002796:	dc06      	bgt.n	80027a6 <SVCCTL_App_Notification+0x1ba>
 8002798:	2b04      	cmp	r3, #4
 800279a:	f000 808a 	beq.w	80028b2 <SVCCTL_App_Notification+0x2c6>
 800279e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a2:	d024      	beq.n	80027ee <SVCCTL_App_Notification+0x202>
      break; /* EVT_VENDOR */
 80027a4:	e090      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
      switch (blue_evt->ecode)
 80027a6:	f240 4203 	movw	r2, #1027	; 0x403
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d02a      	beq.n	8002804 <SVCCTL_App_Notification+0x218>
 80027ae:	f240 4203 	movw	r2, #1027	; 0x403
 80027b2:	4293      	cmp	r3, r2
 80027b4:	dc2a      	bgt.n	800280c <SVCCTL_App_Notification+0x220>
 80027b6:	e01e      	b.n	80027f6 <SVCCTL_App_Notification+0x20a>
 80027b8:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 80027bc:	d03a      	beq.n	8002834 <SVCCTL_App_Notification+0x248>
 80027be:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 80027c2:	dc08      	bgt.n	80027d6 <SVCCTL_App_Notification+0x1ea>
 80027c4:	f240 4206 	movw	r2, #1030	; 0x406
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d02f      	beq.n	800282c <SVCCTL_App_Notification+0x240>
 80027cc:	f240 4207 	movw	r2, #1031	; 0x407
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d06a      	beq.n	80028aa <SVCCTL_App_Notification+0x2be>
      break; /* EVT_VENDOR */
 80027d4:	e078      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
      switch (blue_evt->ecode)
 80027d6:	f240 420a 	movw	r2, #1034	; 0x40a
 80027da:	4293      	cmp	r3, r2
 80027dc:	d02e      	beq.n	800283c <SVCCTL_App_Notification+0x250>
 80027de:	f240 420a 	movw	r2, #1034	; 0x40a
 80027e2:	4293      	cmp	r3, r2
 80027e4:	db2e      	blt.n	8002844 <SVCCTL_App_Notification+0x258>
 80027e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ea:	d05a      	beq.n	80028a2 <SVCCTL_App_Notification+0x2b6>
      break; /* EVT_VENDOR */
 80027ec:	e06c      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_LIMITED_DISCOVERABLE \n");
 80027ee:	4844      	ldr	r0, [pc, #272]	; (8002900 <SVCCTL_App_Notification+0x314>)
 80027f0:	f007 ff54 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_LIMITED_DISCOVERABLE */
 80027f4:	e068      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PASS_KEY_REQUEST \n");
 80027f6:	4843      	ldr	r0, [pc, #268]	; (8002904 <SVCCTL_App_Notification+0x318>)
 80027f8:	f007 ff50 	bl	800a69c <puts>
        APP_DBG_MSG("\r\n\r** aci_gap_pass_key_resp \n");
 80027fc:	4842      	ldr	r0, [pc, #264]	; (8002908 <SVCCTL_App_Notification+0x31c>)
 80027fe:	f007 ff4d 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_PASS_KEY_REQUEST */
 8002802:	e061      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_AUTHORIZATION_REQUEST \n");
 8002804:	4841      	ldr	r0, [pc, #260]	; (800290c <SVCCTL_App_Notification+0x320>)
 8002806:	f007 ff49 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_AUTHORIZATION_REQUEST */
 800280a:	e05d      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED \n");
 800280c:	4840      	ldr	r0, [pc, #256]	; (8002910 <SVCCTL_App_Notification+0x324>)
 800280e:	f007 ff45 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_SLAVE_SECURITY_INITIATED */
 8002812:	e059      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_BOND_LOST \n");
 8002814:	483f      	ldr	r0, [pc, #252]	; (8002914 <SVCCTL_App_Notification+0x328>)
 8002816:	f007 ff41 	bl	800a69c <puts>
          aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 800281a:	4b2e      	ldr	r3, [pc, #184]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 800281c:	8adb      	ldrh	r3, [r3, #22]
 800281e:	4618      	mov	r0, r3
 8002820:	f005 f9af 	bl	8007b82 <aci_gap_allow_rebond>
        APP_DBG_MSG("\r\n\r** Send allow rebond \n");
 8002824:	483c      	ldr	r0, [pc, #240]	; (8002918 <SVCCTL_App_Notification+0x32c>)
 8002826:	f007 ff39 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_BOND_LOST */
 800282a:	e04d      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 800282c:	483b      	ldr	r0, [pc, #236]	; (800291c <SVCCTL_App_Notification+0x330>)
 800282e:	f007 ff35 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 8002832:	e049      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_DEVICE_FOUND \n");
 8002834:	4839      	ldr	r0, [pc, #228]	; (800291c <SVCCTL_App_Notification+0x330>)
 8002836:	f007 ff31 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_DEVICE_FOUND */
 800283a:	e045      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
         APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_KEYPRESS_NOTIFICATION \n");
 800283c:	4838      	ldr	r0, [pc, #224]	; (8002920 <SVCCTL_App_Notification+0x334>)
 800283e:	f007 ff2d 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_KEY_PRESS_NOTIFICATION */    
 8002842:	e041      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8002844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002846:	3302      	adds	r3, #2
          APP_DBG_MSG("numeric_value = %ld\n",
 8002848:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800284c:	4619      	mov	r1, r3
 800284e:	4835      	ldr	r0, [pc, #212]	; (8002924 <SVCCTL_App_Notification+0x338>)
 8002850:	f007 feb0 	bl	800a5b4 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(blue_evt->data))->Numeric_Value);
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	3302      	adds	r3, #2
          APP_DBG_MSG("Hex_value = %lx\n",
 8002858:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800285c:	4619      	mov	r1, r3
 800285e:	4832      	ldr	r0, [pc, #200]	; (8002928 <SVCCTL_App_Notification+0x33c>)
 8002860:	f007 fea8 	bl	800a5b4 <iprintf>
          aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, 1); /* CONFIRM_YES = 1 */
 8002864:	4b1b      	ldr	r3, [pc, #108]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 8002866:	8adb      	ldrh	r3, [r3, #22]
 8002868:	2101      	movs	r1, #1
 800286a:	4618      	mov	r0, r3
 800286c:	f005 f9d3 	bl	8007c16 <aci_gap_numeric_comparison_value_confirm_yesno>
          APP_DBG_MSG("\r\n\r** aci_gap_numeric_comparison_value_confirm_yesno-->YES \n");
 8002870:	482e      	ldr	r0, [pc, #184]	; (800292c <SVCCTL_App_Notification+0x340>)
 8002872:	f007 ff13 	bl	800a69c <puts>
      break;
 8002876:	e027      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	3302      	adds	r3, #2
 800287c:	623b      	str	r3, [r7, #32]
            APP_DBG_MSG("BLE_CTRL_App_Notification: EVT_BLUE_GAP_PAIRING_CMPLT, pairing_complete->Status = %d\n",pairing_complete->Status);
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	4619      	mov	r1, r3
 8002884:	482a      	ldr	r0, [pc, #168]	; (8002930 <SVCCTL_App_Notification+0x344>)
 8002886:	f007 fe95 	bl	800a5b4 <iprintf>
            if (pairing_complete->Status == 0)
 800288a:	6a3b      	ldr	r3, [r7, #32]
 800288c:	789b      	ldrb	r3, [r3, #2]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <SVCCTL_App_Notification+0x2ae>
              APP_DBG_MSG("\r\n\r** Pairing OK \n");
 8002892:	4828      	ldr	r0, [pc, #160]	; (8002934 <SVCCTL_App_Notification+0x348>)
 8002894:	f007 ff02 	bl	800a69c <puts>
           break;    
 8002898:	e016      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
              APP_DBG_MSG("\r\n\r** Pairing KO \n");
 800289a:	4827      	ldr	r0, [pc, #156]	; (8002938 <SVCCTL_App_Notification+0x34c>)
 800289c:	f007 fefe 	bl	800a69c <puts>
           break;    
 80028a0:	e012      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
          mutex = 1;
 80028a2:	4b26      	ldr	r3, [pc, #152]	; (800293c <SVCCTL_App_Notification+0x350>)
 80028a4:	2201      	movs	r2, #1
 80028a6:	701a      	strb	r2, [r3, #0]
      break;
 80028a8:	e00e      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
        APP_DBG_MSG("\r\n\r** EVT_BLUE_GAP_PROCEDURE_COMPLETE \n");
 80028aa:	4825      	ldr	r0, [pc, #148]	; (8002940 <SVCCTL_App_Notification+0x354>)
 80028ac:	f007 fef6 	bl	800a69c <puts>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 80028b0:	e00a      	b.n	80028c8 <SVCCTL_App_Notification+0x2dc>
          BSP_LED_On(LED_GREEN);
 80028b2:	2001      	movs	r0, #1
 80028b4:	f000 ff12 	bl	80036dc <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 80028b8:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <SVCCTL_App_Notification+0x2e8>)
 80028ba:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 80028be:	210a      	movs	r1, #10
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fe fe85 	bl	80015d0 <HW_TS_Start>
          break; /* RADIO_ACTIVITY_EVENT */
 80028c6:	bf00      	nop
      break; /* EVT_VENDOR */
 80028c8:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3730      	adds	r7, #48	; 0x30
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000148 	.word	0x20000148
 80028d8:	0800b4a8 	.word	0x0800b4a8
 80028dc:	20001594 	.word	0x20001594
 80028e0:	0800b4d0 	.word	0x0800b4d0
 80028e4:	0800b4fc 	.word	0x0800b4fc
 80028e8:	0800b518 	.word	0x0800b518
 80028ec:	0800b53c 	.word	0x0800b53c
 80028f0:	0800b564 	.word	0x0800b564
 80028f4:	0800b578 	.word	0x0800b578
 80028f8:	0800b594 	.word	0x0800b594
 80028fc:	0800b5ac 	.word	0x0800b5ac
 8002900:	0800b5e0 	.word	0x0800b5e0
 8002904:	0800b60c 	.word	0x0800b60c
 8002908:	0800b634 	.word	0x0800b634
 800290c:	0800b654 	.word	0x0800b654
 8002910:	0800b680 	.word	0x0800b680
 8002914:	0800b6b0 	.word	0x0800b6b0
 8002918:	0800b6d0 	.word	0x0800b6d0
 800291c:	0800b6ec 	.word	0x0800b6ec
 8002920:	0800b710 	.word	0x0800b710
 8002924:	0800b73c 	.word	0x0800b73c
 8002928:	0800b754 	.word	0x0800b754
 800292c:	0800b768 	.word	0x0800b768
 8002930:	0800b7a4 	.word	0x0800b7a4
 8002934:	0800b7fc 	.word	0x0800b7fc
 8002938:	0800b810 	.word	0x0800b810
 800293c:	20001598 	.word	0x20001598
 8002940:	0800b824 	.word	0x0800b824

08002944 <APP_BLE_Key_Button1_Action>:
    return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8002948:	f000 fbac 	bl	80030a4 <P2PS_APP_SW1_Button_Action>
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}

08002950 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8002954:	2100      	movs	r1, #0
 8002956:	2004      	movs	r0, #4
 8002958:	f007 fce0 	bl	800a31c <UTIL_SEQ_SetTask>
#endif
  
  return;
 800295c:	bf00      	nop
}
 800295e:	bd80      	pop	{r7, pc}

08002960 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
	...

08002970 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8002976:	4b06      	ldr	r3, [pc, #24]	; (8002990 <Ble_Tl_Init+0x20>)
 8002978:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <Ble_Tl_Init+0x24>)
 800297c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800297e:	463b      	mov	r3, r7
 8002980:	4619      	mov	r1, r3
 8002982:	4805      	ldr	r0, [pc, #20]	; (8002998 <Ble_Tl_Init+0x28>)
 8002984:	f005 ff14 	bl	80087b0 <hci_init>

  return;
 8002988:	bf00      	nop
}
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20030028 	.word	0x20030028
 8002994:	08002ee5 	.word	0x08002ee5
 8002998:	08002ead 	.word	0x08002ead

0800299c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800299c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800299e:	b08f      	sub	sp, #60	; 0x3c
 80029a0:	af06      	add	r7, sp, #24

  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 80029a2:	2300      	movs	r3, #0
 80029a4:	803b      	strh	r3, [r7, #0]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 80029a6:	f005 fcdc 	bl	8008362 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 80029aa:	f000 f95f 	bl	8002c6c <BleGetBdAddress>
 80029ae:	61f8      	str	r0, [r7, #28]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	2106      	movs	r1, #6
 80029b4:	2000      	movs	r0, #0
 80029b6:	f005 fbca 	bl	800814e <aci_hal_write_config_data>
                            CONFIG_DATA_PUBADDR_LEN,
                            (uint8_t*) bd_addr);

  /* BLE MAC in ADV Packet */
  manuf_data[ sizeof(manuf_data)-6] = bd_addr[5];
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	795a      	ldrb	r2, [r3, #5]
 80029be:	4b52      	ldr	r3, [pc, #328]	; (8002b08 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80029c0:	721a      	strb	r2, [r3, #8]
  manuf_data[ sizeof(manuf_data)-5] = bd_addr[4];
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	791a      	ldrb	r2, [r3, #4]
 80029c6:	4b50      	ldr	r3, [pc, #320]	; (8002b08 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80029c8:	725a      	strb	r2, [r3, #9]
  manuf_data[ sizeof(manuf_data)-4] = bd_addr[3];
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	78da      	ldrb	r2, [r3, #3]
 80029ce:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80029d0:	729a      	strb	r2, [r3, #10]
  manuf_data[ sizeof(manuf_data)-3] = bd_addr[2];
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	789a      	ldrb	r2, [r3, #2]
 80029d6:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80029d8:	72da      	strb	r2, [r3, #11]
  manuf_data[ sizeof(manuf_data)-2] = bd_addr[1];
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	785a      	ldrb	r2, [r3, #1]
 80029de:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80029e0:	731a      	strb	r2, [r3, #12]
  manuf_data[ sizeof(manuf_data)-1] = bd_addr[0];
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	781a      	ldrb	r2, [r3, #0]
 80029e6:	4b48      	ldr	r3, [pc, #288]	; (8002b08 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80029e8:	735a      	strb	r2, [r3, #13]
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80029ea:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80029ee:	60bb      	str	r3, [r7, #8]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80029f0:	f7ff fd5c 	bl	80024ac <LL_FLASH_GetUDN>
 80029f4:	4603      	mov	r3, r0
 80029f6:	607b      	str	r3, [r7, #4]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80029f8:	1d3b      	adds	r3, r7, #4
 80029fa:	461a      	mov	r2, r3
 80029fc:	2106      	movs	r1, #6
 80029fe:	202e      	movs	r0, #46	; 0x2e
 8002a00:	f005 fba5 	bl	800814e <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 8002a04:	4a41      	ldr	r2, [pc, #260]	; (8002b0c <Ble_Hci_Gap_Gatt_Init+0x170>)
 8002a06:	2110      	movs	r1, #16
 8002a08:	2018      	movs	r0, #24
 8002a0a:	f005 fba0 	bl	800814e <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 8002a0e:	4a40      	ldr	r2, [pc, #256]	; (8002b10 <Ble_Hci_Gap_Gatt_Init+0x174>)
 8002a10:	2110      	movs	r1, #16
 8002a12:	2008      	movs	r0, #8
 8002a14:	f005 fb9b 	bl	800814e <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8002a18:	2118      	movs	r1, #24
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f005 fc00 	bl	8008220 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 8002a20:	f005 f950 	bl	8007cc4 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8002a28:	7efb      	ldrb	r3, [r7, #27]
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	76fb      	strb	r3, [r7, #27]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 8002a30:	7efb      	ldrb	r3, [r7, #27]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d01e      	beq.n	8002a74 <Ble_Hci_Gap_Gatt_Init+0xd8>
  {
    const char *name = "DRAMSAY";
 8002a36:	4b37      	ldr	r3, [pc, #220]	; (8002b14 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8002a38:	617b      	str	r3, [r7, #20]
    aci_gap_init(role, 0,
 8002a3a:	f107 0212 	add.w	r2, r7, #18
 8002a3e:	7ef8      	ldrb	r0, [r7, #27]
 8002a40:	f107 030e 	add.w	r3, r7, #14
 8002a44:	9301      	str	r3, [sp, #4]
 8002a46:	f107 0310 	add.w	r3, r7, #16
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	2207      	movs	r2, #7
 8002a50:	2100      	movs	r1, #0
 8002a52:	f004 ff8b 	bl	800796c <aci_gap_init>
                 APPBLE_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8002a56:	8a7c      	ldrh	r4, [r7, #18]
 8002a58:	8a3d      	ldrh	r5, [r7, #16]
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f7fd fb90 	bl	8000180 <strlen>
 8002a60:	4603      	mov	r3, r0
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	4620      	mov	r0, r4
 8002a70:	f005 fae6 	bl	8008040 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8002a74:	8a78      	ldrh	r0, [r7, #18]
 8002a76:	89f9      	ldrh	r1, [r7, #14]
 8002a78:	463b      	mov	r3, r7
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f005 fade 	bl	8008040 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8002a84:	2202      	movs	r2, #2
 8002a86:	2102      	movs	r1, #2
 8002a88:	2000      	movs	r0, #0
 8002a8a:	f005 fcf6 	bl	800847a <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8002a8e:	4b22      	ldr	r3, [pc, #136]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8002a94:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f004 fe75 	bl	8007788 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8002a9e:	4b1e      	ldr	r3, [pc, #120]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8002aa4:	4b1c      	ldr	r3, [pc, #112]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8002aaa:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002aac:	2210      	movs	r2, #16
 8002aae:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8002ab0:	4b19      	ldr	r3, [pc, #100]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ab8:	4a18      	ldr	r2, [pc, #96]	; (8002b1c <Ble_Hci_Gap_Gatt_Init+0x180>)
 8002aba:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8002abc:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	709a      	strb	r2, [r3, #2]

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8002ac2:	4b15      	ldr	r3, [pc, #84]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ac4:	789d      	ldrb	r5, [r3, #2]
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ac8:	785e      	ldrb	r6, [r3, #1]
 8002aca:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002acc:	791b      	ldrb	r3, [r3, #4]
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ad0:	7952      	ldrb	r2, [r2, #5]
 8002ad2:	4911      	ldr	r1, [pc, #68]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ad4:	78c9      	ldrb	r1, [r1, #3]
 8002ad6:	4810      	ldr	r0, [pc, #64]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002ad8:	6880      	ldr	r0, [r0, #8]
 8002ada:	2400      	movs	r4, #0
 8002adc:	9404      	str	r4, [sp, #16]
 8002ade:	9003      	str	r0, [sp, #12]
 8002ae0:	9102      	str	r1, [sp, #8]
 8002ae2:	9201      	str	r2, [sp, #4]
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	2201      	movs	r2, #1
 8002aea:	4631      	mov	r1, r6
 8002aec:	4628      	mov	r0, r5
 8002aee:	f004 fe95 	bl	800781c <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8002af4:	789b      	ldrb	r3, [r3, #2]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8002afa:	f005 f81e 	bl	8007b3a <aci_gap_configure_whitelist>
   }
}
 8002afe:	bf00      	nop
 8002b00:	3724      	adds	r7, #36	; 0x24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	2000000c 	.word	0x2000000c
 8002b0c:	0800bd28 	.word	0x0800bd28
 8002b10:	0800bd38 	.word	0x0800bd38
 8002b14:	0800b84c 	.word	0x0800b84c
 8002b18:	20000148 	.word	0x20000148
 8002b1c:	0001b207 	.word	0x0001b207

08002b20 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08c      	sub	sp, #48	; 0x30
 8002b24:	af08      	add	r7, sp, #32
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8002b2a:	2342      	movs	r3, #66	; 0x42
 8002b2c:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (New_Status == APP_BLE_FAST_ADV)
 8002b2e:	79fb      	ldrb	r3, [r7, #7]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d106      	bne.n	8002b42 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8002b34:	4b3f      	ldr	r3, [pc, #252]	; (8002c34 <Adv_Request+0x114>)
 8002b36:	881b      	ldrh	r3, [r3, #0]
 8002b38:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 8002b3a:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <Adv_Request+0x118>)
 8002b3c:	881b      	ldrh	r3, [r3, #0]
 8002b3e:	81bb      	strh	r3, [r7, #12]
 8002b40:	e005      	b.n	8002b4e <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8002b42:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8002b46:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 8002b48:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002b4c:	81bb      	strh	r3, [r7, #12]

    /**
     * Stop the timer, it will be restarted for a new shot
     * It does not hurt if the timer was not running
     */
    HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	; (8002c3c <Adv_Request+0x11c>)
 8002b50:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe fcb1 	bl	80014bc <HW_TS_Stop>

    APP_DBG_MSG("First index in %d state \n", BleApplicationContext.Device_Connection_Status);
 8002b5a:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <Adv_Request+0x11c>)
 8002b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b60:	4619      	mov	r1, r3
 8002b62:	4837      	ldr	r0, [pc, #220]	; (8002c40 <Adv_Request+0x120>)
 8002b64:	f007 fd26 	bl	800a5b4 <iprintf>

    if ((New_Status == APP_BLE_LP_ADV)
 8002b68:	79fb      	ldrb	r3, [r7, #7]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d119      	bne.n	8002ba2 <Adv_Request+0x82>
        && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 8002b6e:	4b33      	ldr	r3, [pc, #204]	; (8002c3c <Adv_Request+0x11c>)
 8002b70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d004      	beq.n	8002b82 <Adv_Request+0x62>
            || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 8002b78:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <Adv_Request+0x11c>)
 8002b7a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d10f      	bne.n	8002ba2 <Adv_Request+0x82>
    {
      /* Connection in ADVERTISE mode have to stop the current advertising */
      ret = aci_gap_set_non_discoverable();
 8002b82:	f004 fcff 	bl	8007584 <aci_gap_set_non_discoverable>
 8002b86:	4603      	mov	r3, r0
 8002b88:	72fb      	strb	r3, [r7, #11]
      if (ret == BLE_STATUS_SUCCESS)
 8002b8a:	7afb      	ldrb	r3, [r7, #11]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d103      	bne.n	8002b98 <Adv_Request+0x78>
      {
        APP_DBG_MSG("Successfully Stopped Advertising \n");
 8002b90:	482c      	ldr	r0, [pc, #176]	; (8002c44 <Adv_Request+0x124>)
 8002b92:	f007 fd83 	bl	800a69c <puts>
 8002b96:	e004      	b.n	8002ba2 <Adv_Request+0x82>
      }
      else
      {
        APP_DBG_MSG("Stop Advertising Failed , result: %d \n", ret);
 8002b98:	7afb      	ldrb	r3, [r7, #11]
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	482a      	ldr	r0, [pc, #168]	; (8002c48 <Adv_Request+0x128>)
 8002b9e:	f007 fd09 	bl	800a5b4 <iprintf>
      }
    }

    BleApplicationContext.Device_Connection_Status = New_Status;
 8002ba2:	4a26      	ldr	r2, [pc, #152]	; (8002c3c <Adv_Request+0x11c>)
 8002ba4:	79fb      	ldrb	r3, [r7, #7]
 8002ba6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8002baa:	4b24      	ldr	r3, [pc, #144]	; (8002c3c <Adv_Request+0x11c>)
 8002bac:	7e1b      	ldrb	r3, [r3, #24]
 8002bae:	89b8      	ldrh	r0, [r7, #12]
 8002bb0:	89f9      	ldrh	r1, [r7, #14]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	9206      	str	r2, [sp, #24]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	9205      	str	r2, [sp, #20]
 8002bba:	4a24      	ldr	r2, [pc, #144]	; (8002c4c <Adv_Request+0x12c>)
 8002bbc:	9204      	str	r2, [sp, #16]
 8002bbe:	9303      	str	r3, [sp, #12]
 8002bc0:	4b23      	ldr	r3, [pc, #140]	; (8002c50 <Adv_Request+0x130>)
 8002bc2:	9302      	str	r3, [sp, #8]
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	9301      	str	r3, [sp, #4]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	9300      	str	r3, [sp, #0]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	4602      	mov	r2, r0
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f004 fcfb 	bl	80075cc <aci_gap_set_discoverable>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	72fb      	strb	r3, [r7, #11]
        BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(manuf_data), (uint8_t*) manuf_data);
 8002bda:	491e      	ldr	r1, [pc, #120]	; (8002c54 <Adv_Request+0x134>)
 8002bdc:	200e      	movs	r0, #14
 8002bde:	f004 ff50 	bl	8007a82 <aci_gap_update_adv_data>
 8002be2:	4603      	mov	r3, r0
 8002be4:	72fb      	strb	r3, [r7, #11]
    if (ret == BLE_STATUS_SUCCESS)
 8002be6:	7afb      	ldrb	r3, [r7, #11]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d111      	bne.n	8002c10 <Adv_Request+0xf0>
    {
      if (New_Status == APP_BLE_FAST_ADV)
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d10a      	bne.n	8002c08 <Adv_Request+0xe8>
      {
        APP_DBG_MSG("Successfully Start Fast Advertising \n" );
 8002bf2:	4819      	ldr	r0, [pc, #100]	; (8002c58 <Adv_Request+0x138>)
 8002bf4:	f007 fd52 	bl	800a69c <puts>
        /* Start Timer to STOP ADV - TIMEOUT */
        HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8002bf8:	4b10      	ldr	r3, [pc, #64]	; (8002c3c <Adv_Request+0x11c>)
 8002bfa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8002bfe:	4917      	ldr	r1, [pc, #92]	; (8002c5c <Adv_Request+0x13c>)
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7fe fce5 	bl	80015d0 <HW_TS_Start>
      {
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
      }
    }

  return;
 8002c06:	e012      	b.n	8002c2e <Adv_Request+0x10e>
        APP_DBG_MSG("Successfully Start Low Power Advertising \n");
 8002c08:	4815      	ldr	r0, [pc, #84]	; (8002c60 <Adv_Request+0x140>)
 8002c0a:	f007 fd47 	bl	800a69c <puts>
  return;
 8002c0e:	e00e      	b.n	8002c2e <Adv_Request+0x10e>
      if (New_Status == APP_BLE_FAST_ADV)
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d105      	bne.n	8002c22 <Adv_Request+0x102>
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
 8002c16:	7afb      	ldrb	r3, [r7, #11]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4812      	ldr	r0, [pc, #72]	; (8002c64 <Adv_Request+0x144>)
 8002c1c:	f007 fcca 	bl	800a5b4 <iprintf>
  return;
 8002c20:	e005      	b.n	8002c2e <Adv_Request+0x10e>
        APP_DBG_MSG("Start Low Power Advertising Failed , result: %d \n", ret);
 8002c22:	7afb      	ldrb	r3, [r7, #11]
 8002c24:	4619      	mov	r1, r3
 8002c26:	4810      	ldr	r0, [pc, #64]	; (8002c68 <Adv_Request+0x148>)
 8002c28:	f007 fcc4 	bl	800a5b4 <iprintf>
  return;
 8002c2c:	bf00      	nop
}
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200001cc 	.word	0x200001cc
 8002c38:	200001ce 	.word	0x200001ce
 8002c3c:	20000148 	.word	0x20000148
 8002c40:	0800b854 	.word	0x0800b854
 8002c44:	0800b870 	.word	0x0800b870
 8002c48:	0800b894 	.word	0x0800b894
 8002c4c:	20000161 	.word	0x20000161
 8002c50:	0800bd48 	.word	0x0800bd48
 8002c54:	2000000c 	.word	0x2000000c
 8002c58:	0800b8bc 	.word	0x0800b8bc
 8002c5c:	0001e046 	.word	0x0001e046
 8002c60:	0800b8e4 	.word	0x0800b8e4
 8002c64:	0800b910 	.word	0x0800b910
 8002c68:	0800b940 	.word	0x0800b940

08002c6c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b086      	sub	sp, #24
 8002c70:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8002c72:	f7ff fc1b 	bl	80024ac <LL_FLASH_GetUDN>
 8002c76:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7e:	d023      	beq.n	8002cc8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8002c80:	f7ff fc2c 	bl	80024dc <LL_FLASH_GetSTCompanyID>
 8002c84:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8002c86:	f7ff fc1d 	bl	80024c4 <LL_FLASH_GetDeviceID>
 8002c8a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	b2da      	uxtb	r2, r3
 8002c90:	4b16      	ldr	r3, [pc, #88]	; (8002cec <BleGetBdAddress+0x80>)
 8002c92:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4b14      	ldr	r3, [pc, #80]	; (8002cec <BleGetBdAddress+0x80>)
 8002c9c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	4b11      	ldr	r3, [pc, #68]	; (8002cec <BleGetBdAddress+0x80>)
 8002ca6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <BleGetBdAddress+0x80>)
 8002cae:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	4b0d      	ldr	r3, [pc, #52]	; (8002cec <BleGetBdAddress+0x80>)
 8002cb6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <BleGetBdAddress+0x80>)
 8002cc0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8002cc2:	4b0a      	ldr	r3, [pc, #40]	; (8002cec <BleGetBdAddress+0x80>)
 8002cc4:	617b      	str	r3, [r7, #20]
 8002cc6:	e00b      	b.n	8002ce0 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	f005 ff27 	bl	8008b1c <OTP_Read>
 8002cce:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	e001      	b.n	8002ce0 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8002cdc:	4b04      	ldr	r3, [pc, #16]	; (8002cf0 <BleGetBdAddress+0x84>)
 8002cde:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8002ce0:	697b      	ldr	r3, [r7, #20]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3718      	adds	r7, #24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000240 	.word	0x20000240
 8002cf0:	0800bd20 	.word	0x0800bd20

08002cf4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 8002cfa:	2001      	movs	r0, #1
 8002cfc:	f000 fd08 	bl	8003710 <BSP_LED_Off>
/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8002d00:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <Adv_Cancel+0x50>)
 8002d02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d017      	beq.n	8002d3a <Adv_Cancel+0x46>

  {

    tBleStatus result = 0x00;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8002d0e:	f004 fc39 	bl	8007584 <aci_gap_set_non_discoverable>
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8002d16:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <Adv_Cancel+0x50>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (result == BLE_STATUS_SUCCESS)
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d106      	bne.n	8002d32 <Adv_Cancel+0x3e>
    {
      APP_DBG_MSG("  \r\n\r");APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8002d24:	4808      	ldr	r0, [pc, #32]	; (8002d48 <Adv_Cancel+0x54>)
 8002d26:	f007 fc45 	bl	800a5b4 <iprintf>
 8002d2a:	4808      	ldr	r0, [pc, #32]	; (8002d4c <Adv_Cancel+0x58>)
 8002d2c:	f007 fc42 	bl	800a5b4 <iprintf>
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8002d30:	e003      	b.n	8002d3a <Adv_Cancel+0x46>
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8002d32:	4807      	ldr	r0, [pc, #28]	; (8002d50 <Adv_Cancel+0x5c>)
 8002d34:	f007 fc3e 	bl	800a5b4 <iprintf>
  return;
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
}
 8002d3c:	3708      	adds	r7, #8
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	20000148 	.word	0x20000148
 8002d48:	0800b974 	.word	0x0800b974
 8002d4c:	0800b97c 	.word	0x0800b97c
 8002d50:	0800b998 	.word	0x0800b998

08002d54 <Adv_Cancel_Req>:

static void Adv_Cancel_Req( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_Req_1 */

/* USER CODE END Adv_Cancel_Req_1 */
  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 8002d58:	2100      	movs	r1, #0
 8002d5a:	2001      	movs	r0, #1
 8002d5c:	f007 fade 	bl	800a31c <UTIL_SEQ_SetTask>
/* USER CODE BEGIN Adv_Cancel_Req_2 */

/* USER CODE END Adv_Cancel_Req_2 */
  return;
 8002d60:	bf00      	nop
}
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO(){
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 8002d68:	2001      	movs	r0, #1
 8002d6a:	f000 fcd1 	bl	8003710 <BSP_LED_Off>
/* USER CODE END Switch_OFF_GPIO */
}
 8002d6e:	bf00      	nop
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <BLE_SVC_L2CAP_Conn_Update>:

#if(L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t Connection_Handle)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af02      	add	r7, sp, #8
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */
  if(mutex == 1) {
 8002d7e:	4b29      	ldr	r3, [pc, #164]	; (8002e24 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d149      	bne.n	8002e1a <BLE_SVC_L2CAP_Conn_Update+0xa6>
    mutex = 0;
 8002d86:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	3301      	adds	r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	bfb8      	it	lt
 8002d9a:	425b      	neglt	r3, r3
 8002d9c:	b2da      	uxtb	r2, r3
 8002d9e:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002da0:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(tab_conn_interval[index_con_int]);
 8002da2:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	4a21      	ldr	r2, [pc, #132]	; (8002e2c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	ed93 7a00 	vldr	s14, [r3]
 8002db0:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002db4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002db8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002dbc:	ee17 3a90 	vmov	r3, s15
 8002dc0:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(tab_conn_interval[index_con_int]);
 8002dc2:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	ed93 7a00 	vldr	s14, [r3]
 8002dd0:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8002dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002dd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ddc:	ee17 3a90 	vmov	r3, s15
 8002de0:	82bb      	strh	r3, [r7, #20]
    uint16_t slave_latency = L2CAP_SLAVE_LATENCY;
 8002de2:	2300      	movs	r3, #0
 8002de4:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8002de6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002dea:	823b      	strh	r3, [r7, #16]
    tBleStatus result;

    result = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 8002dee:	8ad8      	ldrh	r0, [r3, #22]
 8002df0:	8a7c      	ldrh	r4, [r7, #18]
 8002df2:	8aba      	ldrh	r2, [r7, #20]
 8002df4:	8af9      	ldrh	r1, [r7, #22]
 8002df6:	8a3b      	ldrh	r3, [r7, #16]
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	4623      	mov	r3, r4
 8002dfc:	f005 fba4 	bl	8008548 <aci_l2cap_connection_parameter_update_req>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]
                                                       interval_min, interval_max,
                                                       slave_latency, timeout_multiplier);
    if( result == BLE_STATUS_SUCCESS )
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d103      	bne.n	8002e12 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8002e0a:	480a      	ldr	r0, [pc, #40]	; (8002e34 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 8002e0c:	f007 fbd2 	bl	800a5b4 <iprintf>
    }
  }
/* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

/* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */
  return;
 8002e10:	e003      	b.n	8002e1a <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 8002e12:	4809      	ldr	r0, [pc, #36]	; (8002e38 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8002e14:	f007 fbce 	bl	800a5b4 <iprintf>
  return;
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
}
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd90      	pop	{r4, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20001598 	.word	0x20001598
 8002e28:	20001599 	.word	0x20001599
 8002e2c:	20000004 	.word	0x20000004
 8002e30:	20000148 	.word	0x20000148
 8002e34:	0800b9bc 	.word	0x0800b9bc
 8002e38:	0800b9ec 	.word	0x0800b9ec

08002e3c <Connection_Interval_Update_Req>:
#endif

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )
static void Connection_Interval_Update_Req( void )
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8002e40:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <Connection_Interval_Update_Req+0x28>)
 8002e42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d00a      	beq.n	8002e60 <Connection_Interval_Update_Req+0x24>
 8002e4a:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <Connection_Interval_Update_Req+0x28>)
 8002e4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d005      	beq.n	8002e60 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8002e54:	4b03      	ldr	r3, [pc, #12]	; (8002e64 <Connection_Interval_Update_Req+0x28>)
 8002e56:	8adb      	ldrh	r3, [r3, #22]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff8b 	bl	8002d74 <BLE_SVC_L2CAP_Conn_Update>
  }
  return;
 8002e5e:	bf00      	nop
 8002e60:	bf00      	nop
}
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000148 	.word	0x20000148

08002e68 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8002e70:	2100      	movs	r1, #0
 8002e72:	2008      	movs	r0, #8
 8002e74:	f007 fa52 	bl	800a31c <UTIL_SEQ_SetTask>
  return;
 8002e78:	bf00      	nop
}
 8002e7a:	3708      	adds	r7, #8
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002e88:	2001      	movs	r0, #1
 8002e8a:	f007 faad 	bl	800a3e8 <UTIL_SEQ_SetEvt>
  return;
 8002e8e:	bf00      	nop
}
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f007 fac0 	bl	800a424 <UTIL_SEQ_WaitEvt>
  return;
 8002ea4:	bf00      	nop
}
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	3308      	adds	r3, #8
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f006 fe4e 	bl	8009b60 <SVCCTL_UserEvtRx>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8002ed4:	e002      	b.n	8002edc <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	701a      	strb	r2, [r3, #0]
}
 8002edc:	bf00      	nop
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	4603      	mov	r3, r0
 8002eec:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8002eee:	79fb      	ldrb	r3, [r7, #7]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d002      	beq.n	8002efa <BLE_StatusNot+0x16>
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d006      	beq.n	8002f06 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8002ef8:	e00b      	b.n	8002f12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002efa:	230f      	movs	r3, #15
 8002efc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f007 fa36 	bl	800a370 <UTIL_SEQ_PauseTask>
      break;
 8002f04:	e005      	b.n	8002f12 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8002f06:	230f      	movs	r3, #15
 8002f08:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8002f0a:	68f8      	ldr	r0, [r7, #12]
 8002f0c:	f007 fa4e 	bl	800a3ac <UTIL_SEQ_ResumeTask>
      break;
 8002f10:	bf00      	nop
  }
  return;
 8002f12:	bf00      	nop
}
 8002f14:	3710      	adds	r7, #16
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d00e      	beq.n	8002f4a <P2PS_STM_App_Notification+0x2e>
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d016      	beq.n	8002f5e <P2PS_STM_App_Notification+0x42>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d000      	beq.n	8002f36 <P2PS_STM_App_Notification+0x1a>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */

/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8002f34:	e066      	b.n	8003004 <P2PS_STM_App_Notification+0xe8>
      P2P_Server_App_Context.Notification_Status = 1;
 8002f36:	4b35      	ldr	r3, [pc, #212]	; (800300c <P2PS_STM_App_Notification+0xf0>)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n");
 8002f3c:	4834      	ldr	r0, [pc, #208]	; (8003010 <P2PS_STM_App_Notification+0xf4>)
 8002f3e:	f007 fbad 	bl	800a69c <puts>
      APP_DBG_MSG(" \n\r");
 8002f42:	4834      	ldr	r0, [pc, #208]	; (8003014 <P2PS_STM_App_Notification+0xf8>)
 8002f44:	f007 fb36 	bl	800a5b4 <iprintf>
      break;
 8002f48:	e05c      	b.n	8003004 <P2PS_STM_App_Notification+0xe8>
      P2P_Server_App_Context.Notification_Status = 0;
 8002f4a:	4b30      	ldr	r3, [pc, #192]	; (800300c <P2PS_STM_App_Notification+0xf0>)
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 8002f50:	4831      	ldr	r0, [pc, #196]	; (8003018 <P2PS_STM_App_Notification+0xfc>)
 8002f52:	f007 fba3 	bl	800a69c <puts>
      APP_DBG_MSG(" \n\r");
 8002f56:	482f      	ldr	r0, [pc, #188]	; (8003014 <P2PS_STM_App_Notification+0xf8>)
 8002f58:	f007 fb2c 	bl	800a5b4 <iprintf>
      break;
 8002f5c:	e052      	b.n	8003004 <P2PS_STM_App_Notification+0xe8>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d123      	bne.n	8002fb0 <P2PS_STM_App_Notification+0x94>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d10b      	bne.n	8002f8c <P2PS_STM_App_Notification+0x70>
          BSP_LED_On(LED_BLUE);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f000 fbb1 	bl	80036dc <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n");
 8002f7a:	4828      	ldr	r0, [pc, #160]	; (800301c <P2PS_STM_App_Notification+0x100>)
 8002f7c:	f007 fb8e 	bl	800a69c <puts>
          APP_DBG_MSG(" \n\r");
 8002f80:	4824      	ldr	r0, [pc, #144]	; (8003014 <P2PS_STM_App_Notification+0xf8>)
 8002f82:	f007 fb17 	bl	800a5b4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002f86:	4b21      	ldr	r3, [pc, #132]	; (800300c <P2PS_STM_App_Notification+0xf0>)
 8002f88:	2201      	movs	r2, #1
 8002f8a:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	3301      	adds	r3, #1
 8002f92:	781b      	ldrb	r3, [r3, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d10b      	bne.n	8002fb0 <P2PS_STM_App_Notification+0x94>
          BSP_LED_Off(LED_BLUE);
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f000 fbb9 	bl	8003710 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n");
 8002f9e:	4820      	ldr	r0, [pc, #128]	; (8003020 <P2PS_STM_App_Notification+0x104>)
 8002fa0:	f007 fb7c 	bl	800a69c <puts>
          APP_DBG_MSG(" \n\r");
 8002fa4:	481b      	ldr	r0, [pc, #108]	; (8003014 <P2PS_STM_App_Notification+0xf8>)
 8002fa6:	f007 fb05 	bl	800a5b4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002faa:	4b18      	ldr	r3, [pc, #96]	; (800300c <P2PS_STM_App_Notification+0xf0>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d123      	bne.n	8003002 <P2PS_STM_App_Notification+0xe6>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d10b      	bne.n	8002fde <P2PS_STM_App_Notification+0xc2>
          BSP_LED_On(LED_BLUE);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f000 fb88 	bl	80036dc <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n");
 8002fcc:	4815      	ldr	r0, [pc, #84]	; (8003024 <P2PS_STM_App_Notification+0x108>)
 8002fce:	f007 fb65 	bl	800a69c <puts>
          APP_DBG_MSG(" \n\r");
 8002fd2:	4810      	ldr	r0, [pc, #64]	; (8003014 <P2PS_STM_App_Notification+0xf8>)
 8002fd4:	f007 faee 	bl	800a5b4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	; (800300c <P2PS_STM_App_Notification+0xf0>)
 8002fda:	2201      	movs	r2, #1
 8002fdc:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <P2PS_STM_App_Notification+0xe6>
          BSP_LED_Off(LED_BLUE);
 8002fea:	2000      	movs	r0, #0
 8002fec:	f000 fb90 	bl	8003710 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n");
 8002ff0:	480d      	ldr	r0, [pc, #52]	; (8003028 <P2PS_STM_App_Notification+0x10c>)
 8002ff2:	f007 fb53 	bl	800a69c <puts>
          APP_DBG_MSG(" \n\r");
 8002ff6:	4807      	ldr	r0, [pc, #28]	; (8003014 <P2PS_STM_App_Notification+0xf8>)
 8002ff8:	f007 fadc 	bl	800a5b4 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <P2PS_STM_App_Notification+0xf0>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	709a      	strb	r2, [r3, #2]
      break;
 8003002:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 8003004:	bf00      	nop
}
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200001d0 	.word	0x200001d0
 8003010:	0800ba14 	.word	0x0800ba14
 8003014:	0800ba48 	.word	0x0800ba48
 8003018:	0800ba4c 	.word	0x0800ba4c
 800301c:	0800ba80 	.word	0x0800ba80
 8003020:	0800baa8 	.word	0x0800baa8
 8003024:	0800bad0 	.word	0x0800bad0
 8003028:	0800baf8 	.word	0x0800baf8

0800302c <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d005      	beq.n	8003048 <P2PS_APP_Notification+0x1c>
 800303c:	2b01      	cmp	r3, #1
 800303e:	d000      	beq.n	8003042 <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 8003040:	e003      	b.n	800304a <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();
 8003042:	f000 f819 	bl	8003078 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 8003046:	e000      	b.n	800304a <P2PS_APP_Notification+0x1e>
    break;
 8003048:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 800304a:	bf00      	nop
}
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
	...

08003054 <P2PS_APP_Init>:

void P2PS_APP_Init(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 8003058:	4a05      	ldr	r2, [pc, #20]	; (8003070 <P2PS_APP_Init+0x1c>)
 800305a:	2100      	movs	r1, #0
 800305c:	2002      	movs	r0, #2
 800305e:	f007 f93d 	bl	800a2dc <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0;
 8003062:	4b04      	ldr	r3, [pc, #16]	; (8003074 <P2PS_APP_Init+0x20>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 8003068:	f000 f806 	bl	8003078 <P2PS_APP_LED_BUTTON_context_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 800306c:	bf00      	nop
}
 800306e:	bd80      	pop	{r7, pc}
 8003070:	080030b5 	.word	0x080030b5
 8003074:	200001d0 	.word	0x200001d0

08003078 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0

  BSP_LED_Off(LED_BLUE);
 800307c:	2000      	movs	r0, #0
 800307e:	f000 fb47 	bl	8003710 <BSP_LED_Off>

  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 8003082:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8003084:	2201      	movs	r2, #1
 8003086:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 8003088:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 800308a:	2200      	movs	r2, #0
 800308c:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 800308e:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8003090:	2201      	movs	r2, #1
 8003092:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <P2PS_APP_LED_BUTTON_context_Init+0x28>)
 8003096:	2200      	movs	r2, #0
 8003098:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	200001d0 	.word	0x200001d0

080030a4 <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 80030a8:	2100      	movs	r1, #0
 80030aa:	2002      	movs	r0, #2
 80030ac:	f007 f936 	bl	800a31c <UTIL_SEQ_SetTask>

  return;
 80030b0:	bf00      	nop
}
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0

  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 80030b8:	4b0f      	ldr	r3, [pc, #60]	; (80030f8 <P2PS_Send_Notification+0x44>)
 80030ba:	791b      	ldrb	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <P2PS_Send_Notification+0x14>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <P2PS_Send_Notification+0x44>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	711a      	strb	r2, [r3, #4]
 80030c6:	e002      	b.n	80030ce <P2PS_Send_Notification+0x1a>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80030c8:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <P2PS_Send_Notification+0x44>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	711a      	strb	r2, [r3, #4]
  }

   if(P2P_Server_App_Context.Notification_Status){
 80030ce:	4b0a      	ldr	r3, [pc, #40]	; (80030f8 <P2PS_Send_Notification+0x44>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00b      	beq.n	80030ee <P2PS_Send_Notification+0x3a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 80030d6:	4809      	ldr	r0, [pc, #36]	; (80030fc <P2PS_Send_Notification+0x48>)
 80030d8:	f007 fa6c 	bl	800a5b4 <iprintf>
    APP_DBG_MSG(" \n\r");
 80030dc:	4808      	ldr	r0, [pc, #32]	; (8003100 <P2PS_Send_Notification+0x4c>)
 80030de:	f007 fa69 	bl	800a5b4 <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&P2P_Server_App_Context.ButtonControl);
 80030e2:	4908      	ldr	r1, [pc, #32]	; (8003104 <P2PS_Send_Notification+0x50>)
 80030e4:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80030e8:	f005 fe48 	bl	8008d7c <P2PS_STM_App_Update_Char>
   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
   }

  return;
 80030ec:	e003      	b.n	80030f6 <P2PS_Send_Notification+0x42>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n ");
 80030ee:	4806      	ldr	r0, [pc, #24]	; (8003108 <P2PS_Send_Notification+0x54>)
 80030f0:	f007 fa60 	bl	800a5b4 <iprintf>
  return;
 80030f4:	bf00      	nop
}
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	200001d0 	.word	0x200001d0
 80030fc:	0800bb20 	.word	0x0800bb20
 8003100:	0800ba48 	.word	0x0800ba48
 8003104:	200001d3 	.word	0x200001d3
 8003108:	0800bb60 	.word	0x0800bb60

0800310c <LL_PWR_EnableBootC2>:
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <LL_PWR_EnableBootC2+0x1c>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	4a04      	ldr	r2, [pc, #16]	; (8003128 <LL_PWR_EnableBootC2+0x1c>)
 8003116:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800311a:	60d3      	str	r3, [r2, #12]
}
 800311c:	bf00      	nop
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop
 8003128:	58000400 	.word	0x58000400

0800312c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8003136:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800313a:	4905      	ldr	r1, [pc, #20]	; (8003150 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	58000800 	.word	0x58000800

08003154 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	4904      	ldr	r1, [pc, #16]	; (8003174 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4313      	orrs	r3, r2
 8003166:	620b      	str	r3, [r1, #32]
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	58000800 	.word	0x58000800

08003178 <LL_AHB3_GRP1_EnableClock>:
{
 8003178:	b480      	push	{r7}
 800317a:	b085      	sub	sp, #20
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8003180:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003184:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4313      	orrs	r3, r2
 800318e:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8003190:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003194:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4013      	ands	r3, r2
 800319a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800319c:	68fb      	ldr	r3, [r7, #12]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b085      	sub	sp, #20
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 80031b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031b6:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80031ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 80031c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ca:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4013      	ands	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80031d4:	68fb      	ldr	r3, [r7, #12]
}
 80031d6:	bf00      	nop
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <LL_C1_IPCC_EnableIT_TXF>:
{
 80031e2:	b480      	push	{r7}
 80031e4:	b083      	sub	sp, #12
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <LL_C1_IPCC_EnableIT_RXO>:
{
 8003202:	b480      	push	{r7}
 8003204:	b083      	sub	sp, #12
 8003206:	af00      	add	r7, sp, #0
 8003208:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f043 0201 	orr.w	r2, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	601a      	str	r2, [r3, #0]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685a      	ldr	r2, [r3, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	041b      	lsls	r3, r3, #16
 8003234:	43db      	mvns	r3, r3
 8003236:	401a      	ands	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	605a      	str	r2, [r3, #4]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	041b      	lsls	r3, r3, #16
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	605a      	str	r2, [r3, #4]
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <LL_C1_IPCC_EnableReceiveChannel>:
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	43db      	mvns	r3, r3
 800327e:	401a      	ands	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	605a      	str	r2, [r3, #4]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	683a      	ldr	r2, [r7, #0]
 800329e:	609a      	str	r2, [r3, #8]
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <LL_C1_IPCC_SetFlag_CHx>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
 80032b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	041a      	lsls	r2, r3, #16
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	609a      	str	r2, [r3, #8]
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
 80032d2:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	4013      	ands	r3, r2
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d101      	bne.n	80032e6 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
 80032fc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	4013      	ands	r3, r2
 8003306:	683a      	ldr	r2, [r7, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d101      	bne.n	8003310 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
	...

08003320 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8003324:	2102      	movs	r1, #2
 8003326:	4819      	ldr	r0, [pc, #100]	; (800338c <HW_IPCC_Rx_Handler+0x6c>)
 8003328:	f7ff ffe4 	bl	80032f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HW_IPCC_Rx_Handler+0x26>
 8003332:	4b16      	ldr	r3, [pc, #88]	; (800338c <HW_IPCC_Rx_Handler+0x6c>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	43db      	mvns	r3, r3
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HW_IPCC_Rx_Handler+0x26>
  {
      HW_IPCC_SYS_EvtHandler();
 8003340:	f000 f8ea 	bl	8003518 <HW_IPCC_SYS_EvtHandler>
 8003344:	e01f      	b.n	8003386 <HW_IPCC_Rx_Handler+0x66>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8003346:	2101      	movs	r1, #1
 8003348:	4810      	ldr	r0, [pc, #64]	; (800338c <HW_IPCC_Rx_Handler+0x6c>)
 800334a:	f7ff ffd3 	bl	80032f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d008      	beq.n	8003366 <HW_IPCC_Rx_Handler+0x46>
 8003354:	4b0d      	ldr	r3, [pc, #52]	; (800338c <HW_IPCC_Rx_Handler+0x6c>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d102      	bne.n	8003366 <HW_IPCC_Rx_Handler+0x46>
  {
    HW_IPCC_BLE_EvtHandler();
 8003360:	f000 f89e 	bl	80034a0 <HW_IPCC_BLE_EvtHandler>
 8003364:	e00f      	b.n	8003386 <HW_IPCC_Rx_Handler+0x66>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8003366:	2108      	movs	r1, #8
 8003368:	4808      	ldr	r0, [pc, #32]	; (800338c <HW_IPCC_Rx_Handler+0x6c>)
 800336a:	f7ff ffc3 	bl	80032f4 <LL_C2_IPCC_IsActiveFlag_CHx>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d009      	beq.n	8003388 <HW_IPCC_Rx_Handler+0x68>
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <HW_IPCC_Rx_Handler+0x6c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	43db      	mvns	r3, r3
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HW_IPCC_Rx_Handler+0x68>
  {
    HW_IPCC_TRACES_EvtHandler();
 8003382:	f000 f915 	bl	80035b0 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 8003386:	bf00      	nop
 8003388:	bf00      	nop
}
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58000c00 	.word	0x58000c00

08003390 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8003394:	2102      	movs	r1, #2
 8003396:	4822      	ldr	r0, [pc, #136]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 8003398:	f7ff ff97 	bl	80032ca <LL_C1_IPCC_IsActiveFlag_CHx>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <HW_IPCC_Tx_Handler+0x26>
 80033a2:	4b1f      	ldr	r3, [pc, #124]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d002      	beq.n	80033b6 <HW_IPCC_Tx_Handler+0x26>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80033b0:	f000 f8a6 	bl	8003500 <HW_IPCC_SYS_CmdEvtHandler>
 80033b4:	e031      	b.n	800341a <HW_IPCC_Tx_Handler+0x8a>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80033b6:	2102      	movs	r1, #2
 80033b8:	4819      	ldr	r0, [pc, #100]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 80033ba:	f7ff ff86 	bl	80032ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d109      	bne.n	80033d8 <HW_IPCC_Tx_Handler+0x48>
 80033c4:	4b16      	ldr	r3, [pc, #88]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <HW_IPCC_Tx_Handler+0x48>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80033d2:	f000 f895 	bl	8003500 <HW_IPCC_SYS_CmdEvtHandler>
 80033d6:	e020      	b.n	800341a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80033d8:	2108      	movs	r1, #8
 80033da:	4811      	ldr	r0, [pc, #68]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 80033dc:	f7ff ff75 	bl	80032ca <LL_C1_IPCC_IsActiveFlag_CHx>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d109      	bne.n	80033fa <HW_IPCC_Tx_Handler+0x6a>
 80033e6:	4b0e      	ldr	r3, [pc, #56]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d002      	beq.n	80033fa <HW_IPCC_Tx_Handler+0x6a>
  {
    HW_IPCC_MM_FreeBufHandler();
 80033f4:	f000 f8be 	bl	8003574 <HW_IPCC_MM_FreeBufHandler>
 80033f8:	e00f      	b.n	800341a <HW_IPCC_Tx_Handler+0x8a>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 80033fa:	2120      	movs	r1, #32
 80033fc:	4808      	ldr	r0, [pc, #32]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 80033fe:	f7ff ff64 	bl	80032ca <LL_C1_IPCC_IsActiveFlag_CHx>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d109      	bne.n	800341c <HW_IPCC_Tx_Handler+0x8c>
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <HW_IPCC_Tx_Handler+0x90>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	43db      	mvns	r3, r3
 800340e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HW_IPCC_Tx_Handler+0x8c>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8003416:	f000 f84f 	bl	80034b8 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800341a:	bf00      	nop
 800341c:	bf00      	nop
}
 800341e:	bd80      	pop	{r7, pc}
 8003420:	58000c00 	.word	0x58000c00

08003424 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
    when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8003428:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800342c:	f7ff febd 	bl	80031aa <LL_C2_AHB3_GRP1_EnableClock>

   /**
   * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
   */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8003430:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003434:	f7ff fe7a 	bl	800312c <LL_C2_EXTI_EnableEvent_32_63>
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8003438:	f44f 7000 	mov.w	r0, #512	; 0x200
 800343c:	f7ff fe8a 	bl	8003154 <LL_EXTI_EnableRisingTrig_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8003440:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8003442:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8003444:	f7ff fe62 	bl	800310c <LL_PWR_EnableBootC2>

  return;
 8003448:	bf00      	nop
}
 800344a:	bd80      	pop	{r7, pc}

0800344c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8003450:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003454:	f7ff fe90 	bl	8003178 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8003458:	4806      	ldr	r0, [pc, #24]	; (8003474 <HW_IPCC_Init+0x28>)
 800345a:	f7ff fed2 	bl	8003202 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800345e:	4805      	ldr	r0, [pc, #20]	; (8003474 <HW_IPCC_Init+0x28>)
 8003460:	f7ff febf 	bl	80031e2 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003464:	202c      	movs	r0, #44	; 0x2c
 8003466:	f000 fc46 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800346a:	202d      	movs	r0, #45	; 0x2d
 800346c:	f000 fc43 	bl	8003cf6 <HAL_NVIC_EnableIRQ>

  return;
 8003470:	bf00      	nop
}
 8003472:	bd80      	pop	{r7, pc}
 8003474:	58000c00 	.word	0x58000c00

08003478 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800347c:	2101      	movs	r1, #1
 800347e:	4802      	ldr	r0, [pc, #8]	; (8003488 <HW_IPCC_BLE_Init+0x10>)
 8003480:	f7ff fef4 	bl	800326c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8003484:	bf00      	nop
}
 8003486:	bd80      	pop	{r7, pc}
 8003488:	58000c00 	.word	0x58000c00

0800348c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8003490:	2101      	movs	r1, #1
 8003492:	4802      	ldr	r0, [pc, #8]	; (800349c <HW_IPCC_BLE_SendCmd+0x10>)
 8003494:	f7ff ff0a 	bl	80032ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 8003498:	bf00      	nop
}
 800349a:	bd80      	pop	{r7, pc}
 800349c:	58000c00 	.word	0x58000c00

080034a0 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80034a4:	f006 fc3e 	bl	8009d24 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80034a8:	2101      	movs	r1, #1
 80034aa:	4802      	ldr	r0, [pc, #8]	; (80034b4 <HW_IPCC_BLE_EvtHandler+0x14>)
 80034ac:	f7ff fef0 	bl	8003290 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80034b0:	bf00      	nop
}
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	58000c00 	.word	0x58000c00

080034b8 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80034bc:	2120      	movs	r1, #32
 80034be:	4803      	ldr	r0, [pc, #12]	; (80034cc <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80034c0:	f7ff fec2 	bl	8003248 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80034c4:	f006 fc5e 	bl	8009d84 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80034c8:	bf00      	nop
}
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	58000c00 	.word	0x58000c00

080034d0 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80034d4:	2102      	movs	r1, #2
 80034d6:	4802      	ldr	r0, [pc, #8]	; (80034e0 <HW_IPCC_SYS_Init+0x10>)
 80034d8:	f7ff fec8 	bl	800326c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80034dc:	bf00      	nop
}
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	58000c00 	.word	0x58000c00

080034e4 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80034e8:	2102      	movs	r1, #2
 80034ea:	4804      	ldr	r0, [pc, #16]	; (80034fc <HW_IPCC_SYS_SendCmd+0x18>)
 80034ec:	f7ff fede 	bl	80032ac <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80034f0:	2102      	movs	r1, #2
 80034f2:	4802      	ldr	r0, [pc, #8]	; (80034fc <HW_IPCC_SYS_SendCmd+0x18>)
 80034f4:	f7ff fe95 	bl	8003222 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80034f8:	bf00      	nop
}
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	58000c00 	.word	0x58000c00

08003500 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8003504:	2102      	movs	r1, #2
 8003506:	4803      	ldr	r0, [pc, #12]	; (8003514 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8003508:	f7ff fe9e 	bl	8003248 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800350c:	f006 fc8a 	bl	8009e24 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8003510:	bf00      	nop
}
 8003512:	bd80      	pop	{r7, pc}
 8003514:	58000c00 	.word	0x58000c00

08003518 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800351c:	f006 fc98 	bl	8009e50 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8003520:	2102      	movs	r1, #2
 8003522:	4802      	ldr	r0, [pc, #8]	; (800352c <HW_IPCC_SYS_EvtHandler+0x14>)
 8003524:	f7ff feb4 	bl	8003290 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8003528:	bf00      	nop
}
 800352a:	bd80      	pop	{r7, pc}
 800352c:	58000c00 	.word	0x58000c00

08003530 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8003538:	2108      	movs	r1, #8
 800353a:	480c      	ldr	r0, [pc, #48]	; (800356c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800353c:	f7ff fec5 	bl	80032ca <LL_C1_IPCC_IsActiveFlag_CHx>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8003546:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800354c:	2108      	movs	r1, #8
 800354e:	4807      	ldr	r0, [pc, #28]	; (800356c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8003550:	f7ff fe67 	bl	8003222 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8003554:	e006      	b.n	8003564 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800355a:	2108      	movs	r1, #8
 800355c:	4803      	ldr	r0, [pc, #12]	; (800356c <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800355e:	f7ff fea5 	bl	80032ac <LL_C1_IPCC_SetFlag_CHx>
  return;
 8003562:	bf00      	nop
}
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	58000c00 	.word	0x58000c00
 8003570:	20000248 	.word	0x20000248

08003574 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003578:	2108      	movs	r1, #8
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800357c:	f7ff fe64 	bl	8003248 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8003586:	2108      	movs	r1, #8
 8003588:	4802      	ldr	r0, [pc, #8]	; (8003594 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800358a:	f7ff fe8f 	bl	80032ac <LL_C1_IPCC_SetFlag_CHx>

  return;
 800358e:	bf00      	nop
}
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	58000c00 	.word	0x58000c00
 8003598:	20000248 	.word	0x20000248

0800359c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80035a0:	2108      	movs	r1, #8
 80035a2:	4802      	ldr	r0, [pc, #8]	; (80035ac <HW_IPCC_TRACES_Init+0x10>)
 80035a4:	f7ff fe62 	bl	800326c <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80035a8:	bf00      	nop
}
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	58000c00 	.word	0x58000c00

080035b0 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80035b4:	f006 fcf4 	bl	8009fa0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80035b8:	2108      	movs	r1, #8
 80035ba:	4802      	ldr	r0, [pc, #8]	; (80035c4 <HW_IPCC_TRACES_EvtHandler+0x14>)
 80035bc:	f7ff fe68 	bl	8003290 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80035c0:	bf00      	nop
}
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	58000c00 	.word	0x58000c00

080035c8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80035c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035cc:	3304      	adds	r3, #4

080035ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035d0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80035d2:	d3f9      	bcc.n	80035c8 <CopyDataInit>
  bx lr
 80035d4:	4770      	bx	lr

080035d6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80035d6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80035d8:	3004      	adds	r0, #4

080035da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80035da:	4288      	cmp	r0, r1
  bcc FillZerobss
 80035dc:	d3fb      	bcc.n	80035d6 <FillZerobss>
  bx lr
 80035de:	4770      	bx	lr

080035e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80035e0:	480c      	ldr	r0, [pc, #48]	; (8003614 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80035e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80035e4:	480c      	ldr	r0, [pc, #48]	; (8003618 <LoopForever+0x8>)
 80035e6:	490d      	ldr	r1, [pc, #52]	; (800361c <LoopForever+0xc>)
 80035e8:	4a0d      	ldr	r2, [pc, #52]	; (8003620 <LoopForever+0x10>)
 80035ea:	2300      	movs	r3, #0
 80035ec:	f7ff ffef 	bl	80035ce <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80035f0:	480c      	ldr	r0, [pc, #48]	; (8003624 <LoopForever+0x14>)
 80035f2:	490d      	ldr	r1, [pc, #52]	; (8003628 <LoopForever+0x18>)
 80035f4:	2300      	movs	r3, #0
 80035f6:	f7ff fff0 	bl	80035da <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80035fa:	480c      	ldr	r0, [pc, #48]	; (800362c <LoopForever+0x1c>)
 80035fc:	490c      	ldr	r1, [pc, #48]	; (8003630 <LoopForever+0x20>)
 80035fe:	2300      	movs	r3, #0
 8003600:	f7ff ffeb 	bl	80035da <LoopFillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003604:	f000 f910 	bl	8003828 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8003608:	f006 ff9c 	bl	800a544 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800360c:	f7fe fa94 	bl	8001b38 <main>

08003610 <LoopForever>:

LoopForever:
  b LoopForever
 8003610:	e7fe      	b.n	8003610 <LoopForever>
 8003612:	0000      	.short	0x0000
  ldr   r0, =_estack
 8003614:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8003618:	20000004 	.word	0x20000004
 800361c:	200000ac 	.word	0x200000ac
 8003620:	0800bed4 	.word	0x0800bed4
  INIT_BSS _sbss, _ebss
 8003624:	20000214 	.word	0x20000214
 8003628:	200015a4 	.word	0x200015a4
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800362c:	200301e0 	.word	0x200301e0
 8003630:	20030a57 	.word	0x20030a57

08003634 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003634:	e7fe      	b.n	8003634 <ADC1_IRQHandler>

08003636 <LL_AHB2_GRP1_EnableClock>:
{
 8003636:	b480      	push	{r7}
 8003638:	b085      	sub	sp, #20
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4313      	orrs	r3, r2
 800364c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800364e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4013      	ands	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800365a:	68fb      	ldr	r3, [r7, #12]
}
 800365c:	bf00      	nop
 800365e:	3714      	adds	r7, #20
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr

08003668 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af00      	add	r7, sp, #0
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8003672:	f107 030c 	add.w	r3, r7, #12
 8003676:	2200      	movs	r2, #0
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	605a      	str	r2, [r3, #4]
 800367c:	609a      	str	r2, [r3, #8]
 800367e:	60da      	str	r2, [r3, #12]
 8003680:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003682:	2002      	movs	r0, #2
 8003684:	f7ff ffd7 	bl	8003636 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8003688:	79fb      	ldrb	r3, [r7, #7]
 800368a:	4a12      	ldr	r2, [pc, #72]	; (80036d4 <BSP_LED_Init+0x6c>)
 800368c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003690:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003692:	2301      	movs	r3, #1
 8003694:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800369a:	2302      	movs	r3, #2
 800369c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 800369e:	79fb      	ldrb	r3, [r7, #7]
 80036a0:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <BSP_LED_Init+0x70>)
 80036a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a6:	f107 020c 	add.w	r2, r7, #12
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f000 fe7b 	bl	80043a8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	4a08      	ldr	r2, [pc, #32]	; (80036d8 <BSP_LED_Init+0x70>)
 80036b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <BSP_LED_Init+0x6c>)
 80036be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036c2:	2200      	movs	r2, #0
 80036c4:	4619      	mov	r1, r3
 80036c6:	f000 ffdf 	bl	8004688 <HAL_GPIO_WritePin>
}
 80036ca:	bf00      	nop
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	0800bd50 	.word	0x0800bd50
 80036d8:	2000001c 	.word	0x2000001c

080036dc <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b082      	sub	sp, #8
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	4603      	mov	r3, r0
 80036e4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80036e6:	79fb      	ldrb	r3, [r7, #7]
 80036e8:	4a07      	ldr	r2, [pc, #28]	; (8003708 <BSP_LED_On+0x2c>)
 80036ea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	4a06      	ldr	r2, [pc, #24]	; (800370c <BSP_LED_On+0x30>)
 80036f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036f6:	2201      	movs	r2, #1
 80036f8:	4619      	mov	r1, r3
 80036fa:	f000 ffc5 	bl	8004688 <HAL_GPIO_WritePin>
}
 80036fe:	bf00      	nop
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	2000001c 	.word	0x2000001c
 800370c:	0800bd50 	.word	0x0800bd50

08003710 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	4603      	mov	r3, r0
 8003718:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	4a07      	ldr	r2, [pc, #28]	; (800373c <BSP_LED_Off+0x2c>)
 800371e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003722:	79fb      	ldrb	r3, [r7, #7]
 8003724:	4a06      	ldr	r2, [pc, #24]	; (8003740 <BSP_LED_Off+0x30>)
 8003726:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800372a:	2200      	movs	r2, #0
 800372c:	4619      	mov	r1, r3
 800372e:	f000 ffab 	bl	8004688 <HAL_GPIO_WritePin>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2000001c 	.word	0x2000001c
 8003740:	0800bd50 	.word	0x0800bd50

08003744 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b088      	sub	sp, #32
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	460a      	mov	r2, r1
 800374e:	71fb      	strb	r3, [r7, #7]
 8003750:	4613      	mov	r3, r2
 8003752:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8003754:	f107 030c 	add.w	r3, r7, #12
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]
 8003762:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d103      	bne.n	8003772 <BSP_PB_Init+0x2e>
 800376a:	2004      	movs	r0, #4
 800376c:	f7ff ff63 	bl	8003636 <LL_AHB2_GRP1_EnableClock>
 8003770:	e00c      	b.n	800378c <BSP_PB_Init+0x48>
 8003772:	79fb      	ldrb	r3, [r7, #7]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d103      	bne.n	8003780 <BSP_PB_Init+0x3c>
 8003778:	2008      	movs	r0, #8
 800377a:	f7ff ff5c 	bl	8003636 <LL_AHB2_GRP1_EnableClock>
 800377e:	e005      	b.n	800378c <BSP_PB_Init+0x48>
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	2b02      	cmp	r3, #2
 8003784:	d102      	bne.n	800378c <BSP_PB_Init+0x48>
 8003786:	2008      	movs	r0, #8
 8003788:	f7ff ff55 	bl	8003636 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800378c:	79bb      	ldrb	r3, [r7, #6]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d117      	bne.n	80037c2 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8003792:	79fb      	ldrb	r3, [r7, #7]
 8003794:	4a20      	ldr	r2, [pc, #128]	; (8003818 <BSP_PB_Init+0xd4>)
 8003796:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800379a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80037a0:	2301      	movs	r3, #1
 80037a2:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80037a4:	2302      	movs	r3, #2
 80037a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	4a1c      	ldr	r2, [pc, #112]	; (800381c <BSP_PB_Init+0xd8>)
 80037ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b0:	f107 020c 	add.w	r2, r7, #12
 80037b4:	4611      	mov	r1, r2
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fdf6 	bl	80043a8 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 80037bc:	2001      	movs	r0, #1
 80037be:	f7fe fb7c 	bl	8001eba <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 80037c2:	79bb      	ldrb	r3, [r7, #6]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d122      	bne.n	800380e <BSP_PB_Init+0xca>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 80037c8:	79fb      	ldrb	r3, [r7, #7]
 80037ca:	4a13      	ldr	r2, [pc, #76]	; (8003818 <BSP_PB_Init+0xd4>)
 80037cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037d0:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 80037d2:	2301      	movs	r3, #1
 80037d4:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 80037d6:	4b12      	ldr	r3, [pc, #72]	; (8003820 <BSP_PB_Init+0xdc>)
 80037d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	4a0f      	ldr	r2, [pc, #60]	; (800381c <BSP_PB_Init+0xd8>)
 80037de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037e2:	f107 020c 	add.w	r2, r7, #12
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fddd 	bl	80043a8 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80037ee:	79fb      	ldrb	r3, [r7, #7]
 80037f0:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <BSP_PB_Init+0xe0>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	b25b      	sxtb	r3, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	210f      	movs	r1, #15
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 fa61 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	4a08      	ldr	r2, [pc, #32]	; (8003824 <BSP_PB_Init+0xe0>)
 8003804:	5cd3      	ldrb	r3, [r2, r3]
 8003806:	b25b      	sxtb	r3, r3
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fa74 	bl	8003cf6 <HAL_NVIC_EnableIRQ>
  }
}
 800380e:	bf00      	nop
 8003810:	3720      	adds	r7, #32
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	0800bd58 	.word	0x0800bd58
 800381c:	20000028 	.word	0x20000028
 8003820:	10210000 	.word	0x10210000
 8003824:	0800bd60 	.word	0x0800bd60

08003828 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <SystemInit+0xa0>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8003832:	4b25      	ldr	r3, [pc, #148]	; (80038c8 <SystemInit+0xa0>)
 8003834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003838:	4a23      	ldr	r2, [pc, #140]	; (80038c8 <SystemInit+0xa0>)
 800383a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800383e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384c:	f043 0301 	orr.w	r3, r3, #1
 8003850:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8003852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003856:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800385a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800385c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003866:	4b19      	ldr	r3, [pc, #100]	; (80038cc <SystemInit+0xa4>)
 8003868:	4013      	ands	r3, r2
 800386a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003874:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003878:	f023 0305 	bic.w	r3, r3, #5
 800387c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003888:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8003894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003898:	4a0d      	ldr	r2, [pc, #52]	; (80038d0 <SystemInit+0xa8>)
 800389a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	4a0b      	ldr	r2, [pc, #44]	; (80038d0 <SystemInit+0xa8>)
 80038a2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80038a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038b2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
}
 80038bc:	bf00      	nop
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000ed00 	.word	0xe000ed00
 80038cc:	faf6fefb 	.word	0xfaf6fefb
 80038d0:	22041000 	.word	0x22041000

080038d4 <LL_DBGMCU_EnableDBGSleepMode>:
{
 80038d4:	b480      	push	{r7}
 80038d6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4a04      	ldr	r2, [pc, #16]	; (80038f0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	6053      	str	r3, [r2, #4]
}
 80038e4:	bf00      	nop
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	e0042000 	.word	0xe0042000

080038f4 <LL_DBGMCU_EnableDBGStopMode>:
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	4a04      	ldr	r2, [pc, #16]	; (8003910 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 80038fe:	f043 0302 	orr.w	r3, r3, #2
 8003902:	6053      	str	r3, [r2, #4]
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e0042000 	.word	0xe0042000

08003914 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_Init+0x3c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a0b      	ldr	r2, [pc, #44]	; (8003950 <HAL_Init+0x3c>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800392a:	2003      	movs	r0, #3
 800392c:	f000 f9be 	bl	8003cac <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003930:	2000      	movs	r0, #0
 8003932:	f000 f80f 	bl	8003954 <HAL_InitTick>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d002      	beq.n	8003942 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	71fb      	strb	r3, [r7, #7]
 8003940:	e001      	b.n	8003946 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003942:	f7fe fb89 	bl	8002058 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003946:	79fb      	ldrb	r3, [r7, #7]
}
 8003948:	4618      	mov	r0, r3
 800394a:	3708      	adds	r7, #8
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	58004000 	.word	0x58004000

08003954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8003960:	4b17      	ldr	r3, [pc, #92]	; (80039c0 <HAL_InitTick+0x6c>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d024      	beq.n	80039b2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003968:	f001 ffac 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 800396c:	4602      	mov	r2, r0
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_InitTick+0x6c>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	4619      	mov	r1, r3
 8003974:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003978:	fbb3 f3f1 	udiv	r3, r3, r1
 800397c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003980:	4618      	mov	r0, r3
 8003982:	f000 f9d4 	bl	8003d2e <HAL_SYSTICK_Config>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10f      	bne.n	80039ac <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d809      	bhi.n	80039a6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003992:	2200      	movs	r2, #0
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800399a:	f000 f992 	bl	8003cc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800399e:	4a09      	ldr	r2, [pc, #36]	; (80039c4 <HAL_InitTick+0x70>)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	e007      	b.n	80039b6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	e004      	b.n	80039b6 <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e001      	b.n	80039b6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	2000003c 	.word	0x2000003c
 80039c4:	20000038 	.word	0x20000038

080039c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80039cc:	4b06      	ldr	r3, [pc, #24]	; (80039e8 <HAL_IncTick+0x20>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	4b06      	ldr	r3, [pc, #24]	; (80039ec <HAL_IncTick+0x24>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4413      	add	r3, r2
 80039d8:	4a04      	ldr	r2, [pc, #16]	; (80039ec <HAL_IncTick+0x24>)
 80039da:	6013      	str	r3, [r2, #0]
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	2000003c 	.word	0x2000003c
 80039ec:	2000159c 	.word	0x2000159c

080039f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	af00      	add	r7, sp, #0
  return uwTick;
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_GetTick+0x14>)
 80039f6:	681b      	ldr	r3, [r3, #0]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	2000159c 	.word	0x2000159c

08003a08 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_GetTickPrio+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000038 	.word	0x20000038

08003a20 <HAL_GetTickFreq>:
/**
  * @brief Return tick frequency.
  * @retval tick period in Hz
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8003a20:	b480      	push	{r7}
 8003a22:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <HAL_GetTickFreq+0x14>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	2000003c 	.word	0x2000003c

08003a38 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8003a3c:	f7ff ff4a 	bl	80038d4 <LL_DBGMCU_EnableDBGSleepMode>
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8003a48:	f7ff ff54 	bl	80038f4 <LL_DBGMCU_EnableDBGStopMode>
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a60:	4b0c      	ldr	r3, [pc, #48]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a82:	4a04      	ldr	r2, [pc, #16]	; (8003a94 <__NVIC_SetPriorityGrouping+0x44>)
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	60d3      	str	r3, [r2, #12]
}
 8003a88:	bf00      	nop
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	0a1b      	lsrs	r3, r3, #8
 8003aa2:	f003 0307 	and.w	r3, r3, #7
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	e000ed00 	.word	0xe000ed00

08003ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	db0b      	blt.n	8003ade <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	f003 021f 	and.w	r2, r3, #31
 8003acc:	4907      	ldr	r1, [pc, #28]	; (8003aec <__NVIC_EnableIRQ+0x38>)
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	095b      	lsrs	r3, r3, #5
 8003ad4:	2001      	movs	r0, #1
 8003ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8003ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ade:	bf00      	nop
 8003ae0:	370c      	adds	r7, #12
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	e000e100 	.word	0xe000e100

08003af0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db10      	blt.n	8003b24 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	4909      	ldr	r1, [pc, #36]	; (8003b30 <__NVIC_DisableIRQ+0x40>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2001      	movs	r0, #1
 8003b12:	fa00 f202 	lsl.w	r2, r0, r2
 8003b16:	3320      	adds	r3, #32
 8003b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003b1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b20:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8003b24:	bf00      	nop
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	e000e100 	.word	0xe000e100

08003b34 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	db0c      	blt.n	8003b60 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b46:	79fb      	ldrb	r3, [r7, #7]
 8003b48:	f003 021f 	and.w	r2, r3, #31
 8003b4c:	4907      	ldr	r1, [pc, #28]	; (8003b6c <__NVIC_SetPendingIRQ+0x38>)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	2001      	movs	r0, #1
 8003b56:	fa00 f202 	lsl.w	r2, r0, r2
 8003b5a:	3340      	adds	r3, #64	; 0x40
 8003b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000e100 	.word	0xe000e100

08003b70 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	db0c      	blt.n	8003b9c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4907      	ldr	r1, [pc, #28]	; (8003ba8 <__NVIC_ClearPendingIRQ+0x38>)
 8003b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2001      	movs	r0, #1
 8003b92:	fa00 f202 	lsl.w	r2, r0, r2
 8003b96:	3360      	adds	r3, #96	; 0x60
 8003b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b9c:	bf00      	nop
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000e100 	.word	0xe000e100

08003bac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	6039      	str	r1, [r7, #0]
 8003bb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	db0a      	blt.n	8003bd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	490c      	ldr	r1, [pc, #48]	; (8003bf8 <__NVIC_SetPriority+0x4c>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	0112      	lsls	r2, r2, #4
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	440b      	add	r3, r1
 8003bd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd4:	e00a      	b.n	8003bec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	4908      	ldr	r1, [pc, #32]	; (8003bfc <__NVIC_SetPriority+0x50>)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	f003 030f 	and.w	r3, r3, #15
 8003be2:	3b04      	subs	r3, #4
 8003be4:	0112      	lsls	r2, r2, #4
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	440b      	add	r3, r1
 8003bea:	761a      	strb	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr
 8003bf8:	e000e100 	.word	0xe000e100
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b089      	sub	sp, #36	; 0x24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f003 0307 	and.w	r3, r3, #7
 8003c12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f1c3 0307 	rsb	r3, r3, #7
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	bf28      	it	cs
 8003c1e:	2304      	movcs	r3, #4
 8003c20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	3304      	adds	r3, #4
 8003c26:	2b06      	cmp	r3, #6
 8003c28:	d902      	bls.n	8003c30 <NVIC_EncodePriority+0x30>
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	3b03      	subs	r3, #3
 8003c2e:	e000      	b.n	8003c32 <NVIC_EncodePriority+0x32>
 8003c30:	2300      	movs	r3, #0
 8003c32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	401a      	ands	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c52:	43d9      	mvns	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c58:	4313      	orrs	r3, r2
         );
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3724      	adds	r7, #36	; 0x24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
	...

08003c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c78:	d301      	bcc.n	8003c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00f      	b.n	8003c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <SysTick_Config+0x40>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c86:	210f      	movs	r1, #15
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c8c:	f7ff ff8e 	bl	8003bac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <SysTick_Config+0x40>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <SysTick_Config+0x40>)
 8003c98:	2207      	movs	r2, #7
 8003c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	e000e010 	.word	0xe000e010

08003cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fecb 	bl	8003a50 <__NVIC_SetPriorityGrouping>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd0:	f7ff fee2 	bl	8003a98 <__NVIC_GetPriorityGrouping>
 8003cd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	68b9      	ldr	r1, [r7, #8]
 8003cda:	6978      	ldr	r0, [r7, #20]
 8003cdc:	f7ff ff90 	bl	8003c00 <NVIC_EncodePriority>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7ff ff5f 	bl	8003bac <__NVIC_SetPriority>
}
 8003cee:	bf00      	nop
 8003cf0:	3718      	adds	r7, #24
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b082      	sub	sp, #8
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff fed5 	bl	8003ab4 <__NVIC_EnableIRQ>
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff fee5 	bl	8003af0 <__NVIC_DisableIRQ>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ff96 	bl	8003c68 <SysTick_Config>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff feed 	bl	8003b34 <__NVIC_SetPendingIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff fefd 	bl	8003b70 <__NVIC_ClearPendingIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
	...

08003d80 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e08e      	b.n	8003eb0 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b47      	ldr	r3, [pc, #284]	; (8003eb8 <HAL_DMA_Init+0x138>)
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d80f      	bhi.n	8003dbe <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	4b45      	ldr	r3, [pc, #276]	; (8003ebc <HAL_DMA_Init+0x13c>)
 8003da6:	4413      	add	r3, r2
 8003da8:	4a45      	ldr	r2, [pc, #276]	; (8003ec0 <HAL_DMA_Init+0x140>)
 8003daa:	fba2 2303 	umull	r2, r3, r2, r3
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	009a      	lsls	r2, r3, #2
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <HAL_DMA_Init+0x144>)
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
 8003dbc:	e00e      	b.n	8003ddc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	4b40      	ldr	r3, [pc, #256]	; (8003ec8 <HAL_DMA_Init+0x148>)
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4a3d      	ldr	r2, [pc, #244]	; (8003ec0 <HAL_DMA_Init+0x140>)
 8003dca:	fba2 2303 	umull	r2, r3, r2, r3
 8003dce:	091b      	lsrs	r3, r3, #4
 8003dd0:	009a      	lsls	r2, r3, #2
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a3c      	ldr	r2, [pc, #240]	; (8003ecc <HAL_DMA_Init+0x14c>)
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fa16 	bl	8004260 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e3c:	d102      	bne.n	8003e44 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e4c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8003e50:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e5a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d010      	beq.n	8003e86 <HAL_DMA_Init+0x106>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d80c      	bhi.n	8003e86 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa35 	bl	80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	2200      	movs	r2, #0
 8003e78:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e82:	605a      	str	r2, [r3, #4]
 8003e84:	e008      	b.n	8003e98 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40020407 	.word	0x40020407
 8003ebc:	bffdfff8 	.word	0xbffdfff8
 8003ec0:	cccccccd 	.word	0xcccccccd
 8003ec4:	40020000 	.word	0x40020000
 8003ec8:	bffdfbf8 	.word	0xbffdfbf8
 8003ecc:	40020400 	.word	0x40020400

08003ed0 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]
 8003edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_DMA_Start_IT+0x20>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e066      	b.n	8003fbe <HAL_DMA_Start_IT+0xee>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d155      	bne.n	8003fb0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2202      	movs	r2, #2
 8003f08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0201 	bic.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	68b9      	ldr	r1, [r7, #8]
 8003f28:	68f8      	ldr	r0, [r7, #12]
 8003f2a:	f000 f95a 	bl	80041e2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d008      	beq.n	8003f48 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f042 020e 	orr.w	r2, r2, #14
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	e00f      	b.n	8003f68 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 0204 	bic.w	r2, r2, #4
 8003f56:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f042 020a 	orr.w	r2, r2, #10
 8003f66:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f84:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d007      	beq.n	8003f9e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f042 0201 	orr.w	r2, r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	e005      	b.n	8003fbc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003fb8:	2302      	movs	r3, #2
 8003fba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d005      	beq.n	8003fea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2204      	movs	r2, #4
 8003fe2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
 8003fe8:	e047      	b.n	800407a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 020e 	bic.w	r2, r2, #14
 8003ff8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0201 	bic.w	r2, r2, #1
 8004008:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004018:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f003 021c 	and.w	r2, r3, #28
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	2101      	movs	r1, #1
 8004028:	fa01 f202 	lsl.w	r2, r1, r2
 800402c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004036:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800404a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800404e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004058:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	4798      	blx	r3
    }
  }
  return status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	f003 031c 	and.w	r3, r3, #28
 80040a4:	2204      	movs	r2, #4
 80040a6:	409a      	lsls	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4013      	ands	r3, r2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d026      	beq.n	80040fe <HAL_DMA_IRQHandler+0x7a>
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f003 0304 	and.w	r3, r3, #4
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d021      	beq.n	80040fe <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0320 	and.w	r3, r3, #32
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d107      	bne.n	80040d8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0204 	bic.w	r2, r2, #4
 80040d6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040dc:	f003 021c 	and.w	r2, r3, #28
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	2104      	movs	r1, #4
 80040e6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ea:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d071      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80040fc:	e06c      	b.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004102:	f003 031c 	and.w	r3, r3, #28
 8004106:	2202      	movs	r2, #2
 8004108:	409a      	lsls	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4013      	ands	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d02e      	beq.n	8004170 <HAL_DMA_IRQHandler+0xec>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d029      	beq.n	8004170 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10b      	bne.n	8004142 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f022 020a 	bic.w	r2, r2, #10
 8004138:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	f003 021c 	and.w	r2, r3, #28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414e:	2102      	movs	r1, #2
 8004150:	fa01 f202 	lsl.w	r2, r1, r2
 8004154:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	2b00      	cmp	r3, #0
 8004164:	d038      	beq.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800416e:	e033      	b.n	80041d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004174:	f003 031c 	and.w	r3, r3, #28
 8004178:	2208      	movs	r2, #8
 800417a:	409a      	lsls	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d02a      	beq.n	80041da <HAL_DMA_IRQHandler+0x156>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d025      	beq.n	80041da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 020e 	bic.w	r2, r2, #14
 800419c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f003 021c 	and.w	r2, r3, #28
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f202 	lsl.w	r2, r1, r2
 80041b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2201      	movs	r2, #1
 80041b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d004      	beq.n	80041da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
}
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	60f8      	str	r0, [r7, #12]
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041f8:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004210:	f003 021c 	and.w	r2, r3, #28
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	2101      	movs	r1, #1
 800421a:	fa01 f202 	lsl.w	r2, r1, r2
 800421e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b10      	cmp	r3, #16
 800422e:	d108      	bne.n	8004242 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004240:	e007      	b.n	8004252 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	60da      	str	r2, [r3, #12]
}
 8004252:	bf00      	nop
 8004254:	3714      	adds	r7, #20
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	461a      	mov	r2, r3
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004270:	429a      	cmp	r2, r3
 8004272:	d80a      	bhi.n	800428a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	089b      	lsrs	r3, r3, #2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004280:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	6493      	str	r3, [r2, #72]	; 0x48
 8004288:	e007      	b.n	800429a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	009a      	lsls	r2, r3, #2
 8004292:	4b0f      	ldr	r3, [pc, #60]	; (80042d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004294:	4413      	add	r3, r2
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	3b08      	subs	r3, #8
 80042a2:	4a0c      	ldr	r2, [pc, #48]	; (80042d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80042a4:	fba2 2303 	umull	r2, r3, r2, r3
 80042a8:	091b      	lsrs	r3, r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80042b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f003 031f 	and.w	r3, r3, #31
 80042b8:	2201      	movs	r2, #1
 80042ba:	409a      	lsls	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	40020407 	.word	0x40020407
 80042d0:	4002081c 	.word	0x4002081c
 80042d4:	cccccccd 	.word	0xcccccccd
 80042d8:	40020880 	.word	0x40020880

080042dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042dc:	b480      	push	{r7}
 80042de:	b085      	sub	sp, #20
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4b0b      	ldr	r3, [pc, #44]	; (8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a09      	ldr	r2, [pc, #36]	; (8004324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8004300:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	3b01      	subs	r3, #1
 8004306:	f003 0303 	and.w	r3, r3, #3
 800430a:	2201      	movs	r2, #1
 800430c:	409a      	lsls	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004312:	bf00      	nop
 8004314:	3714      	adds	r7, #20
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	1000823f 	.word	0x1000823f
 8004324:	40020940 	.word	0x40020940

08004328 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b01      	cmp	r3, #1
 800433c:	d12b      	bne.n	8004396 <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_DMAEx_ConfigMuxSync+0x24>
 8004348:	2302      	movs	r3, #2
 800434a:	e025      	b.n	8004398 <HAL_DMAEx_ConfigMuxSync+0x70>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	4b12      	ldr	r3, [pc, #72]	; (80043a4 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 800435c:	4013      	ands	r3, r2
 800435e:	683a      	ldr	r2, [r7, #0]
 8004360:	6811      	ldr	r1, [r2, #0]
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	68d2      	ldr	r2, [r2, #12]
 8004366:	3a01      	subs	r2, #1
 8004368:	04d2      	lsls	r2, r2, #19
 800436a:	4311      	orrs	r1, r2
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	6852      	ldr	r2, [r2, #4]
 8004370:	4311      	orrs	r1, r2
 8004372:	683a      	ldr	r2, [r7, #0]
 8004374:	7a12      	ldrb	r2, [r2, #8]
 8004376:	0412      	lsls	r2, r2, #16
 8004378:	4311      	orrs	r1, r2
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	7a52      	ldrb	r2, [r2, #9]
 800437e:	0252      	lsls	r2, r2, #9
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004386:	430b      	orrs	r3, r1
 8004388:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	e000      	b.n	8004398 <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
  }
}
 8004398:	4618      	mov	r0, r3
 800439a:	370c      	adds	r7, #12
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	e000fdff 	.word	0xe000fdff

080043a8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80043b2:	2300      	movs	r3, #0
 80043b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80043b6:	e14c      	b.n	8004652 <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2101      	movs	r1, #1
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	4013      	ands	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f000 813e 	beq.w	800464c <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d00b      	beq.n	80043f0 <HAL_GPIO_Init+0x48>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d007      	beq.n	80043f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80043e4:	2b11      	cmp	r3, #17
 80043e6:	d003      	beq.n	80043f0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b12      	cmp	r3, #18
 80043ee:	d130      	bne.n	8004452 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	2203      	movs	r2, #3
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	43db      	mvns	r3, r3
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4013      	ands	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004426:	2201      	movs	r2, #1
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43db      	mvns	r3, r3
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	4013      	ands	r3, r2
 8004434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0201 	and.w	r2, r3, #1
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	2203      	movs	r2, #3
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43db      	mvns	r3, r3
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4013      	ands	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	fa02 f303 	lsl.w	r3, r2, r3
 8004476:	693a      	ldr	r2, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d003      	beq.n	8004492 <HAL_GPIO_Init+0xea>
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b12      	cmp	r3, #18
 8004490:	d123      	bne.n	80044da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	08da      	lsrs	r2, r3, #3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3208      	adds	r2, #8
 800449a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800449e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	220f      	movs	r2, #15
 80044aa:	fa02 f303 	lsl.w	r3, r2, r3
 80044ae:	43db      	mvns	r3, r3
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	4013      	ands	r3, r2
 80044b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	08da      	lsrs	r2, r3, #3
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3208      	adds	r2, #8
 80044d4:	6939      	ldr	r1, [r7, #16]
 80044d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	2203      	movs	r2, #3
 80044e6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4013      	ands	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f003 0203 	and.w	r2, r3, #3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	f000 8098 	beq.w	800464c <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800451c:	4a54      	ldr	r2, [pc, #336]	; (8004670 <HAL_GPIO_Init+0x2c8>)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	3302      	adds	r3, #2
 8004524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004528:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	220f      	movs	r2, #15
 8004534:	fa02 f303 	lsl.w	r3, r2, r3
 8004538:	43db      	mvns	r3, r3
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	4013      	ands	r3, r2
 800453e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004546:	d019      	beq.n	800457c <HAL_GPIO_Init+0x1d4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a4a      	ldr	r2, [pc, #296]	; (8004674 <HAL_GPIO_Init+0x2cc>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d013      	beq.n	8004578 <HAL_GPIO_Init+0x1d0>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a49      	ldr	r2, [pc, #292]	; (8004678 <HAL_GPIO_Init+0x2d0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00d      	beq.n	8004574 <HAL_GPIO_Init+0x1cc>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a48      	ldr	r2, [pc, #288]	; (800467c <HAL_GPIO_Init+0x2d4>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d007      	beq.n	8004570 <HAL_GPIO_Init+0x1c8>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a47      	ldr	r2, [pc, #284]	; (8004680 <HAL_GPIO_Init+0x2d8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d101      	bne.n	800456c <HAL_GPIO_Init+0x1c4>
 8004568:	2304      	movs	r3, #4
 800456a:	e008      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 800456c:	2307      	movs	r3, #7
 800456e:	e006      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 8004570:	2303      	movs	r3, #3
 8004572:	e004      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 8004574:	2302      	movs	r3, #2
 8004576:	e002      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 8004578:	2301      	movs	r3, #1
 800457a:	e000      	b.n	800457e <HAL_GPIO_Init+0x1d6>
 800457c:	2300      	movs	r3, #0
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	f002 0203 	and.w	r2, r2, #3
 8004584:	0092      	lsls	r2, r2, #2
 8004586:	4093      	lsls	r3, r2
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800458e:	4938      	ldr	r1, [pc, #224]	; (8004670 <HAL_GPIO_Init+0x2c8>)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	089b      	lsrs	r3, r3, #2
 8004594:	3302      	adds	r3, #2
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800459c:	4b39      	ldr	r3, [pc, #228]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 800459e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	43db      	mvns	r3, r3
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80045c2:	4a30      	ldr	r2, [pc, #192]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 80045ca:	4b2e      	ldr	r3, [pc, #184]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	43db      	mvns	r3, r3
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4013      	ands	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80045f0:	4a24      	ldr	r2, [pc, #144]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80045f8:	4b22      	ldr	r3, [pc, #136]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	43db      	mvns	r3, r3
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4013      	ands	r3, r2
 8004606:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800461c:	4a19      	ldr	r2, [pc, #100]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004622:	4b18      	ldr	r3, [pc, #96]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	43db      	mvns	r3, r3
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	4013      	ands	r3, r2
 8004630:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004646:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <HAL_GPIO_Init+0x2dc>)
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	3301      	adds	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	f47f aeab 	bne.w	80043b8 <HAL_GPIO_Init+0x10>
  }
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	40010000 	.word	0x40010000
 8004674:	48000400 	.word	0x48000400
 8004678:	48000800 	.word	0x48000800
 800467c:	48000c00 	.word	0x48000c00
 8004680:	48001000 	.word	0x48001000
 8004684:	58000800 	.word	0x58000800

08004688 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004688:	b480      	push	{r7}
 800468a:	b083      	sub	sp, #12
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	460b      	mov	r3, r1
 8004692:	807b      	strh	r3, [r7, #2]
 8004694:	4613      	mov	r3, r2
 8004696:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004698:	787b      	ldrb	r3, [r7, #1]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800469e:	887a      	ldrh	r2, [r7, #2]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80046a4:	e002      	b.n	80046ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80046a6:	887a      	ldrh	r2, [r7, #2]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	4603      	mov	r3, r0
 80046c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80046c2:	4b08      	ldr	r3, [pc, #32]	; (80046e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046c4:	68da      	ldr	r2, [r3, #12]
 80046c6:	88fb      	ldrh	r3, [r7, #6]
 80046c8:	4013      	ands	r3, r2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046ce:	4a05      	ldr	r2, [pc, #20]	; (80046e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046d0:	88fb      	ldrh	r3, [r7, #6]
 80046d2:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80046d4:	88fb      	ldrh	r3, [r7, #6]
 80046d6:	4618      	mov	r0, r3
 80046d8:	f7fc f953 	bl	8000982 <HAL_GPIO_EXTI_Callback>
  }
}
 80046dc:	bf00      	nop
 80046de:	3708      	adds	r7, #8
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	58000800 	.word	0x58000800

080046e8 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 80046ee:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_HSEM_IRQHandler+0x30>)
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 80046f4:	4b08      	ldr	r3, [pc, #32]	; (8004718 <HAL_HSEM_IRQHandler+0x30>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	43db      	mvns	r3, r3
 80046fc:	4906      	ldr	r1, [pc, #24]	; (8004718 <HAL_HSEM_IRQHandler+0x30>)
 80046fe:	4013      	ands	r3, r2
 8004700:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8004702:	4a05      	ldr	r2, [pc, #20]	; (8004718 <HAL_HSEM_IRQHandler+0x30>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f807 	bl	800471c <HAL_HSEM_FreeCallback>
}
 800470e:	bf00      	nop
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	58001500 	.word	0x58001500

0800471c <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800471c:	b480      	push	{r7}
 800471e:	b083      	sub	sp, #12
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800473a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800473e:	6013      	str	r3, [r2, #0]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	58000400 	.word	0x58000400

08004750 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004750:	b480      	push	{r7}
 8004752:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004754:	4b04      	ldr	r3, [pc, #16]	; (8004768 <HAL_PWREx_GetVoltageRange+0x18>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 800475c:	4618      	mov	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	58000400 	.word	0x58000400

0800476c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800477a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800477e:	d101      	bne.n	8004784 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <LL_RCC_HSE_Enable>:
{
 8004790:	b480      	push	{r7}
 8004792:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800479e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047a2:	6013      	str	r3, [r2, #0]
}
 80047a4:	bf00      	nop
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_RCC_HSE_Disable>:
{
 80047ae:	b480      	push	{r7}
 80047b0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80047b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
}
 80047c2:	bf00      	nop
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <LL_RCC_HSE_IsReady>:
{
 80047cc:	b480      	push	{r7}
 80047ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047de:	d101      	bne.n	80047e4 <LL_RCC_HSE_IsReady+0x18>
 80047e0:	2301      	movs	r3, #1
 80047e2:	e000      	b.n	80047e6 <LL_RCC_HSE_IsReady+0x1a>
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <LL_RCC_HSI_Enable>:
{
 80047f0:	b480      	push	{r7}
 80047f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80047f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80047fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004802:	6013      	str	r3, [r2, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <LL_RCC_HSI_Disable>:
{
 800480e:	b480      	push	{r7}
 8004810:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004812:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800481c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004820:	6013      	str	r3, [r2, #0]
}
 8004822:	bf00      	nop
 8004824:	46bd      	mov	sp, r7
 8004826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482a:	4770      	bx	lr

0800482c <LL_RCC_HSI_IsReady>:
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8004830:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800483e:	d101      	bne.n	8004844 <LL_RCC_HSI_IsReady+0x18>
 8004840:	2301      	movs	r3, #1
 8004842:	e000      	b.n	8004846 <LL_RCC_HSI_IsReady+0x1a>
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <LL_RCC_HSI_SetCalibTrimming>:
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8004858:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	061b      	lsls	r3, r3, #24
 8004866:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486a:	4313      	orrs	r3, r2
 800486c:	604b      	str	r3, [r1, #4]
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <LL_RCC_HSI48_Enable>:
{
 800487a:	b480      	push	{r7}
 800487c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800487e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004882:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004886:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8004892:	bf00      	nop
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <LL_RCC_HSI48_Disable>:
{
 800489c:	b480      	push	{r7}
 800489e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80048a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <LL_RCC_HSI48_IsReady>:
{
 80048be:	b480      	push	{r7}
 80048c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 80048c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d101      	bne.n	80048d6 <LL_RCC_HSI48_IsReady+0x18>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e000      	b.n	80048d8 <LL_RCC_HSI48_IsReady+0x1a>
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr

080048e2 <LL_RCC_LSE_Enable>:
{
 80048e2:	b480      	push	{r7}
 80048e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80048e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80048fa:	bf00      	nop
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <LL_RCC_LSE_Disable>:
{
 8004904:	b480      	push	{r7}
 8004906:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004914:	f023 0301 	bic.w	r3, r3, #1
 8004918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800491c:	bf00      	nop
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <LL_RCC_LSE_EnableBypass>:
{
 8004926:	b480      	push	{r7}
 8004928:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800492a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800493e:	bf00      	nop
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <LL_RCC_LSE_DisableBypass>:
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800494c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004958:	f023 0304 	bic.w	r3, r3, #4
 800495c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004960:	bf00      	nop
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <LL_RCC_LSE_IsReady>:
{
 800496a:	b480      	push	{r7}
 800496c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800496e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d101      	bne.n	8004982 <LL_RCC_LSE_IsReady+0x18>
 800497e:	2301      	movs	r3, #1
 8004980:	e000      	b.n	8004984 <LL_RCC_LSE_IsReady+0x1a>
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <LL_RCC_LSI1_Enable>:
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800499a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800499e:	f043 0301 	orr.w	r3, r3, #1
 80049a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80049a6:	bf00      	nop
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <LL_RCC_LSI1_Disable>:
{
 80049b0:	b480      	push	{r7}
 80049b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80049b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80049c0:	f023 0301 	bic.w	r3, r3, #1
 80049c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80049c8:	bf00      	nop
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <LL_RCC_LSI1_IsReady>:
{
 80049d2:	b480      	push	{r7}
 80049d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80049d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d101      	bne.n	80049ea <LL_RCC_LSI1_IsReady+0x18>
 80049e6:	2301      	movs	r3, #1
 80049e8:	e000      	b.n	80049ec <LL_RCC_LSI1_IsReady+0x1a>
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <LL_RCC_LSI2_Enable>:
{
 80049f6:	b480      	push	{r7}
 80049f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80049fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a06:	f043 0304 	orr.w	r3, r3, #4
 8004a0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a0e:	bf00      	nop
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <LL_RCC_LSI2_Disable>:
{
 8004a18:	b480      	push	{r7}
 8004a1a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8004a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a24:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a28:	f023 0304 	bic.w	r3, r3, #4
 8004a2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004a30:	bf00      	nop
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <LL_RCC_LSI2_IsReady>:
{
 8004a3a:	b480      	push	{r7}
 8004a3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8004a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d101      	bne.n	8004a52 <LL_RCC_LSI2_IsReady+0x18>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <LL_RCC_LSI2_IsReady+0x1a>
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr

08004a5e <LL_RCC_LSI2_SetTrimming>:
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8004a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a6e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <LL_RCC_MSI_Enable>:
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8004a90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a9a:	f043 0301 	orr.w	r3, r3, #1
 8004a9e:	6013      	str	r3, [r2, #0]
}
 8004aa0:	bf00      	nop
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <LL_RCC_MSI_Disable>:
{
 8004aaa:	b480      	push	{r7}
 8004aac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8004aae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	6013      	str	r3, [r2, #0]
}
 8004abe:	bf00      	nop
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <LL_RCC_MSI_IsReady>:
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8004acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d101      	bne.n	8004ade <LL_RCC_MSI_IsReady+0x16>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <LL_RCC_MSI_IsReady+0x18>
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <LL_RCC_MSI_SetRange>:
{
 8004aea:	b480      	push	{r7}
 8004aec:	b083      	sub	sp, #12
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8004af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004afc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr

08004b12 <LL_RCC_MSI_GetRange>:
{
 8004b12:	b480      	push	{r7}
 8004b14:	b083      	sub	sp, #12
 8004b16:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8004b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b22:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2bb0      	cmp	r3, #176	; 0xb0
 8004b28:	d901      	bls.n	8004b2e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8004b2a:	23b0      	movs	r3, #176	; 0xb0
 8004b2c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8004b2e:	687b      	ldr	r3, [r7, #4]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <LL_RCC_MSI_SetCalibTrimming>:
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b083      	sub	sp, #12
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8004b44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	021b      	lsls	r3, r3, #8
 8004b52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b56:	4313      	orrs	r3, r2
 8004b58:	604b      	str	r3, [r1, #4]
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <LL_RCC_SetSysClkSource>:
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f023 0203 	bic.w	r2, r3, #3
 8004b78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <LL_RCC_GetSysClkSource>:
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <LL_RCC_SetAHBPrescaler>:
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <LL_C2_RCC_SetAHBPrescaler>:
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bda:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004bee:	bf00      	nop
 8004bf0:	370c      	adds	r7, #12
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr

08004bfa <LL_RCC_SetAHB4Prescaler>:
{
 8004bfa:	b480      	push	{r7}
 8004bfc:	b083      	sub	sp, #12
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004c02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c06:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c0a:	f023 020f 	bic.w	r2, r3, #15
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <LL_RCC_SetAPB1Prescaler>:
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]
}
 8004c44:	bf00      	nop
 8004c46:	370c      	adds	r7, #12
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <LL_RCC_SetAPB2Prescaler>:
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	608b      	str	r3, [r1, #8]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <LL_RCC_GetAHBPrescaler>:
{
 8004c78:	b480      	push	{r7}
 8004c7a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <LL_RCC_GetAHB4Prescaler>:
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8004c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c98:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004c9c:	011b      	lsls	r3, r3, #4
 8004c9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <LL_RCC_GetAPB1Prescaler>:
{
 8004cac:	b480      	push	{r7}
 8004cae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004cb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <LL_RCC_GetAPB2Prescaler>:
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <LL_RCC_PLL_Enable>:
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cee:	6013      	str	r3, [r2, #0]
}
 8004cf0:	bf00      	nop
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <LL_RCC_PLL_Disable>:
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0c:	6013      	str	r3, [r2, #0]
}
 8004d0e:	bf00      	nop
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <LL_RCC_PLL_IsReady>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8004d1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d2a:	d101      	bne.n	8004d30 <LL_RCC_PLL_IsReady+0x18>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <LL_RCC_PLL_IsReady+0x1a>
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <LL_RCC_PLL_GetN>:
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d54:	4770      	bx	lr

08004d56 <LL_RCC_PLL_GetR>:
{
 8004d56:	b480      	push	{r7}
 8004d58:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004d5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr

08004d6e <LL_RCC_PLL_GetDivider>:
{
 8004d6e:	b480      	push	{r7}
 8004d70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <LL_RCC_PLL_GetMainSource>:
{
 8004d86:	b480      	push	{r7}
 8004d88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0303 	and.w	r3, r3, #3
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <LL_RCC_IsActiveFlag_HPRE>:
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8004da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004db0:	d101      	bne.n	8004db6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr

08004dc2 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8004dc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dd6:	d101      	bne.n	8004ddc <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e000      	b.n	8004dde <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8004dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004df0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfc:	d101      	bne.n	8004e02 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <LL_RCC_IsActiveFlag_PPRE1>:
{
 8004e0e:	b480      	push	{r7}
 8004e10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004e12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e20:	d101      	bne.n	8004e26 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <LL_RCC_IsActiveFlag_PPRE2>:
{
 8004e32:	b480      	push	{r7}
 8004e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e44:	d101      	bne.n	8004e4a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004e46:	2301      	movs	r3, #1
 8004e48:	e000      	b.n	8004e4c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e58:	b590      	push	{r4, r7, lr}
 8004e5a:	b08d      	sub	sp, #52	; 0x34
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e37e      	b.n	8005568 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 0320 	and.w	r3, r3, #32
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 8092 	beq.w	8004f9c <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e78:	f7ff fe89 	bl	8004b8e <LL_RCC_GetSysClkSource>
 8004e7c:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e7e:	f7ff ff82 	bl	8004d86 <LL_RCC_PLL_GetMainSource>
 8004e82:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_RCC_OscConfig+0x3e>
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	2b0c      	cmp	r3, #12
 8004e8e:	d14c      	bne.n	8004f2a <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8004e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d149      	bne.n	8004f2a <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e96:	f7ff fe17 	bl	8004ac8 <LL_RCC_MSI_IsReady>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_RCC_OscConfig+0x54>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e35d      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8004eb0:	f7ff fe2f 	bl	8004b12 <LL_RCC_MSI_GetRange>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	429c      	cmp	r4, r3
 8004eb8:	d914      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fd40 	bl	8005944 <RCC_SetFlashLatencyFromMSIRange>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d001      	beq.n	8004ece <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e34c      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7ff fe09 	bl	8004aea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff fe2d 	bl	8004b3c <LL_RCC_MSI_SetCalibTrimming>
 8004ee2:	e013      	b.n	8004f0c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7ff fdfe 	bl	8004aea <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff fe22 	bl	8004b3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fd21 	bl	8005944 <RCC_SetFlashLatencyFromMSIRange>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004f08:	2301      	movs	r3, #1
 8004f0a:	e32d      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004f0c:	f000 fcda 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 8004f10:	4602      	mov	r2, r0
 8004f12:	4bb3      	ldr	r3, [pc, #716]	; (80051e0 <HAL_RCC_OscConfig+0x388>)
 8004f14:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f16:	4bb3      	ldr	r3, [pc, #716]	; (80051e4 <HAL_RCC_OscConfig+0x38c>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fe fd1a 	bl	8003954 <HAL_InitTick>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d039      	beq.n	8004f9a <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e31e      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	69db      	ldr	r3, [r3, #28]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01e      	beq.n	8004f70 <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004f32:	f7ff fdab 	bl	8004a8c <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f36:	f7fe fd5b 	bl	80039f0 <HAL_GetTick>
 8004f3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f3c:	e008      	b.n	8004f50 <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f3e:	f7fe fd57 	bl	80039f0 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d901      	bls.n	8004f50 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e30b      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8004f50:	f7ff fdba 	bl	8004ac8 <LL_RCC_MSI_IsReady>
 8004f54:	4603      	mov	r3, r0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d0f1      	beq.n	8004f3e <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff fdc3 	bl	8004aea <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff fde7 	bl	8004b3c <LL_RCC_MSI_SetCalibTrimming>
 8004f6e:	e015      	b.n	8004f9c <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f70:	f7ff fd9b 	bl	8004aaa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f74:	f7fe fd3c 	bl	80039f0 <HAL_GetTick>
 8004f78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f7c:	f7fe fd38 	bl	80039f0 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e2ec      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8004f8e:	f7ff fd9b 	bl	8004ac8 <LL_RCC_MSI_IsReady>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f1      	bne.n	8004f7c <HAL_RCC_OscConfig+0x124>
 8004f98:	e000      	b.n	8004f9c <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d04e      	beq.n	8005046 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fa8:	f7ff fdf1 	bl	8004b8e <LL_RCC_GetSysClkSource>
 8004fac:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fae:	f7ff feea 	bl	8004d86 <LL_RCC_PLL_GetMainSource>
 8004fb2:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2b08      	cmp	r3, #8
 8004fb8:	d005      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x16e>
 8004fba:	6a3b      	ldr	r3, [r7, #32]
 8004fbc:	2b0c      	cmp	r3, #12
 8004fbe:	d10d      	bne.n	8004fdc <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	2b03      	cmp	r3, #3
 8004fc4:	d10a      	bne.n	8004fdc <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fc6:	f7ff fc01 	bl	80047cc <LL_RCC_HSE_IsReady>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d039      	beq.n	8005044 <HAL_RCC_OscConfig+0x1ec>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d135      	bne.n	8005044 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e2c5      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d102      	bne.n	8004fec <HAL_RCC_OscConfig+0x194>
 8004fe6:	f7ff fbd3 	bl	8004790 <LL_RCC_HSE_Enable>
 8004fea:	e001      	b.n	8004ff0 <HAL_RCC_OscConfig+0x198>
 8004fec:	f7ff fbdf 	bl	80047ae <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d012      	beq.n	800501e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff8:	f7fe fcfa 	bl	80039f0 <HAL_GetTick>
 8004ffc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005000:	f7fe fcf6 	bl	80039f0 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b64      	cmp	r3, #100	; 0x64
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e2aa      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005012:	f7ff fbdb 	bl	80047cc <LL_RCC_HSE_IsReady>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f1      	beq.n	8005000 <HAL_RCC_OscConfig+0x1a8>
 800501c:	e013      	b.n	8005046 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7fe fce7 	bl	80039f0 <HAL_GetTick>
 8005022:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005026:	f7fe fce3 	bl	80039f0 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b64      	cmp	r3, #100	; 0x64
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e297      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8005038:	f7ff fbc8 	bl	80047cc <LL_RCC_HSE_IsReady>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1f1      	bne.n	8005026 <HAL_RCC_OscConfig+0x1ce>
 8005042:	e000      	b.n	8005046 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d051      	beq.n	80050f6 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005052:	f7ff fd9c 	bl	8004b8e <LL_RCC_GetSysClkSource>
 8005056:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005058:	f7ff fe95 	bl	8004d86 <LL_RCC_PLL_GetMainSource>
 800505c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	2b04      	cmp	r3, #4
 8005062:	d005      	beq.n	8005070 <HAL_RCC_OscConfig+0x218>
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d113      	bne.n	8005092 <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d110      	bne.n	8005092 <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005070:	f7ff fbdc 	bl	800482c <LL_RCC_HSI_IsReady>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d005      	beq.n	8005086 <HAL_RCC_OscConfig+0x22e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e270      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	4618      	mov	r0, r3
 800508c:	f7ff fbe0 	bl	8004850 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005090:	e031      	b.n	80050f6 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d019      	beq.n	80050ce <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509a:	f7ff fba9 	bl	80047f0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800509e:	f7fe fca7 	bl	80039f0 <HAL_GetTick>
 80050a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80050a4:	e008      	b.n	80050b8 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fe fca3 	bl	80039f0 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	1ad3      	subs	r3, r2, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d901      	bls.n	80050b8 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e257      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 80050b8:	f7ff fbb8 	bl	800482c <LL_RCC_HSI_IsReady>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f1      	beq.n	80050a6 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fbc2 	bl	8004850 <LL_RCC_HSI_SetCalibTrimming>
 80050cc:	e013      	b.n	80050f6 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050ce:	f7ff fb9e 	bl	800480e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fe fc8d 	bl	80039f0 <HAL_GetTick>
 80050d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050da:	f7fe fc89 	bl	80039f0 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e23d      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 80050ec:	f7ff fb9e 	bl	800482c <LL_RCC_HSI_IsReady>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d1f1      	bne.n	80050da <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0308 	and.w	r3, r3, #8
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 80a3 	beq.w	8005256 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d076      	beq.n	8005206 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0310 	and.w	r3, r3, #16
 8005120:	2b00      	cmp	r3, #0
 8005122:	d046      	beq.n	80051b2 <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8005124:	f7ff fc55 	bl	80049d2 <LL_RCC_LSI1_IsReady>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d113      	bne.n	8005156 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800512e:	f7ff fc2e 	bl	800498e <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005132:	f7fe fc5d 	bl	80039f0 <HAL_GetTick>
 8005136:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800513a:	f7fe fc59 	bl	80039f0 <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e20d      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800514c:	f7ff fc41 	bl	80049d2 <LL_RCC_LSI1_IsReady>
 8005150:	4603      	mov	r3, r0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f1      	beq.n	800513a <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8005156:	f7ff fc4e 	bl	80049f6 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515a:	f7fe fc49 	bl	80039f0 <HAL_GetTick>
 800515e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005162:	f7fe fc45 	bl	80039f0 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b03      	cmp	r3, #3
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e1f9      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8005174:	f7ff fc61 	bl	8004a3a <LL_RCC_LSI2_IsReady>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d0f1      	beq.n	8005162 <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	4618      	mov	r0, r3
 8005184:	f7ff fc6b 	bl	8004a5e <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8005188:	f7ff fc12 	bl	80049b0 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800518c:	f7fe fc30 	bl	80039f0 <HAL_GetTick>
 8005190:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8005192:	e008      	b.n	80051a6 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8005194:	f7fe fc2c 	bl	80039f0 <HAL_GetTick>
 8005198:	4602      	mov	r2, r0
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	1ad3      	subs	r3, r2, r3
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d901      	bls.n	80051a6 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e1e0      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80051a6:	f7ff fc14 	bl	80049d2 <LL_RCC_LSI1_IsReady>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f1      	bne.n	8005194 <HAL_RCC_OscConfig+0x33c>
 80051b0:	e051      	b.n	8005256 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80051b2:	f7ff fbec 	bl	800498e <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b6:	f7fe fc1b 	bl	80039f0 <HAL_GetTick>
 80051ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80051be:	f7fe fc17 	bl	80039f0 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e1cb      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 80051d0:	f7ff fbff 	bl	80049d2 <LL_RCC_LSI1_IsReady>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0f1      	beq.n	80051be <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 80051da:	f7ff fc1d 	bl	8004a18 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 80051de:	e00c      	b.n	80051fa <HAL_RCC_OscConfig+0x3a2>
 80051e0:	20000034 	.word	0x20000034
 80051e4:	20000038 	.word	0x20000038
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80051e8:	f7fe fc02 	bl	80039f0 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e1b6      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 80051fa:	f7ff fc1e 	bl	8004a3a <LL_RCC_LSI2_IsReady>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1f1      	bne.n	80051e8 <HAL_RCC_OscConfig+0x390>
 8005204:	e027      	b.n	8005256 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8005206:	f7ff fc07 	bl	8004a18 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520a:	f7fe fbf1 	bl	80039f0 <HAL_GetTick>
 800520e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8005212:	f7fe fbed 	bl	80039f0 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b03      	cmp	r3, #3
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e1a1      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8005224:	f7ff fc09 	bl	8004a3a <LL_RCC_LSI2_IsReady>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f1      	bne.n	8005212 <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800522e:	f7ff fbbf 	bl	80049b0 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005232:	f7fe fbdd 	bl	80039f0 <HAL_GetTick>
 8005236:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800523a:	f7fe fbd9 	bl	80039f0 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e18d      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800524c:	f7ff fbc1 	bl	80049d2 <LL_RCC_LSI1_IsReady>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f1      	bne.n	800523a <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d05b      	beq.n	800531a <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005262:	4bb5      	ldr	r3, [pc, #724]	; (8005538 <HAL_RCC_OscConfig+0x6e0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800526a:	2b00      	cmp	r3, #0
 800526c:	d114      	bne.n	8005298 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800526e:	f7ff fa5f 	bl	8004730 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005272:	f7fe fbbd 	bl	80039f0 <HAL_GetTick>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005278:	e008      	b.n	800528c <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fe fbb9 	bl	80039f0 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d901      	bls.n	800528c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e16d      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528c:	4baa      	ldr	r3, [pc, #680]	; (8005538 <HAL_RCC_OscConfig+0x6e0>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d0f0      	beq.n	800527a <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d102      	bne.n	80052a6 <HAL_RCC_OscConfig+0x44e>
 80052a0:	f7ff fb1f 	bl	80048e2 <LL_RCC_LSE_Enable>
 80052a4:	e00c      	b.n	80052c0 <HAL_RCC_OscConfig+0x468>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	2b05      	cmp	r3, #5
 80052ac:	d104      	bne.n	80052b8 <HAL_RCC_OscConfig+0x460>
 80052ae:	f7ff fb3a 	bl	8004926 <LL_RCC_LSE_EnableBypass>
 80052b2:	f7ff fb16 	bl	80048e2 <LL_RCC_LSE_Enable>
 80052b6:	e003      	b.n	80052c0 <HAL_RCC_OscConfig+0x468>
 80052b8:	f7ff fb24 	bl	8004904 <LL_RCC_LSE_Disable>
 80052bc:	f7ff fb44 	bl	8004948 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d014      	beq.n	80052f2 <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052c8:	f7fe fb92 	bl	80039f0 <HAL_GetTick>
 80052cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80052ce:	e00a      	b.n	80052e6 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d0:	f7fe fb8e 	bl	80039f0 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	f241 3288 	movw	r2, #5000	; 0x1388
 80052de:	4293      	cmp	r3, r2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e140      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 80052e6:	f7ff fb40 	bl	800496a <LL_RCC_LSE_IsReady>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0ef      	beq.n	80052d0 <HAL_RCC_OscConfig+0x478>
 80052f0:	e013      	b.n	800531a <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052f2:	f7fe fb7d 	bl	80039f0 <HAL_GetTick>
 80052f6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80052f8:	e00a      	b.n	8005310 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052fa:	f7fe fb79 	bl	80039f0 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	f241 3288 	movw	r2, #5000	; 0x1388
 8005308:	4293      	cmp	r3, r2
 800530a:	d901      	bls.n	8005310 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 800530c:	2303      	movs	r3, #3
 800530e:	e12b      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005310:	f7ff fb2b 	bl	800496a <LL_RCC_LSE_IsReady>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ef      	bne.n	80052fa <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b00      	cmp	r3, #0
 8005324:	d02c      	beq.n	8005380 <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532a:	2b00      	cmp	r3, #0
 800532c:	d014      	beq.n	8005358 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800532e:	f7ff faa4 	bl	800487a <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005332:	f7fe fb5d 	bl	80039f0 <HAL_GetTick>
 8005336:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800533a:	f7fe fb59 	bl	80039f0 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e10d      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800534c:	f7ff fab7 	bl	80048be <LL_RCC_HSI48_IsReady>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f1      	beq.n	800533a <HAL_RCC_OscConfig+0x4e2>
 8005356:	e013      	b.n	8005380 <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005358:	f7ff faa0 	bl	800489c <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800535c:	f7fe fb48 	bl	80039f0 <HAL_GetTick>
 8005360:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005364:	f7fe fb44 	bl	80039f0 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0f8      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8005376:	f7ff faa2 	bl	80048be <LL_RCC_HSI48_IsReady>
 800537a:	4603      	mov	r3, r0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f1      	bne.n	8005364 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 80ee 	beq.w	8005566 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800538a:	f7ff fc00 	bl	8004b8e <LL_RCC_GetSysClkSource>
 800538e:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8005390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005394:	68db      	ldr	r3, [r3, #12]
 8005396:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539c:	2b02      	cmp	r3, #2
 800539e:	f040 80af 	bne.w	8005500 <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f003 0203 	and.w	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d123      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d11c      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	0a1b      	lsrs	r3, r3, #8
 80053c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d114      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80053d8:	429a      	cmp	r2, r3
 80053da:	d10d      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d106      	bne.n	80053f8 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d05d      	beq.n	80054b4 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b0c      	cmp	r3, #12
 80053fc:	d058      	beq.n	80054b0 <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80053fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e0ab      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005410:	f7ff fc73 	bl	8004cfa <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005414:	f7fe faec 	bl	80039f0 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541c:	f7fe fae8 	bl	80039f0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e09c      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800542e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ef      	bne.n	800541c <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800543c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	4b3e      	ldr	r3, [pc, #248]	; (800553c <HAL_RCC_OscConfig+0x6e4>)
 8005444:	4013      	ands	r3, r2
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800544e:	4311      	orrs	r1, r2
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005454:	0212      	lsls	r2, r2, #8
 8005456:	4311      	orrs	r1, r2
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800545c:	4311      	orrs	r1, r2
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005462:	4311      	orrs	r1, r2
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005468:	430a      	orrs	r2, r1
 800546a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800546e:	4313      	orrs	r3, r2
 8005470:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005472:	f7ff fc33 	bl	8004cdc <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005484:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005486:	f7fe fab3 	bl	80039f0 <HAL_GetTick>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800548c:	e008      	b.n	80054a0 <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800548e:	f7fe faaf 	bl	80039f0 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	2b02      	cmp	r3, #2
 800549a:	d901      	bls.n	80054a0 <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e063      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d0ef      	beq.n	800548e <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80054ae:	e05a      	b.n	8005566 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e059      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d151      	bne.n	8005566 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80054c2:	f7ff fc0b 	bl	8004cdc <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80054c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80054d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054d4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80054d6:	f7fe fa8b 	bl	80039f0 <HAL_GetTick>
 80054da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054de:	f7fe fa87 	bl	80039f0 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e03b      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d0ef      	beq.n	80054de <HAL_RCC_OscConfig+0x686>
 80054fe:	e032      	b.n	8005566 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b0c      	cmp	r3, #12
 8005504:	d02d      	beq.n	8005562 <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	f7ff fbf8 	bl	8004cfa <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800550a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005514:	f023 0303 	bic.w	r3, r3, #3
 8005518:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800551a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005524:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8005528:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800552e:	f7fe fa5f 	bl	80039f0 <HAL_GetTick>
 8005532:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005534:	e00d      	b.n	8005552 <HAL_RCC_OscConfig+0x6fa>
 8005536:	bf00      	nop
 8005538:	58000400 	.word	0x58000400
 800553c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005540:	f7fe fa56 	bl	80039f0 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e00a      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005552:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d1ef      	bne.n	8005540 <HAL_RCC_OscConfig+0x6e8>
 8005560:	e001      	b.n	8005566 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e000      	b.n	8005568 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	3734      	adds	r7, #52	; 0x34
 800556c:	46bd      	mov	sp, r7
 800556e:	bd90      	pop	{r4, r7, pc}

08005570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e12d      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005584:	4b98      	ldr	r3, [pc, #608]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	429a      	cmp	r2, r3
 8005590:	d91b      	bls.n	80055ca <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005592:	4b95      	ldr	r3, [pc, #596]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f023 0207 	bic.w	r2, r3, #7
 800559a:	4993      	ldr	r1, [pc, #588]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	4313      	orrs	r3, r2
 80055a0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a2:	f7fe fa25 	bl	80039f0 <HAL_GetTick>
 80055a6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055a8:	e008      	b.n	80055bc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80055aa:	f7fe fa21 	bl	80039f0 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b02      	cmp	r3, #2
 80055b6:	d901      	bls.n	80055bc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e111      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055bc:	4b8a      	ldr	r3, [pc, #552]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d1ef      	bne.n	80055aa <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0302 	and.w	r3, r3, #2
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d016      	beq.n	8005604 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fae3 	bl	8004ba6 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80055e0:	f7fe fa06 	bl	80039f0 <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80055e8:	f7fe fa02 	bl	80039f0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e0f2      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80055fa:	f7ff fbd0 	bl	8004d9e <LL_RCC_IsActiveFlag_HPRE>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f1      	beq.n	80055e8 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0320 	and.w	r3, r3, #32
 800560c:	2b00      	cmp	r3, #0
 800560e:	d016      	beq.n	800563e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	695b      	ldr	r3, [r3, #20]
 8005614:	4618      	mov	r0, r3
 8005616:	f7ff fada 	bl	8004bce <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800561a:	f7fe f9e9 	bl	80039f0 <HAL_GetTick>
 800561e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005622:	f7fe f9e5 	bl	80039f0 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e0d5      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8005634:	f7ff fbc5 	bl	8004dc2 <LL_RCC_IsActiveFlag_C2HPRE>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d0f1      	beq.n	8005622 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b00      	cmp	r3, #0
 8005648:	d016      	beq.n	8005678 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	4618      	mov	r0, r3
 8005650:	f7ff fad3 	bl	8004bfa <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005654:	f7fe f9cc 	bl	80039f0 <HAL_GetTick>
 8005658:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800565a:	e008      	b.n	800566e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800565c:	f7fe f9c8 	bl	80039f0 <HAL_GetTick>
 8005660:	4602      	mov	r2, r0
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	1ad3      	subs	r3, r2, r3
 8005666:	2b02      	cmp	r3, #2
 8005668:	d901      	bls.n	800566e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e0b8      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800566e:	f7ff fbbb 	bl	8004de8 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f1      	beq.n	800565c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d016      	beq.n	80056b2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4618      	mov	r0, r3
 800568a:	f7ff facd 	bl	8004c28 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800568e:	f7fe f9af 	bl	80039f0 <HAL_GetTick>
 8005692:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005696:	f7fe f9ab 	bl	80039f0 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e09b      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80056a8:	f7ff fbb1 	bl	8004e0e <LL_RCC_IsActiveFlag_PPRE1>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d0f1      	beq.n	8005696 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d017      	beq.n	80056ee <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	00db      	lsls	r3, r3, #3
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff fac3 	bl	8004c50 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80056ca:	f7fe f991 	bl	80039f0 <HAL_GetTick>
 80056ce:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80056d2:	f7fe f98d 	bl	80039f0 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e07d      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80056e4:	f7ff fba5 	bl	8004e32 <LL_RCC_IsActiveFlag_PPRE2>
 80056e8:	4603      	mov	r3, r0
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d0f1      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d043      	beq.n	8005782 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b02      	cmp	r3, #2
 8005700:	d106      	bne.n	8005710 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005702:	f7ff f863 	bl	80047cc <LL_RCC_HSE_IsReady>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d11e      	bne.n	800574a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e067      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d106      	bne.n	8005726 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005718:	f7ff fafe 	bl	8004d18 <LL_RCC_PLL_IsReady>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d113      	bne.n	800574a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	e05c      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800572e:	f7ff f9cb 	bl	8004ac8 <LL_RCC_MSI_IsReady>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d108      	bne.n	800574a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e051      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800573c:	f7ff f876 	bl	800482c <LL_RCC_HSI_IsReady>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	e04a      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fa09 	bl	8004b66 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005754:	f7fe f94c 	bl	80039f0 <HAL_GetTick>
 8005758:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800575a:	e00a      	b.n	8005772 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800575c:	f7fe f948 	bl	80039f0 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	f241 3288 	movw	r2, #5000	; 0x1388
 800576a:	4293      	cmp	r3, r2
 800576c:	d901      	bls.n	8005772 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e036      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005772:	f7ff fa0c 	bl	8004b8e <LL_RCC_GetSysClkSource>
 8005776:	4602      	mov	r2, r0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	429a      	cmp	r2, r3
 8005780:	d1ec      	bne.n	800575c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005782:	4b19      	ldr	r3, [pc, #100]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0307 	and.w	r3, r3, #7
 800578a:	683a      	ldr	r2, [r7, #0]
 800578c:	429a      	cmp	r2, r3
 800578e:	d21b      	bcs.n	80057c8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005790:	4b15      	ldr	r3, [pc, #84]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f023 0207 	bic.w	r2, r3, #7
 8005798:	4913      	ldr	r1, [pc, #76]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057a0:	f7fe f926 	bl	80039f0 <HAL_GetTick>
 80057a4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80057a8:	f7fe f922 	bl	80039f0 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e012      	b.n	80057e0 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80057ba:	4b0b      	ldr	r3, [pc, #44]	; (80057e8 <HAL_RCC_ClockConfig+0x278>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d1ef      	bne.n	80057a8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80057c8:	f000 f87c 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b07      	ldr	r3, [pc, #28]	; (80057ec <HAL_RCC_ClockConfig+0x27c>)
 80057d0:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 80057d2:	f7fe f919 	bl	8003a08 <HAL_GetTickPrio>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4618      	mov	r0, r3
 80057da:	f7fe f8bb 	bl	8003954 <HAL_InitTick>
 80057de:	4603      	mov	r3, r0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	58004000 	.word	0x58004000
 80057ec:	20000034 	.word	0x20000034

080057f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80057f0:	b590      	push	{r4, r7, lr}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057f6:	f7ff f9ca 	bl	8004b8e <LL_RCC_GetSysClkSource>
 80057fa:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d10a      	bne.n	8005818 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8005802:	f7ff f986 	bl	8004b12 <LL_RCC_MSI_GetRange>
 8005806:	4603      	mov	r3, r0
 8005808:	091b      	lsrs	r3, r3, #4
 800580a:	f003 030f 	and.w	r3, r3, #15
 800580e:	4a2a      	ldr	r2, [pc, #168]	; (80058b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005810:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005814:	60fb      	str	r3, [r7, #12]
 8005816:	e04a      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2b04      	cmp	r3, #4
 800581c:	d102      	bne.n	8005824 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800581e:	4b27      	ldr	r3, [pc, #156]	; (80058bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e044      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b08      	cmp	r3, #8
 8005828:	d10a      	bne.n	8005840 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800582a:	f7fe ff9f 	bl	800476c <LL_RCC_HSE_IsEnabledDiv2>
 800582e:	4603      	mov	r3, r0
 8005830:	2b01      	cmp	r3, #1
 8005832:	d102      	bne.n	800583a <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005834:	4b21      	ldr	r3, [pc, #132]	; (80058bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	e039      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800583a:	4b21      	ldr	r3, [pc, #132]	; (80058c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	e036      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005840:	f7ff faa1 	bl	8004d86 <LL_RCC_PLL_GetMainSource>
 8005844:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	2b02      	cmp	r3, #2
 800584a:	d002      	beq.n	8005852 <HAL_RCC_GetSysClockFreq+0x62>
 800584c:	2b03      	cmp	r3, #3
 800584e:	d003      	beq.n	8005858 <HAL_RCC_GetSysClockFreq+0x68>
 8005850:	e00d      	b.n	800586e <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005852:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005854:	60bb      	str	r3, [r7, #8]
        break;
 8005856:	e015      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005858:	f7fe ff88 	bl	800476c <LL_RCC_HSE_IsEnabledDiv2>
 800585c:	4603      	mov	r3, r0
 800585e:	2b01      	cmp	r3, #1
 8005860:	d102      	bne.n	8005868 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_RCC_GetSysClockFreq+0xcc>)
 8005864:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005866:	e00d      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800586a:	60bb      	str	r3, [r7, #8]
        break;
 800586c:	e00a      	b.n	8005884 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800586e:	f7ff f950 	bl	8004b12 <LL_RCC_MSI_GetRange>
 8005872:	4603      	mov	r3, r0
 8005874:	091b      	lsrs	r3, r3, #4
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	4a0f      	ldr	r2, [pc, #60]	; (80058b8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800587c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005880:	60bb      	str	r3, [r7, #8]
        break;
 8005882:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8005884:	f7ff fa5a 	bl	8004d3c <LL_RCC_PLL_GetN>
 8005888:	4602      	mov	r2, r0
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	fb03 f402 	mul.w	r4, r3, r2
 8005890:	f7ff fa6d 	bl	8004d6e <LL_RCC_PLL_GetDivider>
 8005894:	4603      	mov	r3, r0
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	3301      	adds	r3, #1
 800589a:	fbb4 f4f3 	udiv	r4, r4, r3
 800589e:	f7ff fa5a 	bl	8004d56 <LL_RCC_PLL_GetR>
 80058a2:	4603      	mov	r3, r0
 80058a4:	0f5b      	lsrs	r3, r3, #29
 80058a6:	3301      	adds	r3, #1
 80058a8:	fbb4 f3f3 	udiv	r3, r4, r3
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 80058ae:	68fb      	ldr	r3, [r7, #12]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	0800bdc4 	.word	0x0800bdc4
 80058bc:	00f42400 	.word	0x00f42400
 80058c0:	01e84800 	.word	0x01e84800

080058c4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c4:	b598      	push	{r3, r4, r7, lr}
 80058c6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80058c8:	f7ff ff92 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 80058cc:	4604      	mov	r4, r0
 80058ce:	f7ff f9d3 	bl	8004c78 <LL_RCC_GetAHBPrescaler>
 80058d2:	4603      	mov	r3, r0
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	4a03      	ldr	r2, [pc, #12]	; (80058e8 <HAL_RCC_GetHCLKFreq+0x24>)
 80058dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058e0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	bd98      	pop	{r3, r4, r7, pc}
 80058e8:	0800bd64 	.word	0x0800bd64

080058ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058ec:	b598      	push	{r3, r4, r7, lr}
 80058ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80058f0:	f7ff ffe8 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 80058f4:	4604      	mov	r4, r0
 80058f6:	f7ff f9d9 	bl	8004cac <LL_RCC_GetAPB1Prescaler>
 80058fa:	4603      	mov	r3, r0
 80058fc:	0a1b      	lsrs	r3, r3, #8
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	4a04      	ldr	r2, [pc, #16]	; (8005914 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8005910:	4618      	mov	r0, r3
 8005912:	bd98      	pop	{r3, r4, r7, pc}
 8005914:	0800bda4 	.word	0x0800bda4

08005918 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005918:	b598      	push	{r3, r4, r7, lr}
 800591a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800591c:	f7ff ffd2 	bl	80058c4 <HAL_RCC_GetHCLKFreq>
 8005920:	4604      	mov	r4, r0
 8005922:	f7ff f9cf 	bl	8004cc4 <LL_RCC_GetAPB2Prescaler>
 8005926:	4603      	mov	r3, r0
 8005928:	0adb      	lsrs	r3, r3, #11
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	4a04      	ldr	r2, [pc, #16]	; (8005940 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005934:	f003 031f 	and.w	r3, r3, #31
 8005938:	fa24 f303 	lsr.w	r3, r4, r3
}
 800593c:	4618      	mov	r0, r3
 800593e:	bd98      	pop	{r3, r4, r7, pc}
 8005940:	0800bda4 	.word	0x0800bda4

08005944 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8005944:	b590      	push	{r4, r7, lr}
 8005946:	b085      	sub	sp, #20
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2bb0      	cmp	r3, #176	; 0xb0
 8005950:	d903      	bls.n	800595a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8005952:	4b15      	ldr	r3, [pc, #84]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005956:	60fb      	str	r3, [r7, #12]
 8005958:	e007      	b.n	800596a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	091b      	lsrs	r3, r3, #4
 800595e:	f003 030f 	and.w	r3, r3, #15
 8005962:	4a11      	ldr	r2, [pc, #68]	; (80059a8 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8005964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005968:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800596a:	f7ff f991 	bl	8004c90 <LL_RCC_GetAHB4Prescaler>
 800596e:	4603      	mov	r3, r0
 8005970:	091b      	lsrs	r3, r3, #4
 8005972:	f003 030f 	and.w	r3, r3, #15
 8005976:	4a0d      	ldr	r2, [pc, #52]	; (80059ac <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8005978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005982:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	4a0a      	ldr	r2, [pc, #40]	; (80059b0 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8005988:	fba2 2303 	umull	r2, r3, r2, r3
 800598c:	0c9c      	lsrs	r4, r3, #18
 800598e:	f7fe fedf 	bl	8004750 <HAL_PWREx_GetVoltageRange>
 8005992:	4603      	mov	r3, r0
 8005994:	4619      	mov	r1, r3
 8005996:	4620      	mov	r0, r4
 8005998:	f000 f80c 	bl	80059b4 <RCC_SetFlashLatency>
 800599c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd90      	pop	{r4, r7, pc}
 80059a6:	bf00      	nop
 80059a8:	0800bdc4 	.word	0x0800bdc4
 80059ac:	0800bd64 	.word	0x0800bd64
 80059b0:	431bde83 	.word	0x431bde83

080059b4 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80059b4:	b590      	push	{r4, r7, lr}
 80059b6:	b093      	sub	sp, #76	; 0x4c
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80059be:	4b39      	ldr	r3, [pc, #228]	; (8005aa4 <RCC_SetFlashLatency+0xf0>)
 80059c0:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80059c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 80059ca:	4a37      	ldr	r2, [pc, #220]	; (8005aa8 <RCC_SetFlashLatency+0xf4>)
 80059cc:	f107 031c 	add.w	r3, r7, #28
 80059d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80059d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 80059d6:	4b35      	ldr	r3, [pc, #212]	; (8005aac <RCC_SetFlashLatency+0xf8>)
 80059d8:	f107 040c 	add.w	r4, r7, #12
 80059dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80059de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80059e2:	2300      	movs	r3, #0
 80059e4:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059ec:	d11c      	bne.n	8005a28 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80059ee:	2300      	movs	r3, #0
 80059f0:	643b      	str	r3, [r7, #64]	; 0x40
 80059f2:	e015      	b.n	8005a20 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80059f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80059fc:	4413      	add	r3, r2
 80059fe:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d808      	bhi.n	8005a1a <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005a10:	4413      	add	r3, r2
 8005a12:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005a16:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005a18:	e022      	b.n	8005a60 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005a1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	643b      	str	r3, [r7, #64]	; 0x40
 8005a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d9e6      	bls.n	80059f4 <RCC_SetFlashLatency+0x40>
 8005a26:	e01b      	b.n	8005a60 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a2c:	e015      	b.n	8005a5a <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005a36:	4413      	add	r3, r2
 8005a38:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8005a3c:	687a      	ldr	r2, [r7, #4]
 8005a3e:	429a      	cmp	r2, r3
 8005a40:	d808      	bhi.n	8005a54 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8005a50:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8005a52:	e005      	b.n	8005a60 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	3301      	adds	r3, #1
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d9e6      	bls.n	8005a2e <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8005a60:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <RCC_SetFlashLatency+0xfc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f023 0207 	bic.w	r2, r3, #7
 8005a68:	4911      	ldr	r1, [pc, #68]	; (8005ab0 <RCC_SetFlashLatency+0xfc>)
 8005a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8005a70:	f7fd ffbe 	bl	80039f0 <HAL_GetTick>
 8005a74:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a76:	e008      	b.n	8005a8a <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005a78:	f7fd ffba 	bl	80039f0 <HAL_GetTick>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a80:	1ad3      	subs	r3, r2, r3
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d901      	bls.n	8005a8a <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8005a86:	2303      	movs	r3, #3
 8005a88:	e007      	b.n	8005a9a <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005a8a:	4b09      	ldr	r3, [pc, #36]	; (8005ab0 <RCC_SetFlashLatency+0xfc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0307 	and.w	r3, r3, #7
 8005a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d1ef      	bne.n	8005a78 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	374c      	adds	r7, #76	; 0x4c
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd90      	pop	{r4, r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	0800bbac 	.word	0x0800bbac
 8005aa8:	0800bbbc 	.word	0x0800bbbc
 8005aac:	0800bbc8 	.word	0x0800bbc8
 8005ab0:	58004000 	.word	0x58004000

08005ab4 <LL_RCC_LSE_IsEnabled>:
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8005ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d101      	bne.n	8005acc <LL_RCC_LSE_IsEnabled+0x18>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e000      	b.n	8005ace <LL_RCC_LSE_IsEnabled+0x1a>
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <LL_RCC_LSE_IsReady>:
{
 8005ad8:	b480      	push	{r7}
 8005ada:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d101      	bne.n	8005af0 <LL_RCC_LSE_IsReady+0x18>
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <LL_RCC_LSE_IsReady+0x1a>
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <LL_RCC_SetRFWKPClockSource>:
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8005b04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b26:	4770      	bx	lr

08005b28 <LL_RCC_SetSMPSClockSource>:
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8005b30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	f023 0203 	bic.w	r2, r3, #3
 8005b3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005b44:	bf00      	nop
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <LL_RCC_SetSMPSPrescaler>:
{
 8005b50:	b480      	push	{r7}
 8005b52:	b083      	sub	sp, #12
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8005b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b62:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8005b6c:	bf00      	nop
 8005b6e:	370c      	adds	r7, #12
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <LL_RCC_SetUSARTClockSource>:
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8005b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b88:	f023 0203 	bic.w	r2, r3, #3
 8005b8c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <LL_RCC_SetLPUARTClockSource>:
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005bb8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <LL_RCC_SetI2CClockSource>:
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005bdc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	091b      	lsrs	r3, r3, #4
 8005be4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005be8:	43db      	mvns	r3, r3
 8005bea:	401a      	ands	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8005bf4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005bfe:	bf00      	nop
 8005c00:	370c      	adds	r7, #12
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <LL_RCC_SetLPTIMClockSource>:
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	041b      	lsls	r3, r3, #16
 8005c20:	43db      	mvns	r3, r3
 8005c22:	401a      	ands	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c32:	bf00      	nop
 8005c34:	370c      	adds	r7, #12
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr

08005c3e <LL_RCC_SetSAIClockSource>:
{
 8005c3e:	b480      	push	{r7}
 8005c40:	b083      	sub	sp, #12
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8005c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c5e:	bf00      	nop
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <LL_RCC_SetRNGClockSource>:
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b083      	sub	sp, #12
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005c7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <LL_RCC_SetCLK48ClockSource>:
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005c9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <LL_RCC_SetUSBClockSource>:
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f7ff ffe3 	bl	8005c96 <LL_RCC_SetCLK48ClockSource>
}
 8005cd0:	bf00      	nop
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <LL_RCC_SetADCClockSource>:
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <LL_RCC_SetRTCClockSource>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005d0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005d18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <LL_RCC_GetRTCClockSource>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005d34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <LL_RCC_ForceBackupDomainReset>:
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d56:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr

08005d6c <LL_RCC_ReleaseBackupDomainReset>:
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005d70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr

08005d8e <LL_RCC_PLLSAI1_Enable>:
{
 8005d8e:	b480      	push	{r7}
 8005d90:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005d92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005da0:	6013      	str	r3, [r2, #0]
}
 8005da2:	bf00      	nop
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <LL_RCC_PLLSAI1_Disable>:
{
 8005dac:	b480      	push	{r7}
 8005dae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005dba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dbe:	6013      	str	r3, [r2, #0]
}
 8005dc0:	bf00      	nop
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <LL_RCC_PLLSAI1_IsReady>:
{
 8005dca:	b480      	push	{r7}
 8005dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8005dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ddc:	d101      	bne.n	8005de2 <LL_RCC_PLLSAI1_IsReady+0x18>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b088      	sub	sp, #32
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8005df6:	2300      	movs	r3, #0
 8005df8:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d033      	beq.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e12:	d00c      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005e14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e18:	d802      	bhi.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d010      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005e1e:	e017      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005e24:	d017      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8005e26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005e2a:	d016      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8005e2c:	e010      	b.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005e2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005e38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e3c:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e3e:	e00d      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3304      	adds	r3, #4
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 f947 	bl	80060d8 <RCCEx_PLLSAI1_ConfigNP>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005e4e:	e005      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	77fb      	strb	r3, [r7, #31]
        break;
 8005e54:	e002      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005e56:	bf00      	nop
 8005e58:	e000      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8005e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e5c:	7ffb      	ldrb	r3, [r7, #31]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7ff fee9 	bl	8005c3e <LL_RCC_SetSAIClockSource>
 8005e6c:	e001      	b.n	8005e72 <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e6e:	7ffb      	ldrb	r3, [r7, #31]
 8005e70:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d046      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005e7e:	f7ff ff57 	bl	8005d30 <LL_RCC_GetRTCClockSource>
 8005e82:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	69ba      	ldr	r2, [r7, #24]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d03c      	beq.n	8005f08 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8005e8e:	f7fe fc4f 	bl	8004730 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d105      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7ff ff31 	bl	8005d04 <LL_RCC_SetRTCClockSource>
 8005ea2:	e02e      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8005ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eac:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8005eae:	f7ff ff4c 	bl	8005d4a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8005eb2:	f7ff ff5b 	bl	8005d6c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8005ec4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8005ece:	f7ff fdf1 	bl	8005ab4 <LL_RCC_LSE_IsEnabled>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d114      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005ed8:	f7fd fd8a 	bl	80039f0 <HAL_GetTick>
 8005edc:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ede:	e00b      	b.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ee0:	f7fd fd86 	bl	80039f0 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d902      	bls.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8005ef2:	2303      	movs	r3, #3
 8005ef4:	77fb      	strb	r3, [r7, #31]
              break;
 8005ef6:	e004      	b.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8005ef8:	f7ff fdee 	bl	8005ad8 <LL_RCC_LSE_IsReady>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d1ee      	bne.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8005f02:	7ffb      	ldrb	r3, [r7, #31]
 8005f04:	77bb      	strb	r3, [r7, #30]
 8005f06:	e001      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f08:	7ffb      	ldrb	r3, [r7, #31]
 8005f0a:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0301 	and.w	r3, r3, #1
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d004      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7ff fe2b 	bl	8005b78 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d004      	beq.n	8005f38 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69db      	ldr	r3, [r3, #28]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fe36 	bl	8005ba4 <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d004      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff fe5e 	bl	8005c0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d004      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fe53 	bl	8005c0a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d004      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fe2b 	bl	8005bd0 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d004      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f7ff fe20 	bl	8005bd0 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d022      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f7ff fe8e 	bl	8005cc2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fae:	d107      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005fb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005fba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005fbe:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005fc8:	d10b      	bne.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 f8dd 	bl	800618e <RCCEx_PLLSAI1_ConfigNQ>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8005fd8:	7ffb      	ldrb	r3, [r7, #31]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8005fde:	7ffb      	ldrb	r3, [r7, #31]
 8005fe0:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d02b      	beq.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff6:	d008      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006000:	d003      	beq.n	800600a <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006006:	2b00      	cmp	r3, #0
 8006008:	d105      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600e:	4618      	mov	r0, r3
 8006010:	f7ff fe2b 	bl	8005c6a <LL_RCC_SetRNGClockSource>
 8006014:	e00a      	b.n	800602c <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	2000      	movs	r0, #0
 8006022:	f7ff fe22 	bl	8005c6a <LL_RCC_SetRNGClockSource>
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	f7ff fe35 	bl	8005c96 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006030:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8006034:	d107      	bne.n	8006046 <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8006036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006044:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800604e:	2b00      	cmp	r3, #0
 8006050:	d022      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006056:	4618      	mov	r0, r3
 8006058:	f7ff fe3e 	bl	8005cd8 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006064:	d107      	bne.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006074:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800607e:	d10b      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f8dd 	bl	8006244 <RCCEx_PLLSAI1_ConfigNR>
 800608a:	4603      	mov	r3, r0
 800608c:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 800608e:	7ffb      	ldrb	r3, [r7, #31]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d001      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8006094:	7ffb      	ldrb	r3, [r7, #31]
 8006096:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d004      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fd27 	bl	8005afc <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff fd46 	bl	8005b50 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff fd2d 	bl	8005b28 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 80060ce:	7fbb      	ldrb	r3, [r7, #30]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3720      	adds	r7, #32
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060e0:	2300      	movs	r3, #0
 80060e2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 80060e4:	f7ff fe62 	bl	8005dac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80060e8:	f7fd fc82 	bl	80039f0 <HAL_GetTick>
 80060ec:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80060ee:	e009      	b.n	8006104 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060f0:	f7fd fc7e 	bl	80039f0 <HAL_GetTick>
 80060f4:	4602      	mov	r2, r0
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	2b02      	cmp	r3, #2
 80060fc:	d902      	bls.n	8006104 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 80060fe:	2303      	movs	r3, #3
 8006100:	73fb      	strb	r3, [r7, #15]
      break;
 8006102:	e004      	b.n	800610e <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006104:	f7ff fe61 	bl	8005dca <LL_RCC_PLLSAI1_IsReady>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d1f0      	bne.n	80060f0 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800610e:	7bfb      	ldrb	r3, [r7, #15]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d137      	bne.n	8006184 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006128:	4313      	orrs	r3, r2
 800612a:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800612c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800613e:	4313      	orrs	r3, r2
 8006140:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8006142:	f7ff fe24 	bl	8005d8e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006146:	f7fd fc53 	bl	80039f0 <HAL_GetTick>
 800614a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800614c:	e009      	b.n	8006162 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800614e:	f7fd fc4f 	bl	80039f0 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d902      	bls.n	8006162 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	73fb      	strb	r3, [r7, #15]
        break;
 8006160:	e004      	b.n	800616c <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006162:	f7ff fe32 	bl	8005dca <LL_RCC_PLLSAI1_IsReady>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d1f0      	bne.n	800614e <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800616c:	7bfb      	ldrb	r3, [r7, #15]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d108      	bne.n	8006184 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006176:	691a      	ldr	r2, [r3, #16]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006180:	4313      	orrs	r3, r2
 8006182:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8006184:	7bfb      	ldrb	r3, [r7, #15]
}
 8006186:	4618      	mov	r0, r3
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}

0800618e <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800618e:	b580      	push	{r7, lr}
 8006190:	b084      	sub	sp, #16
 8006192:	af00      	add	r7, sp, #0
 8006194:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800619a:	f7ff fe07 	bl	8005dac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800619e:	f7fd fc27 	bl	80039f0 <HAL_GetTick>
 80061a2:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061a4:	e009      	b.n	80061ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061a6:	f7fd fc23 	bl	80039f0 <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d902      	bls.n	80061ba <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 80061b4:	2303      	movs	r3, #3
 80061b6:	73fb      	strb	r3, [r7, #15]
      break;
 80061b8:	e004      	b.n	80061c4 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 80061ba:	f7ff fe06 	bl	8005dca <LL_RCC_PLLSAI1_IsReady>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d1f0      	bne.n	80061a6 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d137      	bne.n	800623a <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80061ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	021b      	lsls	r3, r3, #8
 80061da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061de:	4313      	orrs	r3, r2
 80061e0:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80061e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80061f4:	4313      	orrs	r3, r2
 80061f6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80061f8:	f7ff fdc9 	bl	8005d8e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061fc:	f7fd fbf8 	bl	80039f0 <HAL_GetTick>
 8006200:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006202:	e009      	b.n	8006218 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006204:	f7fd fbf4 	bl	80039f0 <HAL_GetTick>
 8006208:	4602      	mov	r2, r0
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	1ad3      	subs	r3, r2, r3
 800620e:	2b02      	cmp	r3, #2
 8006210:	d902      	bls.n	8006218 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8006212:	2303      	movs	r3, #3
 8006214:	73fb      	strb	r3, [r7, #15]
        break;
 8006216:	e004      	b.n	8006222 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8006218:	f7ff fdd7 	bl	8005dca <LL_RCC_PLLSAI1_IsReady>
 800621c:	4603      	mov	r3, r0
 800621e:	2b01      	cmp	r3, #1
 8006220:	d1f0      	bne.n	8006204 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d108      	bne.n	800623a <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8006228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800622c:	691a      	ldr	r2, [r3, #16]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006236:	4313      	orrs	r3, r2
 8006238:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800623a:	7bfb      	ldrb	r3, [r7, #15]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800624c:	2300      	movs	r3, #0
 800624e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8006250:	f7ff fdac 	bl	8005dac <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006254:	f7fd fbcc 	bl	80039f0 <HAL_GetTick>
 8006258:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800625a:	e009      	b.n	8006270 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800625c:	f7fd fbc8 	bl	80039f0 <HAL_GetTick>
 8006260:	4602      	mov	r2, r0
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	2b02      	cmp	r3, #2
 8006268:	d902      	bls.n	8006270 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	73fb      	strb	r3, [r7, #15]
      break;
 800626e:	e004      	b.n	800627a <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8006270:	f7ff fdab 	bl	8005dca <LL_RCC_PLLSAI1_IsReady>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1f0      	bne.n	800625c <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800627a:	7bfb      	ldrb	r3, [r7, #15]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d137      	bne.n	80062f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8006280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8006294:	4313      	orrs	r3, r2
 8006296:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8006298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062aa:	4313      	orrs	r3, r2
 80062ac:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 80062ae:	f7ff fd6e 	bl	8005d8e <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062b2:	f7fd fb9d 	bl	80039f0 <HAL_GetTick>
 80062b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062b8:	e009      	b.n	80062ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80062ba:	f7fd fb99 	bl	80039f0 <HAL_GetTick>
 80062be:	4602      	mov	r2, r0
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d902      	bls.n	80062ce <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	73fb      	strb	r3, [r7, #15]
        break;
 80062cc:	e004      	b.n	80062d8 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 80062ce:	f7ff fd7c 	bl	8005dca <LL_RCC_PLLSAI1_IsReady>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d1f0      	bne.n	80062ba <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d108      	bne.n	80062f0 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80062de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80062ec:	4313      	orrs	r3, r2
 80062ee:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006308:	2301      	movs	r3, #1
 800630a:	e090      	b.n	800642e <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006312:	b2db      	uxtb	r3, r3
 8006314:	2b00      	cmp	r3, #0
 8006316:	d106      	bne.n	8006326 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7fb ff9f 	bl	8002264 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2202      	movs	r2, #2
 800632a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	22ca      	movs	r2, #202	; 0xca
 8006334:	625a      	str	r2, [r3, #36]	; 0x24
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	2253      	movs	r2, #83	; 0x53
 800633c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f89f 	bl	8006482 <RTC_EnterInitMode>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <HAL_RTC_Init+0x64>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	22ff      	movs	r2, #255	; 0xff
 8006350:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2204      	movs	r2, #4
 8006356:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e067      	b.n	800642e <HAL_RTC_Init+0x134>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800636c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006370:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6899      	ldr	r1, [r3, #8]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	431a      	orrs	r2, r3
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	430a      	orrs	r2, r1
 800638e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	68d2      	ldr	r2, [r2, #12]
 8006398:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6919      	ldr	r1, [r3, #16]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	041a      	lsls	r2, r3, #16
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	430a      	orrs	r2, r1
 80063ac:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063bc:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0203 	bic.w	r2, r2, #3
 80063cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	69da      	ldr	r2, [r3, #28]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	431a      	orrs	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d113      	bne.n	800641c <HAL_RTC_Init+0x122>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f81e 	bl	8006436 <HAL_RTC_WaitForSynchro>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00d      	beq.n	800641c <HAL_RTC_Init+0x122>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	22ff      	movs	r2, #255	; 0xff
 8006406:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2204      	movs	r2, #4
 800640c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */ 
        __HAL_UNLOCK(hrtc);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	e008      	b.n	800642e <HAL_RTC_Init+0x134>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	22ff      	movs	r2, #255	; 0xff
 8006422:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    return HAL_OK;
 800642c:	2300      	movs	r3, #0
  }
}
 800642e:	4618      	mov	r0, r3
 8006430:	3708      	adds	r7, #8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006436:	b580      	push	{r7, lr}
 8006438:	b084      	sub	sp, #16
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68da      	ldr	r2, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800644c:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800644e:	f7fd facf 	bl	80039f0 <HAL_GetTick>
 8006452:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006454:	e009      	b.n	800646a <HAL_RTC_WaitForSynchro+0x34>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006456:	f7fd facb 	bl	80039f0 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006464:	d901      	bls.n	800646a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e007      	b.n	800647a <HAL_RTC_WaitForSynchro+0x44>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	f003 0320 	and.w	r3, r3, #32
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0ee      	beq.n	8006456 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d119      	bne.n	80064cc <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064a0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80064a2:	f7fd faa5 	bl	80039f0 <HAL_GetTick>
 80064a6:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80064a8:	e009      	b.n	80064be <RTC_EnterInitMode+0x3c>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80064aa:	f7fd faa1 	bl	80039f0 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b8:	d901      	bls.n	80064be <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e007      	b.n	80064ce <RTC_EnterInitMode+0x4c>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0ee      	beq.n	80064aa <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef* hrtc)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_RTCEx_EnableBypassShadow+0x16>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e024      	b.n	8006536 <HAL_RTCEx_EnableBypassShadow+0x60>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	22ca      	movs	r2, #202	; 0xca
 8006502:	625a      	str	r2, [r3, #36]	; 0x24
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	2253      	movs	r2, #83	; 0x53
 800650a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	689a      	ldr	r2, [r3, #8]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f042 0220 	orr.w	r2, r2, #32
 800651a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	22ff      	movs	r2, #255	; 0xff
 8006522:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <LL_RCC_GetUSARTClockSource>:
{
 8006542:	b480      	push	{r7}
 8006544:	b083      	sub	sp, #12
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800654a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800654e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4013      	ands	r3, r2
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <LL_RCC_GetLPUARTClockSource>:
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800656a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800656e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	4013      	ands	r3, r2
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e042      	b.n	800661a <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fb fd66 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2224      	movs	r2, #36	; 0x24
 80065b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fa41 	bl	8006a4c <UART_SetConfig>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e022      	b.n	800661a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fc43 	bl	8006e68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006600:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fcca 	bl	8006fac <UART_CheckIdleState>
 8006618:	4603      	mov	r3, r0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
	...

08006624 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006638:	2b20      	cmp	r3, #32
 800663a:	d168      	bne.n	800670e <HAL_UART_Transmit_DMA+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <HAL_UART_Transmit_DMA+0x24>
 8006642:	88fb      	ldrh	r3, [r7, #6]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d101      	bne.n	800664c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	e061      	b.n	8006710 <HAL_UART_Transmit_DMA+0xec>
    }

    __HAL_LOCK(huart);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8006652:	2b01      	cmp	r3, #1
 8006654:	d101      	bne.n	800665a <HAL_UART_Transmit_DMA+0x36>
 8006656:	2302      	movs	r3, #2
 8006658:	e05a      	b.n	8006710 <HAL_UART_Transmit_DMA+0xec>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	88fa      	ldrh	r2, [r7, #6]
 800666c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	88fa      	ldrh	r2, [r7, #6]
 8006674:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2221      	movs	r2, #33	; 0x21
 8006684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    if (huart->hdmatx != NULL)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800668c:	2b00      	cmp	r3, #0
 800668e:	d02c      	beq.n	80066ea <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006694:	4a20      	ldr	r2, [pc, #128]	; (8006718 <HAL_UART_Transmit_DMA+0xf4>)
 8006696:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800669c:	4a1f      	ldr	r2, [pc, #124]	; (800671c <HAL_UART_Transmit_DMA+0xf8>)
 800669e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066a4:	4a1e      	ldr	r2, [pc, #120]	; (8006720 <HAL_UART_Transmit_DMA+0xfc>)
 80066a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80066ac:	2200      	movs	r2, #0
 80066ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b8:	4619      	mov	r1, r3
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3328      	adds	r3, #40	; 0x28
 80066c0:	461a      	mov	r2, r3
 80066c2:	88fb      	ldrh	r3, [r7, #6]
 80066c4:	f7fd fc04 	bl	8003ed0 <HAL_DMA_Start_IT>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00d      	beq.n	80066ea <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2210      	movs	r2, #16
 80066d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2220      	movs	r2, #32
 80066e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80066e6:	2301      	movs	r3, #1
 80066e8:	e012      	b.n	8006710 <HAL_UART_Transmit_DMA+0xec>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2240      	movs	r2, #64	; 0x40
 80066f0:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	689a      	ldr	r2, [r3, #8]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006708:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_UART_Transmit_DMA+0xec>
  }
  else
  {
    return HAL_BUSY;
 800670e:	2302      	movs	r3, #2
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	080071bf 	.word	0x080071bf
 800671c:	08007213 	.word	0x08007213
 8006720:	0800722f 	.word	0x0800722f

08006724 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	69db      	ldr	r3, [r3, #28]
 8006732:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	f640 030f 	movw	r3, #2063	; 0x80f
 800674a:	4013      	ands	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d118      	bne.n	8006786 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	f003 0320 	and.w	r3, r3, #32
 800675a:	2b00      	cmp	r3, #0
 800675c:	d013      	beq.n	8006786 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800675e:	69bb      	ldr	r3, [r7, #24]
 8006760:	f003 0320 	and.w	r3, r3, #32
 8006764:	2b00      	cmp	r3, #0
 8006766:	d104      	bne.n	8006772 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d009      	beq.n	8006786 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 8145 	beq.w	8006a06 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	4798      	blx	r3
      }
      return;
 8006784:	e13f      	b.n	8006a06 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f000 80e8 	beq.w	800695e <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4ba1      	ldr	r3, [pc, #644]	; (8006a18 <HAL_UART_IRQHandler+0x2f4>)
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d105      	bne.n	80067a4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4ba0      	ldr	r3, [pc, #640]	; (8006a1c <HAL_UART_IRQHandler+0x2f8>)
 800679c:	4013      	ands	r3, r2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80dd 	beq.w	800695e <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d010      	beq.n	80067d0 <HAL_UART_IRQHandler+0xac>
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00b      	beq.n	80067d0 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2201      	movs	r2, #1
 80067be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067c6:	f043 0201 	orr.w	r2, r3, #1
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d010      	beq.n	80067fc <HAL_UART_IRQHandler+0xd8>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d00b      	beq.n	80067fc <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2202      	movs	r2, #2
 80067ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f2:	f043 0204 	orr.w	r2, r3, #4
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d010      	beq.n	8006828 <HAL_UART_IRQHandler+0x104>
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	2b00      	cmp	r3, #0
 800680e:	d00b      	beq.n	8006828 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2204      	movs	r2, #4
 8006816:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681e:	f043 0202 	orr.w	r2, r3, #2
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f003 0308 	and.w	r3, r3, #8
 800682e:	2b00      	cmp	r3, #0
 8006830:	d015      	beq.n	800685e <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	f003 0320 	and.w	r3, r3, #32
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	4b76      	ldr	r3, [pc, #472]	; (8006a18 <HAL_UART_IRQHandler+0x2f4>)
 8006840:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	2208      	movs	r2, #8
 800684c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006854:	f043 0208 	orr.w	r2, r3, #8
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006864:	2b00      	cmp	r3, #0
 8006866:	d011      	beq.n	800688c <HAL_UART_IRQHandler+0x168>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800687a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006882:	f043 0220 	orr.w	r2, r3, #32
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 80b9 	beq.w	8006a0a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	f003 0320 	and.w	r3, r3, #32
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d011      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	f003 0320 	and.w	r3, r3, #32
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d003      	beq.n	80068c6 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d8:	2b40      	cmp	r3, #64	; 0x40
 80068da:	d004      	beq.n	80068e6 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d031      	beq.n	800694a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fc46 	bl	8007178 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b40      	cmp	r3, #64	; 0x40
 80068f8:	d123      	bne.n	8006942 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	689a      	ldr	r2, [r3, #8]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006908:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800690e:	2b00      	cmp	r3, #0
 8006910:	d013      	beq.n	800693a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006916:	4a42      	ldr	r2, [pc, #264]	; (8006a20 <HAL_UART_IRQHandler+0x2fc>)
 8006918:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800691e:	4618      	mov	r0, r3
 8006920:	f7fd fb51 	bl	8003fc6 <HAL_DMA_Abort_IT>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d017      	beq.n	800695a <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800692e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006934:	4610      	mov	r0, r2
 8006936:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006938:	e00f      	b.n	800695a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f87c 	bl	8006a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	e00b      	b.n	800695a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006942:	6878      	ldr	r0, [r7, #4]
 8006944:	f000 f878 	bl	8006a38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006948:	e007      	b.n	800695a <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f874 	bl	8006a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006958:	e057      	b.n	8006a0a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800695a:	bf00      	nop
    return;
 800695c:	e055      	b.n	8006a0a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006964:	2b00      	cmp	r3, #0
 8006966:	d00d      	beq.n	8006984 <HAL_UART_IRQHandler+0x260>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d008      	beq.n	8006984 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800697a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 fcc6 	bl	800730e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006982:	e045      	b.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698a:	2b00      	cmp	r3, #0
 800698c:	d012      	beq.n	80069b4 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006994:	2b00      	cmp	r3, #0
 8006996:	d104      	bne.n	80069a2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d008      	beq.n	80069b4 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d031      	beq.n	8006a0e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	4798      	blx	r3
    }
    return;
 80069b2:	e02c      	b.n	8006a0e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <HAL_UART_IRQHandler+0x2ac>
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d003      	beq.n	80069d0 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fc86 	bl	80072da <UART_EndTransmit_IT>
    return;
 80069ce:	e01f      	b.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <HAL_UART_IRQHandler+0x2c8>
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d003      	beq.n	80069ec <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fca6 	bl	8007336 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069ea:	e011      	b.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d00c      	beq.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	da09      	bge.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fc90 	bl	8007322 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a02:	bf00      	nop
 8006a04:	e004      	b.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
      return;
 8006a06:	bf00      	nop
 8006a08:	e002      	b.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006a0a:	bf00      	nop
 8006a0c:	e000      	b.n	8006a10 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006a0e:	bf00      	nop
  }
}
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	10000001 	.word	0x10000001
 8006a1c:	04000120 	.word	0x04000120
 8006a20:	080072af 	.word	0x080072af

08006a24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a40:	bf00      	nop
 8006a42:	370c      	adds	r7, #12
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a4c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006a50:	b088      	sub	sp, #32
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a56:	2300      	movs	r3, #0
 8006a58:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69db      	ldr	r3, [r3, #28]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	61fb      	str	r3, [r7, #28]
  tmpreg |= (uint32_t)huart->FifoMode;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4ba4      	ldr	r3, [pc, #656]	; (8006d14 <UART_SetConfig+0x2c8>)
 8006a84:	4013      	ands	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	6812      	ldr	r2, [r2, #0]
 8006a8a:	69f9      	ldr	r1, [r7, #28]
 8006a8c:	430b      	orrs	r3, r1
 8006a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	430a      	orrs	r2, r1
 8006aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	699b      	ldr	r3, [r3, #24]
 8006aaa:	61fb      	str	r3, [r7, #28]

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a99      	ldr	r2, [pc, #612]	; (8006d18 <UART_SetConfig+0x2cc>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d004      	beq.n	8006ac0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	61fb      	str	r3, [r7, #28]
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006aca:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	6812      	ldr	r2, [r2, #0]
 8006ad2:	69f9      	ldr	r1, [r7, #28]
 8006ad4:	430b      	orrs	r3, r1
 8006ad6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ade:	f023 010f 	bic.w	r1, r3, #15
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	430a      	orrs	r2, r1
 8006aec:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a8a      	ldr	r2, [pc, #552]	; (8006d1c <UART_SetConfig+0x2d0>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d121      	bne.n	8006b3c <UART_SetConfig+0xf0>
 8006af8:	2003      	movs	r0, #3
 8006afa:	f7ff fd22 	bl	8006542 <LL_RCC_GetUSARTClockSource>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b03      	cmp	r3, #3
 8006b02:	d817      	bhi.n	8006b34 <UART_SetConfig+0xe8>
 8006b04:	a201      	add	r2, pc, #4	; (adr r2, 8006b0c <UART_SetConfig+0xc0>)
 8006b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b0a:	bf00      	nop
 8006b0c:	08006b1d 	.word	0x08006b1d
 8006b10:	08006b29 	.word	0x08006b29
 8006b14:	08006b23 	.word	0x08006b23
 8006b18:	08006b2f 	.word	0x08006b2f
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	76fb      	strb	r3, [r7, #27]
 8006b20:	e038      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b22:	2302      	movs	r3, #2
 8006b24:	76fb      	strb	r3, [r7, #27]
 8006b26:	e035      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	76fb      	strb	r3, [r7, #27]
 8006b2c:	e032      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b2e:	2308      	movs	r3, #8
 8006b30:	76fb      	strb	r3, [r7, #27]
 8006b32:	e02f      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b34:	2310      	movs	r3, #16
 8006b36:	76fb      	strb	r3, [r7, #27]
 8006b38:	bf00      	nop
 8006b3a:	e02b      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a75      	ldr	r2, [pc, #468]	; (8006d18 <UART_SetConfig+0x2cc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d124      	bne.n	8006b90 <UART_SetConfig+0x144>
 8006b46:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8006b4a:	f7ff fd0a 	bl	8006562 <LL_RCC_GetLPUARTClockSource>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b54:	d012      	beq.n	8006b7c <UART_SetConfig+0x130>
 8006b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b5a:	d802      	bhi.n	8006b62 <UART_SetConfig+0x116>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <UART_SetConfig+0x124>
 8006b60:	e012      	b.n	8006b88 <UART_SetConfig+0x13c>
 8006b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b66:	d006      	beq.n	8006b76 <UART_SetConfig+0x12a>
 8006b68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006b6c:	d009      	beq.n	8006b82 <UART_SetConfig+0x136>
 8006b6e:	e00b      	b.n	8006b88 <UART_SetConfig+0x13c>
 8006b70:	2300      	movs	r3, #0
 8006b72:	76fb      	strb	r3, [r7, #27]
 8006b74:	e00e      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b76:	2302      	movs	r3, #2
 8006b78:	76fb      	strb	r3, [r7, #27]
 8006b7a:	e00b      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b7c:	2304      	movs	r3, #4
 8006b7e:	76fb      	strb	r3, [r7, #27]
 8006b80:	e008      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b82:	2308      	movs	r3, #8
 8006b84:	76fb      	strb	r3, [r7, #27]
 8006b86:	e005      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	76fb      	strb	r3, [r7, #27]
 8006b8c:	bf00      	nop
 8006b8e:	e001      	b.n	8006b94 <UART_SetConfig+0x148>
 8006b90:	2310      	movs	r3, #16
 8006b92:	76fb      	strb	r3, [r7, #27]

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a5f      	ldr	r2, [pc, #380]	; (8006d18 <UART_SetConfig+0x2cc>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	f040 808e 	bne.w	8006cbc <UART_SetConfig+0x270>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ba0:	7efb      	ldrb	r3, [r7, #27]
 8006ba2:	2b08      	cmp	r3, #8
 8006ba4:	d823      	bhi.n	8006bee <UART_SetConfig+0x1a2>
 8006ba6:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <UART_SetConfig+0x160>)
 8006ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bac:	08006bd1 	.word	0x08006bd1
 8006bb0:	08006bef 	.word	0x08006bef
 8006bb4:	08006bd9 	.word	0x08006bd9
 8006bb8:	08006bef 	.word	0x08006bef
 8006bbc:	08006bdf 	.word	0x08006bdf
 8006bc0:	08006bef 	.word	0x08006bef
 8006bc4:	08006bef 	.word	0x08006bef
 8006bc8:	08006bef 	.word	0x08006bef
 8006bcc:	08006be7 	.word	0x08006be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bd0:	f7fe fe8c 	bl	80058ec <HAL_RCC_GetPCLK1Freq>
 8006bd4:	6178      	str	r0, [r7, #20]
        break;
 8006bd6:	e00f      	b.n	8006bf8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bd8:	4b51      	ldr	r3, [pc, #324]	; (8006d20 <UART_SetConfig+0x2d4>)
 8006bda:	617b      	str	r3, [r7, #20]
        break;
 8006bdc:	e00c      	b.n	8006bf8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bde:	f7fe fe07 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 8006be2:	6178      	str	r0, [r7, #20]
        break;
 8006be4:	e008      	b.n	8006bf8 <UART_SetConfig+0x1ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bea:	617b      	str	r3, [r7, #20]
        break;
 8006bec:	e004      	b.n	8006bf8 <UART_SetConfig+0x1ac>
      default:
        pclk = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	76bb      	strb	r3, [r7, #26]
        break;
 8006bf6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 811c 	beq.w	8006e38 <UART_SetConfig+0x3ec>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	4a47      	ldr	r2, [pc, #284]	; (8006d24 <UART_SetConfig+0x2d8>)
 8006c06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	68ba      	ldr	r2, [r7, #8]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d305      	bcc.n	8006c30 <UART_SetConfig+0x1e4>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c2a:	68ba      	ldr	r2, [r7, #8]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d902      	bls.n	8006c36 <UART_SetConfig+0x1ea>
      {
        ret = HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	76bb      	strb	r3, [r7, #26]
 8006c34:	e100      	b.n	8006e38 <UART_SetConfig+0x3ec>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range 
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f04f 0100 	mov.w	r1, #0
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	4a38      	ldr	r2, [pc, #224]	; (8006d24 <UART_SetConfig+0x2d8>)
 8006c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	f04f 0400 	mov.w	r4, #0
 8006c4e:	461a      	mov	r2, r3
 8006c50:	4623      	mov	r3, r4
 8006c52:	f7f9 faed 	bl	8000230 <__aeabi_uldivmod>
 8006c56:	4603      	mov	r3, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4622      	mov	r2, r4
 8006c5e:	f04f 0300 	mov.w	r3, #0
 8006c62:	f04f 0400 	mov.w	r4, #0
 8006c66:	0214      	lsls	r4, r2, #8
 8006c68:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006c6c:	020b      	lsls	r3, r1, #8
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6852      	ldr	r2, [r2, #4]
 8006c72:	0852      	lsrs	r2, r2, #1
 8006c74:	4611      	mov	r1, r2
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	eb13 0b01 	adds.w	fp, r3, r1
 8006c7e:	eb44 0c02 	adc.w	ip, r4, r2
 8006c82:	4658      	mov	r0, fp
 8006c84:	4661      	mov	r1, ip
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	f04f 0400 	mov.w	r4, #0
 8006c8e:	461a      	mov	r2, r3
 8006c90:	4623      	mov	r3, r4
 8006c92:	f7f9 facd 	bl	8000230 <__aeabi_uldivmod>
 8006c96:	4603      	mov	r3, r0
 8006c98:	460c      	mov	r4, r1
 8006c9a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ca2:	d308      	bcc.n	8006cb6 <UART_SetConfig+0x26a>
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006caa:	d204      	bcs.n	8006cb6 <UART_SetConfig+0x26a>
        {
          huart->Instance->BRR = usartdiv;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	693a      	ldr	r2, [r7, #16]
 8006cb2:	60da      	str	r2, [r3, #12]
 8006cb4:	e0c0      	b.n	8006e38 <UART_SetConfig+0x3ec>
        }
        else
        {
          ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	76bb      	strb	r3, [r7, #26]
 8006cba:	e0bd      	b.n	8006e38 <UART_SetConfig+0x3ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	69db      	ldr	r3, [r3, #28]
 8006cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cc4:	d169      	bne.n	8006d9a <UART_SetConfig+0x34e>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8006cc6:	7efb      	ldrb	r3, [r7, #27]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	2b07      	cmp	r3, #7
 8006ccc:	d82c      	bhi.n	8006d28 <UART_SetConfig+0x2dc>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <UART_SetConfig+0x288>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006cf5 	.word	0x08006cf5
 8006cd8:	08006cfd 	.word	0x08006cfd
 8006cdc:	08006d29 	.word	0x08006d29
 8006ce0:	08006d03 	.word	0x08006d03
 8006ce4:	08006d29 	.word	0x08006d29
 8006ce8:	08006d29 	.word	0x08006d29
 8006cec:	08006d29 	.word	0x08006d29
 8006cf0:	08006d0b 	.word	0x08006d0b
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf4:	f7fe fe10 	bl	8005918 <HAL_RCC_GetPCLK2Freq>
 8006cf8:	6178      	str	r0, [r7, #20]
        break;
 8006cfa:	e01a      	b.n	8006d32 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cfc:	4b08      	ldr	r3, [pc, #32]	; (8006d20 <UART_SetConfig+0x2d4>)
 8006cfe:	617b      	str	r3, [r7, #20]
        break;
 8006d00:	e017      	b.n	8006d32 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d02:	f7fe fd75 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 8006d06:	6178      	str	r0, [r7, #20]
        break;
 8006d08:	e013      	b.n	8006d32 <UART_SetConfig+0x2e6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0e:	617b      	str	r3, [r7, #20]
        break;
 8006d10:	e00f      	b.n	8006d32 <UART_SetConfig+0x2e6>
 8006d12:	bf00      	nop
 8006d14:	cfff69f3 	.word	0xcfff69f3
 8006d18:	40008000 	.word	0x40008000
 8006d1c:	40013800 	.word	0x40013800
 8006d20:	00f42400 	.word	0x00f42400
 8006d24:	0800be04 	.word	0x0800be04
      default:
        pclk = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	76bb      	strb	r3, [r7, #26]
        break;
 8006d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d07f      	beq.n	8006e38 <UART_SetConfig+0x3ec>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d3c:	4a48      	ldr	r2, [pc, #288]	; (8006e60 <UART_SetConfig+0x414>)
 8006d3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d42:	461a      	mov	r2, r3
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d4a:	005a      	lsls	r2, r3, #1
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	085b      	lsrs	r3, r3, #1
 8006d52:	441a      	add	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	2b0f      	cmp	r3, #15
 8006d64:	d916      	bls.n	8006d94 <UART_SetConfig+0x348>
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6c:	d212      	bcs.n	8006d94 <UART_SetConfig+0x348>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	f023 030f 	bic.w	r3, r3, #15
 8006d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	f003 0307 	and.w	r3, r3, #7
 8006d82:	b29a      	uxth	r2, r3
 8006d84:	89fb      	ldrh	r3, [r7, #14]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	89fa      	ldrh	r2, [r7, #14]
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	e051      	b.n	8006e38 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	76bb      	strb	r3, [r7, #26]
 8006d98:	e04e      	b.n	8006e38 <UART_SetConfig+0x3ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006d9a:	7efb      	ldrb	r3, [r7, #27]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d821      	bhi.n	8006de6 <UART_SetConfig+0x39a>
 8006da2:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <UART_SetConfig+0x35c>)
 8006da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da8:	08006dc9 	.word	0x08006dc9
 8006dac:	08006dd1 	.word	0x08006dd1
 8006db0:	08006de7 	.word	0x08006de7
 8006db4:	08006dd7 	.word	0x08006dd7
 8006db8:	08006de7 	.word	0x08006de7
 8006dbc:	08006de7 	.word	0x08006de7
 8006dc0:	08006de7 	.word	0x08006de7
 8006dc4:	08006ddf 	.word	0x08006ddf
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006dc8:	f7fe fda6 	bl	8005918 <HAL_RCC_GetPCLK2Freq>
 8006dcc:	6178      	str	r0, [r7, #20]
        break;
 8006dce:	e00f      	b.n	8006df0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dd0:	4b24      	ldr	r3, [pc, #144]	; (8006e64 <UART_SetConfig+0x418>)
 8006dd2:	617b      	str	r3, [r7, #20]
        break;
 8006dd4:	e00c      	b.n	8006df0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dd6:	f7fe fd0b 	bl	80057f0 <HAL_RCC_GetSysClockFreq>
 8006dda:	6178      	str	r0, [r7, #20]
        break;
 8006ddc:	e008      	b.n	8006df0 <UART_SetConfig+0x3a4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de2:	617b      	str	r3, [r7, #20]
        break;
 8006de4:	e004      	b.n	8006df0 <UART_SetConfig+0x3a4>
      default:
        pclk = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	76bb      	strb	r3, [r7, #26]
        break;
 8006dee:	bf00      	nop
    }

    if (pclk != 0U)
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d020      	beq.n	8006e38 <UART_SetConfig+0x3ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dfa:	4a19      	ldr	r2, [pc, #100]	; (8006e60 <UART_SetConfig+0x414>)
 8006dfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e00:	461a      	mov	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	fbb3 f2f2 	udiv	r2, r3, r2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	085b      	lsrs	r3, r3, #1
 8006e0e:	441a      	add	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e18:	b29b      	uxth	r3, r3
 8006e1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2b0f      	cmp	r3, #15
 8006e20:	d908      	bls.n	8006e34 <UART_SetConfig+0x3e8>
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e28:	d204      	bcs.n	8006e34 <UART_SetConfig+0x3e8>
      {
        huart->Instance->BRR = usartdiv;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	693a      	ldr	r2, [r7, #16]
 8006e30:	60da      	str	r2, [r3, #12]
 8006e32:	e001      	b.n	8006e38 <UART_SetConfig+0x3ec>
      }
      else
      {
        ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8006e54:	7ebb      	ldrb	r3, [r7, #26]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3720      	adds	r7, #32
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006e60:	0800be04 	.word	0x0800be04
 8006e64:	00f42400 	.word	0x00f42400

08006e68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d00a      	beq.n	8006e92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	430a      	orrs	r2, r1
 8006e90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d00a      	beq.n	8006eb4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb8:	f003 0304 	and.w	r3, r3, #4
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00a      	beq.n	8006ed6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	430a      	orrs	r2, r1
 8006ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	f003 0310 	and.w	r3, r3, #16
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00a      	beq.n	8006f1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	430a      	orrs	r2, r1
 8006f18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1e:	f003 0320 	and.w	r3, r3, #32
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00a      	beq.n	8006f3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d01a      	beq.n	8006f7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f66:	d10a      	bne.n	8006f7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	605a      	str	r2, [r3, #4]
  }
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b086      	sub	sp, #24
 8006fb0:	af02      	add	r7, sp, #8
 8006fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006fbc:	f7fc fd18 	bl	80039f0 <HAL_GetTick>
 8006fc0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0308 	and.w	r3, r3, #8
 8006fcc:	2b08      	cmp	r3, #8
 8006fce:	d10e      	bne.n	8006fee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006fd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f82c 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e022      	b.n	8007034 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 0304 	and.w	r3, r3, #4
 8006ff8:	2b04      	cmp	r3, #4
 8006ffa:	d10e      	bne.n	800701a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ffc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007000:	9300      	str	r3, [sp, #0]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 f816 	bl	800703c <UART_WaitOnFlagUntilTimeout>
 8007010:	4603      	mov	r3, r0
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007016:	2303      	movs	r3, #3
 8007018:	e00c      	b.n	8007034 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2220      	movs	r2, #32
 800701e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2220      	movs	r2, #32
 8007026:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}

0800703c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	4613      	mov	r3, r2
 800704a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800704c:	e062      	b.n	8007114 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007054:	d05e      	beq.n	8007114 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007056:	f7fc fccb 	bl	80039f0 <HAL_GetTick>
 800705a:	4602      	mov	r2, r0
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	429a      	cmp	r2, r3
 8007064:	d302      	bcc.n	800706c <UART_WaitOnFlagUntilTimeout+0x30>
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d11d      	bne.n	80070a8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681a      	ldr	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800707a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	689a      	ldr	r2, [r3, #8]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f022 0201 	bic.w	r2, r2, #1
 800708a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2220      	movs	r2, #32
 8007098:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2200      	movs	r2, #0
 80070a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e045      	b.n	8007134 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0304 	and.w	r3, r3, #4
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d02e      	beq.n	8007114 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	69db      	ldr	r3, [r3, #28]
 80070bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80070c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070c4:	d126      	bne.n	8007114 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80070ce:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070de:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f022 0201 	bic.w	r2, r2, #1
 80070ee:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2220      	movs	r2, #32
 80070f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2220      	movs	r2, #32
 80070fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2220      	movs	r2, #32
 8007104:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007110:	2303      	movs	r3, #3
 8007112:	e00f      	b.n	8007134 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	69da      	ldr	r2, [r3, #28]
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	4013      	ands	r3, r2
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	429a      	cmp	r2, r3
 8007122:	bf0c      	ite	eq
 8007124:	2301      	moveq	r3, #1
 8007126:	2300      	movne	r3, #0
 8007128:	b2db      	uxtb	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	79fb      	ldrb	r3, [r7, #7]
 800712e:	429a      	cmp	r2, r3
 8007130:	d08d      	beq.n	800704e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007132:	2300      	movs	r3, #0
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007152:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	689a      	ldr	r2, [r3, #8]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007162:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2220      	movs	r2, #32
 8007168:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr

08007178 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007178:	b480      	push	{r7}
 800717a:	b083      	sub	sp, #12
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800718e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	689b      	ldr	r3, [r3, #8]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2200      	movs	r2, #0
 80071b0:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80071b2:	bf00      	nop
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ca:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0320 	and.w	r3, r3, #32
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d114      	bne.n	8007204 <UART_DMATransmitCplt+0x46>
  {
    huart->TxXferCount = 0U;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2200      	movs	r2, #0
 80071de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	689a      	ldr	r2, [r3, #8]
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071f0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007200:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007202:	e002      	b.n	800720a <UART_DMATransmitCplt+0x4c>
    HAL_UART_TxCpltCallback(huart);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7fa fad5 	bl	80017b4 <HAL_UART_TxCpltCallback>
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007212:	b580      	push	{r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f7ff fbff 	bl	8006a24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007226:	bf00      	nop
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b086      	sub	sp, #24
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007242:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800724a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b80      	cmp	r3, #128	; 0x80
 8007258:	d109      	bne.n	800726e <UART_DMAError+0x40>
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	2b21      	cmp	r3, #33	; 0x21
 800725e:	d106      	bne.n	800726e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	2200      	movs	r2, #0
 8007264:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8007268:	6978      	ldr	r0, [r7, #20]
 800726a:	f7ff ff67 	bl	800713c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007278:	2b40      	cmp	r3, #64	; 0x40
 800727a:	d109      	bne.n	8007290 <UART_DMAError+0x62>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2b22      	cmp	r3, #34	; 0x22
 8007280:	d106      	bne.n	8007290 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	2200      	movs	r2, #0
 8007286:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800728a:	6978      	ldr	r0, [r7, #20]
 800728c:	f7ff ff74 	bl	8007178 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007296:	f043 0210 	orr.w	r2, r3, #16
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072a0:	6978      	ldr	r0, [r7, #20]
 80072a2:	f7ff fbc9 	bl	8006a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072a6:	bf00      	nop
 80072a8:	3718      	adds	r7, #24
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}

080072ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072ae:	b580      	push	{r7, lr}
 80072b0:	b084      	sub	sp, #16
 80072b2:	af00      	add	r7, sp, #0
 80072b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f7ff fbb3 	bl	8006a38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b082      	sub	sp, #8
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072f0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fa fa57 	bl	80017b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007306:	bf00      	nop
 8007308:	3708      	adds	r7, #8
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007336:	b480      	push	{r7}
 8007338:	b083      	sub	sp, #12
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800733e:	bf00      	nop
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr

0800734a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800734a:	b480      	push	{r7}
 800734c:	b085      	sub	sp, #20
 800734e:	af00      	add	r7, sp, #0
 8007350:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d101      	bne.n	8007360 <HAL_UARTEx_DisableFifoMode+0x16>
 800735c:	2302      	movs	r3, #2
 800735e:	e027      	b.n	80073b0 <HAL_UARTEx_DisableFifoMode+0x66>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2224      	movs	r2, #36	; 0x24
 800736c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f022 0201 	bic.w	r2, r2, #1
 8007386:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800738e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2220      	movs	r2, #32
 80073a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d101      	bne.n	80073d4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073d0:	2302      	movs	r3, #2
 80073d2:	e02d      	b.n	8007430 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2224      	movs	r2, #36	; 0x24
 80073e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f022 0201 	bic.w	r2, r2, #1
 80073fa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	683a      	ldr	r2, [r7, #0]
 800740c:	430a      	orrs	r2, r1
 800740e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f84f 	bl	80074b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2220      	movs	r2, #32
 8007422:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007448:	2b01      	cmp	r3, #1
 800744a:	d101      	bne.n	8007450 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800744c:	2302      	movs	r3, #2
 800744e:	e02d      	b.n	80074ac <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2201      	movs	r2, #1
 8007454:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2224      	movs	r2, #36	; 0x24
 800745c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f022 0201 	bic.w	r2, r2, #1
 8007476:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	683a      	ldr	r2, [r7, #0]
 8007488:	430a      	orrs	r2, r1
 800748a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f000 f811 	bl	80074b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b089      	sub	sp, #36	; 0x24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80074bc:	4a2f      	ldr	r2, [pc, #188]	; (800757c <UARTEx_SetNbDataToProcess+0xc8>)
 80074be:	f107 0314 	add.w	r3, r7, #20
 80074c2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074c6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80074ca:	4a2d      	ldr	r2, [pc, #180]	; (8007580 <UARTEx_SetNbDataToProcess+0xcc>)
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80074d4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d108      	bne.n	80074f2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2201      	movs	r2, #1
 80074e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074f0:	e03d      	b.n	800756e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074f2:	2308      	movs	r3, #8
 80074f4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074f6:	2308      	movs	r3, #8
 80074f8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	0e5b      	lsrs	r3, r3, #25
 8007502:	b2db      	uxtb	r3, r3
 8007504:	f003 0307 	and.w	r3, r3, #7
 8007508:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	0f5b      	lsrs	r3, r3, #29
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800751a:	7fbb      	ldrb	r3, [r7, #30]
 800751c:	7f3a      	ldrb	r2, [r7, #28]
 800751e:	f107 0120 	add.w	r1, r7, #32
 8007522:	440a      	add	r2, r1
 8007524:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007528:	fb02 f303 	mul.w	r3, r2, r3
 800752c:	7f3a      	ldrb	r2, [r7, #28]
 800752e:	f107 0120 	add.w	r1, r7, #32
 8007532:	440a      	add	r2, r1
 8007534:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007538:	fb93 f3f2 	sdiv	r3, r3, r2
 800753c:	b29a      	uxth	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8007544:	7ffb      	ldrb	r3, [r7, #31]
 8007546:	7f7a      	ldrb	r2, [r7, #29]
 8007548:	f107 0120 	add.w	r1, r7, #32
 800754c:	440a      	add	r2, r1
 800754e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	7f7a      	ldrb	r2, [r7, #29]
 8007558:	f107 0120 	add.w	r1, r7, #32
 800755c:	440a      	add	r2, r1
 800755e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8007562:	fb93 f3f2 	sdiv	r3, r3, r2
 8007566:	b29a      	uxth	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800756e:	bf00      	nop
 8007570:	3724      	adds	r7, #36	; 0x24
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	0800bbd8 	.word	0x0800bbd8
 8007580:	0800bbe0 	.word	0x0800bbe0

08007584 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b088      	sub	sp, #32
 8007588:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800758e:	f107 0308 	add.w	r3, r7, #8
 8007592:	2218      	movs	r2, #24
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f001 fab0 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 800759c:	233f      	movs	r3, #63	; 0x3f
 800759e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 80075a0:	2381      	movs	r3, #129	; 0x81
 80075a2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80075a4:	1dfb      	adds	r3, r7, #7
 80075a6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80075a8:	2301      	movs	r3, #1
 80075aa:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80075ac:	f107 0308 	add.w	r3, r7, #8
 80075b0:	2100      	movs	r1, #0
 80075b2:	4618      	mov	r0, r3
 80075b4:	f001 f966 	bl	8008884 <hci_send_req>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	da01      	bge.n	80075c2 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 80075be:	23ff      	movs	r3, #255	; 0xff
 80075c0:	e000      	b.n	80075c4 <aci_gap_set_non_discoverable+0x40>
  return status;
 80075c2:	79fb      	ldrb	r3, [r7, #7]
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Slave_Conn_Interval_Min,
                                     uint16_t Slave_Conn_Interval_Max )
{
 80075cc:	b5b0      	push	{r4, r5, r7, lr}
 80075ce:	b0ce      	sub	sp, #312	; 0x138
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	4605      	mov	r5, r0
 80075d4:	460c      	mov	r4, r1
 80075d6:	4610      	mov	r0, r2
 80075d8:	4619      	mov	r1, r3
 80075da:	1dfb      	adds	r3, r7, #7
 80075dc:	462a      	mov	r2, r5
 80075de:	701a      	strb	r2, [r3, #0]
 80075e0:	1d3b      	adds	r3, r7, #4
 80075e2:	4622      	mov	r2, r4
 80075e4:	801a      	strh	r2, [r3, #0]
 80075e6:	1cbb      	adds	r3, r7, #2
 80075e8:	4602      	mov	r2, r0
 80075ea:	801a      	strh	r2, [r3, #0]
 80075ec:	1dbb      	adds	r3, r7, #6
 80075ee:	460a      	mov	r2, r1
 80075f0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80075f2:	f107 0310 	add.w	r3, r7, #16
 80075f6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80075fa:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80075fe:	3308      	adds	r3, #8
 8007600:	f107 0210 	add.w	r2, r7, #16
 8007604:	4413      	add	r3, r2
 8007606:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800760a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800760e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8007612:	4413      	add	r3, r2
 8007614:	3309      	adds	r3, #9
 8007616:	f107 0210 	add.w	r2, r7, #16
 800761a:	4413      	add	r3, r2
 800761c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007620:	f107 030f 	add.w	r3, r7, #15
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800762e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007632:	1dfa      	adds	r2, r7, #7
 8007634:	7812      	ldrb	r2, [r2, #0]
 8007636:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007638:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800763c:	3301      	adds	r3, #1
 800763e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8007642:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007646:	1d3a      	adds	r2, r7, #4
 8007648:	8812      	ldrh	r2, [r2, #0]
 800764a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800764e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007652:	3302      	adds	r3, #2
 8007654:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8007658:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800765c:	1cba      	adds	r2, r7, #2
 800765e:	8812      	ldrh	r2, [r2, #0]
 8007660:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8007664:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007668:	3302      	adds	r3, #2
 800766a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800766e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007672:	1dba      	adds	r2, r7, #6
 8007674:	7812      	ldrb	r2, [r2, #0]
 8007676:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8007678:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800767c:	3301      	adds	r3, #1
 800767e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8007682:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007686:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800768a:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800768c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007690:	3301      	adds	r3, #1
 8007692:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 8007696:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800769a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800769e:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 80076a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076a4:	3301      	adds	r3, #1
 80076a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80076aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80076ae:	3308      	adds	r3, #8
 80076b0:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80076b4:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 fa0f 	bl	8008adc <Osal_MemCpy>
    index_input += Local_Name_Length;
 80076be:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80076c2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80076c6:	4413      	add	r3, r2
 80076c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80076cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076d0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80076d4:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80076d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076da:	3301      	adds	r3, #1
 80076dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80076e0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80076e4:	3301      	adds	r3, #1
 80076e6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80076ea:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80076ee:	4618      	mov	r0, r3
 80076f0:	f001 f9f4 	bl	8008adc <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80076f4:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80076f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80076fc:	4413      	add	r3, r2
 80076fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8007702:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007706:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800770a:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800770c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007710:	3302      	adds	r3, #2
 8007712:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8007716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800771a:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800771e:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8007720:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007724:	3302      	adds	r3, #2
 8007726:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800772a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800772e:	2218      	movs	r2, #24
 8007730:	2100      	movs	r1, #0
 8007732:	4618      	mov	r0, r3
 8007734:	f001 f9e2 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007738:	233f      	movs	r3, #63	; 0x3f
 800773a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800773e:	2383      	movs	r3, #131	; 0x83
 8007740:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007744:	f107 0310 	add.w	r3, r7, #16
 8007748:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800774c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007750:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007754:	f107 030f 	add.w	r3, r7, #15
 8007758:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800775c:	2301      	movs	r3, #1
 800775e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007762:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 f88b 	bl	8008884 <hci_send_req>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	da01      	bge.n	8007778 <aci_gap_set_discoverable+0x1ac>
    return BLE_STATUS_TIMEOUT;
 8007774:	23ff      	movs	r3, #255	; 0xff
 8007776:	e002      	b.n	800777e <aci_gap_set_discoverable+0x1b2>
  return status;
 8007778:	f107 030f 	add.w	r3, r7, #15
 800777c:	781b      	ldrb	r3, [r3, #0]
}
 800777e:	4618      	mov	r0, r3
 8007780:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8007784:	46bd      	mov	sp, r7
 8007786:	bdb0      	pop	{r4, r5, r7, pc}

08007788 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b0cc      	sub	sp, #304	; 0x130
 800778c:	af00      	add	r7, sp, #0
 800778e:	4602      	mov	r2, r0
 8007790:	1dfb      	adds	r3, r7, #7
 8007792:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 8007794:	f107 0310 	add.w	r3, r7, #16
 8007798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800779c:	f107 030f 	add.w	r3, r7, #15
 80077a0:	2200      	movs	r2, #0
 80077a2:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80077a4:	2300      	movs	r3, #0
 80077a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 80077aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80077ae:	1dfa      	adds	r2, r7, #7
 80077b0:	7812      	ldrb	r2, [r2, #0]
 80077b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80077b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077b8:	3301      	adds	r3, #1
 80077ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80077be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077c2:	2218      	movs	r2, #24
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f001 f998 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80077cc:	233f      	movs	r3, #63	; 0x3f
 80077ce:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 80077d2:	2385      	movs	r3, #133	; 0x85
 80077d4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80077d8:	f107 0310 	add.w	r3, r7, #16
 80077dc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80077e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80077e8:	f107 030f 	add.w	r3, r7, #15
 80077ec:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80077f0:	2301      	movs	r3, #1
 80077f2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80077f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077fa:	2100      	movs	r1, #0
 80077fc:	4618      	mov	r0, r3
 80077fe:	f001 f841 	bl	8008884 <hci_send_req>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	da01      	bge.n	800780c <aci_gap_set_io_capability+0x84>
    return BLE_STATUS_TIMEOUT;
 8007808:	23ff      	movs	r3, #255	; 0xff
 800780a:	e002      	b.n	8007812 <aci_gap_set_io_capability+0x8a>
  return status;
 800780c:	f107 030f 	add.w	r3, r7, #15
 8007810:	781b      	ldrb	r3, [r3, #0]
}
 8007812:	4618      	mov	r0, r3
 8007814:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800781c:	b5b0      	push	{r4, r5, r7, lr}
 800781e:	b0cc      	sub	sp, #304	; 0x130
 8007820:	af00      	add	r7, sp, #0
 8007822:	4605      	mov	r5, r0
 8007824:	460c      	mov	r4, r1
 8007826:	4610      	mov	r0, r2
 8007828:	4619      	mov	r1, r3
 800782a:	1dfb      	adds	r3, r7, #7
 800782c:	462a      	mov	r2, r5
 800782e:	701a      	strb	r2, [r3, #0]
 8007830:	1dbb      	adds	r3, r7, #6
 8007832:	4622      	mov	r2, r4
 8007834:	701a      	strb	r2, [r3, #0]
 8007836:	1d7b      	adds	r3, r7, #5
 8007838:	4602      	mov	r2, r0
 800783a:	701a      	strb	r2, [r3, #0]
 800783c:	1d3b      	adds	r3, r7, #4
 800783e:	460a      	mov	r2, r1
 8007840:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 8007842:	f107 0310 	add.w	r3, r7, #16
 8007846:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800784a:	f107 030f 	add.w	r3, r7, #15
 800784e:	2200      	movs	r2, #0
 8007850:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007852:	2300      	movs	r3, #0
 8007854:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 8007858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800785c:	1dfa      	adds	r2, r7, #7
 800785e:	7812      	ldrb	r2, [r2, #0]
 8007860:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007862:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007866:	3301      	adds	r3, #1
 8007868:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800786c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007870:	1dba      	adds	r2, r7, #6
 8007872:	7812      	ldrb	r2, [r2, #0]
 8007874:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8007876:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800787a:	3301      	adds	r3, #1
 800787c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 8007880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007884:	1d7a      	adds	r2, r7, #5
 8007886:	7812      	ldrb	r2, [r2, #0]
 8007888:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800788a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800788e:	3301      	adds	r3, #1
 8007890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8007894:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007898:	1d3a      	adds	r2, r7, #4
 800789a:	7812      	ldrb	r2, [r2, #0]
 800789c:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800789e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078a2:	3301      	adds	r3, #1
 80078a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 80078a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078ac:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 80078b0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80078b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078b6:	3301      	adds	r3, #1
 80078b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 80078bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078c0:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 80078c4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80078c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078ca:	3301      	adds	r3, #1
 80078cc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 80078d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078d4:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 80078d8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80078da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078de:	3301      	adds	r3, #1
 80078e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 80078e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80078ec:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 80078f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80078f4:	3304      	adds	r3, #4
 80078f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 80078fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078fe:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007902:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 8007904:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007908:	3301      	adds	r3, #1
 800790a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800790e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007912:	2218      	movs	r2, #24
 8007914:	2100      	movs	r1, #0
 8007916:	4618      	mov	r0, r3
 8007918:	f001 f8f0 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 800791c:	233f      	movs	r3, #63	; 0x3f
 800791e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 8007922:	2386      	movs	r3, #134	; 0x86
 8007924:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007928:	f107 0310 	add.w	r3, r7, #16
 800792c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007930:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007934:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007938:	f107 030f 	add.w	r3, r7, #15
 800793c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007940:	2301      	movs	r3, #1
 8007942:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007946:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800794a:	2100      	movs	r1, #0
 800794c:	4618      	mov	r0, r3
 800794e:	f000 ff99 	bl	8008884 <hci_send_req>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	da01      	bge.n	800795c <aci_gap_set_authentication_requirement+0x140>
    return BLE_STATUS_TIMEOUT;
 8007958:	23ff      	movs	r3, #255	; 0xff
 800795a:	e002      	b.n	8007962 <aci_gap_set_authentication_requirement+0x146>
  return status;
 800795c:	f107 030f 	add.w	r3, r7, #15
 8007960:	781b      	ldrb	r3, [r3, #0]
}
 8007962:	4618      	mov	r0, r3
 8007964:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007968:	46bd      	mov	sp, r7
 800796a:	bdb0      	pop	{r4, r5, r7, pc}

0800796c <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800796c:	b590      	push	{r4, r7, lr}
 800796e:	b0cd      	sub	sp, #308	; 0x134
 8007970:	af00      	add	r7, sp, #0
 8007972:	4604      	mov	r4, r0
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	463a      	mov	r2, r7
 800797a:	6013      	str	r3, [r2, #0]
 800797c:	1dfb      	adds	r3, r7, #7
 800797e:	4622      	mov	r2, r4
 8007980:	701a      	strb	r2, [r3, #0]
 8007982:	1dbb      	adds	r3, r7, #6
 8007984:	4602      	mov	r2, r0
 8007986:	701a      	strb	r2, [r3, #0]
 8007988:	1d7b      	adds	r3, r7, #5
 800798a:	460a      	mov	r2, r1
 800798c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800798e:	f107 0310 	add.w	r3, r7, #16
 8007992:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007996:	f107 0308 	add.w	r3, r7, #8
 800799a:	2207      	movs	r2, #7
 800799c:	2100      	movs	r1, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	f001 f8ac 	bl	8008afc <Osal_MemSet>
  int index_input = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80079aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079ae:	1dfa      	adds	r2, r7, #7
 80079b0:	7812      	ldrb	r2, [r2, #0]
 80079b2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80079b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079b8:	3301      	adds	r3, #1
 80079ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80079be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079c2:	1dba      	adds	r2, r7, #6
 80079c4:	7812      	ldrb	r2, [r2, #0]
 80079c6:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80079c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079cc:	3301      	adds	r3, #1
 80079ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 80079d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80079d6:	1d7a      	adds	r2, r7, #5
 80079d8:	7812      	ldrb	r2, [r2, #0]
 80079da:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80079dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80079e0:	3301      	adds	r3, #1
 80079e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80079e6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80079ea:	2218      	movs	r2, #24
 80079ec:	2100      	movs	r1, #0
 80079ee:	4618      	mov	r0, r3
 80079f0:	f001 f884 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80079f4:	233f      	movs	r3, #63	; 0x3f
 80079f6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 80079fa:	238a      	movs	r3, #138	; 0x8a
 80079fc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007a00:	f107 0310 	add.w	r3, r7, #16
 8007a04:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007a08:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007a0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007a10:	f107 0308 	add.w	r3, r7, #8
 8007a14:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007a18:	2307      	movs	r3, #7
 8007a1a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007a1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007a22:	2100      	movs	r1, #0
 8007a24:	4618      	mov	r0, r3
 8007a26:	f000 ff2d 	bl	8008884 <hci_send_req>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	da01      	bge.n	8007a34 <aci_gap_init+0xc8>
    return BLE_STATUS_TIMEOUT;
 8007a30:	23ff      	movs	r3, #255	; 0xff
 8007a32:	e021      	b.n	8007a78 <aci_gap_init+0x10c>
  if ( resp.Status )
 8007a34:	f107 0308 	add.w	r3, r7, #8
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <aci_gap_init+0xda>
    return resp.Status;
 8007a3e:	f107 0308 	add.w	r3, r7, #8
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	e018      	b.n	8007a78 <aci_gap_init+0x10c>
  *Service_Handle = resp.Service_Handle;
 8007a46:	f107 0308 	add.w	r3, r7, #8
 8007a4a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	463b      	mov	r3, r7
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8007a56:	f107 0308 	add.w	r3, r7, #8
 8007a5a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007a5e:	b29a      	uxth	r2, r3
 8007a60:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8007a64:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 8007a66:	f107 0308 	add.w	r3, r7, #8
 8007a6a:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8007a74:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd90      	pop	{r4, r7, pc}

08007a82 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b0cc      	sub	sp, #304	; 0x130
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	4602      	mov	r2, r0
 8007a8a:	463b      	mov	r3, r7
 8007a8c:	6019      	str	r1, [r3, #0]
 8007a8e:	1dfb      	adds	r3, r7, #7
 8007a90:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 8007a92:	f107 0310 	add.w	r3, r7, #16
 8007a96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007a9a:	f107 030f 	add.w	r3, r7, #15
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 8007aa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007aac:	1dfa      	adds	r2, r7, #7
 8007aae:	7812      	ldrb	r2, [r2, #0]
 8007ab0:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007ab2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 8007abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ac0:	1c58      	adds	r0, r3, #1
 8007ac2:	1dfb      	adds	r3, r7, #7
 8007ac4:	781a      	ldrb	r2, [r3, #0]
 8007ac6:	463b      	mov	r3, r7
 8007ac8:	6819      	ldr	r1, [r3, #0]
 8007aca:	f001 f807 	bl	8008adc <Osal_MemCpy>
  index_input += AdvDataLen;
 8007ace:	1dfb      	adds	r3, r7, #7
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007adc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ae0:	2218      	movs	r2, #24
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 f809 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007aea:	233f      	movs	r3, #63	; 0x3f
 8007aec:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 8007af0:	238e      	movs	r3, #142	; 0x8e
 8007af2:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007af6:	f107 0310 	add.w	r3, r7, #16
 8007afa:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007afe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007b02:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007b06:	f107 030f 	add.w	r3, r7, #15
 8007b0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b18:	2100      	movs	r1, #0
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 feb2 	bl	8008884 <hci_send_req>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da01      	bge.n	8007b2a <aci_gap_update_adv_data+0xa8>
    return BLE_STATUS_TIMEOUT;
 8007b26:	23ff      	movs	r3, #255	; 0xff
 8007b28:	e002      	b.n	8007b30 <aci_gap_update_adv_data+0xae>
  return status;
 8007b2a:	f107 030f 	add.w	r3, r7, #15
 8007b2e:	781b      	ldrb	r3, [r3, #0]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <aci_gap_configure_whitelist>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_whitelist( void )
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b088      	sub	sp, #32
 8007b3e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007b40:	2300      	movs	r3, #0
 8007b42:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007b44:	f107 0308 	add.w	r3, r7, #8
 8007b48:	2218      	movs	r2, #24
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	f000 ffd5 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007b52:	233f      	movs	r3, #63	; 0x3f
 8007b54:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 8007b56:	2392      	movs	r3, #146	; 0x92
 8007b58:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007b5a:	1dfb      	adds	r3, r7, #7
 8007b5c:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007b5e:	2301      	movs	r3, #1
 8007b60:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007b62:	f107 0308 	add.w	r3, r7, #8
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fe8b 	bl	8008884 <hci_send_req>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	da01      	bge.n	8007b78 <aci_gap_configure_whitelist+0x3e>
    return BLE_STATUS_TIMEOUT;
 8007b74:	23ff      	movs	r3, #255	; 0xff
 8007b76:	e000      	b.n	8007b7a <aci_gap_configure_whitelist+0x40>
  return status;
 8007b78:	79fb      	ldrb	r3, [r7, #7]
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b0cc      	sub	sp, #304	; 0x130
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	4602      	mov	r2, r0
 8007b8a:	1dbb      	adds	r3, r7, #6
 8007b8c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 8007b8e:	f107 0310 	add.w	r3, r7, #16
 8007b92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007b96:	f107 030f 	add.w	r3, r7, #15
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007ba8:	1dba      	adds	r2, r7, #6
 8007baa:	8812      	ldrh	r2, [r2, #0]
 8007bac:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bb2:	3302      	adds	r3, #2
 8007bb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007bb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bbc:	2218      	movs	r2, #24
 8007bbe:	2100      	movs	r1, #0
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f000 ff9b 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007bc6:	233f      	movs	r3, #63	; 0x3f
 8007bc8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 8007bcc:	2395      	movs	r3, #149	; 0x95
 8007bce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007bd2:	f107 0310 	add.w	r3, r7, #16
 8007bd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007bda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007bde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007be2:	f107 030f 	add.w	r3, r7, #15
 8007be6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007bea:	2301      	movs	r3, #1
 8007bec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007bf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 fe44 	bl	8008884 <hci_send_req>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	da01      	bge.n	8007c06 <aci_gap_allow_rebond+0x84>
    return BLE_STATUS_TIMEOUT;
 8007c02:	23ff      	movs	r3, #255	; 0xff
 8007c04:	e002      	b.n	8007c0c <aci_gap_allow_rebond+0x8a>
  return status;
 8007c06:	f107 030f 	add.w	r3, r7, #15
 8007c0a:	781b      	ldrb	r3, [r3, #0]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}

08007c16 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b0cc      	sub	sp, #304	; 0x130
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	1dbb      	adds	r3, r7, #6
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	1d7b      	adds	r3, r7, #5
 8007c24:	460a      	mov	r2, r1
 8007c26:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 8007c28:	f107 0310 	add.w	r3, r7, #16
 8007c2c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007c30:	f107 030f 	add.w	r3, r7, #15
 8007c34:	2200      	movs	r2, #0
 8007c36:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8007c3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c42:	1dba      	adds	r2, r7, #6
 8007c44:	8812      	ldrh	r2, [r2, #0]
 8007c46:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007c48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c4c:	3302      	adds	r3, #2
 8007c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007c56:	1d7a      	adds	r2, r7, #5
 8007c58:	7812      	ldrb	r2, [r2, #0]
 8007c5a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007c5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c60:	3301      	adds	r3, #1
 8007c62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007c66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c6a:	2218      	movs	r2, #24
 8007c6c:	2100      	movs	r1, #0
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f000 ff44 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007c74:	233f      	movs	r3, #63	; 0x3f
 8007c76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 8007c7a:	23a5      	movs	r3, #165	; 0xa5
 8007c7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007c80:	f107 0310 	add.w	r3, r7, #16
 8007c84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007c8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8007c90:	f107 030f 	add.w	r3, r7, #15
 8007c94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007c9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 fded 	bl	8008884 <hci_send_req>
 8007caa:	4603      	mov	r3, r0
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	da01      	bge.n	8007cb4 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
    return BLE_STATUS_TIMEOUT;
 8007cb0:	23ff      	movs	r3, #255	; 0xff
 8007cb2:	e002      	b.n	8007cba <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
  return status;
 8007cb4:	f107 030f 	add.w	r3, r7, #15
 8007cb8:	781b      	ldrb	r3, [r3, #0]
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b088      	sub	sp, #32
 8007cc8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007cce:	f107 0308 	add.w	r3, r7, #8
 8007cd2:	2218      	movs	r2, #24
 8007cd4:	2100      	movs	r1, #0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 ff10 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007cdc:	233f      	movs	r3, #63	; 0x3f
 8007cde:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 8007ce0:	f240 1301 	movw	r3, #257	; 0x101
 8007ce4:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8007ce6:	1dfb      	adds	r3, r7, #7
 8007ce8:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8007cea:	2301      	movs	r3, #1
 8007cec:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007cee:	f107 0308 	add.w	r3, r7, #8
 8007cf2:	2100      	movs	r1, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f000 fdc5 	bl	8008884 <hci_send_req>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	da01      	bge.n	8007d04 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007d00:	23ff      	movs	r3, #255	; 0xff
 8007d02:	e000      	b.n	8007d06 <aci_gatt_init+0x42>
  return status;
 8007d04:	79fb      	ldrb	r3, [r7, #7]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3720      	adds	r7, #32
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007d0e:	b590      	push	{r4, r7, lr}
 8007d10:	b0cf      	sub	sp, #316	; 0x13c
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	4604      	mov	r4, r0
 8007d16:	4638      	mov	r0, r7
 8007d18:	6001      	str	r1, [r0, #0]
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	1dfb      	adds	r3, r7, #7
 8007d20:	4622      	mov	r2, r4
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	1dbb      	adds	r3, r7, #6
 8007d26:	4602      	mov	r2, r0
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	1d7b      	adds	r3, r7, #5
 8007d2c:	460a      	mov	r2, r1
 8007d2e:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8007d38:	1dfb      	adds	r3, r7, #7
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d007      	beq.n	8007d50 <aci_gatt_add_service+0x42>
 8007d40:	1dfb      	adds	r3, r7, #7
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b02      	cmp	r3, #2
 8007d46:	d101      	bne.n	8007d4c <aci_gatt_add_service+0x3e>
 8007d48:	2311      	movs	r3, #17
 8007d4a:	e002      	b.n	8007d52 <aci_gatt_add_service+0x44>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <aci_gatt_add_service+0x44>
 8007d50:	2303      	movs	r3, #3
 8007d52:	f107 0210 	add.w	r2, r7, #16
 8007d56:	4413      	add	r3, r2
 8007d58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007d5c:	f107 030c 	add.w	r3, r7, #12
 8007d60:	2203      	movs	r2, #3
 8007d62:	2100      	movs	r1, #0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fec9 	bl	8008afc <Osal_MemSet>
  int index_input = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007d70:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007d74:	1dfa      	adds	r2, r7, #7
 8007d76:	7812      	ldrb	r2, [r2, #0]
 8007d78:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8007d7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d7e:	3301      	adds	r3, #1
 8007d80:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007d84:	1dfb      	adds	r3, r7, #7
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d002      	beq.n	8007d92 <aci_gatt_add_service+0x84>
 8007d8c:	2b02      	cmp	r3, #2
 8007d8e:	d004      	beq.n	8007d9a <aci_gatt_add_service+0x8c>
 8007d90:	e007      	b.n	8007da2 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 8007d92:	2302      	movs	r3, #2
 8007d94:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007d98:	e005      	b.n	8007da6 <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 8007d9a:	2310      	movs	r3, #16
 8007d9c:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8007da0:	e001      	b.n	8007da6 <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 8007da2:	2347      	movs	r3, #71	; 0x47
 8007da4:	e05d      	b.n	8007e62 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8007da6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007daa:	1c58      	adds	r0, r3, #1
 8007dac:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8007db0:	463b      	mov	r3, r7
 8007db2:	6819      	ldr	r1, [r3, #0]
 8007db4:	f000 fe92 	bl	8008adc <Osal_MemCpy>
    index_input += size;
 8007db8:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8007dbc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8007dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dca:	1dba      	adds	r2, r7, #6
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8007dd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8007dda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007dde:	1d7a      	adds	r2, r7, #5
 8007de0:	7812      	ldrb	r2, [r2, #0]
 8007de2:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8007de4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007de8:	3301      	adds	r3, #1
 8007dea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007dee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007df2:	2218      	movs	r2, #24
 8007df4:	2100      	movs	r1, #0
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fe80 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007dfc:	233f      	movs	r3, #63	; 0x3f
 8007dfe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007e02:	f44f 7381 	mov.w	r3, #258	; 0x102
 8007e06:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8007e0a:	f107 0310 	add.w	r3, r7, #16
 8007e0e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007e12:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007e16:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8007e1a:	f107 030c 	add.w	r3, r7, #12
 8007e1e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007e22:	2303      	movs	r3, #3
 8007e24:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007e28:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fd28 	bl	8008884 <hci_send_req>
 8007e34:	4603      	mov	r3, r0
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	da01      	bge.n	8007e3e <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 8007e3a:	23ff      	movs	r3, #255	; 0xff
 8007e3c:	e011      	b.n	8007e62 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8007e3e:	f107 030c 	add.w	r3, r7, #12
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d003      	beq.n	8007e50 <aci_gatt_add_service+0x142>
    return resp.Status;
 8007e48:	f107 030c 	add.w	r3, r7, #12
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	e008      	b.n	8007e62 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8007e50:	f107 030c 	add.w	r3, r7, #12
 8007e54:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007e5e:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd90      	pop	{r4, r7, pc}

08007e6c <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007e6c:	b590      	push	{r4, r7, lr}
 8007e6e:	b0d1      	sub	sp, #324	; 0x144
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4604      	mov	r4, r0
 8007e74:	4608      	mov	r0, r1
 8007e76:	f107 0108 	add.w	r1, r7, #8
 8007e7a:	600a      	str	r2, [r1, #0]
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	f107 030e 	add.w	r3, r7, #14
 8007e82:	4622      	mov	r2, r4
 8007e84:	801a      	strh	r2, [r3, #0]
 8007e86:	f107 030d 	add.w	r3, r7, #13
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	701a      	strb	r2, [r3, #0]
 8007e8e:	1dbb      	adds	r3, r7, #6
 8007e90:	460a      	mov	r2, r1
 8007e92:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8007e94:	f107 0318 	add.w	r3, r7, #24
 8007e98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8007e9c:	f107 030d 	add.w	r3, r7, #13
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d008      	beq.n	8007eb8 <aci_gatt_add_char+0x4c>
 8007ea6:	f107 030d 	add.w	r3, r7, #13
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b02      	cmp	r3, #2
 8007eae:	d101      	bne.n	8007eb4 <aci_gatt_add_char+0x48>
 8007eb0:	2313      	movs	r3, #19
 8007eb2:	e002      	b.n	8007eba <aci_gatt_add_char+0x4e>
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e000      	b.n	8007eba <aci_gatt_add_char+0x4e>
 8007eb8:	2305      	movs	r3, #5
 8007eba:	f107 0218 	add.w	r2, r7, #24
 8007ebe:	4413      	add	r3, r2
 8007ec0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007ec4:	f107 0314 	add.w	r3, r7, #20
 8007ec8:	2203      	movs	r2, #3
 8007eca:	2100      	movs	r1, #0
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f000 fe15 	bl	8008afc <Osal_MemSet>
  int index_input = 0;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8007ed8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007edc:	f107 020e 	add.w	r2, r7, #14
 8007ee0:	8812      	ldrh	r2, [r2, #0]
 8007ee2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8007ee4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007ee8:	3302      	adds	r3, #2
 8007eea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007eee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007ef2:	f107 020d 	add.w	r2, r7, #13
 8007ef6:	7812      	ldrb	r2, [r2, #0]
 8007ef8:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8007efa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007efe:	3301      	adds	r3, #1
 8007f00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007f04:	f107 030d 	add.w	r3, r7, #13
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d002      	beq.n	8007f14 <aci_gatt_add_char+0xa8>
 8007f0e:	2b02      	cmp	r3, #2
 8007f10:	d004      	beq.n	8007f1c <aci_gatt_add_char+0xb0>
 8007f12:	e007      	b.n	8007f24 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8007f14:	2302      	movs	r3, #2
 8007f16:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007f1a:	e005      	b.n	8007f28 <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8007f1c:	2310      	movs	r3, #16
 8007f1e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007f22:	e001      	b.n	8007f28 <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8007f24:	2347      	movs	r3, #71	; 0x47
 8007f26:	e086      	b.n	8008036 <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8007f28:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007f2c:	1cd8      	adds	r0, r3, #3
 8007f2e:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007f32:	f107 0308 	add.w	r3, r7, #8
 8007f36:	6819      	ldr	r1, [r3, #0]
 8007f38:	f000 fdd0 	bl	8008adc <Osal_MemCpy>
    index_input += size;
 8007f3c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007f40:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007f44:	4413      	add	r3, r2
 8007f46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8007f4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f4e:	1dba      	adds	r2, r7, #6
 8007f50:	8812      	ldrh	r2, [r2, #0]
 8007f52:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007f54:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f58:	3302      	adds	r3, #2
 8007f5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007f5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f62:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8007f66:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8007f68:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007f72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f76:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8007f7a:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007f7c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f80:	3301      	adds	r3, #1
 8007f82:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8007f86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f8a:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8007f8e:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8007f90:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007f94:	3301      	adds	r3, #1
 8007f96:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8007f9a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007f9e:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8007fa2:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8007fa4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fa8:	3301      	adds	r3, #1
 8007faa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8007fae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007fb2:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8007fb6:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8007fb8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007fc2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007fc6:	2218      	movs	r2, #24
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fd96 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8007fd0:	233f      	movs	r3, #63	; 0x3f
 8007fd2:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8007fd6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8007fda:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8007fde:	f107 0318 	add.w	r3, r7, #24
 8007fe2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8007fe6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007fea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007fee:	f107 0314 	add.w	r3, r7, #20
 8007ff2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007ffc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008000:	2100      	movs	r1, #0
 8008002:	4618      	mov	r0, r3
 8008004:	f000 fc3e 	bl	8008884 <hci_send_req>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	da01      	bge.n	8008012 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 800800e:	23ff      	movs	r3, #255	; 0xff
 8008010:	e011      	b.n	8008036 <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8008012:	f107 0314 	add.w	r3, r7, #20
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d003      	beq.n	8008024 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 800801c:	f107 0314 	add.w	r3, r7, #20
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	e008      	b.n	8008036 <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8008024:	f107 0314 	add.w	r3, r7, #20
 8008028:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800802c:	b29a      	uxth	r2, r3
 800802e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8008032:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800803c:	46bd      	mov	sp, r7
 800803e:	bd90      	pop	{r4, r7, pc}

08008040 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8008040:	b5b0      	push	{r4, r5, r7, lr}
 8008042:	b0cc      	sub	sp, #304	; 0x130
 8008044:	af00      	add	r7, sp, #0
 8008046:	4605      	mov	r5, r0
 8008048:	460c      	mov	r4, r1
 800804a:	4610      	mov	r0, r2
 800804c:	4619      	mov	r1, r3
 800804e:	1dbb      	adds	r3, r7, #6
 8008050:	462a      	mov	r2, r5
 8008052:	801a      	strh	r2, [r3, #0]
 8008054:	1d3b      	adds	r3, r7, #4
 8008056:	4622      	mov	r2, r4
 8008058:	801a      	strh	r2, [r3, #0]
 800805a:	1cfb      	adds	r3, r7, #3
 800805c:	4602      	mov	r2, r0
 800805e:	701a      	strb	r2, [r3, #0]
 8008060:	1cbb      	adds	r3, r7, #2
 8008062:	460a      	mov	r2, r1
 8008064:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8008066:	f107 0310 	add.w	r3, r7, #16
 800806a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800806e:	f107 030f 	add.w	r3, r7, #15
 8008072:	2200      	movs	r2, #0
 8008074:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008076:	2300      	movs	r3, #0
 8008078:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800807c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008080:	1dba      	adds	r2, r7, #6
 8008082:	8812      	ldrh	r2, [r2, #0]
 8008084:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8008086:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800808a:	3302      	adds	r3, #2
 800808c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8008090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008094:	1d3a      	adds	r2, r7, #4
 8008096:	8812      	ldrh	r2, [r2, #0]
 8008098:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800809a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800809e:	3302      	adds	r3, #2
 80080a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80080a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080a8:	1cfa      	adds	r2, r7, #3
 80080aa:	7812      	ldrb	r2, [r2, #0]
 80080ac:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80080ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080b2:	3301      	adds	r3, #1
 80080b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80080b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080bc:	1cba      	adds	r2, r7, #2
 80080be:	7812      	ldrb	r2, [r2, #0]
 80080c0:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80080c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80080c6:	3301      	adds	r3, #1
 80080c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80080cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80080d0:	1d98      	adds	r0, r3, #6
 80080d2:	1cbb      	adds	r3, r7, #2
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80080dc:	f000 fcfe 	bl	8008adc <Osal_MemCpy>
  index_input += Char_Value_Length;
 80080e0:	1cbb      	adds	r3, r7, #2
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80080e8:	4413      	add	r3, r2
 80080ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80080ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80080f2:	2218      	movs	r2, #24
 80080f4:	2100      	movs	r1, #0
 80080f6:	4618      	mov	r0, r3
 80080f8:	f000 fd00 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80080fc:	233f      	movs	r3, #63	; 0x3f
 80080fe:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8008102:	f44f 7383 	mov.w	r3, #262	; 0x106
 8008106:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800810a:	f107 0310 	add.w	r3, r7, #16
 800810e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008112:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008116:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800811a:	f107 030f 	add.w	r3, r7, #15
 800811e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008122:	2301      	movs	r3, #1
 8008124:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008128:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800812c:	2100      	movs	r1, #0
 800812e:	4618      	mov	r0, r3
 8008130:	f000 fba8 	bl	8008884 <hci_send_req>
 8008134:	4603      	mov	r3, r0
 8008136:	2b00      	cmp	r3, #0
 8008138:	da01      	bge.n	800813e <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800813a:	23ff      	movs	r3, #255	; 0xff
 800813c:	e002      	b.n	8008144 <aci_gatt_update_char_value+0x104>
  return status;
 800813e:	f107 030f 	add.w	r3, r7, #15
 8008142:	781b      	ldrb	r3, [r3, #0]
}
 8008144:	4618      	mov	r0, r3
 8008146:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800814a:	46bd      	mov	sp, r7
 800814c:	bdb0      	pop	{r4, r5, r7, pc}

0800814e <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b0cc      	sub	sp, #304	; 0x130
 8008152:	af00      	add	r7, sp, #0
 8008154:	463b      	mov	r3, r7
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	1dfb      	adds	r3, r7, #7
 800815a:	4602      	mov	r2, r0
 800815c:	701a      	strb	r2, [r3, #0]
 800815e:	1dbb      	adds	r3, r7, #6
 8008160:	460a      	mov	r2, r1
 8008162:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 8008164:	f107 0310 	add.w	r3, r7, #16
 8008168:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800816c:	f107 030f 	add.w	r3, r7, #15
 8008170:	2200      	movs	r2, #0
 8008172:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008174:	2300      	movs	r3, #0
 8008176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800817a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800817e:	1dfa      	adds	r2, r7, #7
 8008180:	7812      	ldrb	r2, [r2, #0]
 8008182:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008184:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008188:	3301      	adds	r3, #1
 800818a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800818e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008192:	1dba      	adds	r2, r7, #6
 8008194:	7812      	ldrb	r2, [r2, #0]
 8008196:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008198:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800819c:	3301      	adds	r3, #1
 800819e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 80081a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081a6:	1c98      	adds	r0, r3, #2
 80081a8:	1dbb      	adds	r3, r7, #6
 80081aa:	781a      	ldrb	r2, [r3, #0]
 80081ac:	463b      	mov	r3, r7
 80081ae:	6819      	ldr	r1, [r3, #0]
 80081b0:	f000 fc94 	bl	8008adc <Osal_MemCpy>
  index_input += Length;
 80081b4:	1dbb      	adds	r3, r7, #6
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80081bc:	4413      	add	r3, r2
 80081be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80081c2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081c6:	2218      	movs	r2, #24
 80081c8:	2100      	movs	r1, #0
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 fc96 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80081d0:	233f      	movs	r3, #63	; 0x3f
 80081d2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 80081d6:	230c      	movs	r3, #12
 80081d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80081dc:	f107 0310 	add.w	r3, r7, #16
 80081e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80081e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80081e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80081ec:	f107 030f 	add.w	r3, r7, #15
 80081f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80081fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80081fe:	2100      	movs	r1, #0
 8008200:	4618      	mov	r0, r3
 8008202:	f000 fb3f 	bl	8008884 <hci_send_req>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	da01      	bge.n	8008210 <aci_hal_write_config_data+0xc2>
    return BLE_STATUS_TIMEOUT;
 800820c:	23ff      	movs	r3, #255	; 0xff
 800820e:	e002      	b.n	8008216 <aci_hal_write_config_data+0xc8>
  return status;
 8008210:	f107 030f 	add.w	r3, r7, #15
 8008214:	781b      	ldrb	r3, [r3, #0]
}
 8008216:	4618      	mov	r0, r3
 8008218:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b0cc      	sub	sp, #304	; 0x130
 8008224:	af00      	add	r7, sp, #0
 8008226:	4602      	mov	r2, r0
 8008228:	1dfb      	adds	r3, r7, #7
 800822a:	701a      	strb	r2, [r3, #0]
 800822c:	1dbb      	adds	r3, r7, #6
 800822e:	460a      	mov	r2, r1
 8008230:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 8008232:	f107 0310 	add.w	r3, r7, #16
 8008236:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800823a:	f107 030f 	add.w	r3, r7, #15
 800823e:	2200      	movs	r2, #0
 8008240:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8008242:	2300      	movs	r3, #0
 8008244:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 8008248:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800824c:	1dfa      	adds	r2, r7, #7
 800824e:	7812      	ldrb	r2, [r2, #0]
 8008250:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8008252:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008256:	3301      	adds	r3, #1
 8008258:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800825c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008260:	1dba      	adds	r2, r7, #6
 8008262:	7812      	ldrb	r2, [r2, #0]
 8008264:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8008266:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800826a:	3301      	adds	r3, #1
 800826c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008270:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008274:	2218      	movs	r2, #24
 8008276:	2100      	movs	r1, #0
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fc3f 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 800827e:	233f      	movs	r3, #63	; 0x3f
 8008280:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 8008284:	230f      	movs	r3, #15
 8008286:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800828a:	f107 0310 	add.w	r3, r7, #16
 800828e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008292:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008296:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800829a:	f107 030f 	add.w	r3, r7, #15
 800829e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80082a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80082ac:	2100      	movs	r1, #0
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fae8 	bl	8008884 <hci_send_req>
 80082b4:	4603      	mov	r3, r0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	da01      	bge.n	80082be <aci_hal_set_tx_power_level+0x9e>
    return BLE_STATUS_TIMEOUT;
 80082ba:	23ff      	movs	r3, #255	; 0xff
 80082bc:	e002      	b.n	80082c4 <aci_hal_set_tx_power_level+0xa4>
  return status;
 80082be:	f107 030f 	add.w	r3, r7, #15
 80082c2:	781b      	ldrb	r3, [r3, #0]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b0cc      	sub	sp, #304	; 0x130
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	4602      	mov	r2, r0
 80082d6:	1dbb      	adds	r3, r7, #6
 80082d8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 80082da:	f107 0310 	add.w	r3, r7, #16
 80082de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80082e2:	f107 030f 	add.w	r3, r7, #15
 80082e6:	2200      	movs	r2, #0
 80082e8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80082ea:	2300      	movs	r3, #0
 80082ec:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80082f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80082f4:	1dba      	adds	r2, r7, #6
 80082f6:	8812      	ldrh	r2, [r2, #0]
 80082f8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80082fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082fe:	3302      	adds	r3, #2
 8008300:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8008304:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008308:	2218      	movs	r2, #24
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f000 fbf5 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 8008312:	233f      	movs	r3, #63	; 0x3f
 8008314:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 8008318:	2318      	movs	r3, #24
 800831a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800831e:	f107 0310 	add.w	r3, r7, #16
 8008322:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800832a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800832e:	f107 030f 	add.w	r3, r7, #15
 8008332:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008336:	2301      	movs	r3, #1
 8008338:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800833c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008340:	2100      	movs	r1, #0
 8008342:	4618      	mov	r0, r3
 8008344:	f000 fa9e 	bl	8008884 <hci_send_req>
 8008348:	4603      	mov	r3, r0
 800834a:	2b00      	cmp	r3, #0
 800834c:	da01      	bge.n	8008352 <aci_hal_set_radio_activity_mask+0x84>
    return BLE_STATUS_TIMEOUT;
 800834e:	23ff      	movs	r3, #255	; 0xff
 8008350:	e002      	b.n	8008358 <aci_hal_set_radio_activity_mask+0x8a>
  return status;
 8008352:	f107 030f 	add.w	r3, r7, #15
 8008356:	781b      	ldrb	r3, [r3, #0]
}
 8008358:	4618      	mov	r0, r3
 800835a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b088      	sub	sp, #32
 8008366:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 8008368:	2300      	movs	r3, #0
 800836a:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800836c:	f107 0308 	add.w	r3, r7, #8
 8008370:	2218      	movs	r2, #24
 8008372:	2100      	movs	r1, #0
 8008374:	4618      	mov	r0, r3
 8008376:	f000 fbc1 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x03;
 800837a:	2303      	movs	r3, #3
 800837c:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800837e:	2303      	movs	r3, #3
 8008380:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8008382:	1dfb      	adds	r3, r7, #7
 8008384:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8008386:	2301      	movs	r3, #1
 8008388:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800838a:	f107 0308 	add.w	r3, r7, #8
 800838e:	2100      	movs	r1, #0
 8008390:	4618      	mov	r0, r3
 8008392:	f000 fa77 	bl	8008884 <hci_send_req>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	da01      	bge.n	80083a0 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800839c:	23ff      	movs	r3, #255	; 0xff
 800839e:	e000      	b.n	80083a2 <hci_reset+0x40>
  return status;
 80083a0:	79fb      	ldrb	r3, [r7, #7]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3720      	adds	r7, #32
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b0ce      	sub	sp, #312	; 0x138
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	f107 0308 	add.w	r3, r7, #8
 80083b4:	6019      	str	r1, [r3, #0]
 80083b6:	1d3b      	adds	r3, r7, #4
 80083b8:	601a      	str	r2, [r3, #0]
 80083ba:	f107 030e 	add.w	r3, r7, #14
 80083be:	4602      	mov	r2, r0
 80083c0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 80083c2:	f107 0318 	add.w	r3, r7, #24
 80083c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80083ca:	f107 0310 	add.w	r3, r7, #16
 80083ce:	2205      	movs	r2, #5
 80083d0:	2100      	movs	r1, #0
 80083d2:	4618      	mov	r0, r3
 80083d4:	f000 fb92 	bl	8008afc <Osal_MemSet>
  int index_input = 0;
 80083d8:	2300      	movs	r3, #0
 80083da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 80083de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80083e2:	f107 020e 	add.w	r2, r7, #14
 80083e6:	8812      	ldrh	r2, [r2, #0]
 80083e8:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80083ea:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083ee:	3302      	adds	r3, #2
 80083f0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80083f4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80083f8:	2218      	movs	r2, #24
 80083fa:	2100      	movs	r1, #0
 80083fc:	4618      	mov	r0, r3
 80083fe:	f000 fb7d 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x08;
 8008402:	2308      	movs	r3, #8
 8008404:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 8008408:	2330      	movs	r3, #48	; 0x30
 800840a:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800840e:	f107 0318 	add.w	r3, r7, #24
 8008412:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8008416:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800841a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800841e:	f107 0310 	add.w	r3, r7, #16
 8008422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8008426:	2305      	movs	r3, #5
 8008428:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800842c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8008430:	2100      	movs	r1, #0
 8008432:	4618      	mov	r0, r3
 8008434:	f000 fa26 	bl	8008884 <hci_send_req>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	da01      	bge.n	8008442 <hci_le_read_phy+0x98>
    return BLE_STATUS_TIMEOUT;
 800843e:	23ff      	movs	r3, #255	; 0xff
 8008440:	e016      	b.n	8008470 <hci_le_read_phy+0xc6>
  if ( resp.Status )
 8008442:	f107 0310 	add.w	r3, r7, #16
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d003      	beq.n	8008454 <hci_le_read_phy+0xaa>
    return resp.Status;
 800844c:	f107 0310 	add.w	r3, r7, #16
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	e00d      	b.n	8008470 <hci_le_read_phy+0xc6>
  *TX_PHY = resp.TX_PHY;
 8008454:	f107 0310 	add.w	r3, r7, #16
 8008458:	78da      	ldrb	r2, [r3, #3]
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 8008462:	f107 0310 	add.w	r3, r7, #16
 8008466:	791a      	ldrb	r2, [r3, #4]
 8008468:	1d3b      	adds	r3, r7, #4
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8008476:	46bd      	mov	sp, r7
 8008478:	bd80      	pop	{r7, pc}

0800847a <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800847a:	b590      	push	{r4, r7, lr}
 800847c:	b0cd      	sub	sp, #308	; 0x134
 800847e:	af00      	add	r7, sp, #0
 8008480:	4604      	mov	r4, r0
 8008482:	4608      	mov	r0, r1
 8008484:	4611      	mov	r1, r2
 8008486:	1dfb      	adds	r3, r7, #7
 8008488:	4622      	mov	r2, r4
 800848a:	701a      	strb	r2, [r3, #0]
 800848c:	1dbb      	adds	r3, r7, #6
 800848e:	4602      	mov	r2, r0
 8008490:	701a      	strb	r2, [r3, #0]
 8008492:	1d7b      	adds	r3, r7, #5
 8008494:	460a      	mov	r2, r1
 8008496:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 8008498:	f107 0310 	add.w	r3, r7, #16
 800849c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80084a0:	f107 030f 	add.w	r3, r7, #15
 80084a4:	2200      	movs	r2, #0
 80084a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 80084ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084b2:	1dfa      	adds	r2, r7, #7
 80084b4:	7812      	ldrb	r2, [r2, #0]
 80084b6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80084b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084bc:	3301      	adds	r3, #1
 80084be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 80084c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084c6:	1dba      	adds	r2, r7, #6
 80084c8:	7812      	ldrb	r2, [r2, #0]
 80084ca:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 80084cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084d0:	3301      	adds	r3, #1
 80084d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 80084d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80084da:	1d7a      	adds	r2, r7, #5
 80084dc:	7812      	ldrb	r2, [r2, #0]
 80084de:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 80084e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80084e4:	3301      	adds	r3, #1
 80084e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80084ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80084ee:	2218      	movs	r2, #24
 80084f0:	2100      	movs	r1, #0
 80084f2:	4618      	mov	r0, r3
 80084f4:	f000 fb02 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x08;
 80084f8:	2308      	movs	r3, #8
 80084fa:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 80084fe:	2331      	movs	r3, #49	; 0x31
 8008500:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8008504:	f107 0310 	add.w	r3, r7, #16
 8008508:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800850c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008510:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8008514:	f107 030f 	add.w	r3, r7, #15
 8008518:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800851c:	2301      	movs	r3, #1
 800851e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008522:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8008526:	2100      	movs	r1, #0
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f9ab 	bl	8008884 <hci_send_req>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	da01      	bge.n	8008538 <hci_le_set_default_phy+0xbe>
    return BLE_STATUS_TIMEOUT;
 8008534:	23ff      	movs	r3, #255	; 0xff
 8008536:	e002      	b.n	800853e <hci_le_set_default_phy+0xc4>
  return status;
 8008538:	f107 030f 	add.w	r3, r7, #15
 800853c:	781b      	ldrb	r3, [r3, #0]
}
 800853e:	4618      	mov	r0, r3
 8008540:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8008544:	46bd      	mov	sp, r7
 8008546:	bd90      	pop	{r4, r7, pc}

08008548 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Slave_latency,
                                                      uint16_t Timeout_Multiplier )
{
 8008548:	b5b0      	push	{r4, r5, r7, lr}
 800854a:	b0cc      	sub	sp, #304	; 0x130
 800854c:	af00      	add	r7, sp, #0
 800854e:	4605      	mov	r5, r0
 8008550:	460c      	mov	r4, r1
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	1dbb      	adds	r3, r7, #6
 8008558:	462a      	mov	r2, r5
 800855a:	801a      	strh	r2, [r3, #0]
 800855c:	1d3b      	adds	r3, r7, #4
 800855e:	4622      	mov	r2, r4
 8008560:	801a      	strh	r2, [r3, #0]
 8008562:	1cbb      	adds	r3, r7, #2
 8008564:	4602      	mov	r2, r0
 8008566:	801a      	strh	r2, [r3, #0]
 8008568:	463b      	mov	r3, r7
 800856a:	460a      	mov	r2, r1
 800856c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800856e:	f107 0310 	add.w	r3, r7, #16
 8008572:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8008576:	f107 030f 	add.w	r3, r7, #15
 800857a:	2200      	movs	r2, #0
 800857c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800857e:	2300      	movs	r3, #0
 8008580:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8008584:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8008588:	1dba      	adds	r2, r7, #6
 800858a:	8812      	ldrh	r2, [r2, #0]
 800858c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800858e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008592:	3302      	adds	r3, #2
 8008594:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 8008598:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800859c:	1d3a      	adds	r2, r7, #4
 800859e:	8812      	ldrh	r2, [r2, #0]
 80085a0:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80085a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085a6:	3302      	adds	r3, #2
 80085a8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 80085ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085b0:	1cba      	adds	r2, r7, #2
 80085b2:	8812      	ldrh	r2, [r2, #0]
 80085b4:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80085b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ba:	3302      	adds	r3, #2
 80085bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Slave_latency = Slave_latency;
 80085c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085c4:	463a      	mov	r2, r7
 80085c6:	8812      	ldrh	r2, [r2, #0]
 80085c8:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 80085ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085ce:	3302      	adds	r3, #2
 80085d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 80085d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80085d8:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80085dc:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 80085de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80085e2:	3302      	adds	r3, #2
 80085e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80085e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80085ec:	2218      	movs	r2, #24
 80085ee:	2100      	movs	r1, #0
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 fa83 	bl	8008afc <Osal_MemSet>
  rq.ogf = 0x3f;
 80085f6:	233f      	movs	r3, #63	; 0x3f
 80085f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 80085fc:	f240 1381 	movw	r3, #385	; 0x181
 8008600:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8008604:	230f      	movs	r3, #15
 8008606:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800860a:	f107 0310 	add.w	r3, r7, #16
 800860e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8008612:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008616:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800861a:	f107 030f 	add.w	r3, r7, #15
 800861e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8008622:	2301      	movs	r3, #1
 8008624:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8008628:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f000 f928 	bl	8008884 <hci_send_req>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	da01      	bge.n	800863e <aci_l2cap_connection_parameter_update_req+0xf6>
    return BLE_STATUS_TIMEOUT;
 800863a:	23ff      	movs	r3, #255	; 0xff
 800863c:	e002      	b.n	8008644 <aci_l2cap_connection_parameter_update_req+0xfc>
  return status;
 800863e:	f107 030f 	add.w	r3, r7, #15
 8008642:	781b      	ldrb	r3, [r3, #0]
}
 8008644:	4618      	mov	r0, r3
 8008646:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800864a:	46bd      	mov	sp, r7
 800864c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008650 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008656:	f3ef 8310 	mrs	r3, PRIMASK
 800865a:	60fb      	str	r3, [r7, #12]
  return(result);
 800865c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800865e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8008660:	b672      	cpsid	i

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 8008662:	1cbb      	adds	r3, r7, #2
 8008664:	4619      	mov	r1, r3
 8008666:	4812      	ldr	r0, [pc, #72]	; (80086b0 <DbgTrace_TxCpltCallback+0x60>)
 8008668:	f001 f819 	bl	800969e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800866c:	1cbb      	adds	r3, r7, #2
 800866e:	4619      	mov	r1, r3
 8008670:	480f      	ldr	r0, [pc, #60]	; (80086b0 <DbgTrace_TxCpltCallback+0x60>)
 8008672:	f001 f908 	bl	8009886 <CircularQueue_Sense>
 8008676:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00b      	beq.n	8008696 <DbgTrace_TxCpltCallback+0x46>
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8008688:	887b      	ldrh	r3, [r7, #2]
 800868a:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <DbgTrace_TxCpltCallback+0x64>)
 800868c:	4619      	mov	r1, r3
 800868e:	6938      	ldr	r0, [r7, #16]
 8008690:	f7f8 f873 	bl	800077a <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8008694:	e007      	b.n	80086a6 <DbgTrace_TxCpltCallback+0x56>
    DbgTracePeripheralReady = SET;
 8008696:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <DbgTrace_TxCpltCallback+0x68>)
 8008698:	2201      	movs	r2, #1
 800869a:	701a      	strb	r2, [r3, #0]
 800869c:	697b      	ldr	r3, [r7, #20]
 800869e:	607b      	str	r3, [r7, #4]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f383 8810 	msr	PRIMASK, r3
}
 80086a6:	bf00      	nop
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop
 80086b0:	2000024c 	.word	0x2000024c
 80086b4:	08008651 	.word	0x08008651
 80086b8:	2000003d 	.word	0x2000003d

080086bc <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80086c2:	f7f8 f854 	bl	800076e <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80086c6:	2302      	movs	r3, #2
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	2300      	movs	r3, #0
 80086cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086d0:	4903      	ldr	r1, [pc, #12]	; (80086e0 <DbgTraceInit+0x24>)
 80086d2:	4804      	ldr	r0, [pc, #16]	; (80086e4 <DbgTraceInit+0x28>)
 80086d4:	f000 fd8a 	bl	80091ec <CircularQueue_Init>
#endif 
#endif
  return;
 80086d8:	bf00      	nop
}
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	2000026c 	.word	0x2000026c
 80086e4:	2000024c 	.word	0x2000024c

080086e8 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b084      	sub	sp, #16
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	68b9      	ldr	r1, [r7, #8]
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f805 	bl	8008708 <DbgTraceWrite>
 80086fe:	4603      	mov	r3, r0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08a      	sub	sp, #40	; 0x28
 800870c:	af00      	add	r7, sp, #0
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8008714:	2300      	movs	r3, #0
 8008716:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008718:	f3ef 8310 	mrs	r3, PRIMASK
 800871c:	61bb      	str	r3, [r7, #24]
  return(result);
 800871e:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8008720:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008728:	d102      	bne.n	8008730 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800872a:	2300      	movs	r3, #0
 800872c:	627b      	str	r3, [r7, #36]	; 0x24
 800872e:	e034      	b.n	800879a <DbgTraceWrite+0x92>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b01      	cmp	r3, #1
 8008734:	d006      	beq.n	8008744 <DbgTraceWrite+0x3c>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b02      	cmp	r3, #2
 800873a:	d003      	beq.n	8008744 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800873c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
 8008742:	e02a      	b.n	800879a <DbgTraceWrite+0x92>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d027      	beq.n	800879a <DbgTraceWrite+0x92>
  {
    chars_written = bufSize;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800874e:	b672      	cpsid	i
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	b29a      	uxth	r2, r3
 8008754:	2301      	movs	r3, #1
 8008756:	68b9      	ldr	r1, [r7, #8]
 8008758:	4812      	ldr	r0, [pc, #72]	; (80087a4 <DbgTraceWrite+0x9c>)
 800875a:	f000 fd79 	bl	8009250 <CircularQueue_Add>
 800875e:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d014      	beq.n	8008790 <DbgTraceWrite+0x88>
 8008766:	4b10      	ldr	r3, [pc, #64]	; (80087a8 <DbgTraceWrite+0xa0>)
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00f      	beq.n	8008790 <DbgTraceWrite+0x88>
    {
      DbgTracePeripheralReady = RESET;
 8008770:	4b0d      	ldr	r3, [pc, #52]	; (80087a8 <DbgTraceWrite+0xa0>)
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
 8008776:	6a3b      	ldr	r3, [r7, #32]
 8008778:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f383 8810 	msr	PRIMASK, r3
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	b29b      	uxth	r3, r3
 8008784:	4a09      	ldr	r2, [pc, #36]	; (80087ac <DbgTraceWrite+0xa4>)
 8008786:	4619      	mov	r1, r3
 8008788:	69f8      	ldr	r0, [r7, #28]
 800878a:	f7f7 fff6 	bl	800077a <DbgOutputTraces>
 800878e:	e004      	b.n	800879a <DbgTraceWrite+0x92>
 8008790:	6a3b      	ldr	r3, [r7, #32]
 8008792:	613b      	str	r3, [r7, #16]
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	f383 8810 	msr	PRIMASK, r3
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800879c:	4618      	mov	r0, r3
 800879e:	3728      	adds	r7, #40	; 0x28
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	2000024c 	.word	0x2000024c
 80087a8:	2000003d 	.word	0x2000003d
 80087ac:	08008651 	.word	0x08008651

080087b0 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b082      	sub	sp, #8
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	685b      	ldr	r3, [r3, #4]
 80087be:	4a08      	ldr	r2, [pc, #32]	; (80087e0 <hci_init+0x30>)
 80087c0:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 80087c2:	4a08      	ldr	r2, [pc, #32]	; (80087e4 <hci_init+0x34>)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 80087c8:	4806      	ldr	r0, [pc, #24]	; (80087e4 <hci_init+0x34>)
 80087ca:	f000 f973 	bl	8008ab4 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 f8d4 	bl	8008980 <TlInit>

  return;
 80087d8:	bf00      	nop
}
 80087da:	3708      	adds	r7, #8
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	20001294 	.word	0x20001294
 80087e4:	2000126c 	.word	0x2000126c

080087e8 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 80087ee:	4822      	ldr	r0, [pc, #136]	; (8008878 <hci_user_evt_proc+0x90>)
 80087f0:	f000 fc58 	bl	80090a4 <LST_is_empty>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d12b      	bne.n	8008852 <hci_user_evt_proc+0x6a>
 80087fa:	4b20      	ldr	r3, [pc, #128]	; (800887c <hci_user_evt_proc+0x94>)
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d027      	beq.n	8008852 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008802:	f107 030c 	add.w	r3, r7, #12
 8008806:	4619      	mov	r1, r3
 8008808:	481b      	ldr	r0, [pc, #108]	; (8008878 <hci_user_evt_proc+0x90>)
 800880a:	f000 fcd2 	bl	80091b2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800880e:	4b1c      	ldr	r3, [pc, #112]	; (8008880 <hci_user_evt_proc+0x98>)
 8008810:	69db      	ldr	r3, [r3, #28]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00c      	beq.n	8008830 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800881a:	2301      	movs	r3, #1
 800881c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800881e:	4b18      	ldr	r3, [pc, #96]	; (8008880 <hci_user_evt_proc+0x98>)
 8008820:	69db      	ldr	r3, [r3, #28]
 8008822:	1d3a      	adds	r2, r7, #4
 8008824:	4610      	mov	r0, r2
 8008826:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8008828:	793a      	ldrb	r2, [r7, #4]
 800882a:	4b14      	ldr	r3, [pc, #80]	; (800887c <hci_user_evt_proc+0x94>)
 800882c:	701a      	strb	r2, [r3, #0]
 800882e:	e002      	b.n	8008836 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8008830:	4b12      	ldr	r3, [pc, #72]	; (800887c <hci_user_evt_proc+0x94>)
 8008832:	2201      	movs	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8008836:	4b11      	ldr	r3, [pc, #68]	; (800887c <hci_user_evt_proc+0x94>)
 8008838:	781b      	ldrb	r3, [r3, #0]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	4618      	mov	r0, r3
 8008842:	f001 fb63 	bl	8009f0c <TL_MM_EvtDone>
 8008846:	e004      	b.n	8008852 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4619      	mov	r1, r3
 800884c:	480a      	ldr	r0, [pc, #40]	; (8008878 <hci_user_evt_proc+0x90>)
 800884e:	f000 fc49 	bl	80090e4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8008852:	4809      	ldr	r0, [pc, #36]	; (8008878 <hci_user_evt_proc+0x90>)
 8008854:	f000 fc26 	bl	80090a4 <LST_is_empty>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d107      	bne.n	800886e <hci_user_evt_proc+0x86>
 800885e:	4b07      	ldr	r3, [pc, #28]	; (800887c <hci_user_evt_proc+0x94>)
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d003      	beq.n	800886e <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8008866:	4804      	ldr	r0, [pc, #16]	; (8008878 <hci_user_evt_proc+0x90>)
 8008868:	f7fa fafe 	bl	8002e68 <hci_notify_asynch_evt>
  }


  return;
 800886c:	bf00      	nop
 800886e:	bf00      	nop
}
 8008870:	3710      	adds	r7, #16
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	200001dc 	.word	0x200001dc
 800887c:	200001e8 	.word	0x200001e8
 8008880:	2000126c 	.word	0x2000126c

08008884 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b088      	sub	sp, #32
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
 800888c:	460b      	mov	r3, r1
 800888e:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8008890:	2000      	movs	r0, #0
 8008892:	f000 f8cb 	bl	8008a2c <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8008896:	2300      	movs	r3, #0
 8008898:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	885b      	ldrh	r3, [r3, #2]
 800889e:	b21b      	sxth	r3, r3
 80088a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088a4:	b21a      	sxth	r2, r3
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	881b      	ldrh	r3, [r3, #0]
 80088aa:	029b      	lsls	r3, r3, #10
 80088ac:	b21b      	sxth	r3, r3
 80088ae:	4313      	orrs	r3, r2
 80088b0:	b21b      	sxth	r3, r3
 80088b2:	83bb      	strh	r3, [r7, #28]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	b2d9      	uxtb	r1, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	689a      	ldr	r2, [r3, #8]
 80088be:	8bbb      	ldrh	r3, [r7, #28]
 80088c0:	4618      	mov	r0, r3
 80088c2:	f000 f88d 	bl	80089e0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 80088c6:	e04e      	b.n	8008966 <hci_send_req+0xe2>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 80088c8:	f248 00e8 	movw	r0, #33000	; 0x80e8
 80088cc:	f7fa fae3 	bl	8002e96 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 80088d0:	e043      	b.n	800895a <hci_send_req+0xd6>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 80088d2:	f107 030c 	add.w	r3, r7, #12
 80088d6:	4619      	mov	r1, r3
 80088d8:	4828      	ldr	r0, [pc, #160]	; (800897c <hci_send_req+0xf8>)
 80088da:	f000 fc6a 	bl	80091b2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	7a5b      	ldrb	r3, [r3, #9]
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	d114      	bne.n	8008910 <hci_send_req+0x8c>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	330b      	adds	r3, #11
 80088ea:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	885b      	ldrh	r3, [r3, #2]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	8bba      	ldrh	r2, [r7, #28]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d104      	bne.n	8008902 <hci_send_req+0x7e>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	693a      	ldr	r2, [r7, #16]
 80088fe:	7812      	ldrb	r2, [r2, #0]
 8008900:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	785b      	ldrb	r3, [r3, #1]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d027      	beq.n	800895a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800890a:	2301      	movs	r3, #1
 800890c:	77fb      	strb	r3, [r7, #31]
 800890e:	e024      	b.n	800895a <hci_send_req+0xd6>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	330b      	adds	r3, #11
 8008914:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8008916:	69bb      	ldr	r3, [r7, #24]
 8008918:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800891c:	b29b      	uxth	r3, r3
 800891e:	8bba      	ldrh	r2, [r7, #28]
 8008920:	429a      	cmp	r2, r3
 8008922:	d114      	bne.n	800894e <hci_send_req+0xca>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	7a9b      	ldrb	r3, [r3, #10]
 8008928:	3b03      	subs	r3, #3
 800892a:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	695a      	ldr	r2, [r3, #20]
 8008930:	7dfb      	ldrb	r3, [r7, #23]
 8008932:	429a      	cmp	r2, r3
 8008934:	bfa8      	it	ge
 8008936:	461a      	movge	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6918      	ldr	r0, [r3, #16]
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	1cd9      	adds	r1, r3, #3
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	695b      	ldr	r3, [r3, #20]
 8008948:	461a      	mov	r2, r3
 800894a:	f001 fe1f 	bl	800a58c <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	781b      	ldrb	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d001      	beq.n	800895a <hci_send_req+0xd6>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8008956:	2301      	movs	r3, #1
 8008958:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800895a:	4808      	ldr	r0, [pc, #32]	; (800897c <hci_send_req+0xf8>)
 800895c:	f000 fba2 	bl	80090a4 <LST_is_empty>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d0b5      	beq.n	80088d2 <hci_send_req+0x4e>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8008966:	7ffb      	ldrb	r3, [r7, #31]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d0ad      	beq.n	80088c8 <hci_send_req+0x44>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800896c:	2001      	movs	r0, #1
 800896e:	f000 f85d 	bl	8008a2c <NotifyCmdStatus>

  return 0;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	3720      	adds	r7, #32
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	2000128c 	.word	0x2000128c

08008980 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8008988:	480f      	ldr	r0, [pc, #60]	; (80089c8 <TlInit+0x48>)
 800898a:	f000 fb7b 	bl	8009084 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800898e:	4a0f      	ldr	r2, [pc, #60]	; (80089cc <TlInit+0x4c>)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8008994:	480e      	ldr	r0, [pc, #56]	; (80089d0 <TlInit+0x50>)
 8008996:	f000 fb75 	bl	8009084 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800899a:	4b0e      	ldr	r3, [pc, #56]	; (80089d4 <TlInit+0x54>)
 800899c:	2201      	movs	r2, #1
 800899e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 80089a0:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <TlInit+0x58>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d00a      	beq.n	80089be <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 80089ac:	4b0b      	ldr	r3, [pc, #44]	; (80089dc <TlInit+0x5c>)
 80089ae:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 80089b0:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <TlInit+0x58>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f107 0208 	add.w	r2, r7, #8
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
  }

  return;
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
}
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	2000128c 	.word	0x2000128c
 80089cc:	200001e4 	.word	0x200001e4
 80089d0:	200001dc 	.word	0x200001dc
 80089d4:	200001e8 	.word	0x200001e8
 80089d8:	2000126c 	.word	0x2000126c
 80089dc:	08008a6d 	.word	0x08008a6d

080089e0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	603a      	str	r2, [r7, #0]
 80089ea:	80fb      	strh	r3, [r7, #6]
 80089ec:	460b      	mov	r3, r1
 80089ee:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 80089f0:	4b0c      	ldr	r3, [pc, #48]	; (8008a24 <SendCmd+0x44>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	88fa      	ldrh	r2, [r7, #6]
 80089f6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 80089fa:	4b0a      	ldr	r3, [pc, #40]	; (8008a24 <SendCmd+0x44>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	797a      	ldrb	r2, [r7, #5]
 8008a00:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8008a02:	4b08      	ldr	r3, [pc, #32]	; (8008a24 <SendCmd+0x44>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	330c      	adds	r3, #12
 8008a08:	797a      	ldrb	r2, [r7, #5]
 8008a0a:	6839      	ldr	r1, [r7, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f001 fdbd 	bl	800a58c <memcpy>

  hciContext.io.Send(0,0);
 8008a12:	4b05      	ldr	r3, [pc, #20]	; (8008a28 <SendCmd+0x48>)
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	2100      	movs	r1, #0
 8008a18:	2000      	movs	r0, #0
 8008a1a:	4798      	blx	r3

  return;
 8008a1c:	bf00      	nop
}
 8008a1e:	3708      	adds	r7, #8
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	200001e4 	.word	0x200001e4
 8008a28:	2000126c 	.word	0x2000126c

08008a2c <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d108      	bne.n	8008a4e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <NotifyCmdStatus+0x3c>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d00d      	beq.n	8008a60 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8008a44:	4b08      	ldr	r3, [pc, #32]	; (8008a68 <NotifyCmdStatus+0x3c>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2000      	movs	r0, #0
 8008a4a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8008a4c:	e008      	b.n	8008a60 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <NotifyCmdStatus+0x3c>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8008a56:	4b04      	ldr	r3, [pc, #16]	; (8008a68 <NotifyCmdStatus+0x3c>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2001      	movs	r0, #1
 8008a5c:	4798      	blx	r3
  return;
 8008a5e:	bf00      	nop
 8008a60:	bf00      	nop
}
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20001294 	.word	0x20001294

08008a6c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	7a5b      	ldrb	r3, [r3, #9]
 8008a78:	2b0f      	cmp	r3, #15
 8008a7a:	d003      	beq.n	8008a84 <TlEvtReceived+0x18>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	7a5b      	ldrb	r3, [r3, #9]
 8008a80:	2b0e      	cmp	r3, #14
 8008a82:	d107      	bne.n	8008a94 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8008a84:	6879      	ldr	r1, [r7, #4]
 8008a86:	4809      	ldr	r0, [pc, #36]	; (8008aac <TlEvtReceived+0x40>)
 8008a88:	f000 fb50 	bl	800912c <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	f7fa f9f7 	bl	8002e80 <hci_cmd_resp_release>
 8008a92:	e006      	b.n	8008aa2 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8008a94:	6879      	ldr	r1, [r7, #4]
 8008a96:	4806      	ldr	r0, [pc, #24]	; (8008ab0 <TlEvtReceived+0x44>)
 8008a98:	f000 fb48 	bl	800912c <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008a9c:	4804      	ldr	r0, [pc, #16]	; (8008ab0 <TlEvtReceived+0x44>)
 8008a9e:	f7fa f9e3 	bl	8002e68 <hci_notify_asynch_evt>
  }

  return;
 8008aa2:	bf00      	nop
}
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2000128c 	.word	0x2000128c
 8008ab0:	200001dc 	.word	0x200001dc

08008ab4 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a05      	ldr	r2, [pc, #20]	; (8008ad4 <hci_register_io_bus+0x20>)
 8008ac0:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a04      	ldr	r2, [pc, #16]	; (8008ad8 <hci_register_io_bus+0x24>)
 8008ac6:	611a      	str	r2, [r3, #16]

  return;
 8008ac8:	bf00      	nop
}
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr
 8008ad4:	08009c85 	.word	0x08009c85
 8008ad8:	08009ced 	.word	0x08009ced

08008adc <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	68b9      	ldr	r1, [r7, #8]
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f001 fd4d 	bl	800a58c <memcpy>
 8008af2:	4603      	mov	r3, r0
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	68b9      	ldr	r1, [r7, #8]
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f001 fd48 	bl	800a5a2 <memset>
 8008b12:	4603      	mov	r3, r0
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b085      	sub	sp, #20
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	4603      	mov	r3, r0
 8008b24:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8008b26:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <OTP_Read+0x48>)
 8008b28:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008b2a:	e002      	b.n	8008b32 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	3b08      	subs	r3, #8
 8008b30:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	3307      	adds	r3, #7
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	79fa      	ldrb	r2, [r7, #7]
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d003      	beq.n	8008b46 <OTP_Read+0x2a>
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	4a09      	ldr	r2, [pc, #36]	; (8008b68 <OTP_Read+0x4c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d1f2      	bne.n	8008b2c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	3307      	adds	r3, #7
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	79fa      	ldrb	r2, [r7, #7]
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d001      	beq.n	8008b56 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8008b52:	2300      	movs	r3, #0
 8008b54:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8008b56:	68fb      	ldr	r3, [r7, #12]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	3714      	adds	r7, #20
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	1fff73f8 	.word	0x1fff73f8
 8008b68:	1fff7000 	.word	0x1fff7000

08008b6c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b08a      	sub	sp, #40	; 0x28
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blue_aci *blue_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 8008b74:	2300      	movs	r3, #0
 8008b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	781b      	ldrb	r3, [r3, #0]
 8008b84:	2bff      	cmp	r3, #255	; 0xff
 8008b86:	d000      	beq.n	8008b8a <PeerToPeer_Event_Handler+0x1e>
      }
    }
    break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8008b88:	e04d      	b.n	8008c26 <PeerToPeer_Event_Handler+0xba>
      blue_evt = (evt_blue_aci*)event_pckt->data;
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	3302      	adds	r3, #2
 8008b8e:	61fb      	str	r3, [r7, #28]
      switch(blue_evt->ecode)
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	881b      	ldrh	r3, [r3, #0]
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	461a      	mov	r2, r3
 8008b98:	f640 4301 	movw	r3, #3073	; 0xc01
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d000      	beq.n	8008ba2 <PeerToPeer_Event_Handler+0x36>
          break;
 8008ba0:	e040      	b.n	8008c24 <PeerToPeer_Event_Handler+0xb8>
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blue_evt->data;
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	3302      	adds	r3, #2
 8008ba6:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	885b      	ldrh	r3, [r3, #2]
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	461a      	mov	r2, r3
 8008bb0:	4b20      	ldr	r3, [pc, #128]	; (8008c34 <PeerToPeer_Event_Handler+0xc8>)
 8008bb2:	889b      	ldrh	r3, [r3, #4]
 8008bb4:	3302      	adds	r3, #2
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d118      	bne.n	8008bec <PeerToPeer_Event_Handler+0x80>
              return_value = SVCCTL_EvtAckFlowEnable;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 8008bc0:	69bb      	ldr	r3, [r7, #24]
 8008bc2:	7a1b      	ldrb	r3, [r3, #8]
 8008bc4:	f003 0301 	and.w	r3, r3, #1
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d007      	beq.n	8008bdc <PeerToPeer_Event_Handler+0x70>
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008bd0:	f107 0308 	add.w	r3, r7, #8
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f7fa f9a1 	bl	8002f1c <P2PS_STM_App_Notification>
        break;
 8008bda:	e022      	b.n	8008c22 <PeerToPeer_Event_Handler+0xb6>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 8008be0:	f107 0308 	add.w	r3, r7, #8
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7fa f999 	bl	8002f1c <P2PS_STM_App_Notification>
        break;
 8008bea:	e01a      	b.n	8008c22 <PeerToPeer_Event_Handler+0xb6>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	885b      	ldrh	r3, [r3, #2]
 8008bf0:	b29b      	uxth	r3, r3
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	4b0f      	ldr	r3, [pc, #60]	; (8008c34 <PeerToPeer_Event_Handler+0xc8>)
 8008bf6:	885b      	ldrh	r3, [r3, #2]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d111      	bne.n	8008c22 <PeerToPeer_Event_Handler+0xb6>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 8008bfe:	480e      	ldr	r0, [pc, #56]	; (8008c38 <PeerToPeer_Event_Handler+0xcc>)
 8008c00:	f001 fd4c 	bl	800a69c <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 8008c04:	2303      	movs	r3, #3
 8008c06:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	88db      	ldrh	r3, [r3, #6]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	3308      	adds	r3, #8
 8008c16:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 8008c18:	f107 0308 	add.w	r3, r7, #8
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fa f97d 	bl	8002f1c <P2PS_STM_App_Notification>
        break;
 8008c22:	bf00      	nop
    break; /* HCI_EVT_VENDOR_SPECIFIC */
 8008c24:	bf00      	nop
  }

  return(return_value);
 8008c26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3728      	adds	r7, #40	; 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
 8008c32:	bf00      	nop
 8008c34:	200001ec 	.word	0x200001ec
 8008c38:	0800bbe8 	.word	0x0800bbe8

08008c3c <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b08a      	sub	sp, #40	; 0x28
 8008c40:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 8008c42:	484a      	ldr	r0, [pc, #296]	; (8008d6c <P2PS_STM_Init+0x130>)
 8008c44:	f000 ff72 	bl	8009b2c <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 8008c48:	238f      	movs	r3, #143	; 0x8f
 8008c4a:	703b      	strb	r3, [r7, #0]
 8008c4c:	23e5      	movs	r3, #229	; 0xe5
 8008c4e:	707b      	strb	r3, [r7, #1]
 8008c50:	23b3      	movs	r3, #179	; 0xb3
 8008c52:	70bb      	strb	r3, [r7, #2]
 8008c54:	23d5      	movs	r3, #213	; 0xd5
 8008c56:	70fb      	strb	r3, [r7, #3]
 8008c58:	232e      	movs	r3, #46	; 0x2e
 8008c5a:	713b      	strb	r3, [r7, #4]
 8008c5c:	237f      	movs	r3, #127	; 0x7f
 8008c5e:	717b      	strb	r3, [r7, #5]
 8008c60:	234a      	movs	r3, #74	; 0x4a
 8008c62:	71bb      	strb	r3, [r7, #6]
 8008c64:	2398      	movs	r3, #152	; 0x98
 8008c66:	71fb      	strb	r3, [r7, #7]
 8008c68:	232a      	movs	r3, #42	; 0x2a
 8008c6a:	723b      	strb	r3, [r7, #8]
 8008c6c:	2348      	movs	r3, #72	; 0x48
 8008c6e:	727b      	strb	r3, [r7, #9]
 8008c70:	237a      	movs	r3, #122	; 0x7a
 8008c72:	72bb      	strb	r3, [r7, #10]
 8008c74:	23cc      	movs	r3, #204	; 0xcc
 8008c76:	72fb      	strb	r3, [r7, #11]
 8008c78:	2340      	movs	r3, #64	; 0x40
 8008c7a:	733b      	strb	r3, [r7, #12]
 8008c7c:	23fe      	movs	r3, #254	; 0xfe
 8008c7e:	737b      	strb	r3, [r7, #13]
 8008c80:	2300      	movs	r3, #0
 8008c82:	73bb      	strb	r3, [r7, #14]
 8008c84:	2300      	movs	r3, #0
 8008c86:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 8008c88:	4639      	mov	r1, r7
 8008c8a:	4b39      	ldr	r3, [pc, #228]	; (8008d70 <P2PS_STM_Init+0x134>)
 8008c8c:	9300      	str	r3, [sp, #0]
 8008c8e:	2308      	movs	r3, #8
 8008c90:	2201      	movs	r2, #1
 8008c92:	2002      	movs	r0, #2
 8008c94:	f7ff f83b 	bl	8007d0e <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 8008c98:	2319      	movs	r3, #25
 8008c9a:	703b      	strb	r3, [r7, #0]
 8008c9c:	23ed      	movs	r3, #237	; 0xed
 8008c9e:	707b      	strb	r3, [r7, #1]
 8008ca0:	2382      	movs	r3, #130	; 0x82
 8008ca2:	70bb      	strb	r3, [r7, #2]
 8008ca4:	23ae      	movs	r3, #174	; 0xae
 8008ca6:	70fb      	strb	r3, [r7, #3]
 8008ca8:	23ed      	movs	r3, #237	; 0xed
 8008caa:	713b      	strb	r3, [r7, #4]
 8008cac:	2321      	movs	r3, #33	; 0x21
 8008cae:	717b      	strb	r3, [r7, #5]
 8008cb0:	234c      	movs	r3, #76	; 0x4c
 8008cb2:	71bb      	strb	r3, [r7, #6]
 8008cb4:	239d      	movs	r3, #157	; 0x9d
 8008cb6:	71fb      	strb	r3, [r7, #7]
 8008cb8:	2341      	movs	r3, #65	; 0x41
 8008cba:	723b      	strb	r3, [r7, #8]
 8008cbc:	2345      	movs	r3, #69	; 0x45
 8008cbe:	727b      	strb	r3, [r7, #9]
 8008cc0:	2322      	movs	r3, #34	; 0x22
 8008cc2:	72bb      	strb	r3, [r7, #10]
 8008cc4:	238e      	movs	r3, #142	; 0x8e
 8008cc6:	72fb      	strb	r3, [r7, #11]
 8008cc8:	2341      	movs	r3, #65	; 0x41
 8008cca:	733b      	strb	r3, [r7, #12]
 8008ccc:	23fe      	movs	r3, #254	; 0xfe
 8008cce:	737b      	strb	r3, [r7, #13]
 8008cd0:	2300      	movs	r3, #0
 8008cd2:	73bb      	strb	r3, [r7, #14]
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008cd8:	4b25      	ldr	r3, [pc, #148]	; (8008d70 <P2PS_STM_Init+0x134>)
 8008cda:	8818      	ldrh	r0, [r3, #0]
 8008cdc:	463a      	mov	r2, r7
 8008cde:	4b25      	ldr	r3, [pc, #148]	; (8008d74 <P2PS_STM_Init+0x138>)
 8008ce0:	9305      	str	r3, [sp, #20]
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	9304      	str	r3, [sp, #16]
 8008ce6:	230a      	movs	r3, #10
 8008ce8:	9303      	str	r3, [sp, #12]
 8008cea:	2301      	movs	r3, #1
 8008cec:	9302      	str	r3, [sp, #8]
 8008cee:	2300      	movs	r3, #0
 8008cf0:	9301      	str	r3, [sp, #4]
 8008cf2:	2306      	movs	r3, #6
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	2302      	movs	r3, #2
 8008cf8:	2102      	movs	r1, #2
 8008cfa:	f7ff f8b7 	bl	8007e6c <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 8008cfe:	2319      	movs	r3, #25
 8008d00:	703b      	strb	r3, [r7, #0]
 8008d02:	23ed      	movs	r3, #237	; 0xed
 8008d04:	707b      	strb	r3, [r7, #1]
 8008d06:	2382      	movs	r3, #130	; 0x82
 8008d08:	70bb      	strb	r3, [r7, #2]
 8008d0a:	23ae      	movs	r3, #174	; 0xae
 8008d0c:	70fb      	strb	r3, [r7, #3]
 8008d0e:	23ed      	movs	r3, #237	; 0xed
 8008d10:	713b      	strb	r3, [r7, #4]
 8008d12:	2321      	movs	r3, #33	; 0x21
 8008d14:	717b      	strb	r3, [r7, #5]
 8008d16:	234c      	movs	r3, #76	; 0x4c
 8008d18:	71bb      	strb	r3, [r7, #6]
 8008d1a:	239d      	movs	r3, #157	; 0x9d
 8008d1c:	71fb      	strb	r3, [r7, #7]
 8008d1e:	2341      	movs	r3, #65	; 0x41
 8008d20:	723b      	strb	r3, [r7, #8]
 8008d22:	2345      	movs	r3, #69	; 0x45
 8008d24:	727b      	strb	r3, [r7, #9]
 8008d26:	2322      	movs	r3, #34	; 0x22
 8008d28:	72bb      	strb	r3, [r7, #10]
 8008d2a:	238e      	movs	r3, #142	; 0x8e
 8008d2c:	72fb      	strb	r3, [r7, #11]
 8008d2e:	2342      	movs	r3, #66	; 0x42
 8008d30:	733b      	strb	r3, [r7, #12]
 8008d32:	23fe      	movs	r3, #254	; 0xfe
 8008d34:	737b      	strb	r3, [r7, #13]
 8008d36:	2300      	movs	r3, #0
 8008d38:	73bb      	strb	r3, [r7, #14]
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008d3e:	4b0c      	ldr	r3, [pc, #48]	; (8008d70 <P2PS_STM_Init+0x134>)
 8008d40:	8818      	ldrh	r0, [r3, #0]
 8008d42:	463a      	mov	r2, r7
 8008d44:	4b0c      	ldr	r3, [pc, #48]	; (8008d78 <P2PS_STM_Init+0x13c>)
 8008d46:	9305      	str	r3, [sp, #20]
 8008d48:	2301      	movs	r3, #1
 8008d4a:	9304      	str	r3, [sp, #16]
 8008d4c:	230a      	movs	r3, #10
 8008d4e:	9303      	str	r3, [sp, #12]
 8008d50:	2301      	movs	r3, #1
 8008d52:	9302      	str	r3, [sp, #8]
 8008d54:	2300      	movs	r3, #0
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	2310      	movs	r3, #16
 8008d5a:	9300      	str	r3, [sp, #0]
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	2102      	movs	r1, #2
 8008d60:	f7ff f884 	bl	8007e6c <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 8008d64:	bf00      	nop
}
 8008d66:	3710      	adds	r7, #16
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	08008b6d 	.word	0x08008b6d
 8008d70:	200001ec 	.word	0x200001ec
 8008d74:	200001ee 	.word	0x200001ee
 8008d78:	200001f0 	.word	0x200001f0

08008d7c <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload) 
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af02      	add	r7, sp, #8
 8008d82:	4603      	mov	r3, r0
 8008d84:	6039      	str	r1, [r7, #0]
 8008d86:	80fb      	strh	r3, [r7, #6]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 8008d88:	2342      	movs	r3, #66	; 0x42
 8008d8a:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 8008d8c:	88fb      	ldrh	r3, [r7, #6]
 8008d8e:	f64f 6242 	movw	r2, #65090	; 0xfe42
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d000      	beq.n	8008d98 <P2PS_STM_App_Update_Char+0x1c>
                             (uint8_t *)  pPayload);
    
      break;

    default:
      break;
 8008d96:	e00c      	b.n	8008db2 <P2PS_STM_App_Update_Char+0x36>
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <P2PS_STM_App_Update_Char+0x40>)
 8008d9a:	8818      	ldrh	r0, [r3, #0]
 8008d9c:	4b07      	ldr	r3, [pc, #28]	; (8008dbc <P2PS_STM_App_Update_Char+0x40>)
 8008d9e:	8899      	ldrh	r1, [r3, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	9300      	str	r3, [sp, #0]
 8008da4:	2302      	movs	r3, #2
 8008da6:	2200      	movs	r2, #0
 8008da8:	f7ff f94a 	bl	8008040 <aci_gatt_update_char_value>
 8008dac:	4603      	mov	r3, r0
 8008dae:	73fb      	strb	r3, [r7, #15]
      break;
 8008db0:	bf00      	nop
  }

  return result;
 8008db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}
 8008dbc:	200001ec 	.word	0x200001ec

08008dc0 <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b088      	sub	sp, #32
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008dc8:	f107 030c 	add.w	r3, r7, #12
 8008dcc:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	2121      	movs	r1, #33	; 0x21
 8008dd8:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8008ddc:	f000 f888 	bl	8008ef0 <shci_send>
            p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	330b      	adds	r3, #11
 8008de4:	78db      	ldrb	r3, [r3, #3]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3720      	adds	r7, #32
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b088      	sub	sp, #32
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8008df6:	f107 030c 	add.w	r3, r7, #12
 8008dfa:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8008e02:	69fb      	ldr	r3, [r7, #28]
 8008e04:	210f      	movs	r1, #15
 8008e06:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8008e0a:	f000 f871 	bl	8008ef0 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8008e0e:	69fb      	ldr	r3, [r7, #28]
 8008e10:	330b      	adds	r3, #11
 8008e12:	78db      	ldrb	r3, [r3, #3]
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	3720      	adds	r7, #32
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	bd80      	pop	{r7, pc}

08008e1c <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	b082      	sub	sp, #8
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
 8008e24:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	4a08      	ldr	r2, [pc, #32]	; (8008e4c <shci_init+0x30>)
 8008e2c:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 8008e2e:	4a08      	ldr	r2, [pc, #32]	; (8008e50 <shci_init+0x34>)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8008e34:	4806      	ldr	r0, [pc, #24]	; (8008e50 <shci_init+0x34>)
 8008e36:	f000 f911 	bl	800905c <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 f894 	bl	8008f6c <TlInit>

  return;
 8008e44:	bf00      	nop
}
 8008e46:	3708      	adds	r7, #8
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}
 8008e4c:	200012b8 	.word	0x200012b8
 8008e50:	20001298 	.word	0x20001298

08008e54 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008e5a:	4822      	ldr	r0, [pc, #136]	; (8008ee4 <shci_user_evt_proc+0x90>)
 8008e5c:	f000 f922 	bl	80090a4 <LST_is_empty>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d12b      	bne.n	8008ebe <shci_user_evt_proc+0x6a>
 8008e66:	4b20      	ldr	r3, [pc, #128]	; (8008ee8 <shci_user_evt_proc+0x94>)
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d027      	beq.n	8008ebe <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8008e6e:	f107 030c 	add.w	r3, r7, #12
 8008e72:	4619      	mov	r1, r3
 8008e74:	481b      	ldr	r0, [pc, #108]	; (8008ee4 <shci_user_evt_proc+0x90>)
 8008e76:	f000 f99c 	bl	80091b2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8008e7a:	4b1c      	ldr	r3, [pc, #112]	; (8008eec <shci_user_evt_proc+0x98>)
 8008e7c:	69db      	ldr	r3, [r3, #28]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00c      	beq.n	8008e9c <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8008e86:	2301      	movs	r3, #1
 8008e88:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8008e8a:	4b18      	ldr	r3, [pc, #96]	; (8008eec <shci_user_evt_proc+0x98>)
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	1d3a      	adds	r2, r7, #4
 8008e90:	4610      	mov	r0, r2
 8008e92:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8008e94:	793a      	ldrb	r2, [r7, #4]
 8008e96:	4b14      	ldr	r3, [pc, #80]	; (8008ee8 <shci_user_evt_proc+0x94>)
 8008e98:	701a      	strb	r2, [r3, #0]
 8008e9a:	e002      	b.n	8008ea2 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008e9c:	4b12      	ldr	r3, [pc, #72]	; (8008ee8 <shci_user_evt_proc+0x94>)
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 8008ea2:	4b11      	ldr	r3, [pc, #68]	; (8008ee8 <shci_user_evt_proc+0x94>)
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d004      	beq.n	8008eb4 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f001 f82d 	bl	8009f0c <TL_MM_EvtDone>
 8008eb2:	e004      	b.n	8008ebe <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	480a      	ldr	r0, [pc, #40]	; (8008ee4 <shci_user_evt_proc+0x90>)
 8008eba:	f000 f913 	bl	80090e4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8008ebe:	4809      	ldr	r0, [pc, #36]	; (8008ee4 <shci_user_evt_proc+0x90>)
 8008ec0:	f000 f8f0 	bl	80090a4 <LST_is_empty>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d107      	bne.n	8008eda <shci_user_evt_proc+0x86>
 8008eca:	4b07      	ldr	r3, [pc, #28]	; (8008ee8 <shci_user_evt_proc+0x94>)
 8008ecc:	781b      	ldrb	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d003      	beq.n	8008eda <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008ed2:	4804      	ldr	r0, [pc, #16]	; (8008ee4 <shci_user_evt_proc+0x90>)
 8008ed4:	f7f7 fd33 	bl	800093e <shci_notify_asynch_evt>
  }


  return;
 8008ed8:	bf00      	nop
 8008eda:	bf00      	nop
}
 8008edc:	3710      	adds	r7, #16
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
 8008ee2:	bf00      	nop
 8008ee4:	20000200 	.word	0x20000200
 8008ee8:	20000210 	.word	0x20000210
 8008eec:	20001298 	.word	0x20001298

08008ef0 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60ba      	str	r2, [r7, #8]
 8008ef8:	607b      	str	r3, [r7, #4]
 8008efa:	4603      	mov	r3, r0
 8008efc:	81fb      	strh	r3, [r7, #14]
 8008efe:	460b      	mov	r3, r1
 8008f00:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008f02:	2000      	movs	r0, #0
 8008f04:	f000 f864 	bl	8008fd0 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008f08:	4b16      	ldr	r3, [pc, #88]	; (8008f64 <shci_send+0x74>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	89fa      	ldrh	r2, [r7, #14]
 8008f0e:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <shci_send+0x74>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	7b7a      	ldrb	r2, [r7, #13]
 8008f18:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8008f1a:	4b12      	ldr	r3, [pc, #72]	; (8008f64 <shci_send+0x74>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	330c      	adds	r3, #12
 8008f20:	7b7a      	ldrb	r2, [r7, #13]
 8008f22:	68b9      	ldr	r1, [r7, #8]
 8008f24:	4618      	mov	r0, r3
 8008f26:	f001 fb31 	bl	800a58c <memcpy>

  shciContext.io.Send(0,0);
 8008f2a:	4b0f      	ldr	r3, [pc, #60]	; (8008f68 <shci_send+0x78>)
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	2000      	movs	r0, #0
 8008f32:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008f34:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008f38:	f7f7 fd18 	bl	800096c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f103 0008 	add.w	r0, r3, #8
 8008f42:	4b08      	ldr	r3, [pc, #32]	; (8008f64 <shci_send+0x74>)
 8008f44:	6819      	ldr	r1, [r3, #0]
 8008f46:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <shci_send+0x74>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	789b      	ldrb	r3, [r3, #2]
 8008f4c:	3303      	adds	r3, #3
 8008f4e:	461a      	mov	r2, r3
 8008f50:	f001 fb1c 	bl	800a58c <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008f54:	2001      	movs	r0, #1
 8008f56:	f000 f83b 	bl	8008fd0 <Cmd_SetStatus>

  return;
 8008f5a:	bf00      	nop
}
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	2000020c 	.word	0x2000020c
 8008f68:	20001298 	.word	0x20001298

08008f6c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8008f74:	4a10      	ldr	r2, [pc, #64]	; (8008fb8 <TlInit+0x4c>)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 8008f7a:	4810      	ldr	r0, [pc, #64]	; (8008fbc <TlInit+0x50>)
 8008f7c:	f000 f882 	bl	8009084 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8008f80:	2001      	movs	r0, #1
 8008f82:	f000 f825 	bl	8008fd0 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8008f86:	4b0e      	ldr	r3, [pc, #56]	; (8008fc0 <TlInit+0x54>)
 8008f88:	2201      	movs	r2, #1
 8008f8a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 8008f8c:	4b0d      	ldr	r3, [pc, #52]	; (8008fc4 <TlInit+0x58>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00c      	beq.n	8008fae <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8008f98:	4b0b      	ldr	r3, [pc, #44]	; (8008fc8 <TlInit+0x5c>)
 8008f9a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 8008f9c:	4b0b      	ldr	r3, [pc, #44]	; (8008fcc <TlInit+0x60>)
 8008f9e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8008fa0:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <TlInit+0x58>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f107 020c 	add.w	r2, r7, #12
 8008fa8:	4610      	mov	r0, r2
 8008faa:	4798      	blx	r3
  }

  return;
 8008fac:	bf00      	nop
 8008fae:	bf00      	nop
}
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	2000020c 	.word	0x2000020c
 8008fbc:	20000200 	.word	0x20000200
 8008fc0:	20000210 	.word	0x20000210
 8008fc4:	20001298 	.word	0x20001298
 8008fc8:	08009021 	.word	0x08009021
 8008fcc:	08009039 	.word	0x08009039

08008fd0 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 8008fda:	79fb      	ldrb	r3, [r7, #7]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10b      	bne.n	8008ff8 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <Cmd_SetStatus+0x48>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8008fe8:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <Cmd_SetStatus+0x48>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2000      	movs	r0, #0
 8008fee:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <Cmd_SetStatus+0x4c>)
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8008ff6:	e00b      	b.n	8009010 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008ff8:	4b08      	ldr	r3, [pc, #32]	; (800901c <Cmd_SetStatus+0x4c>)
 8008ffa:	2201      	movs	r2, #1
 8008ffc:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8008ffe:	4b06      	ldr	r3, [pc, #24]	; (8009018 <Cmd_SetStatus+0x48>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8009006:	4b04      	ldr	r3, [pc, #16]	; (8009018 <Cmd_SetStatus+0x48>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2001      	movs	r0, #1
 800900c:	4798      	blx	r3
  return;
 800900e:	bf00      	nop
 8009010:	bf00      	nop
}
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	200012b8 	.word	0x200012b8
 800901c:	20000208 	.word	0x20000208

08009020 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b082      	sub	sp, #8
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8009028:	2000      	movs	r0, #0
 800902a:	f7f7 fc94 	bl	8000956 <shci_cmd_resp_release>

  return;
 800902e:	bf00      	nop
}
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}
	...

08009038 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4805      	ldr	r0, [pc, #20]	; (8009058 <TlUserEvtReceived+0x20>)
 8009044:	f000 f872 	bl	800912c <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8009048:	4803      	ldr	r0, [pc, #12]	; (8009058 <TlUserEvtReceived+0x20>)
 800904a:	f7f7 fc78 	bl	800093e <shci_notify_asynch_evt>

  return;
 800904e:	bf00      	nop
}
 8009050:	3708      	adds	r7, #8
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}
 8009056:	bf00      	nop
 8009058:	20000200 	.word	0x20000200

0800905c <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a05      	ldr	r2, [pc, #20]	; (800907c <shci_register_io_bus+0x20>)
 8009068:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	4a04      	ldr	r2, [pc, #16]	; (8009080 <shci_register_io_bus+0x24>)
 800906e:	611a      	str	r2, [r3, #16]

  return;
 8009070:	bf00      	nop
}
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr
 800907c:	08009d99 	.word	0x08009d99
 8009080:	08009ded 	.word	0x08009ded

08009084 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8009084:	b480      	push	{r7}
 8009086:	b083      	sub	sp, #12
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	605a      	str	r2, [r3, #4]
}
 8009098:	bf00      	nop
 800909a:	370c      	adds	r7, #12
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ac:	f3ef 8310 	mrs	r3, PRIMASK
 80090b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090b2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80090b6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d102      	bne.n	80090c8 <LST_is_empty+0x24>
  {
    return_value = TRUE;
 80090c2:	2301      	movs	r3, #1
 80090c4:	75fb      	strb	r3, [r7, #23]
 80090c6:	e001      	b.n	80090cc <LST_is_empty+0x28>
  }
  else
  {
    return_value = FALSE;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d0:	68bb      	ldr	r3, [r7, #8]
 80090d2:	f383 8810 	msr	PRIMASK, r3
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 80090d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d8:	4618      	mov	r0, r3
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b087      	sub	sp, #28
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090ee:	f3ef 8310 	mrs	r3, PRIMASK
 80090f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80090f4:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80090f6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090f8:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	683a      	ldr	r2, [r7, #0]
 8009114:	605a      	str	r2, [r3, #4]
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009120:	bf00      	nop
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800912c:	b480      	push	{r7}
 800912e:	b087      	sub	sp, #28
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009136:	f3ef 8310 	mrs	r3, PRIMASK
 800913a:	60fb      	str	r3, [r7, #12]
  return(result);
 800913c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800913e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009140:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	685b      	ldr	r3, [r3, #4]
 800915a:	683a      	ldr	r2, [r7, #0]
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8009168:	bf00      	nop
 800916a:	371c      	adds	r7, #28
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800917c:	f3ef 8310 	mrs	r3, PRIMASK
 8009180:	60fb      	str	r3, [r7, #12]
  return(result);
 8009182:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8009184:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009186:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6812      	ldr	r2, [r2, #0]
 8009190:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	6852      	ldr	r2, [r2, #4]
 800919a:	605a      	str	r2, [r3, #4]
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80091a6:	bf00      	nop
 80091a8:	371c      	adds	r7, #28
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b086      	sub	sp, #24
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80091bc:	f3ef 8310 	mrs	r3, PRIMASK
 80091c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80091c2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80091c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80091c6:	b672      	cpsid	i
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f7ff ffcd 	bl	8009174 <LST_remove_node>
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f383 8810 	msr	PRIMASK, r3

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 80091e4:	bf00      	nop
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	2200      	movs	r2, #0
 8009210:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2200      	movs	r2, #0
 8009216:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	687a      	ldr	r2, [r7, #4]
 800921c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	887a      	ldrh	r2, [r7, #2]
 8009222:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	7e3a      	ldrb	r2, [r7, #24]
 8009228:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800922a:	7e3b      	ldrb	r3, [r7, #24]
 800922c:	f003 0302 	and.w	r3, r3, #2
 8009230:	2b00      	cmp	r3, #0
 8009232:	d006      	beq.n	8009242 <CircularQueue_Init+0x56>
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	891b      	ldrh	r3, [r3, #8]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800923c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009240:	e000      	b.n	8009244 <CircularQueue_Init+0x58>
  }
  return 0;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3714      	adds	r7, #20
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b08e      	sub	sp, #56	; 0x38
 8009254:	af00      	add	r7, sp, #0
 8009256:	60f8      	str	r0, [r7, #12]
 8009258:	60b9      	str	r1, [r7, #8]
 800925a:	603b      	str	r3, [r7, #0]
 800925c:	4613      	mov	r3, r2
 800925e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8009260:	2300      	movs	r3, #0
 8009262:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8009264:	2300      	movs	r3, #0
 8009266:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size elemenet (q->elementsize == 0) */
 8009268:	2300      	movs	r3, #0
 800926a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800926c:	2300      	movs	r3, #0
 800926e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009270:	2300      	movs	r3, #0
 8009272:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8009274:	2300      	movs	r3, #0
 8009276:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicat size of parta of elemenet that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8009278:	2300      	movs	r3, #0
 800927a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	891b      	ldrh	r3, [r3, #8]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <CircularQueue_Add+0x38>
 8009284:	2302      	movs	r3, #2
 8009286:	e000      	b.n	800928a <CircularQueue_Add+0x3a>
 8009288:	2300      	movs	r3, #0
 800928a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d02a      	beq.n	80092ea <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	891b      	ldrh	r3, [r3, #8]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d123      	bne.n	80092e4 <CircularQueue_Add+0x94>
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	4413      	add	r3, r2
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	b29a      	uxth	r2, r3
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6819      	ldr	r1, [r3, #0]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	691b      	ldr	r3, [r3, #16]
 80092b2:	1c58      	adds	r0, r3, #1
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	4298      	cmp	r0, r3
 80092ba:	d306      	bcc.n	80092ca <CircularQueue_Add+0x7a>
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6918      	ldr	r0, [r3, #16]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	1ac3      	subs	r3, r0, r3
 80092c6:	3301      	adds	r3, #1
 80092c8:	e002      	b.n	80092d0 <CircularQueue_Add+0x80>
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	3301      	adds	r3, #1
 80092d0:	440b      	add	r3, r1
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	b29b      	uxth	r3, r3
 80092da:	4413      	add	r3, r2
 80092dc:	b29b      	uxth	r3, r3
 80092de:	3302      	adds	r3, #2
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	e001      	b.n	80092e8 <CircularQueue_Add+0x98>
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	891b      	ldrh	r3, [r3, #8]
 80092e8:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	891b      	ldrh	r3, [r3, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	891b      	ldrh	r3, [r3, #8]
 80092f6:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	691a      	ldr	r2, [r3, #16]
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	429a      	cmp	r2, r3
 8009302:	d307      	bcc.n	8009314 <CircularQueue_Add+0xc4>
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	6919      	ldr	r1, [r3, #16]
 800930c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800930e:	440b      	add	r3, r1
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	e000      	b.n	8009316 <CircularQueue_Add+0xc6>
 8009314:	2300      	movs	r3, #0
 8009316:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8009318:	88fa      	ldrh	r2, [r7, #6]
 800931a:	7ffb      	ldrb	r3, [r7, #31]
 800931c:	4413      	add	r3, r2
 800931e:	461a      	mov	r2, r3
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	fb03 f302 	mul.w	r3, r3, r2
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	429a      	cmp	r2, r3
 800932a:	d80b      	bhi.n	8009344 <CircularQueue_Add+0xf4>
 800932c:	88fa      	ldrh	r2, [r7, #6]
 800932e:	7ffb      	ldrb	r3, [r7, #31]
 8009330:	4413      	add	r3, r2
 8009332:	461a      	mov	r2, r3
 8009334:	69bb      	ldr	r3, [r7, #24]
 8009336:	fbb3 f1f2 	udiv	r1, r3, r2
 800933a:	fb02 f201 	mul.w	r2, r2, r1
 800933e:	1a9b      	subs	r3, r3, r2
 8009340:	b2db      	uxtb	r3, r3
 8009342:	e000      	b.n	8009346 <CircularQueue_Add+0xf6>
 8009344:	2300      	movs	r3, #0
 8009346:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8009348:	7dfa      	ldrb	r2, [r7, #23]
 800934a:	7ffb      	ldrb	r3, [r7, #31]
 800934c:	429a      	cmp	r2, r3
 800934e:	bf8c      	ite	hi
 8009350:	2301      	movhi	r3, #1
 8009352:	2300      	movls	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8009358:	7fbb      	ldrb	r3, [r7, #30]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d008      	beq.n	8009370 <CircularQueue_Add+0x120>
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	7f1b      	ldrb	r3, [r3, #28]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d002      	beq.n	8009370 <CircularQueue_Add+0x120>
 800936a:	7dfb      	ldrb	r3, [r7, #23]
 800936c:	b29b      	uxth	r3, r3
 800936e:	e000      	b.n	8009372 <CircularQueue_Add+0x122>
 8009370:	8bbb      	ldrh	r3, [r7, #28]
 8009372:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8009374:	7fbb      	ldrb	r3, [r7, #30]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d008      	beq.n	800938c <CircularQueue_Add+0x13c>
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	7f1b      	ldrb	r3, [r3, #28]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	2b00      	cmp	r3, #0
 8009384:	d002      	beq.n	800938c <CircularQueue_Add+0x13c>
 8009386:	7ffb      	ldrb	r3, [r7, #31]
 8009388:	b29b      	uxth	r3, r3
 800938a:	e000      	b.n	800938e <CircularQueue_Add+0x13e>
 800938c:	8bbb      	ldrh	r3, [r7, #28]
 800938e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	2b00      	cmp	r3, #0
 8009394:	f000 817e 	beq.w	8009694 <CircularQueue_Add+0x444>
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	695a      	ldr	r2, [r3, #20]
 800939c:	88f9      	ldrh	r1, [r7, #6]
 800939e:	7ffb      	ldrb	r3, [r7, #31]
 80093a0:	440b      	add	r3, r1
 80093a2:	4619      	mov	r1, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	fb03 f301 	mul.w	r3, r3, r1
 80093aa:	441a      	add	r2, r3
 80093ac:	8bbb      	ldrh	r3, [r7, #28]
 80093ae:	441a      	add	r2, r3
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	f200 816d 	bhi.w	8009694 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80093ba:	2300      	movs	r3, #0
 80093bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093be:	e14a      	b.n	8009656 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	691a      	ldr	r2, [r3, #16]
 80093c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093c6:	441a      	add	r2, r3
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d307      	bcc.n	80093e0 <CircularQueue_Add+0x190>
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	691a      	ldr	r2, [r3, #16]
 80093d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093d6:	441a      	add	r2, r3
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	685b      	ldr	r3, [r3, #4]
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	e003      	b.n	80093e8 <CircularQueue_Add+0x198>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	691a      	ldr	r2, [r3, #16]
 80093e4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80093e6:	4413      	add	r3, r2
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store fisrt the element size if element size is varaible */
      if (q->elementSize == 0) 
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	891b      	ldrh	r3, [r3, #8]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d130      	bne.n	800945c <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	1c59      	adds	r1, r3, #1
 8009402:	6339      	str	r1, [r7, #48]	; 0x30
 8009404:	4413      	add	r3, r2
 8009406:	88fa      	ldrh	r2, [r7, #6]
 8009408:	b2d2      	uxtb	r2, r2
 800940a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009412:	429a      	cmp	r2, r3
 8009414:	d304      	bcc.n	8009420 <CircularQueue_Add+0x1d0>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800941c:	1ad3      	subs	r3, r2, r3
 800941e:	e000      	b.n	8009422 <CircularQueue_Add+0x1d2>
 8009420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009422:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8009424:	88fb      	ldrh	r3, [r7, #6]
 8009426:	0a1b      	lsrs	r3, r3, #8
 8009428:	b298      	uxth	r0, r3
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009430:	1c59      	adds	r1, r3, #1
 8009432:	6339      	str	r1, [r7, #48]	; 0x30
 8009434:	4413      	add	r3, r2
 8009436:	b2c2      	uxtb	r2, r0
 8009438:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009440:	429a      	cmp	r2, r3
 8009442:	d304      	bcc.n	800944e <CircularQueue_Add+0x1fe>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800944a:	1ad3      	subs	r3, r2, r3
 800944c:	e000      	b.n	8009450 <CircularQueue_Add+0x200>
 800944e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009450:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	695b      	ldr	r3, [r3, #20]
 8009456:	1c9a      	adds	r2, r3, #2
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800945c:	88fa      	ldrh	r2, [r7, #6]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6859      	ldr	r1, [r3, #4]
 8009462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009464:	1acb      	subs	r3, r1, r3
 8009466:	4293      	cmp	r3, r2
 8009468:	bf28      	it	cs
 800946a:	4613      	movcs	r3, r2
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In thi case part of data will copied at the end of the buffer and the rest a the beggining */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800946e:	88fb      	ldrh	r3, [r7, #6]
 8009470:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009472:	429a      	cmp	r2, r3
 8009474:	d007      	beq.n	8009486 <CircularQueue_Add+0x236>
 8009476:	88fb      	ldrh	r3, [r7, #6]
 8009478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800947a:	429a      	cmp	r2, r3
 800947c:	d225      	bcs.n	80094ca <CircularQueue_Add+0x27a>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	7f1b      	ldrb	r3, [r3, #28]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d121      	bne.n	80094ca <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	18d0      	adds	r0, r2, r3
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009492:	fb02 f303 	mul.w	r3, r2, r3
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	4413      	add	r3, r2
 800949a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800949c:	4619      	mov	r1, r3
 800949e:	f001 f875 	bl	800a58c <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	695a      	ldr	r2, [r3, #20]
 80094a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a8:	441a      	add	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80094ae:	2300      	movs	r3, #0
 80094b0:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80094b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80094b6:	88fa      	ldrh	r2, [r7, #6]
 80094b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ba:	1ad3      	subs	r3, r2, r3
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beggining of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80094be:	7ffb      	ldrb	r3, [r7, #31]
 80094c0:	b29a      	uxth	r2, r3
 80094c2:	88fb      	ldrh	r3, [r7, #6]
 80094c4:	4413      	add	r3, r2
 80094c6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80094c8:	e0a4      	b.n	8009614 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80094ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f000 80a1 	beq.w	8009614 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	7f1b      	ldrb	r3, [r3, #28]
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d03a      	beq.n	8009554 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	891b      	ldrh	r3, [r3, #8]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d10d      	bne.n	8009502 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681a      	ldr	r2, [r3, #0]
 80094ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ec:	3b02      	subs	r3, #2
 80094ee:	4413      	add	r3, r2
 80094f0:	22ff      	movs	r2, #255	; 0xff
 80094f2:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094fa:	3b01      	subs	r3, #1
 80094fc:	4413      	add	r3, r2
 80094fe:	22ff      	movs	r2, #255	; 0xff
 8009500:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	695a      	ldr	r2, [r3, #20]
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	441a      	add	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800950e:	2300      	movs	r3, #0
 8009510:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8009512:	88fb      	ldrh	r3, [r7, #6]
 8009514:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8009516:	2300      	movs	r3, #0
 8009518:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	891b      	ldrh	r3, [r3, #8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d16f      	bne.n	8009602 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009528:	1c59      	adds	r1, r3, #1
 800952a:	6339      	str	r1, [r7, #48]	; 0x30
 800952c:	4413      	add	r3, r2
 800952e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009530:	b2d2      	uxtb	r2, r2
 8009532:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009536:	0a18      	lsrs	r0, r3, #8
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681a      	ldr	r2, [r3, #0]
 800953c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953e:	1c59      	adds	r1, r3, #1
 8009540:	6339      	str	r1, [r7, #48]	; 0x30
 8009542:	4413      	add	r3, r2
 8009544:	b2c2      	uxtb	r2, r0
 8009546:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	695b      	ldr	r3, [r3, #20]
 800954c:	1c9a      	adds	r2, r3, #2
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	615a      	str	r2, [r3, #20]
 8009552:	e056      	b.n	8009602 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	7f1b      	ldrb	r3, [r3, #28]
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d050      	beq.n	8009602 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	891b      	ldrh	r3, [r3, #8]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d14a      	bne.n	80095fe <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681a      	ldr	r2, [r3, #0]
 800956c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800956e:	3b02      	subs	r3, #2
 8009570:	4413      	add	r3, r2
 8009572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009574:	b2d2      	uxtb	r2, r2
 8009576:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8009578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957a:	0a19      	lsrs	r1, r3, #8
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009582:	3b01      	subs	r3, #1
 8009584:	4413      	add	r3, r2
 8009586:	b2ca      	uxtb	r2, r1
 8009588:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681a      	ldr	r2, [r3, #0]
 800958e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009590:	18d0      	adds	r0, r2, r3
 8009592:	88fb      	ldrh	r3, [r7, #6]
 8009594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009596:	fb02 f303 	mul.w	r3, r2, r3
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	4413      	add	r3, r2
 800959e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095a0:	4619      	mov	r1, r3
 80095a2:	f000 fff3 	bl	800a58c <memcpy>
             q->byteCount += NbBytesToCopy; 
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	695a      	ldr	r2, [r3, #20]
 80095aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ac:	441a      	add	r2, r3
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80095b6:	88fa      	ldrh	r2, [r7, #6]
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	1ad3      	subs	r3, r2, r3
 80095bc:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80095c8:	2300      	movs	r3, #0
 80095ca:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d2:	1c59      	adds	r1, r3, #1
 80095d4:	6339      	str	r1, [r7, #48]	; 0x30
 80095d6:	4413      	add	r3, r2
 80095d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095da:	b2d2      	uxtb	r2, r2
 80095dc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80095de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095e0:	0a18      	lsrs	r0, r3, #8
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	1c59      	adds	r1, r3, #1
 80095ea:	6339      	str	r1, [r7, #48]	; 0x30
 80095ec:	4413      	add	r3, r2
 80095ee:	b2c2      	uxtb	r2, r0
 80095f0:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	1c9a      	adds	r2, r3, #2
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	615a      	str	r2, [r3, #20]
 80095fc:	e001      	b.n	8009602 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 80095fe:	2300      	movs	r3, #0
 8009600:	e049      	b.n	8009696 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8009602:	7ffb      	ldrb	r3, [r7, #31]
 8009604:	b29a      	uxth	r2, r3
 8009606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009608:	b29b      	uxth	r3, r3
 800960a:	4413      	add	r3, r2
 800960c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2200      	movs	r2, #0
 8009612:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaning byte to copy */
      if (NbBytesToCopy)      
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	2b00      	cmp	r3, #0
 8009618:	d015      	beq.n	8009646 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009620:	18d0      	adds	r0, r2, r3
 8009622:	88fb      	ldrh	r3, [r7, #6]
 8009624:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009626:	fb02 f203 	mul.w	r2, r2, r3
 800962a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962c:	4413      	add	r3, r2
 800962e:	68ba      	ldr	r2, [r7, #8]
 8009630:	4413      	add	r3, r2
 8009632:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009634:	4619      	mov	r1, r3
 8009636:	f000 ffa9 	bl	800a58c <memcpy>
        q->byteCount += NbBytesToCopy;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	695a      	ldr	r2, [r3, #20]
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	441a      	add	r2, r3
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	699b      	ldr	r3, [r3, #24]
 800964a:	1c5a      	adds	r2, r3, #1
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8009650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009652:	3301      	adds	r3, #1
 8009654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	429a      	cmp	r2, r3
 800965c:	f4ff aeb0 	bcc.w	80093c0 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6919      	ldr	r1, [r3, #16]
 8009668:	7ffb      	ldrb	r3, [r7, #31]
 800966a:	4419      	add	r1, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4299      	cmp	r1, r3
 8009672:	d307      	bcc.n	8009684 <CircularQueue_Add+0x434>
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6919      	ldr	r1, [r3, #16]
 8009678:	7ffb      	ldrb	r3, [r7, #31]
 800967a:	4419      	add	r1, r3
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	1acb      	subs	r3, r1, r3
 8009682:	e003      	b.n	800968c <CircularQueue_Add+0x43c>
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	6919      	ldr	r1, [r3, #16]
 8009688:	7ffb      	ldrb	r3, [r7, #31]
 800968a:	440b      	add	r3, r1
 800968c:	4413      	add	r3, r2
 800968e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	e000      	b.n	8009696 <CircularQueue_Add+0x446>
    return NULL;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3738      	adds	r7, #56	; 0x38
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed  
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800969e:	b480      	push	{r7}
 80096a0:	b085      	sub	sp, #20
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
 80096a6:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80096a8:	2300      	movs	r3, #0
 80096aa:	72fb      	strb	r3, [r7, #11]
  uint8_t* ptr= NULL;
 80096ac:	2300      	movs	r3, #0
 80096ae:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	891b      	ldrh	r3, [r3, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d101      	bne.n	80096bc <CircularQueue_Remove+0x1e>
 80096b8:	2302      	movs	r3, #2
 80096ba:	e000      	b.n	80096be <CircularQueue_Remove+0x20>
 80096bc:	2300      	movs	r3, #0
 80096be:	72fb      	strb	r3, [r7, #11]
  *elementSize = 0;
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	2200      	movs	r2, #0
 80096c4:	801a      	strh	r2, [r3, #0]
  if (q->byteCount > 0) 
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	695b      	ldr	r3, [r3, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f000 80d4 	beq.w	8009878 <CircularQueue_Remove+0x1da>
  {
    /* retreive element Size */
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	891b      	ldrh	r3, [r3, #8]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d121      	bne.n	800971c <CircularQueue_Remove+0x7e>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	4413      	add	r3, r2
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6819      	ldr	r1, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	68db      	ldr	r3, [r3, #12]
 80096ee:	1c58      	adds	r0, r3, #1
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	685b      	ldr	r3, [r3, #4]
 80096f4:	4298      	cmp	r0, r3
 80096f6:	d306      	bcc.n	8009706 <CircularQueue_Remove+0x68>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	68d8      	ldr	r0, [r3, #12]
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	1ac3      	subs	r3, r0, r3
 8009702:	3301      	adds	r3, #1
 8009704:	e002      	b.n	800970c <CircularQueue_Remove+0x6e>
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	3301      	adds	r3, #1
 800970c:	440b      	add	r3, r1
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	b29b      	uxth	r3, r3
 8009712:	021b      	lsls	r3, r3, #8
 8009714:	b29b      	uxth	r3, r3
 8009716:	4413      	add	r3, r2
 8009718:	b29b      	uxth	r3, r3
 800971a:	e001      	b.n	8009720 <CircularQueue_Remove+0x82>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	891b      	ldrh	r3, [r3, #8]
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	8013      	strh	r3, [r2, #0]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	7f1b      	ldrb	r3, [r3, #28]
 8009728:	f003 0301 	and.w	r3, r3, #1
 800972c:	2b00      	cmp	r3, #0
 800972e:	d059      	beq.n	80097e4 <CircularQueue_Remove+0x146>
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	7f1b      	ldrb	r3, [r3, #28]
 8009734:	f003 0302 	and.w	r3, r3, #2
 8009738:	2b00      	cmp	r3, #0
 800973a:	d153      	bne.n	80097e4 <CircularQueue_Remove+0x146>
     {
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	881b      	ldrh	r3, [r3, #0]
 8009740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009744:	4293      	cmp	r3, r2
 8009746:	d103      	bne.n	8009750 <CircularQueue_Remove+0xb2>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	891b      	ldrh	r3, [r3, #8]
 800974c:	2b00      	cmp	r3, #0
 800974e:	d012      	beq.n	8009776 <CircularQueue_Remove+0xd8>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	68da      	ldr	r2, [r3, #12]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	691b      	ldr	r3, [r3, #16]
       if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 8009758:	429a      	cmp	r2, r3
 800975a:	d943      	bls.n	80097e4 <CircularQueue_Remove+0x146>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	891b      	ldrh	r3, [r3, #8]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d03f      	beq.n	80097e4 <CircularQueue_Remove+0x146>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	685a      	ldr	r2, [r3, #4]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	8912      	ldrh	r2, [r2, #8]
 8009772:	4293      	cmp	r3, r2
 8009774:	d236      	bcs.n	80097e4 <CircularQueue_Remove+0x146>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	695a      	ldr	r2, [r3, #20]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	68d9      	ldr	r1, [r3, #12]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	1acb      	subs	r3, r1, r3
 8009784:	441a      	add	r2, r3
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	60da      	str	r2, [r3, #12]
          /* retrieve the rigth size after the wrap [if varaible size element] */
          *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	891b      	ldrh	r3, [r3, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d121      	bne.n	80097dc <CircularQueue_Remove+0x13e>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681a      	ldr	r2, [r3, #0]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	4413      	add	r3, r2
 80097a2:	781b      	ldrb	r3, [r3, #0]
 80097a4:	b29a      	uxth	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6819      	ldr	r1, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	1c58      	adds	r0, r3, #1
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	4298      	cmp	r0, r3
 80097b6:	d306      	bcc.n	80097c6 <CircularQueue_Remove+0x128>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	68d8      	ldr	r0, [r3, #12]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	1ac3      	subs	r3, r0, r3
 80097c2:	3301      	adds	r3, #1
 80097c4:	e002      	b.n	80097cc <CircularQueue_Remove+0x12e>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	3301      	adds	r3, #1
 80097cc:	440b      	add	r3, r1
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	4413      	add	r3, r2
 80097d8:	b29b      	uxth	r3, r3
 80097da:	e001      	b.n	80097e0 <CircularQueue_Remove+0x142>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	891b      	ldrh	r3, [r3, #8]
 80097e0:	683a      	ldr	r2, [r7, #0]
 80097e2:	8013      	strh	r3, [r2, #0]
       }
     }

    /* retreive element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	68d9      	ldr	r1, [r3, #12]
 80097ec:	7afb      	ldrb	r3, [r7, #11]
 80097ee:	4419      	add	r1, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	685b      	ldr	r3, [r3, #4]
 80097f4:	4299      	cmp	r1, r3
 80097f6:	d307      	bcc.n	8009808 <CircularQueue_Remove+0x16a>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68d9      	ldr	r1, [r3, #12]
 80097fc:	7afb      	ldrb	r3, [r7, #11]
 80097fe:	4419      	add	r1, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	1acb      	subs	r3, r1, r3
 8009806:	e003      	b.n	8009810 <CircularQueue_Remove+0x172>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68d9      	ldr	r1, [r3, #12]
 800980c:	7afb      	ldrb	r3, [r7, #11]
 800980e:	440b      	add	r3, r1
 8009810:	4413      	add	r3, r2
 8009812:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (*elementSize + elemSizeStorageRoom) ;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	695b      	ldr	r3, [r3, #20]
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	8812      	ldrh	r2, [r2, #0]
 800981c:	4611      	mov	r1, r2
 800981e:	7afa      	ldrb	r2, [r7, #11]
 8009820:	440a      	add	r2, r1
 8009822:	1a9a      	subs	r2, r3, r2
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	695b      	ldr	r3, [r3, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d01e      	beq.n	800986e <CircularQueue_Remove+0x1d0>
    {
      q->first = MOD((q->first+ *elementSize + elemSizeStorageRoom ), q->queueMaxSize);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	8812      	ldrh	r2, [r2, #0]
 8009838:	441a      	add	r2, r3
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	441a      	add	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	429a      	cmp	r2, r3
 8009844:	d30a      	bcc.n	800985c <CircularQueue_Remove+0x1be>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	68db      	ldr	r3, [r3, #12]
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	8812      	ldrh	r2, [r2, #0]
 800984e:	441a      	add	r2, r3
 8009850:	7afb      	ldrb	r3, [r7, #11]
 8009852:	441a      	add	r2, r3
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	e006      	b.n	800986a <CircularQueue_Remove+0x1cc>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	68db      	ldr	r3, [r3, #12]
 8009860:	683a      	ldr	r2, [r7, #0]
 8009862:	8812      	ldrh	r2, [r2, #0]
 8009864:	441a      	add	r2, r3
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	4413      	add	r3, r2
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	1e5a      	subs	r2, r3, #1
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	619a      	str	r2, [r3, #24]
  }
  return ptr;
 8009878:	68fb      	ldr	r3, [r7, #12]
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed  
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8009886:	b480      	push	{r7}
 8009888:	b087      	sub	sp, #28
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
 800988e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
  uint8_t* x= NULL;
 8009894:	2300      	movs	r3, #0
 8009896:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	891b      	ldrh	r3, [r3, #8]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <CircularQueue_Sense+0x1e>
 80098a0:	2302      	movs	r3, #2
 80098a2:	e000      	b.n	80098a6 <CircularQueue_Sense+0x20>
 80098a4:	2300      	movs	r3, #0
 80098a6:	73fb      	strb	r3, [r7, #15]
  *elementSize = 0;
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	2200      	movs	r2, #0
 80098ac:	801a      	strh	r2, [r3, #0]
  uint32_t FirstElemetPos = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
    
  if (q->byteCount > 0) 
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 8093 	beq.w	80099e2 <CircularQueue_Sense+0x15c>
  {
    FirstElemetPos = q->first;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	613b      	str	r3, [r7, #16]
    *elementSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	891b      	ldrh	r3, [r3, #8]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d121      	bne.n	800990e <CircularQueue_Sense+0x88>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681a      	ldr	r2, [r3, #0]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	4413      	add	r3, r2
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	6819      	ldr	r1, [r3, #0]
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	1c58      	adds	r0, r3, #1
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	4298      	cmp	r0, r3
 80098e8:	d306      	bcc.n	80098f8 <CircularQueue_Sense+0x72>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	68d8      	ldr	r0, [r3, #12]
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	1ac3      	subs	r3, r0, r3
 80098f4:	3301      	adds	r3, #1
 80098f6:	e002      	b.n	80098fe <CircularQueue_Sense+0x78>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	3301      	adds	r3, #1
 80098fe:	440b      	add	r3, r1
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	b29b      	uxth	r3, r3
 8009904:	021b      	lsls	r3, r3, #8
 8009906:	b29b      	uxth	r3, r3
 8009908:	4413      	add	r3, r2
 800990a:	b29b      	uxth	r3, r3
 800990c:	e001      	b.n	8009912 <CircularQueue_Sense+0x8c>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	891b      	ldrh	r3, [r3, #8]
 8009912:	683a      	ldr	r2, [r7, #0]
 8009914:	8013      	strh	r3, [r2, #0]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	7f1b      	ldrb	r3, [r3, #28]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d04a      	beq.n	80099b8 <CircularQueue_Sense+0x132>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	7f1b      	ldrb	r3, [r3, #28]
 8009926:	f003 0302 	and.w	r3, r3, #2
 800992a:	2b00      	cmp	r3, #0
 800992c:	d144      	bne.n	80099b8 <CircularQueue_Sense+0x132>
    { 
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009936:	4293      	cmp	r3, r2
 8009938:	d103      	bne.n	8009942 <CircularQueue_Sense+0xbc>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	891b      	ldrh	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d012      	beq.n	8009968 <CircularQueue_Sense+0xe2>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68da      	ldr	r2, [r3, #12]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	691b      	ldr	r3, [r3, #16]
      if (((*elementSize == 0xFFFF) && q->elementSize == 0 ) || 
 800994a:	429a      	cmp	r2, r3
 800994c:	d934      	bls.n	80099b8 <CircularQueue_Sense+0x132>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	891b      	ldrh	r3, [r3, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d030      	beq.n	80099b8 <CircularQueue_Sense+0x132>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685a      	ldr	r2, [r3, #4]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	687a      	ldr	r2, [r7, #4]
 8009962:	8912      	ldrh	r2, [r2, #8]
 8009964:	4293      	cmp	r3, r2
 8009966:	d227      	bcs.n	80099b8 <CircularQueue_Sense+0x132>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8009968:	2300      	movs	r3, #0
 800996a:	613b      	str	r3, [r7, #16]

        /* retrieve the rigth size after the wrap [if varaible size element] */
        *elementSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	891b      	ldrh	r3, [r3, #8]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d11d      	bne.n	80099b0 <CircularQueue_Sense+0x12a>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	4413      	add	r3, r2
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	b29a      	uxth	r2, r3
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6819      	ldr	r1, [r3, #0]
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	1c58      	adds	r0, r3, #1
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	4298      	cmp	r0, r3
 800998e:	d305      	bcc.n	800999c <CircularQueue_Sense+0x116>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	6938      	ldr	r0, [r7, #16]
 8009996:	1ac3      	subs	r3, r0, r3
 8009998:	3301      	adds	r3, #1
 800999a:	e001      	b.n	80099a0 <CircularQueue_Sense+0x11a>
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	3301      	adds	r3, #1
 80099a0:	440b      	add	r3, r1
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	b29b      	uxth	r3, r3
 80099a6:	021b      	lsls	r3, r3, #8
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	4413      	add	r3, r2
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	e001      	b.n	80099b4 <CircularQueue_Sense+0x12e>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	891b      	ldrh	r3, [r3, #8]
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	8013      	strh	r3, [r2, #0]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	7bf9      	ldrb	r1, [r7, #15]
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	4419      	add	r1, r3
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	685b      	ldr	r3, [r3, #4]
 80099c6:	4299      	cmp	r1, r3
 80099c8:	d306      	bcc.n	80099d8 <CircularQueue_Sense+0x152>
 80099ca:	7bf9      	ldrb	r1, [r7, #15]
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	4419      	add	r1, r3
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	685b      	ldr	r3, [r3, #4]
 80099d4:	1acb      	subs	r3, r1, r3
 80099d6:	e002      	b.n	80099de <CircularQueue_Sense+0x158>
 80099d8:	7bf9      	ldrb	r1, [r7, #15]
 80099da:	693b      	ldr	r3, [r7, #16]
 80099dc:	440b      	add	r3, r1
 80099de:	4413      	add	r3, r2
 80099e0:	617b      	str	r3, [r7, #20]
  }
  return x;
 80099e2:	697b      	ldr	r3, [r7, #20]
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	371c      	adds	r7, #28
 80099e8:	46bd      	mov	sp, r7
 80099ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ee:	4770      	bx	lr

080099f0 <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
  return;
 80099f4:	bf00      	nop
}
 80099f6:	46bd      	mov	sp, r7
 80099f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fc:	4770      	bx	lr

080099fe <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 80099fe:	b480      	push	{r7}
 8009a00:	af00      	add	r7, sp, #0
  return;
 8009a02:	bf00      	nop
}
 8009a04:	46bd      	mov	sp, r7
 8009a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0a:	4770      	bx	lr

08009a0c <DIS_Init>:
__weak void DIS_Init( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	af00      	add	r7, sp, #0
  return;
 8009a10:	bf00      	nop
}
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 8009a1a:	b480      	push	{r7}
 8009a1c:	af00      	add	r7, sp, #0
  return;
 8009a1e:	bf00      	nop
}
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8009a28:	b480      	push	{r7}
 8009a2a:	af00      	add	r7, sp, #0
  return;
 8009a2c:	bf00      	nop
}
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <HRS_Init>:
__weak void HRS_Init( void )
{
 8009a36:	b480      	push	{r7}
 8009a38:	af00      	add	r7, sp, #0
  return;
 8009a3a:	bf00      	nop
}
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <HTS_Init>:
__weak void HTS_Init( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	af00      	add	r7, sp, #0
  return;
 8009a48:	bf00      	nop
}
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a50:	4770      	bx	lr

08009a52 <IAS_Init>:
__weak void IAS_Init( void )
{
 8009a52:	b480      	push	{r7}
 8009a54:	af00      	add	r7, sp, #0
  return;
 8009a56:	bf00      	nop
}
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <LLS_Init>:
__weak void LLS_Init( void )
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
  return;
 8009a64:	bf00      	nop
}
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr

08009a6e <TPS_Init>:
__weak void TPS_Init( void )
{
 8009a6e:	b480      	push	{r7}
 8009a70:	af00      	add	r7, sp, #0
  return;
 8009a72:	bf00      	nop
}
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	af00      	add	r7, sp, #0
  return;
 8009a80:	bf00      	nop
}
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr

08009a8a <OTAS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
  return;
}
__weak void OTAS_STM_Init( void )
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	af00      	add	r7, sp, #0
  return;
 8009a8e:	bf00      	nop
}
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <MESH_Init>:
__weak void MESH_Init( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	af00      	add	r7, sp, #0
  return;
 8009a9c:	bf00      	nop
}
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa4:	4770      	bx	lr

08009aa6 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8009aa6:	b480      	push	{r7}
 8009aa8:	af00      	add	r7, sp, #0
  return;
 8009aaa:	bf00      	nop
}
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <SVCCTL_InitCustomSvc>:
__weak void SVCCTL_InitCustomSvc( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
  return;
 8009ab8:	bf00      	nop
}
 8009aba:	46bd      	mov	sp, r7
 8009abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac0:	4770      	bx	lr
	...

08009ac4 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8009ac8:	4b04      	ldr	r3, [pc, #16]	; (8009adc <SVCCTL_Init+0x18>)
 8009aca:	2200      	movs	r2, #0
 8009acc:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8009ace:	4b04      	ldr	r3, [pc, #16]	; (8009ae0 <SVCCTL_Init+0x1c>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8009ad4:	f000 f806 	bl	8009ae4 <SVCCTL_SvcInit>

  return;
 8009ad8:	bf00      	nop
}
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	200001f4 	.word	0x200001f4
 8009ae0:	200001fc 	.word	0x200001fc

08009ae4 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	af00      	add	r7, sp, #0
  BLS_Init();
 8009ae8:	f7ff ff82 	bl	80099f0 <BLS_Init>

  CRS_STM_Init();
 8009aec:	f7ff ff87 	bl	80099fe <CRS_STM_Init>

  DIS_Init();
 8009af0:	f7ff ff8c 	bl	8009a0c <DIS_Init>

  EDS_STM_Init();
 8009af4:	f7ff ff91 	bl	8009a1a <EDS_STM_Init>

  HIDS_Init();
 8009af8:	f7ff ff96 	bl	8009a28 <HIDS_Init>

  HRS_Init();
 8009afc:	f7ff ff9b 	bl	8009a36 <HRS_Init>

  HTS_Init();
 8009b00:	f7ff ffa0 	bl	8009a44 <HTS_Init>

  IAS_Init();
 8009b04:	f7ff ffa5 	bl	8009a52 <IAS_Init>

  LLS_Init();
 8009b08:	f7ff ffaa 	bl	8009a60 <LLS_Init>

  TPS_Init();
 8009b0c:	f7ff ffaf 	bl	8009a6e <TPS_Init>

  MOTENV_STM_Init();
 8009b10:	f7ff ffb4 	bl	8009a7c <MOTENV_STM_Init>

  P2PS_STM_Init();
 8009b14:	f7ff f892 	bl	8008c3c <P2PS_STM_Init>

  OTAS_STM_Init();
 8009b18:	f7ff ffb7 	bl	8009a8a <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8009b1c:	f7ff ffc3 	bl	8009aa6 <BVOPUS_STM_Init>

  MESH_Init();
 8009b20:	f7ff ffba 	bl	8009a98 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8009b24:	f7ff ffc6 	bl	8009ab4 <SVCCTL_InitCustomSvc>
  
  return;
 8009b28:	bf00      	nop
}
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8009b34:	4b09      	ldr	r3, [pc, #36]	; (8009b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009b36:	791b      	ldrb	r3, [r3, #4]
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4a08      	ldr	r2, [pc, #32]	; (8009b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8009b42:	4b06      	ldr	r3, [pc, #24]	; (8009b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009b44:	791b      	ldrb	r3, [r3, #4]
 8009b46:	3301      	adds	r3, #1
 8009b48:	b2da      	uxtb	r2, r3
 8009b4a:	4b04      	ldr	r3, [pc, #16]	; (8009b5c <SVCCTL_RegisterSvcHandler+0x30>)
 8009b4c:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8009b4e:	bf00      	nop
}
 8009b50:	370c      	adds	r7, #12
 8009b52:	46bd      	mov	sp, r7
 8009b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	200001f4 	.word	0x200001f4

08009b60 <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	781b      	ldrb	r3, [r3, #0]
 8009b76:	2bff      	cmp	r3, #255	; 0xff
 8009b78:	d000      	beq.n	8009b7c <SVCCTL_UserEvtRx+0x1c>
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */

    default:
      break;
 8009b7a:	e025      	b.n	8009bc8 <SVCCTL_UserEvtRx+0x68>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	3302      	adds	r3, #2
 8009b80:	60fb      	str	r3, [r7, #12]
      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009b8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b90:	d000      	beq.n	8009b94 <SVCCTL_UserEvtRx+0x34>
          break;
 8009b92:	e018      	b.n	8009bc6 <SVCCTL_UserEvtRx+0x66>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009b94:	2300      	movs	r3, #0
 8009b96:	757b      	strb	r3, [r7, #21]
 8009b98:	e00d      	b.n	8009bb6 <SVCCTL_UserEvtRx+0x56>
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8009b9a:	7d7b      	ldrb	r3, [r7, #21]
 8009b9c:	4a18      	ldr	r2, [pc, #96]	; (8009c00 <SVCCTL_UserEvtRx+0xa0>)
 8009b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	4798      	blx	r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	75fb      	strb	r3, [r7, #23]
            if (event_notification_status != SVCCTL_EvtNotAck)
 8009baa:	7dfb      	ldrb	r3, [r7, #23]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d108      	bne.n	8009bc2 <SVCCTL_UserEvtRx+0x62>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8009bb0:	7d7b      	ldrb	r3, [r7, #21]
 8009bb2:	3301      	adds	r3, #1
 8009bb4:	757b      	strb	r3, [r7, #21]
 8009bb6:	4b12      	ldr	r3, [pc, #72]	; (8009c00 <SVCCTL_UserEvtRx+0xa0>)
 8009bb8:	791b      	ldrb	r3, [r3, #4]
 8009bba:	7d7a      	ldrb	r2, [r7, #21]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d3ec      	bcc.n	8009b9a <SVCCTL_UserEvtRx+0x3a>
          break;
 8009bc0:	e000      	b.n	8009bc4 <SVCCTL_UserEvtRx+0x64>
              break;
 8009bc2:	bf00      	nop
          break;
 8009bc4:	bf00      	nop
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8009bc6:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d009      	beq.n	8009be2 <SVCCTL_UserEvtRx+0x82>
 8009bce:	2b02      	cmp	r3, #2
 8009bd0:	d00a      	beq.n	8009be8 <SVCCTL_UserEvtRx+0x88>
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d10b      	bne.n	8009bee <SVCCTL_UserEvtRx+0x8e>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8009bd6:	6878      	ldr	r0, [r7, #4]
 8009bd8:	f7f8 fd08 	bl	80025ec <SVCCTL_App_Notification>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	75bb      	strb	r3, [r7, #22]
      break;
 8009be0:	e008      	b.n	8009bf4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009be2:	2301      	movs	r3, #1
 8009be4:	75bb      	strb	r3, [r7, #22]
      break;
 8009be6:	e005      	b.n	8009bf4 <SVCCTL_UserEvtRx+0x94>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8009be8:	2300      	movs	r3, #0
 8009bea:	75bb      	strb	r3, [r7, #22]
      break;
 8009bec:	e002      	b.n	8009bf4 <SVCCTL_UserEvtRx+0x94>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8009bee:	2301      	movs	r3, #1
 8009bf0:	75bb      	strb	r3, [r7, #22]
      break;
 8009bf2:	bf00      	nop
  }

  return (return_status);
 8009bf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3718      	adds	r7, #24
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	200001f4 	.word	0x200001f4

08009c04 <TL_Enable>:

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable( void )
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8009c08:	f7f9 fc0c 	bl	8003424 <HW_IPCC_Enable>

  return;
 8009c0c:	bf00      	nop
}
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <TL_Init>:


void TL_Init( void )
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8009c14:	4b10      	ldr	r3, [pc, #64]	; (8009c58 <TL_Init+0x48>)
 8009c16:	4a11      	ldr	r2, [pc, #68]	; (8009c5c <TL_Init+0x4c>)
 8009c18:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 8009c1a:	4b0f      	ldr	r3, [pc, #60]	; (8009c58 <TL_Init+0x48>)
 8009c1c:	4a10      	ldr	r2, [pc, #64]	; (8009c60 <TL_Init+0x50>)
 8009c1e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8009c20:	4b0d      	ldr	r3, [pc, #52]	; (8009c58 <TL_Init+0x48>)
 8009c22:	4a10      	ldr	r2, [pc, #64]	; (8009c64 <TL_Init+0x54>)
 8009c24:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8009c26:	4b0c      	ldr	r3, [pc, #48]	; (8009c58 <TL_Init+0x48>)
 8009c28:	4a0f      	ldr	r2, [pc, #60]	; (8009c68 <TL_Init+0x58>)
 8009c2a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 8009c2c:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <TL_Init+0x48>)
 8009c2e:	4a0f      	ldr	r2, [pc, #60]	; (8009c6c <TL_Init+0x5c>)
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8009c32:	4b09      	ldr	r3, [pc, #36]	; (8009c58 <TL_Init+0x48>)
 8009c34:	4a0e      	ldr	r2, [pc, #56]	; (8009c70 <TL_Init+0x60>)
 8009c36:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8009c38:	4b07      	ldr	r3, [pc, #28]	; (8009c58 <TL_Init+0x48>)
 8009c3a:	4a0e      	ldr	r2, [pc, #56]	; (8009c74 <TL_Init+0x64>)
 8009c3c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8009c3e:	4b06      	ldr	r3, [pc, #24]	; (8009c58 <TL_Init+0x48>)
 8009c40:	4a0d      	ldr	r2, [pc, #52]	; (8009c78 <TL_Init+0x68>)
 8009c42:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8009c44:	4b04      	ldr	r3, [pc, #16]	; (8009c58 <TL_Init+0x48>)
 8009c46:	4a0d      	ldr	r2, [pc, #52]	; (8009c7c <TL_Init+0x6c>)
 8009c48:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 8009c4a:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <TL_Init+0x48>)
 8009c4c:	4a0c      	ldr	r2, [pc, #48]	; (8009c80 <TL_Init+0x70>)
 8009c4e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8009c50:	f7f9 fbfc 	bl	800344c <HW_IPCC_Init>

  return;
 8009c54:	bf00      	nop
}
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	20030000 	.word	0x20030000
 8009c5c:	20030134 	.word	0x20030134
 8009c60:	20030154 	.word	0x20030154
 8009c64:	20030164 	.word	0x20030164
 8009c68:	20030170 	.word	0x20030170
 8009c6c:	20030178 	.word	0x20030178
 8009c70:	20030180 	.word	0x20030180
 8009c74:	20030188 	.word	0x20030188
 8009c78:	200301a4 	.word	0x200301a4
 8009c7c:	200301a8 	.word	0x200301a8
 8009c80:	200301b4 	.word	0x200301b4

08009c84 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8009c84:	b580      	push	{r7, lr}
 8009c86:	b084      	sub	sp, #16
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8009c90:	4811      	ldr	r0, [pc, #68]	; (8009cd8 <TL_BLE_Init+0x54>)
 8009c92:	f7ff f9f7 	bl	8009084 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 8009c96:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <TL_BLE_Init+0x58>)
 8009c98:	685b      	ldr	r3, [r3, #4]
 8009c9a:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	4a0c      	ldr	r2, [pc, #48]	; (8009ce0 <TL_BLE_Init+0x5c>)
 8009cb0:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4a08      	ldr	r2, [pc, #32]	; (8009cd8 <TL_BLE_Init+0x54>)
 8009cb6:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 8009cb8:	f7f9 fbde 	bl	8003478 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	4a08      	ldr	r2, [pc, #32]	; (8009ce4 <TL_BLE_Init+0x60>)
 8009cc2:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	4a07      	ldr	r2, [pc, #28]	; (8009ce8 <TL_BLE_Init+0x64>)
 8009cca:	6013      	str	r3, [r2, #0]

  return 0;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	200301d0 	.word	0x200301d0
 8009cdc:	20030000 	.word	0x20030000
 8009ce0:	20030a48 	.word	0x20030a48
 8009ce4:	200012c4 	.word	0x200012c4
 8009ce8:	200012c8 	.word	0x200012c8

08009cec <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 8009cf8:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <TL_BLE_SendCmd+0x34>)
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 8009d02:	4b07      	ldr	r3, [pc, #28]	; (8009d20 <TL_BLE_SendCmd+0x34>)
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4619      	mov	r1, r3
 8009d0a:	2001      	movs	r0, #1
 8009d0c:	f000 f96c 	bl	8009fe8 <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 8009d10:	f7f9 fbbc 	bl	800348c <HW_IPCC_BLE_SendCmd>

  return 0;
 8009d14:	2300      	movs	r3, #0
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3708      	adds	r7, #8
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	bd80      	pop	{r7, pc}
 8009d1e:	bf00      	nop
 8009d20:	20030000 	.word	0x20030000

08009d24 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b082      	sub	sp, #8
 8009d28:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 8009d2a:	e01c      	b.n	8009d66 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 8009d2c:	1d3b      	adds	r3, r7, #4
 8009d2e:	4619      	mov	r1, r3
 8009d30:	4812      	ldr	r0, [pc, #72]	; (8009d7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009d32:	f7ff fa3e 	bl	80091b2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	7a5b      	ldrb	r3, [r3, #9]
 8009d3a:	2b0f      	cmp	r3, #15
 8009d3c:	d003      	beq.n	8009d46 <HW_IPCC_BLE_RxEvtNot+0x22>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	7a5b      	ldrb	r3, [r3, #9]
 8009d42:	2b0e      	cmp	r3, #14
 8009d44:	d105      	bne.n	8009d52 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	2002      	movs	r0, #2
 8009d4c:	f000 f94c 	bl	8009fe8 <OutputDbgTrace>
 8009d50:	e004      	b.n	8009d5c <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	4619      	mov	r1, r3
 8009d56:	2003      	movs	r0, #3
 8009d58:	f000 f946 	bl	8009fe8 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8009d5c:	4b08      	ldr	r3, [pc, #32]	; (8009d80 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	4610      	mov	r0, r2
 8009d64:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 8009d66:	4805      	ldr	r0, [pc, #20]	; (8009d7c <HW_IPCC_BLE_RxEvtNot+0x58>)
 8009d68:	f7ff f99c 	bl	80090a4 <LST_is_empty>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d0dc      	beq.n	8009d2c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8009d72:	bf00      	nop
}
 8009d74:	3708      	adds	r7, #8
 8009d76:	46bd      	mov	sp, r7
 8009d78:	bd80      	pop	{r7, pc}
 8009d7a:	bf00      	nop
 8009d7c:	200301d0 	.word	0x200301d0
 8009d80:	200012c4 	.word	0x200012c4

08009d84 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8009d88:	4b02      	ldr	r3, [pc, #8]	; (8009d94 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4798      	blx	r3

  return;
 8009d8e:	bf00      	nop
}
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	200012c8 	.word	0x200012c8

08009d98 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8009da4:	480d      	ldr	r0, [pc, #52]	; (8009ddc <TL_SYS_Init+0x44>)
 8009da6:	f7ff f96d 	bl	8009084 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 8009daa:	4b0d      	ldr	r3, [pc, #52]	; (8009de0 <TL_SYS_Init+0x48>)
 8009dac:	68db      	ldr	r3, [r3, #12]
 8009dae:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	689a      	ldr	r2, [r3, #8]
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	4a08      	ldr	r2, [pc, #32]	; (8009ddc <TL_SYS_Init+0x44>)
 8009dbc:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8009dbe:	f7f9 fb87 	bl	80034d0 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a07      	ldr	r2, [pc, #28]	; (8009de4 <TL_SYS_Init+0x4c>)
 8009dc8:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	4a06      	ldr	r2, [pc, #24]	; (8009de8 <TL_SYS_Init+0x50>)
 8009dd0:	6013      	str	r3, [r2, #0]

  return 0;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}
 8009ddc:	200301d8 	.word	0x200301d8
 8009de0:	20030000 	.word	0x20030000
 8009de4:	200012cc 	.word	0x200012cc
 8009de8:	200012d0 	.word	0x200012d0

08009dec <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b082      	sub	sp, #8
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	460b      	mov	r3, r1
 8009df6:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8009df8:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <TL_SYS_SendCmd+0x34>)
 8009dfa:	68db      	ldr	r3, [r3, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	2210      	movs	r2, #16
 8009e00:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8009e02:	4b07      	ldr	r3, [pc, #28]	; (8009e20 <TL_SYS_SendCmd+0x34>)
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4619      	mov	r1, r3
 8009e0a:	2004      	movs	r0, #4
 8009e0c:	f000 f8ec 	bl	8009fe8 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8009e10:	f7f9 fb68 	bl	80034e4 <HW_IPCC_SYS_SendCmd>

  return 0;
 8009e14:	2300      	movs	r3, #0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop
 8009e20:	20030000 	.word	0x20030000

08009e24 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009e28:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4619      	mov	r1, r3
 8009e30:	2005      	movs	r0, #5
 8009e32:	f000 f8d9 	bl	8009fe8 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8009e36:	4b05      	ldr	r3, [pc, #20]	; (8009e4c <HW_IPCC_SYS_CmdEvtNot+0x28>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a03      	ldr	r2, [pc, #12]	; (8009e48 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8009e3c:	68d2      	ldr	r2, [r2, #12]
 8009e3e:	6812      	ldr	r2, [r2, #0]
 8009e40:	4610      	mov	r0, r2
 8009e42:	4798      	blx	r3

  return;
 8009e44:	bf00      	nop
}
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	20030000 	.word	0x20030000
 8009e4c:	200012cc 	.word	0x200012cc

08009e50 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009e56:	e00e      	b.n	8009e76 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 8009e58:	1d3b      	adds	r3, r7, #4
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	480b      	ldr	r0, [pc, #44]	; (8009e8c <HW_IPCC_SYS_EvtNot+0x3c>)
 8009e5e:	f7ff f9a8 	bl	80091b2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	4619      	mov	r1, r3
 8009e66:	2006      	movs	r0, #6
 8009e68:	f000 f8be 	bl	8009fe8 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8009e6c:	4b08      	ldr	r3, [pc, #32]	; (8009e90 <HW_IPCC_SYS_EvtNot+0x40>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	687a      	ldr	r2, [r7, #4]
 8009e72:	4610      	mov	r0, r2
 8009e74:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 8009e76:	4805      	ldr	r0, [pc, #20]	; (8009e8c <HW_IPCC_SYS_EvtNot+0x3c>)
 8009e78:	f7ff f914 	bl	80090a4 <LST_is_empty>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d0ea      	beq.n	8009e58 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8009e82:	bf00      	nop
}
 8009e84:	3708      	adds	r7, #8
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	200301d8 	.word	0x200301d8
 8009e90:	200012d0 	.word	0x200012d0

08009e94 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b082      	sub	sp, #8
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8009e9c:	4817      	ldr	r0, [pc, #92]	; (8009efc <TL_MM_Init+0x68>)
 8009e9e:	f7ff f8f1 	bl	8009084 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8009ea2:	4817      	ldr	r0, [pc, #92]	; (8009f00 <TL_MM_Init+0x6c>)
 8009ea4:	f7ff f8ee 	bl	8009084 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8009ea8:	4b16      	ldr	r3, [pc, #88]	; (8009f04 <TL_MM_Init+0x70>)
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	4a16      	ldr	r2, [pc, #88]	; (8009f08 <TL_MM_Init+0x74>)
 8009eae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8009eb0:	4b15      	ldr	r3, [pc, #84]	; (8009f08 <TL_MM_Init+0x74>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	687a      	ldr	r2, [r7, #4]
 8009eb6:	6892      	ldr	r2, [r2, #8]
 8009eb8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 8009eba:	4b13      	ldr	r3, [pc, #76]	; (8009f08 <TL_MM_Init+0x74>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	68d2      	ldr	r2, [r2, #12]
 8009ec2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8009ec4:	4b10      	ldr	r3, [pc, #64]	; (8009f08 <TL_MM_Init+0x74>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a0c      	ldr	r2, [pc, #48]	; (8009efc <TL_MM_Init+0x68>)
 8009eca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8009ecc:	4b0e      	ldr	r3, [pc, #56]	; (8009f08 <TL_MM_Init+0x74>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	687a      	ldr	r2, [r7, #4]
 8009ed2:	6812      	ldr	r2, [r2, #0]
 8009ed4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 8009ed6:	4b0c      	ldr	r3, [pc, #48]	; (8009f08 <TL_MM_Init+0x74>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	6852      	ldr	r2, [r2, #4]
 8009ede:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8009ee0:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <TL_MM_Init+0x74>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	6912      	ldr	r2, [r2, #16]
 8009ee8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 8009eea:	4b07      	ldr	r3, [pc, #28]	; (8009f08 <TL_MM_Init+0x74>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	6952      	ldr	r2, [r2, #20]
 8009ef2:	619a      	str	r2, [r3, #24]

  return;
 8009ef4:	bf00      	nop
}
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}
 8009efc:	200301c0 	.word	0x200301c0
 8009f00:	200012bc 	.word	0x200012bc
 8009f04:	20030000 	.word	0x20030000
 8009f08:	200012d4 	.word	0x200012d4

08009f0c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8009f14:	6879      	ldr	r1, [r7, #4]
 8009f16:	4807      	ldr	r0, [pc, #28]	; (8009f34 <TL_MM_EvtDone+0x28>)
 8009f18:	f7ff f908 	bl	800912c <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8009f1c:	6879      	ldr	r1, [r7, #4]
 8009f1e:	2000      	movs	r0, #0
 8009f20:	f000 f862 	bl	8009fe8 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8009f24:	4804      	ldr	r0, [pc, #16]	; (8009f38 <TL_MM_EvtDone+0x2c>)
 8009f26:	f7f9 fb03 	bl	8003530 <HW_IPCC_MM_SendFreeBuf>

  return;
 8009f2a:	bf00      	nop
}
 8009f2c:	3708      	adds	r7, #8
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	bd80      	pop	{r7, pc}
 8009f32:	bf00      	nop
 8009f34:	200012bc 	.word	0x200012bc
 8009f38:	08009f3d 	.word	0x08009f3d

08009f3c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b082      	sub	sp, #8
 8009f40:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009f42:	e00c      	b.n	8009f5e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8009f44:	1d3b      	adds	r3, r7, #4
 8009f46:	4619      	mov	r1, r3
 8009f48:	480a      	ldr	r0, [pc, #40]	; (8009f74 <SendFreeBuf+0x38>)
 8009f4a:	f7ff f932 	bl	80091b2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8009f4e:	4b0a      	ldr	r3, [pc, #40]	; (8009f78 <SendFreeBuf+0x3c>)
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	4611      	mov	r1, r2
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7ff f8e7 	bl	800912c <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8009f5e:	4805      	ldr	r0, [pc, #20]	; (8009f74 <SendFreeBuf+0x38>)
 8009f60:	f7ff f8a0 	bl	80090a4 <LST_is_empty>
 8009f64:	4603      	mov	r3, r0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0ec      	beq.n	8009f44 <SendFreeBuf+0x8>
  }

  return;
 8009f6a:	bf00      	nop
}
 8009f6c:	3708      	adds	r7, #8
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	bf00      	nop
 8009f74:	200012bc 	.word	0x200012bc
 8009f78:	20030000 	.word	0x20030000

08009f7c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8009f80:	4805      	ldr	r0, [pc, #20]	; (8009f98 <TL_TRACES_Init+0x1c>)
 8009f82:	f7ff f87f 	bl	8009084 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 8009f86:	4b05      	ldr	r3, [pc, #20]	; (8009f9c <TL_TRACES_Init+0x20>)
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	4a03      	ldr	r2, [pc, #12]	; (8009f98 <TL_TRACES_Init+0x1c>)
 8009f8c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8009f8e:	f7f9 fb05 	bl	800359c <HW_IPCC_TRACES_Init>

  return;
 8009f92:	bf00      	nop
}
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	200301c8 	.word	0x200301c8
 8009f9c:	20030000 	.word	0x20030000

08009fa0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b082      	sub	sp, #8
 8009fa4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009fa6:	e008      	b.n	8009fba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 8009fa8:	1d3b      	adds	r3, r7, #4
 8009faa:	4619      	mov	r1, r3
 8009fac:	4808      	ldr	r0, [pc, #32]	; (8009fd0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009fae:	f7ff f900 	bl	80091b2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f000 f80d 	bl	8009fd4 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 8009fba:	4805      	ldr	r0, [pc, #20]	; (8009fd0 <HW_IPCC_TRACES_EvtNot+0x30>)
 8009fbc:	f7ff f872 	bl	80090a4 <LST_is_empty>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d0f0      	beq.n	8009fa8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 8009fc6:	bf00      	nop
}
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}
 8009fce:	bf00      	nop
 8009fd0:	200301c8 	.word	0x200301c8

08009fd4 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b083      	sub	sp, #12
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 8009fdc:	bf00      	nop
 8009fde:	370c      	adds	r7, #12
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr

08009fe8 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8009fe8:	b480      	push	{r7}
 8009fea:	b085      	sub	sp, #20
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	4603      	mov	r3, r0
 8009ff0:	6039      	str	r1, [r7, #0]
 8009ff2:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 8009ff4:	79fb      	ldrb	r3, [r7, #7]
 8009ff6:	2b06      	cmp	r3, #6
 8009ff8:	d849      	bhi.n	800a08e <OutputDbgTrace+0xa6>
 8009ffa:	a201      	add	r2, pc, #4	; (adr r2, 800a000 <OutputDbgTrace+0x18>)
 8009ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a000:	0800a01d 	.word	0x0800a01d
 800a004:	0800a03f 	.word	0x0800a03f
 800a008:	0800a045 	.word	0x0800a045
 800a00c:	0800a05f 	.word	0x0800a05f
 800a010:	0800a06b 	.word	0x0800a06b
 800a014:	0800a071 	.word	0x0800a071
 800a018:	0800a083 	.word	0x0800a083
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	7a5b      	ldrb	r3, [r3, #9]
 800a024:	2b0f      	cmp	r3, #15
 800a026:	d004      	beq.n	800a032 <OutputDbgTrace+0x4a>
 800a028:	2bff      	cmp	r3, #255	; 0xff
 800a02a:	d004      	beq.n	800a036 <OutputDbgTrace+0x4e>
 800a02c:	2b0e      	cmp	r3, #14
 800a02e:	d004      	beq.n	800a03a <OutputDbgTrace+0x52>
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800a030:	e004      	b.n	800a03c <OutputDbgTrace+0x54>
          break;
 800a032:	bf00      	nop
 800a034:	e02c      	b.n	800a090 <OutputDbgTrace+0xa8>
          break;
 800a036:	bf00      	nop
 800a038:	e02a      	b.n	800a090 <OutputDbgTrace+0xa8>
          break;
 800a03a:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800a03c:	e028      	b.n	800a090 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a042:	e025      	b.n	800a090 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	7a5b      	ldrb	r3, [r3, #9]
 800a04c:	2b0e      	cmp	r3, #14
 800a04e:	d002      	beq.n	800a056 <OutputDbgTrace+0x6e>
 800a050:	2b0f      	cmp	r3, #15
 800a052:	d002      	beq.n	800a05a <OutputDbgTrace+0x72>
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a054:	e002      	b.n	800a05c <OutputDbgTrace+0x74>
          break;
 800a056:	bf00      	nop
 800a058:	e01a      	b.n	800a090 <OutputDbgTrace+0xa8>
          break;
 800a05a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a05c:	e018      	b.n	800a090 <OutputDbgTrace+0xa8>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a05e:	683b      	ldr	r3, [r7, #0]
 800a060:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	7a5b      	ldrb	r3, [r3, #9]
 800a066:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a068:	e012      	b.n	800a090 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800a06e:	e00f      	b.n	800a090 <OutputDbgTrace+0xa8>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	7a5b      	ldrb	r3, [r3, #9]
 800a078:	2b0e      	cmp	r3, #14
 800a07a:	d000      	beq.n	800a07e <OutputDbgTrace+0x96>
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800a07c:	e000      	b.n	800a080 <OutputDbgTrace+0x98>
          break;
 800a07e:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a080:	e006      	b.n	800a090 <OutputDbgTrace+0xa8>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800a082:	683b      	ldr	r3, [r7, #0]
 800a084:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	7a5b      	ldrb	r3, [r3, #9]
 800a08a:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800a08c:	e000      	b.n	800a090 <OutputDbgTrace+0xa8>

    default:
      break;
 800a08e:	bf00      	nop
  }

  return;
 800a090:	bf00      	nop
}
 800a092:	3714      	adds	r7, #20
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a09c:	b480      	push	{r7}
 800a09e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a0a0:	4b05      	ldr	r3, [pc, #20]	; (800a0b8 <UTIL_LPM_Init+0x1c>)
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a0a6:	4b05      	ldr	r3, [pc, #20]	; (800a0bc <UTIL_LPM_Init+0x20>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a0ac:	bf00      	nop
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	200012d8 	.word	0x200012d8
 800a0bc:	200012dc 	.word	0x200012dc

0800a0c0 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a0cc:	f3ef 8310 	mrs	r3, PRIMASK
 800a0d0:	613b      	str	r3, [r7, #16]
  return(result);
 800a0d2:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a0d4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a0d6:	b672      	cpsid	i
  
  switch(state)
 800a0d8:	78fb      	ldrb	r3, [r7, #3]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d009      	beq.n	800a0f2 <UTIL_LPM_SetOffMode+0x32>
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d000      	beq.n	800a0e4 <UTIL_LPM_SetOffMode+0x24>
      OffModeDisable &= ( ~lpm_id_bm );
      break;
    }
  default :
    {
      break;
 800a0e2:	e00e      	b.n	800a102 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable |= lpm_id_bm;
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <UTIL_LPM_SetOffMode+0x58>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	4a0a      	ldr	r2, [pc, #40]	; (800a118 <UTIL_LPM_SetOffMode+0x58>)
 800a0ee:	6013      	str	r3, [r2, #0]
      break;
 800a0f0:	e007      	b.n	800a102 <UTIL_LPM_SetOffMode+0x42>
      OffModeDisable &= ( ~lpm_id_bm );
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	43da      	mvns	r2, r3
 800a0f6:	4b08      	ldr	r3, [pc, #32]	; (800a118 <UTIL_LPM_SetOffMode+0x58>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	4013      	ands	r3, r2
 800a0fc:	4a06      	ldr	r2, [pc, #24]	; (800a118 <UTIL_LPM_SetOffMode+0x58>)
 800a0fe:	6013      	str	r3, [r2, #0]
      break;
 800a100:	bf00      	nop
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f383 8810 	msr	PRIMASK, r3
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a10c:	bf00      	nop
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr
 800a118:	200012dc 	.word	0x200012dc

0800a11c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b08c      	sub	sp, #48	; 0x30
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800a124:	4b65      	ldr	r3, [pc, #404]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800a12a:	4b64      	ldr	r3, [pc, #400]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4013      	ands	r3, r2
 800a132:	4a62      	ldr	r2, [pc, #392]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a134:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a136:	e081      	b.n	800a23c <UTIL_SEQ_Run+0x120>
  {
    counter = 0U;
 800a138:	2300      	movs	r3, #0
 800a13a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a13c:	e002      	b.n	800a144 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800a13e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a140:	3301      	adds	r3, #1
 800a142:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800a144:	4a5e      	ldr	r2, [pc, #376]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a14c:	4b5d      	ldr	r3, [pc, #372]	; (800a2c4 <UTIL_SEQ_Run+0x1a8>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	401a      	ands	r2, r3
 800a152:	4b5a      	ldr	r3, [pc, #360]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	4013      	ands	r3, r2
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d0f0      	beq.n	800a13e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800a15c:	4a58      	ldr	r2, [pc, #352]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a160:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a164:	4b57      	ldr	r3, [pc, #348]	; (800a2c4 <UTIL_SEQ_Run+0x1a8>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	401a      	ands	r2, r3
 800a16a:	4b54      	ldr	r3, [pc, #336]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4013      	ands	r3, r2
 800a170:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800a172:	4a53      	ldr	r2, [pc, #332]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a176:	00db      	lsls	r3, r3, #3
 800a178:	4413      	add	r3, r2
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17e:	4013      	ands	r3, r2
 800a180:	2b00      	cmp	r3, #0
 800a182:	d106      	bne.n	800a192 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800a184:	4a4e      	ldr	r2, [pc, #312]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	4413      	add	r3, r2
 800a18c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a190:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800a192:	4a4b      	ldr	r2, [pc, #300]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a196:	00db      	lsls	r3, r3, #3
 800a198:	4413      	add	r3, r2
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a19e:	4013      	ands	r3, r2
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	f000 f98f 	bl	800a4c4 <SEQ_BitPosition>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	461a      	mov	r2, r3
 800a1aa:	4b47      	ldr	r3, [pc, #284]	; (800a2c8 <UTIL_SEQ_Run+0x1ac>)
 800a1ac:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800a1ae:	4a44      	ldr	r2, [pc, #272]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1b2:	00db      	lsls	r3, r3, #3
 800a1b4:	4413      	add	r3, r2
 800a1b6:	685a      	ldr	r2, [r3, #4]
 800a1b8:	4b43      	ldr	r3, [pc, #268]	; (800a2c8 <UTIL_SEQ_Run+0x1ac>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	2101      	movs	r1, #1
 800a1be:	fa01 f303 	lsl.w	r3, r1, r3
 800a1c2:	43db      	mvns	r3, r3
 800a1c4:	401a      	ands	r2, r3
 800a1c6:	493e      	ldr	r1, [pc, #248]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1ca:	00db      	lsls	r3, r3, #3
 800a1cc:	440b      	add	r3, r1
 800a1ce:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a1d0:	f3ef 8310 	mrs	r3, PRIMASK
 800a1d4:	61bb      	str	r3, [r7, #24]
  return(result);
 800a1d6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a1d8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1da:	b672      	cpsid	i
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800a1dc:	4b3a      	ldr	r3, [pc, #232]	; (800a2c8 <UTIL_SEQ_Run+0x1ac>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e6:	43da      	mvns	r2, r3
 800a1e8:	4b38      	ldr	r3, [pc, #224]	; (800a2cc <UTIL_SEQ_Run+0x1b0>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	4a37      	ldr	r2, [pc, #220]	; (800a2cc <UTIL_SEQ_Run+0x1b0>)
 800a1f0:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a1f6:	e013      	b.n	800a220 <UTIL_SEQ_Run+0x104>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800a1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1fa:	3b01      	subs	r3, #1
 800a1fc:	4a30      	ldr	r2, [pc, #192]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a1fe:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800a202:	4b31      	ldr	r3, [pc, #196]	; (800a2c8 <UTIL_SEQ_Run+0x1ac>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	2201      	movs	r2, #1
 800a208:	fa02 f303 	lsl.w	r3, r2, r3
 800a20c:	43da      	mvns	r2, r3
 800a20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a210:	3b01      	subs	r3, #1
 800a212:	400a      	ands	r2, r1
 800a214:	492a      	ldr	r1, [pc, #168]	; (800a2c0 <UTIL_SEQ_Run+0x1a4>)
 800a216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800a21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a21c:	3b01      	subs	r3, #1
 800a21e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e8      	bne.n	800a1f8 <UTIL_SEQ_Run+0xdc>
 800a226:	6a3b      	ldr	r3, [r7, #32]
 800a228:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f383 8810 	msr	PRIMASK, r3
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800a230:	4b25      	ldr	r3, [pc, #148]	; (800a2c8 <UTIL_SEQ_Run+0x1ac>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a26      	ldr	r2, [pc, #152]	; (800a2d0 <UTIL_SEQ_Run+0x1b4>)
 800a236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a23a:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800a23c:	4b23      	ldr	r3, [pc, #140]	; (800a2cc <UTIL_SEQ_Run+0x1b0>)
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	4b20      	ldr	r3, [pc, #128]	; (800a2c4 <UTIL_SEQ_Run+0x1a8>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	401a      	ands	r2, r3
 800a246:	4b1d      	ldr	r3, [pc, #116]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4013      	ands	r3, r2
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d007      	beq.n	800a260 <UTIL_SEQ_Run+0x144>
 800a250:	4b20      	ldr	r3, [pc, #128]	; (800a2d4 <UTIL_SEQ_Run+0x1b8>)
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	4b20      	ldr	r3, [pc, #128]	; (800a2d8 <UTIL_SEQ_Run+0x1bc>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4013      	ands	r3, r2
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	f43f af6c 	beq.w	800a138 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800a260:	4b19      	ldr	r3, [pc, #100]	; (800a2c8 <UTIL_SEQ_Run+0x1ac>)
 800a262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a266:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800a268:	f000 f91e 	bl	800a4a8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a26c:	f3ef 8310 	mrs	r3, PRIMASK
 800a270:	613b      	str	r3, [r7, #16]
  return(result);
 800a272:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800a274:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a276:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800a278:	4b14      	ldr	r3, [pc, #80]	; (800a2cc <UTIL_SEQ_Run+0x1b0>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	4b11      	ldr	r3, [pc, #68]	; (800a2c4 <UTIL_SEQ_Run+0x1a8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	401a      	ands	r2, r3
 800a282:	4b0e      	ldr	r3, [pc, #56]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4013      	ands	r3, r2
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d108      	bne.n	800a29e <UTIL_SEQ_Run+0x182>
 800a28c:	4b11      	ldr	r3, [pc, #68]	; (800a2d4 <UTIL_SEQ_Run+0x1b8>)
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4b11      	ldr	r3, [pc, #68]	; (800a2d8 <UTIL_SEQ_Run+0x1bc>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4013      	ands	r3, r2
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <UTIL_SEQ_Run+0x182>
  {
	UTIL_SEQ_Idle( );
 800a29a:	f7f6 fb3c 	bl	8000916 <UTIL_SEQ_Idle>
 800a29e:	69fb      	ldr	r3, [r7, #28]
 800a2a0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	f383 8810 	msr	PRIMASK, r3
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800a2a8:	f000 f905 	bl	800a4b6 <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800a2ac:	4a03      	ldr	r2, [pc, #12]	; (800a2bc <UTIL_SEQ_Run+0x1a0>)
 800a2ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2b0:	6013      	str	r3, [r2, #0]

  return;
 800a2b2:	bf00      	nop
}
 800a2b4:	3730      	adds	r7, #48	; 0x30
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	20000044 	.word	0x20000044
 800a2c0:	20001370 	.word	0x20001370
 800a2c4:	20000040 	.word	0x20000040
 800a2c8:	200012ec 	.word	0x200012ec
 800a2cc:	200012e0 	.word	0x200012e0
 800a2d0:	200012f0 	.word	0x200012f0
 800a2d4:	200012e4 	.word	0x200012e4
 800a2d8:	200012e8 	.word	0x200012e8

0800a2dc <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b088      	sub	sp, #32
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	60f8      	str	r0, [r7, #12]
 800a2e4:	60b9      	str	r1, [r7, #8]
 800a2e6:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a2e8:	f3ef 8310 	mrs	r3, PRIMASK
 800a2ec:	617b      	str	r3, [r7, #20]
  return(result);
 800a2ee:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800a2f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2f2:	b672      	cpsid	i

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800a2f4:	68f8      	ldr	r0, [r7, #12]
 800a2f6:	f000 f8e5 	bl	800a4c4 <SEQ_BitPosition>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4a06      	ldr	r2, [pc, #24]	; (800a318 <UTIL_SEQ_RegTask+0x3c>)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800a310:	bf00      	nop
}
 800a312:	3720      	adds	r7, #32
 800a314:	46bd      	mov	sp, r7
 800a316:	bd80      	pop	{r7, pc}
 800a318:	200012f0 	.word	0x200012f0

0800a31c <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800a31c:	b480      	push	{r7}
 800a31e:	b087      	sub	sp, #28
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a326:	f3ef 8310 	mrs	r3, PRIMASK
 800a32a:	60fb      	str	r3, [r7, #12]
  return(result);
 800a32c:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a32e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a330:	b672      	cpsid	i

  TaskSet |= TaskId_bm;
 800a332:	4b0d      	ldr	r3, [pc, #52]	; (800a368 <UTIL_SEQ_SetTask+0x4c>)
 800a334:	681a      	ldr	r2, [r3, #0]
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	4313      	orrs	r3, r2
 800a33a:	4a0b      	ldr	r2, [pc, #44]	; (800a368 <UTIL_SEQ_SetTask+0x4c>)
 800a33c:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800a33e:	4a0b      	ldr	r2, [pc, #44]	; (800a36c <UTIL_SEQ_SetTask+0x50>)
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	431a      	orrs	r2, r3
 800a34a:	4908      	ldr	r1, [pc, #32]	; (800a36c <UTIL_SEQ_SetTask+0x50>)
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800a352:	697b      	ldr	r3, [r7, #20]
 800a354:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a35c:	bf00      	nop
}
 800a35e:	371c      	adds	r7, #28
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr
 800a368:	200012e0 	.word	0x200012e0
 800a36c:	20001370 	.word	0x20001370

0800a370 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a370:	b480      	push	{r7}
 800a372:	b087      	sub	sp, #28
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a378:	f3ef 8310 	mrs	r3, PRIMASK
 800a37c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a37e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a380:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a382:	b672      	cpsid	i

  TaskMask &= (~TaskId_bm);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	43da      	mvns	r2, r3
 800a388:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <UTIL_SEQ_PauseTask+0x38>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4013      	ands	r3, r2
 800a38e:	4a06      	ldr	r2, [pc, #24]	; (800a3a8 <UTIL_SEQ_PauseTask+0x38>)
 800a390:	6013      	str	r3, [r2, #0]
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a39c:	bf00      	nop
}
 800a39e:	371c      	adds	r7, #28
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr
 800a3a8:	20000040 	.word	0x20000040

0800a3ac <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b087      	sub	sp, #28
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3b8:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a3bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3be:	b672      	cpsid	i

  TaskMask |= TaskId_bm;
 800a3c0:	4b08      	ldr	r3, [pc, #32]	; (800a3e4 <UTIL_SEQ_ResumeTask+0x38>)
 800a3c2:	681a      	ldr	r2, [r3, #0]
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	4a06      	ldr	r2, [pc, #24]	; (800a3e4 <UTIL_SEQ_ResumeTask+0x38>)
 800a3ca:	6013      	str	r3, [r2, #0]
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d0:	693b      	ldr	r3, [r7, #16]
 800a3d2:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a3d6:	bf00      	nop
}
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
 800a3e2:	bf00      	nop
 800a3e4:	20000040 	.word	0x20000040

0800a3e8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3f0:	f3ef 8310 	mrs	r3, PRIMASK
 800a3f4:	60fb      	str	r3, [r7, #12]
  return(result);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800a3f8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3fa:	b672      	cpsid	i

  EvtSet |= EvtId_bm;
 800a3fc:	4b08      	ldr	r3, [pc, #32]	; (800a420 <UTIL_SEQ_SetEvt+0x38>)
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4313      	orrs	r3, r2
 800a404:	4a06      	ldr	r2, [pc, #24]	; (800a420 <UTIL_SEQ_SetEvt+0x38>)
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	697b      	ldr	r3, [r7, #20]
 800a40a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f383 8810 	msr	PRIMASK, r3

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800a412:	bf00      	nop
}
 800a414:	371c      	adds	r7, #28
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr
 800a41e:	bf00      	nop
 800a420:	200012e4 	.word	0x200012e4

0800a424 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800a424:	b580      	push	{r7, lr}
 800a426:	b086      	sub	sp, #24
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t current_task_idx;
  UTIL_SEQ_bm_t wait_task_idx;
  /** store in local the current_task_id_bm as the global variable CurrentTaskIdx
   *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800a42c:	4b1b      	ldr	r3, [pc, #108]	; (800a49c <UTIL_SEQ_WaitEvt+0x78>)
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	613b      	str	r3, [r7, #16]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800a432:	4b1a      	ldr	r3, [pc, #104]	; (800a49c <UTIL_SEQ_WaitEvt+0x78>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a43a:	d102      	bne.n	800a442 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e005      	b.n	800a44e <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = 1 << CurrentTaskIdx;
 800a442:	4b16      	ldr	r3, [pc, #88]	; (800a49c <UTIL_SEQ_WaitEvt+0x78>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2201      	movs	r2, #1
 800a448:	fa02 f303 	lsl.w	r3, r2, r3
 800a44c:	617b      	str	r3, [r7, #20]
  }

  /** backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800a44e:	4b14      	ldr	r3, [pc, #80]	; (800a4a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	60fb      	str	r3, [r7, #12]
  EvtWaited = EvtId_bm;
 800a454:	4a12      	ldr	r2, [pc, #72]	; (800a4a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6013      	str	r3, [r2, #0]
   *  the while loop below.
   *  The system is waiting only for the last waited event.
   *  When it will go out, it will wait again from the previous one.
   *  It case it occurs while waiting for the second one, the while loop will exit immediately
   */
  while ((EvtSet & EvtWaited) == 0U)
 800a45a:	e005      	b.n	800a468 <UTIL_SEQ_WaitEvt+0x44>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 800a45c:	4b10      	ldr	r3, [pc, #64]	; (800a4a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4619      	mov	r1, r3
 800a462:	6978      	ldr	r0, [r7, #20]
 800a464:	f7f6 fa5e 	bl	8000924 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtWaited) == 0U)
 800a468:	4b0e      	ldr	r3, [pc, #56]	; (800a4a4 <UTIL_SEQ_WaitEvt+0x80>)
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	4b0c      	ldr	r3, [pc, #48]	; (800a4a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4013      	ands	r3, r2
 800a472:	2b00      	cmp	r3, #0
 800a474:	d0f2      	beq.n	800a45c <UTIL_SEQ_WaitEvt+0x38>
  /**
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800a476:	4a09      	ldr	r2, [pc, #36]	; (800a49c <UTIL_SEQ_WaitEvt+0x78>)
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6013      	str	r3, [r2, #0]

  EvtSet &= (~EvtWaited);
 800a47c:	4b08      	ldr	r3, [pc, #32]	; (800a4a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	43da      	mvns	r2, r3
 800a482:	4b08      	ldr	r3, [pc, #32]	; (800a4a4 <UTIL_SEQ_WaitEvt+0x80>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4013      	ands	r3, r2
 800a488:	4a06      	ldr	r2, [pc, #24]	; (800a4a4 <UTIL_SEQ_WaitEvt+0x80>)
 800a48a:	6013      	str	r3, [r2, #0]
  EvtWaited = event_waited_id_backup;
 800a48c:	4a04      	ldr	r2, [pc, #16]	; (800a4a0 <UTIL_SEQ_WaitEvt+0x7c>)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6013      	str	r3, [r2, #0]

  return;
 800a492:	bf00      	nop
}
 800a494:	3718      	adds	r7, #24
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	200012ec 	.word	0x200012ec
 800a4a0:	200012e8 	.word	0x200012e8
 800a4a4:	200012e4 	.word	0x200012e4

0800a4a8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a4ac:	bf00      	nop
}
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800a4ba:	bf00      	nop
}
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c2:	4770      	bx	lr

0800a4c4 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b085      	sub	sp, #20
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	0c1b      	lsrs	r3, r3, #16
 800a4d4:	041b      	lsls	r3, r3, #16
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d104      	bne.n	800a4e4 <SEQ_BitPosition+0x20>
 800a4da:	2310      	movs	r3, #16
 800a4dc:	73fb      	strb	r3, [r7, #15]
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	041b      	lsls	r3, r3, #16
 800a4e2:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d105      	bne.n	800a4fa <SEQ_BitPosition+0x36>
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
 800a4f0:	3308      	adds	r3, #8
 800a4f2:	73fb      	strb	r3, [r7, #15]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	021b      	lsls	r3, r3, #8
 800a4f8:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a500:	2b00      	cmp	r3, #0
 800a502:	d105      	bne.n	800a510 <SEQ_BitPosition+0x4c>
 800a504:	7bfb      	ldrb	r3, [r7, #15]
 800a506:	3304      	adds	r3, #4
 800a508:	73fb      	strb	r3, [r7, #15]
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	011b      	lsls	r3, r3, #4
 800a50e:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	0f1b      	lsrs	r3, r3, #28
 800a514:	4a07      	ldr	r2, [pc, #28]	; (800a534 <SEQ_BitPosition+0x70>)
 800a516:	5cd2      	ldrb	r2, [r2, r3]
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	4413      	add	r3, r2
 800a51c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800a51e:	7bfb      	ldrb	r3, [r7, #15]
 800a520:	f1c3 031f 	rsb	r3, r3, #31
 800a524:	b2db      	uxtb	r3, r3
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
 800a532:	bf00      	nop
 800a534:	0800be1c 	.word	0x0800be1c

0800a538 <__errno>:
 800a538:	4b01      	ldr	r3, [pc, #4]	; (800a540 <__errno+0x8>)
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	4770      	bx	lr
 800a53e:	bf00      	nop
 800a540:	20000048 	.word	0x20000048

0800a544 <__libc_init_array>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	4e0d      	ldr	r6, [pc, #52]	; (800a57c <__libc_init_array+0x38>)
 800a548:	4c0d      	ldr	r4, [pc, #52]	; (800a580 <__libc_init_array+0x3c>)
 800a54a:	1ba4      	subs	r4, r4, r6
 800a54c:	10a4      	asrs	r4, r4, #2
 800a54e:	2500      	movs	r5, #0
 800a550:	42a5      	cmp	r5, r4
 800a552:	d109      	bne.n	800a568 <__libc_init_array+0x24>
 800a554:	4e0b      	ldr	r6, [pc, #44]	; (800a584 <__libc_init_array+0x40>)
 800a556:	4c0c      	ldr	r4, [pc, #48]	; (800a588 <__libc_init_array+0x44>)
 800a558:	f000 ff74 	bl	800b444 <_init>
 800a55c:	1ba4      	subs	r4, r4, r6
 800a55e:	10a4      	asrs	r4, r4, #2
 800a560:	2500      	movs	r5, #0
 800a562:	42a5      	cmp	r5, r4
 800a564:	d105      	bne.n	800a572 <__libc_init_array+0x2e>
 800a566:	bd70      	pop	{r4, r5, r6, pc}
 800a568:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a56c:	4798      	blx	r3
 800a56e:	3501      	adds	r5, #1
 800a570:	e7ee      	b.n	800a550 <__libc_init_array+0xc>
 800a572:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a576:	4798      	blx	r3
 800a578:	3501      	adds	r5, #1
 800a57a:	e7f2      	b.n	800a562 <__libc_init_array+0x1e>
 800a57c:	0800becc 	.word	0x0800becc
 800a580:	0800becc 	.word	0x0800becc
 800a584:	0800becc 	.word	0x0800becc
 800a588:	0800bed0 	.word	0x0800bed0

0800a58c <memcpy>:
 800a58c:	b510      	push	{r4, lr}
 800a58e:	1e43      	subs	r3, r0, #1
 800a590:	440a      	add	r2, r1
 800a592:	4291      	cmp	r1, r2
 800a594:	d100      	bne.n	800a598 <memcpy+0xc>
 800a596:	bd10      	pop	{r4, pc}
 800a598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a5a0:	e7f7      	b.n	800a592 <memcpy+0x6>

0800a5a2 <memset>:
 800a5a2:	4402      	add	r2, r0
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d100      	bne.n	800a5ac <memset+0xa>
 800a5aa:	4770      	bx	lr
 800a5ac:	f803 1b01 	strb.w	r1, [r3], #1
 800a5b0:	e7f9      	b.n	800a5a6 <memset+0x4>
	...

0800a5b4 <iprintf>:
 800a5b4:	b40f      	push	{r0, r1, r2, r3}
 800a5b6:	4b0a      	ldr	r3, [pc, #40]	; (800a5e0 <iprintf+0x2c>)
 800a5b8:	b513      	push	{r0, r1, r4, lr}
 800a5ba:	681c      	ldr	r4, [r3, #0]
 800a5bc:	b124      	cbz	r4, 800a5c8 <iprintf+0x14>
 800a5be:	69a3      	ldr	r3, [r4, #24]
 800a5c0:	b913      	cbnz	r3, 800a5c8 <iprintf+0x14>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	f000 fa22 	bl	800aa0c <__sinit>
 800a5c8:	ab05      	add	r3, sp, #20
 800a5ca:	9a04      	ldr	r2, [sp, #16]
 800a5cc:	68a1      	ldr	r1, [r4, #8]
 800a5ce:	9301      	str	r3, [sp, #4]
 800a5d0:	4620      	mov	r0, r4
 800a5d2:	f000 fbdb 	bl	800ad8c <_vfiprintf_r>
 800a5d6:	b002      	add	sp, #8
 800a5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5dc:	b004      	add	sp, #16
 800a5de:	4770      	bx	lr
 800a5e0:	20000048 	.word	0x20000048

0800a5e4 <_puts_r>:
 800a5e4:	b570      	push	{r4, r5, r6, lr}
 800a5e6:	460e      	mov	r6, r1
 800a5e8:	4605      	mov	r5, r0
 800a5ea:	b118      	cbz	r0, 800a5f4 <_puts_r+0x10>
 800a5ec:	6983      	ldr	r3, [r0, #24]
 800a5ee:	b90b      	cbnz	r3, 800a5f4 <_puts_r+0x10>
 800a5f0:	f000 fa0c 	bl	800aa0c <__sinit>
 800a5f4:	69ab      	ldr	r3, [r5, #24]
 800a5f6:	68ac      	ldr	r4, [r5, #8]
 800a5f8:	b913      	cbnz	r3, 800a600 <_puts_r+0x1c>
 800a5fa:	4628      	mov	r0, r5
 800a5fc:	f000 fa06 	bl	800aa0c <__sinit>
 800a600:	4b23      	ldr	r3, [pc, #140]	; (800a690 <_puts_r+0xac>)
 800a602:	429c      	cmp	r4, r3
 800a604:	d117      	bne.n	800a636 <_puts_r+0x52>
 800a606:	686c      	ldr	r4, [r5, #4]
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	071b      	lsls	r3, r3, #28
 800a60c:	d51d      	bpl.n	800a64a <_puts_r+0x66>
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	b1db      	cbz	r3, 800a64a <_puts_r+0x66>
 800a612:	3e01      	subs	r6, #1
 800a614:	68a3      	ldr	r3, [r4, #8]
 800a616:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a61a:	3b01      	subs	r3, #1
 800a61c:	60a3      	str	r3, [r4, #8]
 800a61e:	b9e9      	cbnz	r1, 800a65c <_puts_r+0x78>
 800a620:	2b00      	cmp	r3, #0
 800a622:	da2e      	bge.n	800a682 <_puts_r+0x9e>
 800a624:	4622      	mov	r2, r4
 800a626:	210a      	movs	r1, #10
 800a628:	4628      	mov	r0, r5
 800a62a:	f000 f83f 	bl	800a6ac <__swbuf_r>
 800a62e:	3001      	adds	r0, #1
 800a630:	d011      	beq.n	800a656 <_puts_r+0x72>
 800a632:	200a      	movs	r0, #10
 800a634:	e011      	b.n	800a65a <_puts_r+0x76>
 800a636:	4b17      	ldr	r3, [pc, #92]	; (800a694 <_puts_r+0xb0>)
 800a638:	429c      	cmp	r4, r3
 800a63a:	d101      	bne.n	800a640 <_puts_r+0x5c>
 800a63c:	68ac      	ldr	r4, [r5, #8]
 800a63e:	e7e3      	b.n	800a608 <_puts_r+0x24>
 800a640:	4b15      	ldr	r3, [pc, #84]	; (800a698 <_puts_r+0xb4>)
 800a642:	429c      	cmp	r4, r3
 800a644:	bf08      	it	eq
 800a646:	68ec      	ldreq	r4, [r5, #12]
 800a648:	e7de      	b.n	800a608 <_puts_r+0x24>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4628      	mov	r0, r5
 800a64e:	f000 f87f 	bl	800a750 <__swsetup_r>
 800a652:	2800      	cmp	r0, #0
 800a654:	d0dd      	beq.n	800a612 <_puts_r+0x2e>
 800a656:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a65a:	bd70      	pop	{r4, r5, r6, pc}
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	da04      	bge.n	800a66a <_puts_r+0x86>
 800a660:	69a2      	ldr	r2, [r4, #24]
 800a662:	429a      	cmp	r2, r3
 800a664:	dc06      	bgt.n	800a674 <_puts_r+0x90>
 800a666:	290a      	cmp	r1, #10
 800a668:	d004      	beq.n	800a674 <_puts_r+0x90>
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	1c5a      	adds	r2, r3, #1
 800a66e:	6022      	str	r2, [r4, #0]
 800a670:	7019      	strb	r1, [r3, #0]
 800a672:	e7cf      	b.n	800a614 <_puts_r+0x30>
 800a674:	4622      	mov	r2, r4
 800a676:	4628      	mov	r0, r5
 800a678:	f000 f818 	bl	800a6ac <__swbuf_r>
 800a67c:	3001      	adds	r0, #1
 800a67e:	d1c9      	bne.n	800a614 <_puts_r+0x30>
 800a680:	e7e9      	b.n	800a656 <_puts_r+0x72>
 800a682:	6823      	ldr	r3, [r4, #0]
 800a684:	200a      	movs	r0, #10
 800a686:	1c5a      	adds	r2, r3, #1
 800a688:	6022      	str	r2, [r4, #0]
 800a68a:	7018      	strb	r0, [r3, #0]
 800a68c:	e7e5      	b.n	800a65a <_puts_r+0x76>
 800a68e:	bf00      	nop
 800a690:	0800be50 	.word	0x0800be50
 800a694:	0800be70 	.word	0x0800be70
 800a698:	0800be30 	.word	0x0800be30

0800a69c <puts>:
 800a69c:	4b02      	ldr	r3, [pc, #8]	; (800a6a8 <puts+0xc>)
 800a69e:	4601      	mov	r1, r0
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f7ff bf9f 	b.w	800a5e4 <_puts_r>
 800a6a6:	bf00      	nop
 800a6a8:	20000048 	.word	0x20000048

0800a6ac <__swbuf_r>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	460e      	mov	r6, r1
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	b118      	cbz	r0, 800a6be <__swbuf_r+0x12>
 800a6b6:	6983      	ldr	r3, [r0, #24]
 800a6b8:	b90b      	cbnz	r3, 800a6be <__swbuf_r+0x12>
 800a6ba:	f000 f9a7 	bl	800aa0c <__sinit>
 800a6be:	4b21      	ldr	r3, [pc, #132]	; (800a744 <__swbuf_r+0x98>)
 800a6c0:	429c      	cmp	r4, r3
 800a6c2:	d12a      	bne.n	800a71a <__swbuf_r+0x6e>
 800a6c4:	686c      	ldr	r4, [r5, #4]
 800a6c6:	69a3      	ldr	r3, [r4, #24]
 800a6c8:	60a3      	str	r3, [r4, #8]
 800a6ca:	89a3      	ldrh	r3, [r4, #12]
 800a6cc:	071a      	lsls	r2, r3, #28
 800a6ce:	d52e      	bpl.n	800a72e <__swbuf_r+0x82>
 800a6d0:	6923      	ldr	r3, [r4, #16]
 800a6d2:	b363      	cbz	r3, 800a72e <__swbuf_r+0x82>
 800a6d4:	6923      	ldr	r3, [r4, #16]
 800a6d6:	6820      	ldr	r0, [r4, #0]
 800a6d8:	1ac0      	subs	r0, r0, r3
 800a6da:	6963      	ldr	r3, [r4, #20]
 800a6dc:	b2f6      	uxtb	r6, r6
 800a6de:	4283      	cmp	r3, r0
 800a6e0:	4637      	mov	r7, r6
 800a6e2:	dc04      	bgt.n	800a6ee <__swbuf_r+0x42>
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4628      	mov	r0, r5
 800a6e8:	f000 f926 	bl	800a938 <_fflush_r>
 800a6ec:	bb28      	cbnz	r0, 800a73a <__swbuf_r+0x8e>
 800a6ee:	68a3      	ldr	r3, [r4, #8]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	60a3      	str	r3, [r4, #8]
 800a6f4:	6823      	ldr	r3, [r4, #0]
 800a6f6:	1c5a      	adds	r2, r3, #1
 800a6f8:	6022      	str	r2, [r4, #0]
 800a6fa:	701e      	strb	r6, [r3, #0]
 800a6fc:	6963      	ldr	r3, [r4, #20]
 800a6fe:	3001      	adds	r0, #1
 800a700:	4283      	cmp	r3, r0
 800a702:	d004      	beq.n	800a70e <__swbuf_r+0x62>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	07db      	lsls	r3, r3, #31
 800a708:	d519      	bpl.n	800a73e <__swbuf_r+0x92>
 800a70a:	2e0a      	cmp	r6, #10
 800a70c:	d117      	bne.n	800a73e <__swbuf_r+0x92>
 800a70e:	4621      	mov	r1, r4
 800a710:	4628      	mov	r0, r5
 800a712:	f000 f911 	bl	800a938 <_fflush_r>
 800a716:	b190      	cbz	r0, 800a73e <__swbuf_r+0x92>
 800a718:	e00f      	b.n	800a73a <__swbuf_r+0x8e>
 800a71a:	4b0b      	ldr	r3, [pc, #44]	; (800a748 <__swbuf_r+0x9c>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	d101      	bne.n	800a724 <__swbuf_r+0x78>
 800a720:	68ac      	ldr	r4, [r5, #8]
 800a722:	e7d0      	b.n	800a6c6 <__swbuf_r+0x1a>
 800a724:	4b09      	ldr	r3, [pc, #36]	; (800a74c <__swbuf_r+0xa0>)
 800a726:	429c      	cmp	r4, r3
 800a728:	bf08      	it	eq
 800a72a:	68ec      	ldreq	r4, [r5, #12]
 800a72c:	e7cb      	b.n	800a6c6 <__swbuf_r+0x1a>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f80d 	bl	800a750 <__swsetup_r>
 800a736:	2800      	cmp	r0, #0
 800a738:	d0cc      	beq.n	800a6d4 <__swbuf_r+0x28>
 800a73a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a73e:	4638      	mov	r0, r7
 800a740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a742:	bf00      	nop
 800a744:	0800be50 	.word	0x0800be50
 800a748:	0800be70 	.word	0x0800be70
 800a74c:	0800be30 	.word	0x0800be30

0800a750 <__swsetup_r>:
 800a750:	4b32      	ldr	r3, [pc, #200]	; (800a81c <__swsetup_r+0xcc>)
 800a752:	b570      	push	{r4, r5, r6, lr}
 800a754:	681d      	ldr	r5, [r3, #0]
 800a756:	4606      	mov	r6, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	b125      	cbz	r5, 800a766 <__swsetup_r+0x16>
 800a75c:	69ab      	ldr	r3, [r5, #24]
 800a75e:	b913      	cbnz	r3, 800a766 <__swsetup_r+0x16>
 800a760:	4628      	mov	r0, r5
 800a762:	f000 f953 	bl	800aa0c <__sinit>
 800a766:	4b2e      	ldr	r3, [pc, #184]	; (800a820 <__swsetup_r+0xd0>)
 800a768:	429c      	cmp	r4, r3
 800a76a:	d10f      	bne.n	800a78c <__swsetup_r+0x3c>
 800a76c:	686c      	ldr	r4, [r5, #4]
 800a76e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a772:	b29a      	uxth	r2, r3
 800a774:	0715      	lsls	r5, r2, #28
 800a776:	d42c      	bmi.n	800a7d2 <__swsetup_r+0x82>
 800a778:	06d0      	lsls	r0, r2, #27
 800a77a:	d411      	bmi.n	800a7a0 <__swsetup_r+0x50>
 800a77c:	2209      	movs	r2, #9
 800a77e:	6032      	str	r2, [r6, #0]
 800a780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a784:	81a3      	strh	r3, [r4, #12]
 800a786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a78a:	e03e      	b.n	800a80a <__swsetup_r+0xba>
 800a78c:	4b25      	ldr	r3, [pc, #148]	; (800a824 <__swsetup_r+0xd4>)
 800a78e:	429c      	cmp	r4, r3
 800a790:	d101      	bne.n	800a796 <__swsetup_r+0x46>
 800a792:	68ac      	ldr	r4, [r5, #8]
 800a794:	e7eb      	b.n	800a76e <__swsetup_r+0x1e>
 800a796:	4b24      	ldr	r3, [pc, #144]	; (800a828 <__swsetup_r+0xd8>)
 800a798:	429c      	cmp	r4, r3
 800a79a:	bf08      	it	eq
 800a79c:	68ec      	ldreq	r4, [r5, #12]
 800a79e:	e7e6      	b.n	800a76e <__swsetup_r+0x1e>
 800a7a0:	0751      	lsls	r1, r2, #29
 800a7a2:	d512      	bpl.n	800a7ca <__swsetup_r+0x7a>
 800a7a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7a6:	b141      	cbz	r1, 800a7ba <__swsetup_r+0x6a>
 800a7a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7ac:	4299      	cmp	r1, r3
 800a7ae:	d002      	beq.n	800a7b6 <__swsetup_r+0x66>
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 fa19 	bl	800abe8 <_free_r>
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	6363      	str	r3, [r4, #52]	; 0x34
 800a7ba:	89a3      	ldrh	r3, [r4, #12]
 800a7bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6063      	str	r3, [r4, #4]
 800a7c6:	6923      	ldr	r3, [r4, #16]
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	89a3      	ldrh	r3, [r4, #12]
 800a7cc:	f043 0308 	orr.w	r3, r3, #8
 800a7d0:	81a3      	strh	r3, [r4, #12]
 800a7d2:	6923      	ldr	r3, [r4, #16]
 800a7d4:	b94b      	cbnz	r3, 800a7ea <__swsetup_r+0x9a>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7e0:	d003      	beq.n	800a7ea <__swsetup_r+0x9a>
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	4630      	mov	r0, r6
 800a7e6:	f000 f9bf 	bl	800ab68 <__smakebuf_r>
 800a7ea:	89a2      	ldrh	r2, [r4, #12]
 800a7ec:	f012 0301 	ands.w	r3, r2, #1
 800a7f0:	d00c      	beq.n	800a80c <__swsetup_r+0xbc>
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60a3      	str	r3, [r4, #8]
 800a7f6:	6963      	ldr	r3, [r4, #20]
 800a7f8:	425b      	negs	r3, r3
 800a7fa:	61a3      	str	r3, [r4, #24]
 800a7fc:	6923      	ldr	r3, [r4, #16]
 800a7fe:	b953      	cbnz	r3, 800a816 <__swsetup_r+0xc6>
 800a800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a804:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800a808:	d1ba      	bne.n	800a780 <__swsetup_r+0x30>
 800a80a:	bd70      	pop	{r4, r5, r6, pc}
 800a80c:	0792      	lsls	r2, r2, #30
 800a80e:	bf58      	it	pl
 800a810:	6963      	ldrpl	r3, [r4, #20]
 800a812:	60a3      	str	r3, [r4, #8]
 800a814:	e7f2      	b.n	800a7fc <__swsetup_r+0xac>
 800a816:	2000      	movs	r0, #0
 800a818:	e7f7      	b.n	800a80a <__swsetup_r+0xba>
 800a81a:	bf00      	nop
 800a81c:	20000048 	.word	0x20000048
 800a820:	0800be50 	.word	0x0800be50
 800a824:	0800be70 	.word	0x0800be70
 800a828:	0800be30 	.word	0x0800be30

0800a82c <__sflush_r>:
 800a82c:	898a      	ldrh	r2, [r1, #12]
 800a82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a832:	4605      	mov	r5, r0
 800a834:	0710      	lsls	r0, r2, #28
 800a836:	460c      	mov	r4, r1
 800a838:	d458      	bmi.n	800a8ec <__sflush_r+0xc0>
 800a83a:	684b      	ldr	r3, [r1, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	dc05      	bgt.n	800a84c <__sflush_r+0x20>
 800a840:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a842:	2b00      	cmp	r3, #0
 800a844:	dc02      	bgt.n	800a84c <__sflush_r+0x20>
 800a846:	2000      	movs	r0, #0
 800a848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a84e:	2e00      	cmp	r6, #0
 800a850:	d0f9      	beq.n	800a846 <__sflush_r+0x1a>
 800a852:	2300      	movs	r3, #0
 800a854:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a858:	682f      	ldr	r7, [r5, #0]
 800a85a:	6a21      	ldr	r1, [r4, #32]
 800a85c:	602b      	str	r3, [r5, #0]
 800a85e:	d032      	beq.n	800a8c6 <__sflush_r+0x9a>
 800a860:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a862:	89a3      	ldrh	r3, [r4, #12]
 800a864:	075a      	lsls	r2, r3, #29
 800a866:	d505      	bpl.n	800a874 <__sflush_r+0x48>
 800a868:	6863      	ldr	r3, [r4, #4]
 800a86a:	1ac0      	subs	r0, r0, r3
 800a86c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a86e:	b10b      	cbz	r3, 800a874 <__sflush_r+0x48>
 800a870:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a872:	1ac0      	subs	r0, r0, r3
 800a874:	2300      	movs	r3, #0
 800a876:	4602      	mov	r2, r0
 800a878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a87a:	6a21      	ldr	r1, [r4, #32]
 800a87c:	4628      	mov	r0, r5
 800a87e:	47b0      	blx	r6
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	89a3      	ldrh	r3, [r4, #12]
 800a884:	d106      	bne.n	800a894 <__sflush_r+0x68>
 800a886:	6829      	ldr	r1, [r5, #0]
 800a888:	291d      	cmp	r1, #29
 800a88a:	d848      	bhi.n	800a91e <__sflush_r+0xf2>
 800a88c:	4a29      	ldr	r2, [pc, #164]	; (800a934 <__sflush_r+0x108>)
 800a88e:	40ca      	lsrs	r2, r1
 800a890:	07d6      	lsls	r6, r2, #31
 800a892:	d544      	bpl.n	800a91e <__sflush_r+0xf2>
 800a894:	2200      	movs	r2, #0
 800a896:	6062      	str	r2, [r4, #4]
 800a898:	04d9      	lsls	r1, r3, #19
 800a89a:	6922      	ldr	r2, [r4, #16]
 800a89c:	6022      	str	r2, [r4, #0]
 800a89e:	d504      	bpl.n	800a8aa <__sflush_r+0x7e>
 800a8a0:	1c42      	adds	r2, r0, #1
 800a8a2:	d101      	bne.n	800a8a8 <__sflush_r+0x7c>
 800a8a4:	682b      	ldr	r3, [r5, #0]
 800a8a6:	b903      	cbnz	r3, 800a8aa <__sflush_r+0x7e>
 800a8a8:	6560      	str	r0, [r4, #84]	; 0x54
 800a8aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8ac:	602f      	str	r7, [r5, #0]
 800a8ae:	2900      	cmp	r1, #0
 800a8b0:	d0c9      	beq.n	800a846 <__sflush_r+0x1a>
 800a8b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8b6:	4299      	cmp	r1, r3
 800a8b8:	d002      	beq.n	800a8c0 <__sflush_r+0x94>
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	f000 f994 	bl	800abe8 <_free_r>
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	6360      	str	r0, [r4, #52]	; 0x34
 800a8c4:	e7c0      	b.n	800a848 <__sflush_r+0x1c>
 800a8c6:	2301      	movs	r3, #1
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	47b0      	blx	r6
 800a8cc:	1c41      	adds	r1, r0, #1
 800a8ce:	d1c8      	bne.n	800a862 <__sflush_r+0x36>
 800a8d0:	682b      	ldr	r3, [r5, #0]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d0c5      	beq.n	800a862 <__sflush_r+0x36>
 800a8d6:	2b1d      	cmp	r3, #29
 800a8d8:	d001      	beq.n	800a8de <__sflush_r+0xb2>
 800a8da:	2b16      	cmp	r3, #22
 800a8dc:	d101      	bne.n	800a8e2 <__sflush_r+0xb6>
 800a8de:	602f      	str	r7, [r5, #0]
 800a8e0:	e7b1      	b.n	800a846 <__sflush_r+0x1a>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8e8:	81a3      	strh	r3, [r4, #12]
 800a8ea:	e7ad      	b.n	800a848 <__sflush_r+0x1c>
 800a8ec:	690f      	ldr	r7, [r1, #16]
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	d0a9      	beq.n	800a846 <__sflush_r+0x1a>
 800a8f2:	0793      	lsls	r3, r2, #30
 800a8f4:	680e      	ldr	r6, [r1, #0]
 800a8f6:	bf08      	it	eq
 800a8f8:	694b      	ldreq	r3, [r1, #20]
 800a8fa:	600f      	str	r7, [r1, #0]
 800a8fc:	bf18      	it	ne
 800a8fe:	2300      	movne	r3, #0
 800a900:	eba6 0807 	sub.w	r8, r6, r7
 800a904:	608b      	str	r3, [r1, #8]
 800a906:	f1b8 0f00 	cmp.w	r8, #0
 800a90a:	dd9c      	ble.n	800a846 <__sflush_r+0x1a>
 800a90c:	4643      	mov	r3, r8
 800a90e:	463a      	mov	r2, r7
 800a910:	6a21      	ldr	r1, [r4, #32]
 800a912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a914:	4628      	mov	r0, r5
 800a916:	47b0      	blx	r6
 800a918:	2800      	cmp	r0, #0
 800a91a:	dc06      	bgt.n	800a92a <__sflush_r+0xfe>
 800a91c:	89a3      	ldrh	r3, [r4, #12]
 800a91e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a922:	81a3      	strh	r3, [r4, #12]
 800a924:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a928:	e78e      	b.n	800a848 <__sflush_r+0x1c>
 800a92a:	4407      	add	r7, r0
 800a92c:	eba8 0800 	sub.w	r8, r8, r0
 800a930:	e7e9      	b.n	800a906 <__sflush_r+0xda>
 800a932:	bf00      	nop
 800a934:	20400001 	.word	0x20400001

0800a938 <_fflush_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	690b      	ldr	r3, [r1, #16]
 800a93c:	4605      	mov	r5, r0
 800a93e:	460c      	mov	r4, r1
 800a940:	b1db      	cbz	r3, 800a97a <_fflush_r+0x42>
 800a942:	b118      	cbz	r0, 800a94c <_fflush_r+0x14>
 800a944:	6983      	ldr	r3, [r0, #24]
 800a946:	b90b      	cbnz	r3, 800a94c <_fflush_r+0x14>
 800a948:	f000 f860 	bl	800aa0c <__sinit>
 800a94c:	4b0c      	ldr	r3, [pc, #48]	; (800a980 <_fflush_r+0x48>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	d109      	bne.n	800a966 <_fflush_r+0x2e>
 800a952:	686c      	ldr	r4, [r5, #4]
 800a954:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a958:	b17b      	cbz	r3, 800a97a <_fflush_r+0x42>
 800a95a:	4621      	mov	r1, r4
 800a95c:	4628      	mov	r0, r5
 800a95e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a962:	f7ff bf63 	b.w	800a82c <__sflush_r>
 800a966:	4b07      	ldr	r3, [pc, #28]	; (800a984 <_fflush_r+0x4c>)
 800a968:	429c      	cmp	r4, r3
 800a96a:	d101      	bne.n	800a970 <_fflush_r+0x38>
 800a96c:	68ac      	ldr	r4, [r5, #8]
 800a96e:	e7f1      	b.n	800a954 <_fflush_r+0x1c>
 800a970:	4b05      	ldr	r3, [pc, #20]	; (800a988 <_fflush_r+0x50>)
 800a972:	429c      	cmp	r4, r3
 800a974:	bf08      	it	eq
 800a976:	68ec      	ldreq	r4, [r5, #12]
 800a978:	e7ec      	b.n	800a954 <_fflush_r+0x1c>
 800a97a:	2000      	movs	r0, #0
 800a97c:	bd38      	pop	{r3, r4, r5, pc}
 800a97e:	bf00      	nop
 800a980:	0800be50 	.word	0x0800be50
 800a984:	0800be70 	.word	0x0800be70
 800a988:	0800be30 	.word	0x0800be30

0800a98c <std>:
 800a98c:	2300      	movs	r3, #0
 800a98e:	b510      	push	{r4, lr}
 800a990:	4604      	mov	r4, r0
 800a992:	e9c0 3300 	strd	r3, r3, [r0]
 800a996:	6083      	str	r3, [r0, #8]
 800a998:	8181      	strh	r1, [r0, #12]
 800a99a:	6643      	str	r3, [r0, #100]	; 0x64
 800a99c:	81c2      	strh	r2, [r0, #14]
 800a99e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a9a2:	6183      	str	r3, [r0, #24]
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	2208      	movs	r2, #8
 800a9a8:	305c      	adds	r0, #92	; 0x5c
 800a9aa:	f7ff fdfa 	bl	800a5a2 <memset>
 800a9ae:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <std+0x38>)
 800a9b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a9b2:	4b05      	ldr	r3, [pc, #20]	; (800a9c8 <std+0x3c>)
 800a9b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9b6:	4b05      	ldr	r3, [pc, #20]	; (800a9cc <std+0x40>)
 800a9b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9ba:	4b05      	ldr	r3, [pc, #20]	; (800a9d0 <std+0x44>)
 800a9bc:	6224      	str	r4, [r4, #32]
 800a9be:	6323      	str	r3, [r4, #48]	; 0x30
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	bf00      	nop
 800a9c4:	0800b2e9 	.word	0x0800b2e9
 800a9c8:	0800b30b 	.word	0x0800b30b
 800a9cc:	0800b343 	.word	0x0800b343
 800a9d0:	0800b367 	.word	0x0800b367

0800a9d4 <_cleanup_r>:
 800a9d4:	4901      	ldr	r1, [pc, #4]	; (800a9dc <_cleanup_r+0x8>)
 800a9d6:	f000 b885 	b.w	800aae4 <_fwalk_reent>
 800a9da:	bf00      	nop
 800a9dc:	0800a939 	.word	0x0800a939

0800a9e0 <__sfmoreglue>:
 800a9e0:	b570      	push	{r4, r5, r6, lr}
 800a9e2:	1e4a      	subs	r2, r1, #1
 800a9e4:	2568      	movs	r5, #104	; 0x68
 800a9e6:	4355      	muls	r5, r2
 800a9e8:	460e      	mov	r6, r1
 800a9ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9ee:	f000 f949 	bl	800ac84 <_malloc_r>
 800a9f2:	4604      	mov	r4, r0
 800a9f4:	b140      	cbz	r0, 800aa08 <__sfmoreglue+0x28>
 800a9f6:	2100      	movs	r1, #0
 800a9f8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9fc:	300c      	adds	r0, #12
 800a9fe:	60a0      	str	r0, [r4, #8]
 800aa00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aa04:	f7ff fdcd 	bl	800a5a2 <memset>
 800aa08:	4620      	mov	r0, r4
 800aa0a:	bd70      	pop	{r4, r5, r6, pc}

0800aa0c <__sinit>:
 800aa0c:	6983      	ldr	r3, [r0, #24]
 800aa0e:	b510      	push	{r4, lr}
 800aa10:	4604      	mov	r4, r0
 800aa12:	bb33      	cbnz	r3, 800aa62 <__sinit+0x56>
 800aa14:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800aa18:	6503      	str	r3, [r0, #80]	; 0x50
 800aa1a:	4b12      	ldr	r3, [pc, #72]	; (800aa64 <__sinit+0x58>)
 800aa1c:	4a12      	ldr	r2, [pc, #72]	; (800aa68 <__sinit+0x5c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	6282      	str	r2, [r0, #40]	; 0x28
 800aa22:	4298      	cmp	r0, r3
 800aa24:	bf04      	itt	eq
 800aa26:	2301      	moveq	r3, #1
 800aa28:	6183      	streq	r3, [r0, #24]
 800aa2a:	f000 f81f 	bl	800aa6c <__sfp>
 800aa2e:	6060      	str	r0, [r4, #4]
 800aa30:	4620      	mov	r0, r4
 800aa32:	f000 f81b 	bl	800aa6c <__sfp>
 800aa36:	60a0      	str	r0, [r4, #8]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 f817 	bl	800aa6c <__sfp>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	60e0      	str	r0, [r4, #12]
 800aa42:	2104      	movs	r1, #4
 800aa44:	6860      	ldr	r0, [r4, #4]
 800aa46:	f7ff ffa1 	bl	800a98c <std>
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	2109      	movs	r1, #9
 800aa4e:	68a0      	ldr	r0, [r4, #8]
 800aa50:	f7ff ff9c 	bl	800a98c <std>
 800aa54:	2202      	movs	r2, #2
 800aa56:	2112      	movs	r1, #18
 800aa58:	68e0      	ldr	r0, [r4, #12]
 800aa5a:	f7ff ff97 	bl	800a98c <std>
 800aa5e:	2301      	movs	r3, #1
 800aa60:	61a3      	str	r3, [r4, #24]
 800aa62:	bd10      	pop	{r4, pc}
 800aa64:	0800be2c 	.word	0x0800be2c
 800aa68:	0800a9d5 	.word	0x0800a9d5

0800aa6c <__sfp>:
 800aa6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa6e:	4b1b      	ldr	r3, [pc, #108]	; (800aadc <__sfp+0x70>)
 800aa70:	681e      	ldr	r6, [r3, #0]
 800aa72:	69b3      	ldr	r3, [r6, #24]
 800aa74:	4607      	mov	r7, r0
 800aa76:	b913      	cbnz	r3, 800aa7e <__sfp+0x12>
 800aa78:	4630      	mov	r0, r6
 800aa7a:	f7ff ffc7 	bl	800aa0c <__sinit>
 800aa7e:	3648      	adds	r6, #72	; 0x48
 800aa80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	d503      	bpl.n	800aa90 <__sfp+0x24>
 800aa88:	6833      	ldr	r3, [r6, #0]
 800aa8a:	b133      	cbz	r3, 800aa9a <__sfp+0x2e>
 800aa8c:	6836      	ldr	r6, [r6, #0]
 800aa8e:	e7f7      	b.n	800aa80 <__sfp+0x14>
 800aa90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aa94:	b16d      	cbz	r5, 800aab2 <__sfp+0x46>
 800aa96:	3468      	adds	r4, #104	; 0x68
 800aa98:	e7f4      	b.n	800aa84 <__sfp+0x18>
 800aa9a:	2104      	movs	r1, #4
 800aa9c:	4638      	mov	r0, r7
 800aa9e:	f7ff ff9f 	bl	800a9e0 <__sfmoreglue>
 800aaa2:	6030      	str	r0, [r6, #0]
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d1f1      	bne.n	800aa8c <__sfp+0x20>
 800aaa8:	230c      	movs	r3, #12
 800aaaa:	603b      	str	r3, [r7, #0]
 800aaac:	4604      	mov	r4, r0
 800aaae:	4620      	mov	r0, r4
 800aab0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aab2:	4b0b      	ldr	r3, [pc, #44]	; (800aae0 <__sfp+0x74>)
 800aab4:	6665      	str	r5, [r4, #100]	; 0x64
 800aab6:	e9c4 5500 	strd	r5, r5, [r4]
 800aaba:	60a5      	str	r5, [r4, #8]
 800aabc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800aac0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800aac4:	2208      	movs	r2, #8
 800aac6:	4629      	mov	r1, r5
 800aac8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aacc:	f7ff fd69 	bl	800a5a2 <memset>
 800aad0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aad4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aad8:	e7e9      	b.n	800aaae <__sfp+0x42>
 800aada:	bf00      	nop
 800aadc:	0800be2c 	.word	0x0800be2c
 800aae0:	ffff0001 	.word	0xffff0001

0800aae4 <_fwalk_reent>:
 800aae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aae8:	4680      	mov	r8, r0
 800aaea:	4689      	mov	r9, r1
 800aaec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800aaf0:	2600      	movs	r6, #0
 800aaf2:	b914      	cbnz	r4, 800aafa <_fwalk_reent+0x16>
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafa:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800aafe:	3f01      	subs	r7, #1
 800ab00:	d501      	bpl.n	800ab06 <_fwalk_reent+0x22>
 800ab02:	6824      	ldr	r4, [r4, #0]
 800ab04:	e7f5      	b.n	800aaf2 <_fwalk_reent+0xe>
 800ab06:	89ab      	ldrh	r3, [r5, #12]
 800ab08:	2b01      	cmp	r3, #1
 800ab0a:	d907      	bls.n	800ab1c <_fwalk_reent+0x38>
 800ab0c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab10:	3301      	adds	r3, #1
 800ab12:	d003      	beq.n	800ab1c <_fwalk_reent+0x38>
 800ab14:	4629      	mov	r1, r5
 800ab16:	4640      	mov	r0, r8
 800ab18:	47c8      	blx	r9
 800ab1a:	4306      	orrs	r6, r0
 800ab1c:	3568      	adds	r5, #104	; 0x68
 800ab1e:	e7ee      	b.n	800aafe <_fwalk_reent+0x1a>

0800ab20 <__swhatbuf_r>:
 800ab20:	b570      	push	{r4, r5, r6, lr}
 800ab22:	460e      	mov	r6, r1
 800ab24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab28:	2900      	cmp	r1, #0
 800ab2a:	b096      	sub	sp, #88	; 0x58
 800ab2c:	4614      	mov	r4, r2
 800ab2e:	461d      	mov	r5, r3
 800ab30:	da07      	bge.n	800ab42 <__swhatbuf_r+0x22>
 800ab32:	2300      	movs	r3, #0
 800ab34:	602b      	str	r3, [r5, #0]
 800ab36:	89b3      	ldrh	r3, [r6, #12]
 800ab38:	061a      	lsls	r2, r3, #24
 800ab3a:	d410      	bmi.n	800ab5e <__swhatbuf_r+0x3e>
 800ab3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab40:	e00e      	b.n	800ab60 <__swhatbuf_r+0x40>
 800ab42:	466a      	mov	r2, sp
 800ab44:	f000 fc36 	bl	800b3b4 <_fstat_r>
 800ab48:	2800      	cmp	r0, #0
 800ab4a:	dbf2      	blt.n	800ab32 <__swhatbuf_r+0x12>
 800ab4c:	9a01      	ldr	r2, [sp, #4]
 800ab4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab56:	425a      	negs	r2, r3
 800ab58:	415a      	adcs	r2, r3
 800ab5a:	602a      	str	r2, [r5, #0]
 800ab5c:	e7ee      	b.n	800ab3c <__swhatbuf_r+0x1c>
 800ab5e:	2340      	movs	r3, #64	; 0x40
 800ab60:	2000      	movs	r0, #0
 800ab62:	6023      	str	r3, [r4, #0]
 800ab64:	b016      	add	sp, #88	; 0x58
 800ab66:	bd70      	pop	{r4, r5, r6, pc}

0800ab68 <__smakebuf_r>:
 800ab68:	898b      	ldrh	r3, [r1, #12]
 800ab6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab6c:	079d      	lsls	r5, r3, #30
 800ab6e:	4606      	mov	r6, r0
 800ab70:	460c      	mov	r4, r1
 800ab72:	d507      	bpl.n	800ab84 <__smakebuf_r+0x1c>
 800ab74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ab78:	6023      	str	r3, [r4, #0]
 800ab7a:	6123      	str	r3, [r4, #16]
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	6163      	str	r3, [r4, #20]
 800ab80:	b002      	add	sp, #8
 800ab82:	bd70      	pop	{r4, r5, r6, pc}
 800ab84:	ab01      	add	r3, sp, #4
 800ab86:	466a      	mov	r2, sp
 800ab88:	f7ff ffca 	bl	800ab20 <__swhatbuf_r>
 800ab8c:	9900      	ldr	r1, [sp, #0]
 800ab8e:	4605      	mov	r5, r0
 800ab90:	4630      	mov	r0, r6
 800ab92:	f000 f877 	bl	800ac84 <_malloc_r>
 800ab96:	b948      	cbnz	r0, 800abac <__smakebuf_r+0x44>
 800ab98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab9c:	059a      	lsls	r2, r3, #22
 800ab9e:	d4ef      	bmi.n	800ab80 <__smakebuf_r+0x18>
 800aba0:	f023 0303 	bic.w	r3, r3, #3
 800aba4:	f043 0302 	orr.w	r3, r3, #2
 800aba8:	81a3      	strh	r3, [r4, #12]
 800abaa:	e7e3      	b.n	800ab74 <__smakebuf_r+0xc>
 800abac:	4b0d      	ldr	r3, [pc, #52]	; (800abe4 <__smakebuf_r+0x7c>)
 800abae:	62b3      	str	r3, [r6, #40]	; 0x28
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	6020      	str	r0, [r4, #0]
 800abb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	9b00      	ldr	r3, [sp, #0]
 800abbc:	6163      	str	r3, [r4, #20]
 800abbe:	9b01      	ldr	r3, [sp, #4]
 800abc0:	6120      	str	r0, [r4, #16]
 800abc2:	b15b      	cbz	r3, 800abdc <__smakebuf_r+0x74>
 800abc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abc8:	4630      	mov	r0, r6
 800abca:	f000 fc05 	bl	800b3d8 <_isatty_r>
 800abce:	b128      	cbz	r0, 800abdc <__smakebuf_r+0x74>
 800abd0:	89a3      	ldrh	r3, [r4, #12]
 800abd2:	f023 0303 	bic.w	r3, r3, #3
 800abd6:	f043 0301 	orr.w	r3, r3, #1
 800abda:	81a3      	strh	r3, [r4, #12]
 800abdc:	89a3      	ldrh	r3, [r4, #12]
 800abde:	431d      	orrs	r5, r3
 800abe0:	81a5      	strh	r5, [r4, #12]
 800abe2:	e7cd      	b.n	800ab80 <__smakebuf_r+0x18>
 800abe4:	0800a9d5 	.word	0x0800a9d5

0800abe8 <_free_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4605      	mov	r5, r0
 800abec:	2900      	cmp	r1, #0
 800abee:	d045      	beq.n	800ac7c <_free_r+0x94>
 800abf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abf4:	1f0c      	subs	r4, r1, #4
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	bfb8      	it	lt
 800abfa:	18e4      	addlt	r4, r4, r3
 800abfc:	f000 fc0e 	bl	800b41c <__malloc_lock>
 800ac00:	4a1f      	ldr	r2, [pc, #124]	; (800ac80 <_free_r+0x98>)
 800ac02:	6813      	ldr	r3, [r2, #0]
 800ac04:	4610      	mov	r0, r2
 800ac06:	b933      	cbnz	r3, 800ac16 <_free_r+0x2e>
 800ac08:	6063      	str	r3, [r4, #4]
 800ac0a:	6014      	str	r4, [r2, #0]
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac12:	f000 bc04 	b.w	800b41e <__malloc_unlock>
 800ac16:	42a3      	cmp	r3, r4
 800ac18:	d90c      	bls.n	800ac34 <_free_r+0x4c>
 800ac1a:	6821      	ldr	r1, [r4, #0]
 800ac1c:	1862      	adds	r2, r4, r1
 800ac1e:	4293      	cmp	r3, r2
 800ac20:	bf04      	itt	eq
 800ac22:	681a      	ldreq	r2, [r3, #0]
 800ac24:	685b      	ldreq	r3, [r3, #4]
 800ac26:	6063      	str	r3, [r4, #4]
 800ac28:	bf04      	itt	eq
 800ac2a:	1852      	addeq	r2, r2, r1
 800ac2c:	6022      	streq	r2, [r4, #0]
 800ac2e:	6004      	str	r4, [r0, #0]
 800ac30:	e7ec      	b.n	800ac0c <_free_r+0x24>
 800ac32:	4613      	mov	r3, r2
 800ac34:	685a      	ldr	r2, [r3, #4]
 800ac36:	b10a      	cbz	r2, 800ac3c <_free_r+0x54>
 800ac38:	42a2      	cmp	r2, r4
 800ac3a:	d9fa      	bls.n	800ac32 <_free_r+0x4a>
 800ac3c:	6819      	ldr	r1, [r3, #0]
 800ac3e:	1858      	adds	r0, r3, r1
 800ac40:	42a0      	cmp	r0, r4
 800ac42:	d10b      	bne.n	800ac5c <_free_r+0x74>
 800ac44:	6820      	ldr	r0, [r4, #0]
 800ac46:	4401      	add	r1, r0
 800ac48:	1858      	adds	r0, r3, r1
 800ac4a:	4282      	cmp	r2, r0
 800ac4c:	6019      	str	r1, [r3, #0]
 800ac4e:	d1dd      	bne.n	800ac0c <_free_r+0x24>
 800ac50:	6810      	ldr	r0, [r2, #0]
 800ac52:	6852      	ldr	r2, [r2, #4]
 800ac54:	605a      	str	r2, [r3, #4]
 800ac56:	4401      	add	r1, r0
 800ac58:	6019      	str	r1, [r3, #0]
 800ac5a:	e7d7      	b.n	800ac0c <_free_r+0x24>
 800ac5c:	d902      	bls.n	800ac64 <_free_r+0x7c>
 800ac5e:	230c      	movs	r3, #12
 800ac60:	602b      	str	r3, [r5, #0]
 800ac62:	e7d3      	b.n	800ac0c <_free_r+0x24>
 800ac64:	6820      	ldr	r0, [r4, #0]
 800ac66:	1821      	adds	r1, r4, r0
 800ac68:	428a      	cmp	r2, r1
 800ac6a:	bf04      	itt	eq
 800ac6c:	6811      	ldreq	r1, [r2, #0]
 800ac6e:	6852      	ldreq	r2, [r2, #4]
 800ac70:	6062      	str	r2, [r4, #4]
 800ac72:	bf04      	itt	eq
 800ac74:	1809      	addeq	r1, r1, r0
 800ac76:	6021      	streq	r1, [r4, #0]
 800ac78:	605c      	str	r4, [r3, #4]
 800ac7a:	e7c7      	b.n	800ac0c <_free_r+0x24>
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	bf00      	nop
 800ac80:	20001380 	.word	0x20001380

0800ac84 <_malloc_r>:
 800ac84:	b570      	push	{r4, r5, r6, lr}
 800ac86:	1ccd      	adds	r5, r1, #3
 800ac88:	f025 0503 	bic.w	r5, r5, #3
 800ac8c:	3508      	adds	r5, #8
 800ac8e:	2d0c      	cmp	r5, #12
 800ac90:	bf38      	it	cc
 800ac92:	250c      	movcc	r5, #12
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	4606      	mov	r6, r0
 800ac98:	db01      	blt.n	800ac9e <_malloc_r+0x1a>
 800ac9a:	42a9      	cmp	r1, r5
 800ac9c:	d903      	bls.n	800aca6 <_malloc_r+0x22>
 800ac9e:	230c      	movs	r3, #12
 800aca0:	6033      	str	r3, [r6, #0]
 800aca2:	2000      	movs	r0, #0
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
 800aca6:	f000 fbb9 	bl	800b41c <__malloc_lock>
 800acaa:	4a21      	ldr	r2, [pc, #132]	; (800ad30 <_malloc_r+0xac>)
 800acac:	6814      	ldr	r4, [r2, #0]
 800acae:	4621      	mov	r1, r4
 800acb0:	b991      	cbnz	r1, 800acd8 <_malloc_r+0x54>
 800acb2:	4c20      	ldr	r4, [pc, #128]	; (800ad34 <_malloc_r+0xb0>)
 800acb4:	6823      	ldr	r3, [r4, #0]
 800acb6:	b91b      	cbnz	r3, 800acc0 <_malloc_r+0x3c>
 800acb8:	4630      	mov	r0, r6
 800acba:	f000 fb05 	bl	800b2c8 <_sbrk_r>
 800acbe:	6020      	str	r0, [r4, #0]
 800acc0:	4629      	mov	r1, r5
 800acc2:	4630      	mov	r0, r6
 800acc4:	f000 fb00 	bl	800b2c8 <_sbrk_r>
 800acc8:	1c43      	adds	r3, r0, #1
 800acca:	d124      	bne.n	800ad16 <_malloc_r+0x92>
 800accc:	230c      	movs	r3, #12
 800acce:	6033      	str	r3, [r6, #0]
 800acd0:	4630      	mov	r0, r6
 800acd2:	f000 fba4 	bl	800b41e <__malloc_unlock>
 800acd6:	e7e4      	b.n	800aca2 <_malloc_r+0x1e>
 800acd8:	680b      	ldr	r3, [r1, #0]
 800acda:	1b5b      	subs	r3, r3, r5
 800acdc:	d418      	bmi.n	800ad10 <_malloc_r+0x8c>
 800acde:	2b0b      	cmp	r3, #11
 800ace0:	d90f      	bls.n	800ad02 <_malloc_r+0x7e>
 800ace2:	600b      	str	r3, [r1, #0]
 800ace4:	50cd      	str	r5, [r1, r3]
 800ace6:	18cc      	adds	r4, r1, r3
 800ace8:	4630      	mov	r0, r6
 800acea:	f000 fb98 	bl	800b41e <__malloc_unlock>
 800acee:	f104 000b 	add.w	r0, r4, #11
 800acf2:	1d23      	adds	r3, r4, #4
 800acf4:	f020 0007 	bic.w	r0, r0, #7
 800acf8:	1ac3      	subs	r3, r0, r3
 800acfa:	d0d3      	beq.n	800aca4 <_malloc_r+0x20>
 800acfc:	425a      	negs	r2, r3
 800acfe:	50e2      	str	r2, [r4, r3]
 800ad00:	e7d0      	b.n	800aca4 <_malloc_r+0x20>
 800ad02:	428c      	cmp	r4, r1
 800ad04:	684b      	ldr	r3, [r1, #4]
 800ad06:	bf16      	itet	ne
 800ad08:	6063      	strne	r3, [r4, #4]
 800ad0a:	6013      	streq	r3, [r2, #0]
 800ad0c:	460c      	movne	r4, r1
 800ad0e:	e7eb      	b.n	800ace8 <_malloc_r+0x64>
 800ad10:	460c      	mov	r4, r1
 800ad12:	6849      	ldr	r1, [r1, #4]
 800ad14:	e7cc      	b.n	800acb0 <_malloc_r+0x2c>
 800ad16:	1cc4      	adds	r4, r0, #3
 800ad18:	f024 0403 	bic.w	r4, r4, #3
 800ad1c:	42a0      	cmp	r0, r4
 800ad1e:	d005      	beq.n	800ad2c <_malloc_r+0xa8>
 800ad20:	1a21      	subs	r1, r4, r0
 800ad22:	4630      	mov	r0, r6
 800ad24:	f000 fad0 	bl	800b2c8 <_sbrk_r>
 800ad28:	3001      	adds	r0, #1
 800ad2a:	d0cf      	beq.n	800accc <_malloc_r+0x48>
 800ad2c:	6025      	str	r5, [r4, #0]
 800ad2e:	e7db      	b.n	800ace8 <_malloc_r+0x64>
 800ad30:	20001380 	.word	0x20001380
 800ad34:	20001384 	.word	0x20001384

0800ad38 <__sfputc_r>:
 800ad38:	6893      	ldr	r3, [r2, #8]
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	b410      	push	{r4}
 800ad40:	6093      	str	r3, [r2, #8]
 800ad42:	da08      	bge.n	800ad56 <__sfputc_r+0x1e>
 800ad44:	6994      	ldr	r4, [r2, #24]
 800ad46:	42a3      	cmp	r3, r4
 800ad48:	db01      	blt.n	800ad4e <__sfputc_r+0x16>
 800ad4a:	290a      	cmp	r1, #10
 800ad4c:	d103      	bne.n	800ad56 <__sfputc_r+0x1e>
 800ad4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad52:	f7ff bcab 	b.w	800a6ac <__swbuf_r>
 800ad56:	6813      	ldr	r3, [r2, #0]
 800ad58:	1c58      	adds	r0, r3, #1
 800ad5a:	6010      	str	r0, [r2, #0]
 800ad5c:	7019      	strb	r1, [r3, #0]
 800ad5e:	4608      	mov	r0, r1
 800ad60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad64:	4770      	bx	lr

0800ad66 <__sfputs_r>:
 800ad66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad68:	4606      	mov	r6, r0
 800ad6a:	460f      	mov	r7, r1
 800ad6c:	4614      	mov	r4, r2
 800ad6e:	18d5      	adds	r5, r2, r3
 800ad70:	42ac      	cmp	r4, r5
 800ad72:	d101      	bne.n	800ad78 <__sfputs_r+0x12>
 800ad74:	2000      	movs	r0, #0
 800ad76:	e007      	b.n	800ad88 <__sfputs_r+0x22>
 800ad78:	463a      	mov	r2, r7
 800ad7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad7e:	4630      	mov	r0, r6
 800ad80:	f7ff ffda 	bl	800ad38 <__sfputc_r>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d1f3      	bne.n	800ad70 <__sfputs_r+0xa>
 800ad88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ad8c <_vfiprintf_r>:
 800ad8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad90:	460c      	mov	r4, r1
 800ad92:	b09d      	sub	sp, #116	; 0x74
 800ad94:	4617      	mov	r7, r2
 800ad96:	461d      	mov	r5, r3
 800ad98:	4606      	mov	r6, r0
 800ad9a:	b118      	cbz	r0, 800ada4 <_vfiprintf_r+0x18>
 800ad9c:	6983      	ldr	r3, [r0, #24]
 800ad9e:	b90b      	cbnz	r3, 800ada4 <_vfiprintf_r+0x18>
 800ada0:	f7ff fe34 	bl	800aa0c <__sinit>
 800ada4:	4b7c      	ldr	r3, [pc, #496]	; (800af98 <_vfiprintf_r+0x20c>)
 800ada6:	429c      	cmp	r4, r3
 800ada8:	d158      	bne.n	800ae5c <_vfiprintf_r+0xd0>
 800adaa:	6874      	ldr	r4, [r6, #4]
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	0718      	lsls	r0, r3, #28
 800adb0:	d55e      	bpl.n	800ae70 <_vfiprintf_r+0xe4>
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d05b      	beq.n	800ae70 <_vfiprintf_r+0xe4>
 800adb8:	2300      	movs	r3, #0
 800adba:	9309      	str	r3, [sp, #36]	; 0x24
 800adbc:	2320      	movs	r3, #32
 800adbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc2:	2330      	movs	r3, #48	; 0x30
 800adc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800adc8:	9503      	str	r5, [sp, #12]
 800adca:	f04f 0b01 	mov.w	fp, #1
 800adce:	46b8      	mov	r8, r7
 800add0:	4645      	mov	r5, r8
 800add2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800add6:	b10b      	cbz	r3, 800addc <_vfiprintf_r+0x50>
 800add8:	2b25      	cmp	r3, #37	; 0x25
 800adda:	d154      	bne.n	800ae86 <_vfiprintf_r+0xfa>
 800addc:	ebb8 0a07 	subs.w	sl, r8, r7
 800ade0:	d00b      	beq.n	800adfa <_vfiprintf_r+0x6e>
 800ade2:	4653      	mov	r3, sl
 800ade4:	463a      	mov	r2, r7
 800ade6:	4621      	mov	r1, r4
 800ade8:	4630      	mov	r0, r6
 800adea:	f7ff ffbc 	bl	800ad66 <__sfputs_r>
 800adee:	3001      	adds	r0, #1
 800adf0:	f000 80c2 	beq.w	800af78 <_vfiprintf_r+0x1ec>
 800adf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf6:	4453      	add	r3, sl
 800adf8:	9309      	str	r3, [sp, #36]	; 0x24
 800adfa:	f898 3000 	ldrb.w	r3, [r8]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 80ba 	beq.w	800af78 <_vfiprintf_r+0x1ec>
 800ae04:	2300      	movs	r3, #0
 800ae06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ae0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae0e:	9304      	str	r3, [sp, #16]
 800ae10:	9307      	str	r3, [sp, #28]
 800ae12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae16:	931a      	str	r3, [sp, #104]	; 0x68
 800ae18:	46a8      	mov	r8, r5
 800ae1a:	2205      	movs	r2, #5
 800ae1c:	f818 1b01 	ldrb.w	r1, [r8], #1
 800ae20:	485e      	ldr	r0, [pc, #376]	; (800af9c <_vfiprintf_r+0x210>)
 800ae22:	f7f5 f9b5 	bl	8000190 <memchr>
 800ae26:	9b04      	ldr	r3, [sp, #16]
 800ae28:	bb78      	cbnz	r0, 800ae8a <_vfiprintf_r+0xfe>
 800ae2a:	06d9      	lsls	r1, r3, #27
 800ae2c:	bf44      	itt	mi
 800ae2e:	2220      	movmi	r2, #32
 800ae30:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae34:	071a      	lsls	r2, r3, #28
 800ae36:	bf44      	itt	mi
 800ae38:	222b      	movmi	r2, #43	; 0x2b
 800ae3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ae3e:	782a      	ldrb	r2, [r5, #0]
 800ae40:	2a2a      	cmp	r2, #42	; 0x2a
 800ae42:	d02a      	beq.n	800ae9a <_vfiprintf_r+0x10e>
 800ae44:	9a07      	ldr	r2, [sp, #28]
 800ae46:	46a8      	mov	r8, r5
 800ae48:	2000      	movs	r0, #0
 800ae4a:	250a      	movs	r5, #10
 800ae4c:	4641      	mov	r1, r8
 800ae4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae52:	3b30      	subs	r3, #48	; 0x30
 800ae54:	2b09      	cmp	r3, #9
 800ae56:	d969      	bls.n	800af2c <_vfiprintf_r+0x1a0>
 800ae58:	b360      	cbz	r0, 800aeb4 <_vfiprintf_r+0x128>
 800ae5a:	e024      	b.n	800aea6 <_vfiprintf_r+0x11a>
 800ae5c:	4b50      	ldr	r3, [pc, #320]	; (800afa0 <_vfiprintf_r+0x214>)
 800ae5e:	429c      	cmp	r4, r3
 800ae60:	d101      	bne.n	800ae66 <_vfiprintf_r+0xda>
 800ae62:	68b4      	ldr	r4, [r6, #8]
 800ae64:	e7a2      	b.n	800adac <_vfiprintf_r+0x20>
 800ae66:	4b4f      	ldr	r3, [pc, #316]	; (800afa4 <_vfiprintf_r+0x218>)
 800ae68:	429c      	cmp	r4, r3
 800ae6a:	bf08      	it	eq
 800ae6c:	68f4      	ldreq	r4, [r6, #12]
 800ae6e:	e79d      	b.n	800adac <_vfiprintf_r+0x20>
 800ae70:	4621      	mov	r1, r4
 800ae72:	4630      	mov	r0, r6
 800ae74:	f7ff fc6c 	bl	800a750 <__swsetup_r>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	d09d      	beq.n	800adb8 <_vfiprintf_r+0x2c>
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae80:	b01d      	add	sp, #116	; 0x74
 800ae82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae86:	46a8      	mov	r8, r5
 800ae88:	e7a2      	b.n	800add0 <_vfiprintf_r+0x44>
 800ae8a:	4a44      	ldr	r2, [pc, #272]	; (800af9c <_vfiprintf_r+0x210>)
 800ae8c:	1a80      	subs	r0, r0, r2
 800ae8e:	fa0b f000 	lsl.w	r0, fp, r0
 800ae92:	4318      	orrs	r0, r3
 800ae94:	9004      	str	r0, [sp, #16]
 800ae96:	4645      	mov	r5, r8
 800ae98:	e7be      	b.n	800ae18 <_vfiprintf_r+0x8c>
 800ae9a:	9a03      	ldr	r2, [sp, #12]
 800ae9c:	1d11      	adds	r1, r2, #4
 800ae9e:	6812      	ldr	r2, [r2, #0]
 800aea0:	9103      	str	r1, [sp, #12]
 800aea2:	2a00      	cmp	r2, #0
 800aea4:	db01      	blt.n	800aeaa <_vfiprintf_r+0x11e>
 800aea6:	9207      	str	r2, [sp, #28]
 800aea8:	e004      	b.n	800aeb4 <_vfiprintf_r+0x128>
 800aeaa:	4252      	negs	r2, r2
 800aeac:	f043 0302 	orr.w	r3, r3, #2
 800aeb0:	9207      	str	r2, [sp, #28]
 800aeb2:	9304      	str	r3, [sp, #16]
 800aeb4:	f898 3000 	ldrb.w	r3, [r8]
 800aeb8:	2b2e      	cmp	r3, #46	; 0x2e
 800aeba:	d10e      	bne.n	800aeda <_vfiprintf_r+0x14e>
 800aebc:	f898 3001 	ldrb.w	r3, [r8, #1]
 800aec0:	2b2a      	cmp	r3, #42	; 0x2a
 800aec2:	d138      	bne.n	800af36 <_vfiprintf_r+0x1aa>
 800aec4:	9b03      	ldr	r3, [sp, #12]
 800aec6:	1d1a      	adds	r2, r3, #4
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	9203      	str	r2, [sp, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	bfb8      	it	lt
 800aed0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aed4:	f108 0802 	add.w	r8, r8, #2
 800aed8:	9305      	str	r3, [sp, #20]
 800aeda:	4d33      	ldr	r5, [pc, #204]	; (800afa8 <_vfiprintf_r+0x21c>)
 800aedc:	f898 1000 	ldrb.w	r1, [r8]
 800aee0:	2203      	movs	r2, #3
 800aee2:	4628      	mov	r0, r5
 800aee4:	f7f5 f954 	bl	8000190 <memchr>
 800aee8:	b140      	cbz	r0, 800aefc <_vfiprintf_r+0x170>
 800aeea:	2340      	movs	r3, #64	; 0x40
 800aeec:	1b40      	subs	r0, r0, r5
 800aeee:	fa03 f000 	lsl.w	r0, r3, r0
 800aef2:	9b04      	ldr	r3, [sp, #16]
 800aef4:	4303      	orrs	r3, r0
 800aef6:	f108 0801 	add.w	r8, r8, #1
 800aefa:	9304      	str	r3, [sp, #16]
 800aefc:	f898 1000 	ldrb.w	r1, [r8]
 800af00:	482a      	ldr	r0, [pc, #168]	; (800afac <_vfiprintf_r+0x220>)
 800af02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af06:	2206      	movs	r2, #6
 800af08:	f108 0701 	add.w	r7, r8, #1
 800af0c:	f7f5 f940 	bl	8000190 <memchr>
 800af10:	2800      	cmp	r0, #0
 800af12:	d037      	beq.n	800af84 <_vfiprintf_r+0x1f8>
 800af14:	4b26      	ldr	r3, [pc, #152]	; (800afb0 <_vfiprintf_r+0x224>)
 800af16:	bb1b      	cbnz	r3, 800af60 <_vfiprintf_r+0x1d4>
 800af18:	9b03      	ldr	r3, [sp, #12]
 800af1a:	3307      	adds	r3, #7
 800af1c:	f023 0307 	bic.w	r3, r3, #7
 800af20:	3308      	adds	r3, #8
 800af22:	9303      	str	r3, [sp, #12]
 800af24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af26:	444b      	add	r3, r9
 800af28:	9309      	str	r3, [sp, #36]	; 0x24
 800af2a:	e750      	b.n	800adce <_vfiprintf_r+0x42>
 800af2c:	fb05 3202 	mla	r2, r5, r2, r3
 800af30:	2001      	movs	r0, #1
 800af32:	4688      	mov	r8, r1
 800af34:	e78a      	b.n	800ae4c <_vfiprintf_r+0xc0>
 800af36:	2300      	movs	r3, #0
 800af38:	f108 0801 	add.w	r8, r8, #1
 800af3c:	9305      	str	r3, [sp, #20]
 800af3e:	4619      	mov	r1, r3
 800af40:	250a      	movs	r5, #10
 800af42:	4640      	mov	r0, r8
 800af44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af48:	3a30      	subs	r2, #48	; 0x30
 800af4a:	2a09      	cmp	r2, #9
 800af4c:	d903      	bls.n	800af56 <_vfiprintf_r+0x1ca>
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0c3      	beq.n	800aeda <_vfiprintf_r+0x14e>
 800af52:	9105      	str	r1, [sp, #20]
 800af54:	e7c1      	b.n	800aeda <_vfiprintf_r+0x14e>
 800af56:	fb05 2101 	mla	r1, r5, r1, r2
 800af5a:	2301      	movs	r3, #1
 800af5c:	4680      	mov	r8, r0
 800af5e:	e7f0      	b.n	800af42 <_vfiprintf_r+0x1b6>
 800af60:	ab03      	add	r3, sp, #12
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	4622      	mov	r2, r4
 800af66:	4b13      	ldr	r3, [pc, #76]	; (800afb4 <_vfiprintf_r+0x228>)
 800af68:	a904      	add	r1, sp, #16
 800af6a:	4630      	mov	r0, r6
 800af6c:	f3af 8000 	nop.w
 800af70:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800af74:	4681      	mov	r9, r0
 800af76:	d1d5      	bne.n	800af24 <_vfiprintf_r+0x198>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	065b      	lsls	r3, r3, #25
 800af7c:	f53f af7e 	bmi.w	800ae7c <_vfiprintf_r+0xf0>
 800af80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af82:	e77d      	b.n	800ae80 <_vfiprintf_r+0xf4>
 800af84:	ab03      	add	r3, sp, #12
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	4622      	mov	r2, r4
 800af8a:	4b0a      	ldr	r3, [pc, #40]	; (800afb4 <_vfiprintf_r+0x228>)
 800af8c:	a904      	add	r1, sp, #16
 800af8e:	4630      	mov	r0, r6
 800af90:	f000 f888 	bl	800b0a4 <_printf_i>
 800af94:	e7ec      	b.n	800af70 <_vfiprintf_r+0x1e4>
 800af96:	bf00      	nop
 800af98:	0800be50 	.word	0x0800be50
 800af9c:	0800be90 	.word	0x0800be90
 800afa0:	0800be70 	.word	0x0800be70
 800afa4:	0800be30 	.word	0x0800be30
 800afa8:	0800be96 	.word	0x0800be96
 800afac:	0800be9a 	.word	0x0800be9a
 800afb0:	00000000 	.word	0x00000000
 800afb4:	0800ad67 	.word	0x0800ad67

0800afb8 <_printf_common>:
 800afb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afbc:	4691      	mov	r9, r2
 800afbe:	461f      	mov	r7, r3
 800afc0:	688a      	ldr	r2, [r1, #8]
 800afc2:	690b      	ldr	r3, [r1, #16]
 800afc4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800afc8:	4293      	cmp	r3, r2
 800afca:	bfb8      	it	lt
 800afcc:	4613      	movlt	r3, r2
 800afce:	f8c9 3000 	str.w	r3, [r9]
 800afd2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800afd6:	4606      	mov	r6, r0
 800afd8:	460c      	mov	r4, r1
 800afda:	b112      	cbz	r2, 800afe2 <_printf_common+0x2a>
 800afdc:	3301      	adds	r3, #1
 800afde:	f8c9 3000 	str.w	r3, [r9]
 800afe2:	6823      	ldr	r3, [r4, #0]
 800afe4:	0699      	lsls	r1, r3, #26
 800afe6:	bf42      	ittt	mi
 800afe8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800afec:	3302      	addmi	r3, #2
 800afee:	f8c9 3000 	strmi.w	r3, [r9]
 800aff2:	6825      	ldr	r5, [r4, #0]
 800aff4:	f015 0506 	ands.w	r5, r5, #6
 800aff8:	d107      	bne.n	800b00a <_printf_common+0x52>
 800affa:	f104 0a19 	add.w	sl, r4, #25
 800affe:	68e3      	ldr	r3, [r4, #12]
 800b000:	f8d9 2000 	ldr.w	r2, [r9]
 800b004:	1a9b      	subs	r3, r3, r2
 800b006:	42ab      	cmp	r3, r5
 800b008:	dc28      	bgt.n	800b05c <_printf_common+0xa4>
 800b00a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b00e:	6822      	ldr	r2, [r4, #0]
 800b010:	3300      	adds	r3, #0
 800b012:	bf18      	it	ne
 800b014:	2301      	movne	r3, #1
 800b016:	0692      	lsls	r2, r2, #26
 800b018:	d42d      	bmi.n	800b076 <_printf_common+0xbe>
 800b01a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b01e:	4639      	mov	r1, r7
 800b020:	4630      	mov	r0, r6
 800b022:	47c0      	blx	r8
 800b024:	3001      	adds	r0, #1
 800b026:	d020      	beq.n	800b06a <_printf_common+0xb2>
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	68e5      	ldr	r5, [r4, #12]
 800b02c:	f8d9 2000 	ldr.w	r2, [r9]
 800b030:	f003 0306 	and.w	r3, r3, #6
 800b034:	2b04      	cmp	r3, #4
 800b036:	bf08      	it	eq
 800b038:	1aad      	subeq	r5, r5, r2
 800b03a:	68a3      	ldr	r3, [r4, #8]
 800b03c:	6922      	ldr	r2, [r4, #16]
 800b03e:	bf0c      	ite	eq
 800b040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b044:	2500      	movne	r5, #0
 800b046:	4293      	cmp	r3, r2
 800b048:	bfc4      	itt	gt
 800b04a:	1a9b      	subgt	r3, r3, r2
 800b04c:	18ed      	addgt	r5, r5, r3
 800b04e:	f04f 0900 	mov.w	r9, #0
 800b052:	341a      	adds	r4, #26
 800b054:	454d      	cmp	r5, r9
 800b056:	d11a      	bne.n	800b08e <_printf_common+0xd6>
 800b058:	2000      	movs	r0, #0
 800b05a:	e008      	b.n	800b06e <_printf_common+0xb6>
 800b05c:	2301      	movs	r3, #1
 800b05e:	4652      	mov	r2, sl
 800b060:	4639      	mov	r1, r7
 800b062:	4630      	mov	r0, r6
 800b064:	47c0      	blx	r8
 800b066:	3001      	adds	r0, #1
 800b068:	d103      	bne.n	800b072 <_printf_common+0xba>
 800b06a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	3501      	adds	r5, #1
 800b074:	e7c3      	b.n	800affe <_printf_common+0x46>
 800b076:	18e1      	adds	r1, r4, r3
 800b078:	1c5a      	adds	r2, r3, #1
 800b07a:	2030      	movs	r0, #48	; 0x30
 800b07c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b080:	4422      	add	r2, r4
 800b082:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b086:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b08a:	3302      	adds	r3, #2
 800b08c:	e7c5      	b.n	800b01a <_printf_common+0x62>
 800b08e:	2301      	movs	r3, #1
 800b090:	4622      	mov	r2, r4
 800b092:	4639      	mov	r1, r7
 800b094:	4630      	mov	r0, r6
 800b096:	47c0      	blx	r8
 800b098:	3001      	adds	r0, #1
 800b09a:	d0e6      	beq.n	800b06a <_printf_common+0xb2>
 800b09c:	f109 0901 	add.w	r9, r9, #1
 800b0a0:	e7d8      	b.n	800b054 <_printf_common+0x9c>
	...

0800b0a4 <_printf_i>:
 800b0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0a8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	7e09      	ldrb	r1, [r1, #24]
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	296e      	cmp	r1, #110	; 0x6e
 800b0b4:	4617      	mov	r7, r2
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	4698      	mov	r8, r3
 800b0ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b0bc:	f000 80b3 	beq.w	800b226 <_printf_i+0x182>
 800b0c0:	d822      	bhi.n	800b108 <_printf_i+0x64>
 800b0c2:	2963      	cmp	r1, #99	; 0x63
 800b0c4:	d036      	beq.n	800b134 <_printf_i+0x90>
 800b0c6:	d80a      	bhi.n	800b0de <_printf_i+0x3a>
 800b0c8:	2900      	cmp	r1, #0
 800b0ca:	f000 80b9 	beq.w	800b240 <_printf_i+0x19c>
 800b0ce:	2958      	cmp	r1, #88	; 0x58
 800b0d0:	f000 8083 	beq.w	800b1da <_printf_i+0x136>
 800b0d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b0d8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b0dc:	e032      	b.n	800b144 <_printf_i+0xa0>
 800b0de:	2964      	cmp	r1, #100	; 0x64
 800b0e0:	d001      	beq.n	800b0e6 <_printf_i+0x42>
 800b0e2:	2969      	cmp	r1, #105	; 0x69
 800b0e4:	d1f6      	bne.n	800b0d4 <_printf_i+0x30>
 800b0e6:	6820      	ldr	r0, [r4, #0]
 800b0e8:	6813      	ldr	r3, [r2, #0]
 800b0ea:	0605      	lsls	r5, r0, #24
 800b0ec:	f103 0104 	add.w	r1, r3, #4
 800b0f0:	d52a      	bpl.n	800b148 <_printf_i+0xa4>
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	6011      	str	r1, [r2, #0]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da03      	bge.n	800b102 <_printf_i+0x5e>
 800b0fa:	222d      	movs	r2, #45	; 0x2d
 800b0fc:	425b      	negs	r3, r3
 800b0fe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b102:	486f      	ldr	r0, [pc, #444]	; (800b2c0 <_printf_i+0x21c>)
 800b104:	220a      	movs	r2, #10
 800b106:	e039      	b.n	800b17c <_printf_i+0xd8>
 800b108:	2973      	cmp	r1, #115	; 0x73
 800b10a:	f000 809d 	beq.w	800b248 <_printf_i+0x1a4>
 800b10e:	d808      	bhi.n	800b122 <_printf_i+0x7e>
 800b110:	296f      	cmp	r1, #111	; 0x6f
 800b112:	d020      	beq.n	800b156 <_printf_i+0xb2>
 800b114:	2970      	cmp	r1, #112	; 0x70
 800b116:	d1dd      	bne.n	800b0d4 <_printf_i+0x30>
 800b118:	6823      	ldr	r3, [r4, #0]
 800b11a:	f043 0320 	orr.w	r3, r3, #32
 800b11e:	6023      	str	r3, [r4, #0]
 800b120:	e003      	b.n	800b12a <_printf_i+0x86>
 800b122:	2975      	cmp	r1, #117	; 0x75
 800b124:	d017      	beq.n	800b156 <_printf_i+0xb2>
 800b126:	2978      	cmp	r1, #120	; 0x78
 800b128:	d1d4      	bne.n	800b0d4 <_printf_i+0x30>
 800b12a:	2378      	movs	r3, #120	; 0x78
 800b12c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b130:	4864      	ldr	r0, [pc, #400]	; (800b2c4 <_printf_i+0x220>)
 800b132:	e055      	b.n	800b1e0 <_printf_i+0x13c>
 800b134:	6813      	ldr	r3, [r2, #0]
 800b136:	1d19      	adds	r1, r3, #4
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	6011      	str	r1, [r2, #0]
 800b13c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b140:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b144:	2301      	movs	r3, #1
 800b146:	e08c      	b.n	800b262 <_printf_i+0x1be>
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	6011      	str	r1, [r2, #0]
 800b14c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b150:	bf18      	it	ne
 800b152:	b21b      	sxthne	r3, r3
 800b154:	e7cf      	b.n	800b0f6 <_printf_i+0x52>
 800b156:	6813      	ldr	r3, [r2, #0]
 800b158:	6825      	ldr	r5, [r4, #0]
 800b15a:	1d18      	adds	r0, r3, #4
 800b15c:	6010      	str	r0, [r2, #0]
 800b15e:	0628      	lsls	r0, r5, #24
 800b160:	d501      	bpl.n	800b166 <_printf_i+0xc2>
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	e002      	b.n	800b16c <_printf_i+0xc8>
 800b166:	0668      	lsls	r0, r5, #25
 800b168:	d5fb      	bpl.n	800b162 <_printf_i+0xbe>
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	4854      	ldr	r0, [pc, #336]	; (800b2c0 <_printf_i+0x21c>)
 800b16e:	296f      	cmp	r1, #111	; 0x6f
 800b170:	bf14      	ite	ne
 800b172:	220a      	movne	r2, #10
 800b174:	2208      	moveq	r2, #8
 800b176:	2100      	movs	r1, #0
 800b178:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b17c:	6865      	ldr	r5, [r4, #4]
 800b17e:	60a5      	str	r5, [r4, #8]
 800b180:	2d00      	cmp	r5, #0
 800b182:	f2c0 8095 	blt.w	800b2b0 <_printf_i+0x20c>
 800b186:	6821      	ldr	r1, [r4, #0]
 800b188:	f021 0104 	bic.w	r1, r1, #4
 800b18c:	6021      	str	r1, [r4, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d13d      	bne.n	800b20e <_printf_i+0x16a>
 800b192:	2d00      	cmp	r5, #0
 800b194:	f040 808e 	bne.w	800b2b4 <_printf_i+0x210>
 800b198:	4665      	mov	r5, ip
 800b19a:	2a08      	cmp	r2, #8
 800b19c:	d10b      	bne.n	800b1b6 <_printf_i+0x112>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	07db      	lsls	r3, r3, #31
 800b1a2:	d508      	bpl.n	800b1b6 <_printf_i+0x112>
 800b1a4:	6923      	ldr	r3, [r4, #16]
 800b1a6:	6862      	ldr	r2, [r4, #4]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	bfde      	ittt	le
 800b1ac:	2330      	movle	r3, #48	; 0x30
 800b1ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b1b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b1b6:	ebac 0305 	sub.w	r3, ip, r5
 800b1ba:	6123      	str	r3, [r4, #16]
 800b1bc:	f8cd 8000 	str.w	r8, [sp]
 800b1c0:	463b      	mov	r3, r7
 800b1c2:	aa03      	add	r2, sp, #12
 800b1c4:	4621      	mov	r1, r4
 800b1c6:	4630      	mov	r0, r6
 800b1c8:	f7ff fef6 	bl	800afb8 <_printf_common>
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d14d      	bne.n	800b26c <_printf_i+0x1c8>
 800b1d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b1d4:	b005      	add	sp, #20
 800b1d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b1da:	4839      	ldr	r0, [pc, #228]	; (800b2c0 <_printf_i+0x21c>)
 800b1dc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b1e0:	6813      	ldr	r3, [r2, #0]
 800b1e2:	6821      	ldr	r1, [r4, #0]
 800b1e4:	1d1d      	adds	r5, r3, #4
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6015      	str	r5, [r2, #0]
 800b1ea:	060a      	lsls	r2, r1, #24
 800b1ec:	d50b      	bpl.n	800b206 <_printf_i+0x162>
 800b1ee:	07ca      	lsls	r2, r1, #31
 800b1f0:	bf44      	itt	mi
 800b1f2:	f041 0120 	orrmi.w	r1, r1, #32
 800b1f6:	6021      	strmi	r1, [r4, #0]
 800b1f8:	b91b      	cbnz	r3, 800b202 <_printf_i+0x15e>
 800b1fa:	6822      	ldr	r2, [r4, #0]
 800b1fc:	f022 0220 	bic.w	r2, r2, #32
 800b200:	6022      	str	r2, [r4, #0]
 800b202:	2210      	movs	r2, #16
 800b204:	e7b7      	b.n	800b176 <_printf_i+0xd2>
 800b206:	064d      	lsls	r5, r1, #25
 800b208:	bf48      	it	mi
 800b20a:	b29b      	uxthmi	r3, r3
 800b20c:	e7ef      	b.n	800b1ee <_printf_i+0x14a>
 800b20e:	4665      	mov	r5, ip
 800b210:	fbb3 f1f2 	udiv	r1, r3, r2
 800b214:	fb02 3311 	mls	r3, r2, r1, r3
 800b218:	5cc3      	ldrb	r3, [r0, r3]
 800b21a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b21e:	460b      	mov	r3, r1
 800b220:	2900      	cmp	r1, #0
 800b222:	d1f5      	bne.n	800b210 <_printf_i+0x16c>
 800b224:	e7b9      	b.n	800b19a <_printf_i+0xf6>
 800b226:	6813      	ldr	r3, [r2, #0]
 800b228:	6825      	ldr	r5, [r4, #0]
 800b22a:	6961      	ldr	r1, [r4, #20]
 800b22c:	1d18      	adds	r0, r3, #4
 800b22e:	6010      	str	r0, [r2, #0]
 800b230:	0628      	lsls	r0, r5, #24
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	d501      	bpl.n	800b23a <_printf_i+0x196>
 800b236:	6019      	str	r1, [r3, #0]
 800b238:	e002      	b.n	800b240 <_printf_i+0x19c>
 800b23a:	066a      	lsls	r2, r5, #25
 800b23c:	d5fb      	bpl.n	800b236 <_printf_i+0x192>
 800b23e:	8019      	strh	r1, [r3, #0]
 800b240:	2300      	movs	r3, #0
 800b242:	6123      	str	r3, [r4, #16]
 800b244:	4665      	mov	r5, ip
 800b246:	e7b9      	b.n	800b1bc <_printf_i+0x118>
 800b248:	6813      	ldr	r3, [r2, #0]
 800b24a:	1d19      	adds	r1, r3, #4
 800b24c:	6011      	str	r1, [r2, #0]
 800b24e:	681d      	ldr	r5, [r3, #0]
 800b250:	6862      	ldr	r2, [r4, #4]
 800b252:	2100      	movs	r1, #0
 800b254:	4628      	mov	r0, r5
 800b256:	f7f4 ff9b 	bl	8000190 <memchr>
 800b25a:	b108      	cbz	r0, 800b260 <_printf_i+0x1bc>
 800b25c:	1b40      	subs	r0, r0, r5
 800b25e:	6060      	str	r0, [r4, #4]
 800b260:	6863      	ldr	r3, [r4, #4]
 800b262:	6123      	str	r3, [r4, #16]
 800b264:	2300      	movs	r3, #0
 800b266:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b26a:	e7a7      	b.n	800b1bc <_printf_i+0x118>
 800b26c:	6923      	ldr	r3, [r4, #16]
 800b26e:	462a      	mov	r2, r5
 800b270:	4639      	mov	r1, r7
 800b272:	4630      	mov	r0, r6
 800b274:	47c0      	blx	r8
 800b276:	3001      	adds	r0, #1
 800b278:	d0aa      	beq.n	800b1d0 <_printf_i+0x12c>
 800b27a:	6823      	ldr	r3, [r4, #0]
 800b27c:	079b      	lsls	r3, r3, #30
 800b27e:	d413      	bmi.n	800b2a8 <_printf_i+0x204>
 800b280:	68e0      	ldr	r0, [r4, #12]
 800b282:	9b03      	ldr	r3, [sp, #12]
 800b284:	4298      	cmp	r0, r3
 800b286:	bfb8      	it	lt
 800b288:	4618      	movlt	r0, r3
 800b28a:	e7a3      	b.n	800b1d4 <_printf_i+0x130>
 800b28c:	2301      	movs	r3, #1
 800b28e:	464a      	mov	r2, r9
 800b290:	4639      	mov	r1, r7
 800b292:	4630      	mov	r0, r6
 800b294:	47c0      	blx	r8
 800b296:	3001      	adds	r0, #1
 800b298:	d09a      	beq.n	800b1d0 <_printf_i+0x12c>
 800b29a:	3501      	adds	r5, #1
 800b29c:	68e3      	ldr	r3, [r4, #12]
 800b29e:	9a03      	ldr	r2, [sp, #12]
 800b2a0:	1a9b      	subs	r3, r3, r2
 800b2a2:	42ab      	cmp	r3, r5
 800b2a4:	dcf2      	bgt.n	800b28c <_printf_i+0x1e8>
 800b2a6:	e7eb      	b.n	800b280 <_printf_i+0x1dc>
 800b2a8:	2500      	movs	r5, #0
 800b2aa:	f104 0919 	add.w	r9, r4, #25
 800b2ae:	e7f5      	b.n	800b29c <_printf_i+0x1f8>
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1ac      	bne.n	800b20e <_printf_i+0x16a>
 800b2b4:	7803      	ldrb	r3, [r0, #0]
 800b2b6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b2ba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2be:	e76c      	b.n	800b19a <_printf_i+0xf6>
 800b2c0:	0800bea1 	.word	0x0800bea1
 800b2c4:	0800beb2 	.word	0x0800beb2

0800b2c8 <_sbrk_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4c06      	ldr	r4, [pc, #24]	; (800b2e4 <_sbrk_r+0x1c>)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4605      	mov	r5, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	6023      	str	r3, [r4, #0]
 800b2d4:	f7f7 f8b4 	bl	8002440 <_sbrk>
 800b2d8:	1c43      	adds	r3, r0, #1
 800b2da:	d102      	bne.n	800b2e2 <_sbrk_r+0x1a>
 800b2dc:	6823      	ldr	r3, [r4, #0]
 800b2de:	b103      	cbz	r3, 800b2e2 <_sbrk_r+0x1a>
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	bd38      	pop	{r3, r4, r5, pc}
 800b2e4:	200015a0 	.word	0x200015a0

0800b2e8 <__sread>:
 800b2e8:	b510      	push	{r4, lr}
 800b2ea:	460c      	mov	r4, r1
 800b2ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2f0:	f000 f896 	bl	800b420 <_read_r>
 800b2f4:	2800      	cmp	r0, #0
 800b2f6:	bfab      	itete	ge
 800b2f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2fa:	89a3      	ldrhlt	r3, [r4, #12]
 800b2fc:	181b      	addge	r3, r3, r0
 800b2fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b302:	bfac      	ite	ge
 800b304:	6563      	strge	r3, [r4, #84]	; 0x54
 800b306:	81a3      	strhlt	r3, [r4, #12]
 800b308:	bd10      	pop	{r4, pc}

0800b30a <__swrite>:
 800b30a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b30e:	461f      	mov	r7, r3
 800b310:	898b      	ldrh	r3, [r1, #12]
 800b312:	05db      	lsls	r3, r3, #23
 800b314:	4605      	mov	r5, r0
 800b316:	460c      	mov	r4, r1
 800b318:	4616      	mov	r6, r2
 800b31a:	d505      	bpl.n	800b328 <__swrite+0x1e>
 800b31c:	2302      	movs	r3, #2
 800b31e:	2200      	movs	r2, #0
 800b320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b324:	f000 f868 	bl	800b3f8 <_lseek_r>
 800b328:	89a3      	ldrh	r3, [r4, #12]
 800b32a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b32e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b332:	81a3      	strh	r3, [r4, #12]
 800b334:	4632      	mov	r2, r6
 800b336:	463b      	mov	r3, r7
 800b338:	4628      	mov	r0, r5
 800b33a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b33e:	f000 b817 	b.w	800b370 <_write_r>

0800b342 <__sseek>:
 800b342:	b510      	push	{r4, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b34a:	f000 f855 	bl	800b3f8 <_lseek_r>
 800b34e:	1c43      	adds	r3, r0, #1
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	bf15      	itete	ne
 800b354:	6560      	strne	r0, [r4, #84]	; 0x54
 800b356:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b35a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b35e:	81a3      	strheq	r3, [r4, #12]
 800b360:	bf18      	it	ne
 800b362:	81a3      	strhne	r3, [r4, #12]
 800b364:	bd10      	pop	{r4, pc}

0800b366 <__sclose>:
 800b366:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b36a:	f000 b813 	b.w	800b394 <_close_r>
	...

0800b370 <_write_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	4c07      	ldr	r4, [pc, #28]	; (800b390 <_write_r+0x20>)
 800b374:	4605      	mov	r5, r0
 800b376:	4608      	mov	r0, r1
 800b378:	4611      	mov	r1, r2
 800b37a:	2200      	movs	r2, #0
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	461a      	mov	r2, r3
 800b380:	f7fd f9b2 	bl	80086e8 <_write>
 800b384:	1c43      	adds	r3, r0, #1
 800b386:	d102      	bne.n	800b38e <_write_r+0x1e>
 800b388:	6823      	ldr	r3, [r4, #0]
 800b38a:	b103      	cbz	r3, 800b38e <_write_r+0x1e>
 800b38c:	602b      	str	r3, [r5, #0]
 800b38e:	bd38      	pop	{r3, r4, r5, pc}
 800b390:	200015a0 	.word	0x200015a0

0800b394 <_close_r>:
 800b394:	b538      	push	{r3, r4, r5, lr}
 800b396:	4c06      	ldr	r4, [pc, #24]	; (800b3b0 <_close_r+0x1c>)
 800b398:	2300      	movs	r3, #0
 800b39a:	4605      	mov	r5, r0
 800b39c:	4608      	mov	r0, r1
 800b39e:	6023      	str	r3, [r4, #0]
 800b3a0:	f7f7 f819 	bl	80023d6 <_close>
 800b3a4:	1c43      	adds	r3, r0, #1
 800b3a6:	d102      	bne.n	800b3ae <_close_r+0x1a>
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	b103      	cbz	r3, 800b3ae <_close_r+0x1a>
 800b3ac:	602b      	str	r3, [r5, #0]
 800b3ae:	bd38      	pop	{r3, r4, r5, pc}
 800b3b0:	200015a0 	.word	0x200015a0

0800b3b4 <_fstat_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4c07      	ldr	r4, [pc, #28]	; (800b3d4 <_fstat_r+0x20>)
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	4605      	mov	r5, r0
 800b3bc:	4608      	mov	r0, r1
 800b3be:	4611      	mov	r1, r2
 800b3c0:	6023      	str	r3, [r4, #0]
 800b3c2:	f7f7 f814 	bl	80023ee <_fstat>
 800b3c6:	1c43      	adds	r3, r0, #1
 800b3c8:	d102      	bne.n	800b3d0 <_fstat_r+0x1c>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	b103      	cbz	r3, 800b3d0 <_fstat_r+0x1c>
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	bd38      	pop	{r3, r4, r5, pc}
 800b3d2:	bf00      	nop
 800b3d4:	200015a0 	.word	0x200015a0

0800b3d8 <_isatty_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4c06      	ldr	r4, [pc, #24]	; (800b3f4 <_isatty_r+0x1c>)
 800b3dc:	2300      	movs	r3, #0
 800b3de:	4605      	mov	r5, r0
 800b3e0:	4608      	mov	r0, r1
 800b3e2:	6023      	str	r3, [r4, #0]
 800b3e4:	f7f7 f813 	bl	800240e <_isatty>
 800b3e8:	1c43      	adds	r3, r0, #1
 800b3ea:	d102      	bne.n	800b3f2 <_isatty_r+0x1a>
 800b3ec:	6823      	ldr	r3, [r4, #0]
 800b3ee:	b103      	cbz	r3, 800b3f2 <_isatty_r+0x1a>
 800b3f0:	602b      	str	r3, [r5, #0]
 800b3f2:	bd38      	pop	{r3, r4, r5, pc}
 800b3f4:	200015a0 	.word	0x200015a0

0800b3f8 <_lseek_r>:
 800b3f8:	b538      	push	{r3, r4, r5, lr}
 800b3fa:	4c07      	ldr	r4, [pc, #28]	; (800b418 <_lseek_r+0x20>)
 800b3fc:	4605      	mov	r5, r0
 800b3fe:	4608      	mov	r0, r1
 800b400:	4611      	mov	r1, r2
 800b402:	2200      	movs	r2, #0
 800b404:	6022      	str	r2, [r4, #0]
 800b406:	461a      	mov	r2, r3
 800b408:	f7f7 f80c 	bl	8002424 <_lseek>
 800b40c:	1c43      	adds	r3, r0, #1
 800b40e:	d102      	bne.n	800b416 <_lseek_r+0x1e>
 800b410:	6823      	ldr	r3, [r4, #0]
 800b412:	b103      	cbz	r3, 800b416 <_lseek_r+0x1e>
 800b414:	602b      	str	r3, [r5, #0]
 800b416:	bd38      	pop	{r3, r4, r5, pc}
 800b418:	200015a0 	.word	0x200015a0

0800b41c <__malloc_lock>:
 800b41c:	4770      	bx	lr

0800b41e <__malloc_unlock>:
 800b41e:	4770      	bx	lr

0800b420 <_read_r>:
 800b420:	b538      	push	{r3, r4, r5, lr}
 800b422:	4c07      	ldr	r4, [pc, #28]	; (800b440 <_read_r+0x20>)
 800b424:	4605      	mov	r5, r0
 800b426:	4608      	mov	r0, r1
 800b428:	4611      	mov	r1, r2
 800b42a:	2200      	movs	r2, #0
 800b42c:	6022      	str	r2, [r4, #0]
 800b42e:	461a      	mov	r2, r3
 800b430:	f7f6 ffb4 	bl	800239c <_read>
 800b434:	1c43      	adds	r3, r0, #1
 800b436:	d102      	bne.n	800b43e <_read_r+0x1e>
 800b438:	6823      	ldr	r3, [r4, #0]
 800b43a:	b103      	cbz	r3, 800b43e <_read_r+0x1e>
 800b43c:	602b      	str	r3, [r5, #0]
 800b43e:	bd38      	pop	{r3, r4, r5, pc}
 800b440:	200015a0 	.word	0x200015a0

0800b444 <_init>:
 800b444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b446:	bf00      	nop
 800b448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b44a:	bc08      	pop	{r3}
 800b44c:	469e      	mov	lr, r3
 800b44e:	4770      	bx	lr

0800b450 <_fini>:
 800b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b452:	bf00      	nop
 800b454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b456:	bc08      	pop	{r3}
 800b458:	469e      	mov	lr, r3
 800b45a:	4770      	bx	lr
