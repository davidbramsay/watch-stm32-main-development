
veml7700_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008794  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001098  080088d8  080088d8  000188d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08009970  08009970  00019970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08009974  08009974  00019974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001e0  20000004  08009978  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  200001e4  08009b58  000201e4  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000328  08009b58  00020328  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
  9 .debug_info   00013eb1  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002827  00000000  00000000  000340c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001550  00000000  00000000  000368f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001428  00000000  00000000  00037e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00022895  00000000  00000000  00039268  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000dc72  00000000  00000000  0005bafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000d4ece  00000000  00000000  0006976f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007b  00000000  00000000  0013e63d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006488  00000000  00000000  0013e6b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e4 	.word	0x200001e4
 800015c:	00000000 	.word	0x00000000
 8000160:	080088bc 	.word	0x080088bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e8 	.word	0x200001e8
 800017c:	080088bc 	.word	0x080088bc

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800036e:	f1a4 0401 	sub.w	r4, r4, #1
 8000372:	d1e9      	bne.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <Dotstar_Init>:
} DotStar_State;


DotStar_State dotstar_state;

void Dotstar_Init(DotStar_InitHandle* dotstar_init){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

   dotstar_state.spiHandle = dotstar_init->spiHandle;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a23      	ldr	r2, [pc, #140]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c06:	6013      	str	r3, [r2, #0]
   dotstar_state.numLEDs = dotstar_init->numLEDs;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	889a      	ldrh	r2, [r3, #4]
 8000c0c:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c0e:	809a      	strh	r2, [r3, #4]
   dotstar_state.brightness = 0;
 8000c10:	4b20      	ldr	r3, [pc, #128]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	719a      	strb	r2, [r3, #6]
   dotstar_state.rOffset = dotstar_init->colorOrder & 3;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	799b      	ldrb	r3, [r3, #6]
 8000c1a:	f003 0303 	and.w	r3, r3, #3
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c22:	731a      	strb	r2, [r3, #12]
   dotstar_state.gOffset = (dotstar_init->colorOrder >> 2) & 3;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	799b      	ldrb	r3, [r3, #6]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b18      	ldr	r3, [pc, #96]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c34:	735a      	strb	r2, [r3, #13]
   dotstar_state.bOffset = (dotstar_init->colorOrder >> 4) & 3;
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	799b      	ldrb	r3, [r3, #6]
 8000c3a:	091b      	lsrs	r3, r3, #4
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c46:	739a      	strb	r2, [r3, #14]

   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c48:	4b12      	ldr	r3, [pc, #72]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c4a:	7b1a      	ldrb	r2, [r3, #12]
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c4e:	7b5b      	ldrb	r3, [r3, #13]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d10c      	bne.n	8000c6e <Dotstar_Init+0x76>
     dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel, round up to next byte
 8000c54:	4b0f      	ldr	r3, [pc, #60]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c56:	889a      	ldrh	r2, [r3, #4]
 8000c58:	4b0e      	ldr	r3, [pc, #56]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c5a:	889b      	ldrh	r3, [r3, #4]
 8000c5c:	3303      	adds	r3, #3
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	da00      	bge.n	8000c64 <Dotstar_Init+0x6c>
 8000c62:	3303      	adds	r3, #3
 8000c64:	109b      	asrs	r3, r3, #2
 8000c66:	b29b      	uxth	r3, r3
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c68:	4413      	add	r3, r2
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	e005      	b.n	8000c7a <Dotstar_Init+0x82>
     dotstar_state.numLEDs * 3;              // COLOR: 3 bytes/pixel
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c70:	889b      	ldrh	r3, [r3, #4]
   uint16_t bytes = (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000c72:	461a      	mov	r2, r3
 8000c74:	0052      	lsls	r2, r2, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	81fb      	strh	r3, [r7, #14]

   dotstar_state.pixels = (uint8_t *)malloc(bytes);
 8000c7c:	89fb      	ldrh	r3, [r7, #14]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f004 fd7e 	bl	8005780 <malloc>
 8000c84:	4603      	mov	r3, r0
 8000c86:	461a      	mov	r2, r3
 8000c88:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <Dotstar_Init+0x9c>)
 8000c8a:	609a      	str	r2, [r3, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000020c 	.word	0x2000020c

08000c98 <ds_show>:
*/

/*!
  @brief   Transmit pixel data in RAM to DotStars.
*/
void ds_show(void) {
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0

  if(!dotstar_state.pixels) return;
 8000c9e:	4b4b      	ldr	r3, [pc, #300]	; (8000dcc <ds_show+0x134>)
 8000ca0:	689b      	ldr	r3, [r3, #8]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	f000 808e 	beq.w	8000dc4 <ds_show+0x12c>

  uint8_t *ptr = dotstar_state.pixels, i;            // -> LED data
 8000ca8:	4b48      	ldr	r3, [pc, #288]	; (8000dcc <ds_show+0x134>)
 8000caa:	689b      	ldr	r3, [r3, #8]
 8000cac:	60fb      	str	r3, [r7, #12]
  uint16_t n   = dotstar_state.numLEDs;              // Counter
 8000cae:	4b47      	ldr	r3, [pc, #284]	; (8000dcc <ds_show+0x134>)
 8000cb0:	889b      	ldrh	r3, [r3, #4]
 8000cb2:	813b      	strh	r3, [r7, #8]
  uint16_t b16 = (uint16_t)dotstar_state.brightness; // Type-convert for fixed-point math
 8000cb4:	4b45      	ldr	r3, [pc, #276]	; (8000dcc <ds_show+0x134>)
 8000cb6:	799b      	ldrb	r3, [r3, #6]
 8000cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t sendval;

    sendval = 0x00;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	717b      	strb	r3, [r7, #5]
    for(i=0; i<4; i++) spi_out(&sendval);    // 4 byte start-frame marker
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	72fb      	strb	r3, [r7, #11]
 8000cc2:	e00a      	b.n	8000cda <ds_show+0x42>
 8000cc4:	4b41      	ldr	r3, [pc, #260]	; (8000dcc <ds_show+0x134>)
 8000cc6:	6818      	ldr	r0, [r3, #0]
 8000cc8:	1d79      	adds	r1, r7, #5
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
 8000cce:	2201      	movs	r2, #1
 8000cd0:	f004 fa62 	bl	8005198 <HAL_SPI_Transmit>
 8000cd4:	7afb      	ldrb	r3, [r7, #11]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	72fb      	strb	r3, [r7, #11]
 8000cda:	7afb      	ldrb	r3, [r7, #11]
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d9f1      	bls.n	8000cc4 <ds_show+0x2c>

    if(dotstar_state.brightness) {                     // Scale pixel brightness on output
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <ds_show+0x134>)
 8000ce2:	799b      	ldrb	r3, [r3, #6]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d02c      	beq.n	8000d42 <ds_show+0xaa>
      do {                               // For each pixel...
    	sendval = 0xFF;
 8000ce8:	23ff      	movs	r3, #255	; 0xff
 8000cea:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <ds_show+0x134>)
 8000cee:	6818      	ldr	r0, [r3, #0]
 8000cf0:	1d79      	adds	r1, r7, #5
 8000cf2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f004 fa4e 	bl	8005198 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	72fb      	strb	r3, [r7, #11]
 8000d00:	e015      	b.n	8000d2e <ds_show+0x96>
        	sendval = (*ptr++ * b16) >> 8;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	1c5a      	adds	r2, r3, #1
 8000d06:	60fa      	str	r2, [r7, #12]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	fb03 f302 	mul.w	r3, r3, r2
 8000d12:	121b      	asrs	r3, r3, #8
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Scale, write RGB
 8000d18:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <ds_show+0x134>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	1d79      	adds	r1, r7, #5
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d22:	2201      	movs	r2, #1
 8000d24:	f004 fa38 	bl	8005198 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	72fb      	strb	r3, [r7, #11]
 8000d2e:	7afb      	ldrb	r3, [r7, #11]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d9e6      	bls.n	8000d02 <ds_show+0x6a>
        }
      } while(--n);
 8000d34:	893b      	ldrh	r3, [r7, #8]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	813b      	strh	r3, [r7, #8]
 8000d3a:	893b      	ldrh	r3, [r7, #8]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1d3      	bne.n	8000ce8 <ds_show+0x50>
 8000d40:	e025      	b.n	8000d8e <ds_show+0xf6>
    } else {                             // Full brightness (no scaling)
      do {                               // For each pixel...
    	sendval = 0xFF;
 8000d42:	23ff      	movs	r3, #255	; 0xff
 8000d44:	717b      	strb	r3, [r7, #5]
        spi_out(&sendval);                   //  Pixel start
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <ds_show+0x134>)
 8000d48:	6818      	ldr	r0, [r3, #0]
 8000d4a:	1d79      	adds	r1, r7, #5
 8000d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d50:	2201      	movs	r2, #1
 8000d52:	f004 fa21 	bl	8005198 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000d56:	2300      	movs	r3, #0
 8000d58:	72fb      	strb	r3, [r7, #11]
 8000d5a:	e00f      	b.n	8000d7c <ds_show+0xe4>
        	sendval = *ptr++;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	60fa      	str	r2, [r7, #12]
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	717b      	strb	r3, [r7, #5]
        	spi_out(&sendval); // Write R,G,B
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <ds_show+0x134>)
 8000d68:	6818      	ldr	r0, [r3, #0]
 8000d6a:	1d79      	adds	r1, r7, #5
 8000d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d70:	2201      	movs	r2, #1
 8000d72:	f004 fa11 	bl	8005198 <HAL_SPI_Transmit>
        for(i=0; i<3; i++) {
 8000d76:	7afb      	ldrb	r3, [r7, #11]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	72fb      	strb	r3, [r7, #11]
 8000d7c:	7afb      	ldrb	r3, [r7, #11]
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d9ec      	bls.n	8000d5c <ds_show+0xc4>
        }
      } while(--n);
 8000d82:	893b      	ldrh	r3, [r7, #8]
 8000d84:	3b01      	subs	r3, #1
 8000d86:	813b      	strh	r3, [r7, #8]
 8000d88:	893b      	ldrh	r3, [r7, #8]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d1d9      	bne.n	8000d42 <ds_show+0xaa>
    // revisions are more strict (e.g. might mandate use of end-frame
    // before start-frame marker). i.e. let's not remove this. But after
    // testing a bit more the suggestion is to use at least (numLeds+1)/2
    // high values (1) or (numLeds+15)/16 full bytes as EndFrame. For details see also:
    // https://cpldcpu.wordpress.com/2014/11/30/understanding-the-apa102-superled/
    sendval = 0xFF;
 8000d8e:	23ff      	movs	r3, #255	; 0xff
 8000d90:	717b      	strb	r3, [r7, #5]
    for(i=0; i<((dotstar_state.numLEDs + 15) / 16); i++) spi_out(&sendval);
 8000d92:	2300      	movs	r3, #0
 8000d94:	72fb      	strb	r3, [r7, #11]
 8000d96:	e00a      	b.n	8000dae <ds_show+0x116>
 8000d98:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <ds_show+0x134>)
 8000d9a:	6818      	ldr	r0, [r3, #0]
 8000d9c:	1d79      	adds	r1, r7, #5
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000da2:	2201      	movs	r2, #1
 8000da4:	f004 f9f8 	bl	8005198 <HAL_SPI_Transmit>
 8000da8:	7afb      	ldrb	r3, [r7, #11]
 8000daa:	3301      	adds	r3, #1
 8000dac:	72fb      	strb	r3, [r7, #11]
 8000dae:	7afa      	ldrb	r2, [r7, #11]
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <ds_show+0x134>)
 8000db2:	889b      	ldrh	r3, [r3, #4]
 8000db4:	330f      	adds	r3, #15
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	da00      	bge.n	8000dbc <ds_show+0x124>
 8000dba:	330f      	adds	r3, #15
 8000dbc:	111b      	asrs	r3, r3, #4
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	dbea      	blt.n	8000d98 <ds_show+0x100>
 8000dc2:	e000      	b.n	8000dc6 <ds_show+0x12e>
  if(!dotstar_state.pixels) return;
 8000dc4:	bf00      	nop

}
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000020c 	.word	0x2000020c

08000dd0 <ds_clear>:

/*!
  @brief   Fill the whole DotStar strip with 0 / black / off.
*/
void ds_clear() {
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000dd4:	4b0f      	ldr	r3, [pc, #60]	; (8000e14 <ds_clear+0x44>)
 8000dd6:	6898      	ldr	r0, [r3, #8]
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <ds_clear+0x44>)
 8000dda:	7b1a      	ldrb	r2, [r3, #12]
 8000ddc:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <ds_clear+0x44>)
 8000dde:	7b5b      	ldrb	r3, [r3, #13]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d10b      	bne.n	8000dfc <ds_clear+0x2c>
    dotstar_state.numLEDs + ((dotstar_state.numLEDs + 3) / 4) : // MONO: 10 bits/pixel
 8000de4:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <ds_clear+0x44>)
 8000de6:	889b      	ldrh	r3, [r3, #4]
 8000de8:	461a      	mov	r2, r3
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <ds_clear+0x44>)
 8000dec:	889b      	ldrh	r3, [r3, #4]
 8000dee:	3303      	adds	r3, #3
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	da00      	bge.n	8000df6 <ds_clear+0x26>
 8000df4:	3303      	adds	r3, #3
 8000df6:	109b      	asrs	r3, r3, #2
 8000df8:	4413      	add	r3, r2
 8000dfa:	e005      	b.n	8000e08 <ds_clear+0x38>
    dotstar_state.numLEDs * 3);                   // COLOR: 3 bytes/pixel
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <ds_clear+0x44>)
 8000dfe:	889b      	ldrh	r3, [r3, #4]
 8000e00:	461a      	mov	r2, r3
 8000e02:	4613      	mov	r3, r2
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	4413      	add	r3, r2
  memset(dotstar_state.pixels, 0, (dotstar_state.rOffset == dotstar_state.gOffset) ?
 8000e08:	461a      	mov	r2, r3
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f004 fccb 	bl	80057a6 <memset>
}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	2000020c 	.word	0x2000020c

08000e18 <ds_setPixelColor32B>:
  @param   n  Pixel index, starting from 0.
  @param   c  32-bit color value. Most significant byte is 0, second is
              red, then green, and least significant byte is blue.
              e.g. 0x00RRGGBB
*/
void ds_setPixelColor32B(uint16_t n, uint32_t c) {
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	6039      	str	r1, [r7, #0]
 8000e22:	80fb      	strh	r3, [r7, #6]
  if(n < dotstar_state.numLEDs) {
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e26:	889b      	ldrh	r3, [r3, #4]
 8000e28:	88fa      	ldrh	r2, [r7, #6]
 8000e2a:	429a      	cmp	r2, r3
 8000e2c:	d221      	bcs.n	8000e72 <ds_setPixelColor32B+0x5a>
    uint8_t *p = &dotstar_state.pixels[n * 3];
 8000e2e:	4b14      	ldr	r3, [pc, #80]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e30:	6899      	ldr	r1, [r3, #8]
 8000e32:	88fa      	ldrh	r2, [r7, #6]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	440b      	add	r3, r1
 8000e3c:	60fb      	str	r3, [r7, #12]
    p[dotstar_state.rOffset] = (uint8_t)(c >> 16);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	0c1a      	lsrs	r2, r3, #16
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e44:	7b1b      	ldrb	r3, [r3, #12]
 8000e46:	4619      	mov	r1, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	440b      	add	r3, r1
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.gOffset] = (uint8_t)(c >>  8);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	0a1a      	lsrs	r2, r3, #8
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e56:	7b5b      	ldrb	r3, [r3, #13]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	440b      	add	r3, r1
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	701a      	strb	r2, [r3, #0]
    p[dotstar_state.bOffset] = (uint8_t)c;
 8000e62:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <ds_setPixelColor32B+0x68>)
 8000e64:	7b9b      	ldrb	r3, [r3, #14]
 8000e66:	461a      	mov	r2, r3
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	701a      	strb	r2, [r3, #0]
  }
}
 8000e72:	bf00      	nop
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	2000020c 	.word	0x2000020c

08000e84 <ds_setBrightness>:
           is 'non destructive' -- it's applied as color data is being
           issued to the strip, not during setPixelColor(), and also
           means that getPixelColor() returns the exact value originally
           stored.
*/
void ds_setBrightness(uint8_t b) {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  // optimizes the actual scaling math later, allowing a fast 8x8-bit
  // multiply and taking the MSB. 'brightness' is a uint8_t, adding 1
  // here may (intentionally) roll over...so 0 = max brightness (color
  // values are interpreted literally; no scaling), 1 = min brightness
  // (off), 255 = just below max brightness.
  dotstar_state.brightness = b + 1;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <ds_setBrightness+0x20>)
 8000e96:	719a      	strb	r2, [r3, #6]
}
 8000e98:	bf00      	nop
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	2000020c 	.word	0x2000020c

08000ea8 <I2C_Write_Byte>:
#include "stm32wbxx_hal_i2c.h"
#include "stm32wbxx_hal.h"


void I2C_Write_Byte(uint8_t value, uint8_t Cmd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af02      	add	r7, sp, #8
 8000eae:	4603      	mov	r3, r0
 8000eb0:	460a      	mov	r2, r1
 8000eb2:	71fb      	strb	r3, [r7, #7]
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	71bb      	strb	r3, [r7, #6]
  uint16_t Addr = 0x3C << 1;
 8000eb8:	2378      	movs	r3, #120	; 0x78
 8000eba:	81fb      	strh	r3, [r7, #14]
  uint8_t Data[2];
  Data[0] = Cmd;
 8000ebc:	79bb      	ldrb	r3, [r7, #6]
 8000ebe:	733b      	strb	r3, [r7, #12]
  Data[1] = value;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	737b      	strb	r3, [r7, #13]

  HAL_I2C_Master_Transmit(&ER_OLED_I2C_PORT, Addr, Data, 2, HAL_MAX_DELAY);
 8000ec4:	f107 020c 	add.w	r2, r7, #12
 8000ec8:	89f9      	ldrh	r1, [r7, #14]
 8000eca:	f04f 33ff 	mov.w	r3, #4294967295
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <I2C_Write_Byte+0x38>)
 8000ed4:	f001 fd44 	bl	8002960 <HAL_I2C_Master_Transmit>
}
 8000ed8:	bf00      	nop
 8000eda:	3710      	adds	r7, #16
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	2000021c 	.word	0x2000021c

08000ee4 <er_oled_begin>:

void er_oled_begin()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    command(0xae);//--turn off oled panel
 8000ee8:	2100      	movs	r1, #0
 8000eea:	20ae      	movs	r0, #174	; 0xae
 8000eec:	f7ff ffdc 	bl	8000ea8 <I2C_Write_Byte>

    command(0xd5);//--set display clock divide ratio/oscillator frequency
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	20d5      	movs	r0, #213	; 0xd5
 8000ef4:	f7ff ffd8 	bl	8000ea8 <I2C_Write_Byte>
    command(0x80);//--set divide ratio
 8000ef8:	2100      	movs	r1, #0
 8000efa:	2080      	movs	r0, #128	; 0x80
 8000efc:	f7ff ffd4 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa8);//--set multiplex ratio
 8000f00:	2100      	movs	r1, #0
 8000f02:	20a8      	movs	r0, #168	; 0xa8
 8000f04:	f7ff ffd0 	bl	8000ea8 <I2C_Write_Byte>
    command(0x27);//--1/40 duty
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2027      	movs	r0, #39	; 0x27
 8000f0c:	f7ff ffcc 	bl	8000ea8 <I2C_Write_Byte>

    command(0xd3);//-set display offset
 8000f10:	2100      	movs	r1, #0
 8000f12:	20d3      	movs	r0, #211	; 0xd3
 8000f14:	f7ff ffc8 	bl	8000ea8 <I2C_Write_Byte>
    command(0x00);//-not offset
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ffc4 	bl	8000ea8 <I2C_Write_Byte>

    command(0xad);//--Internal IREF Setting
 8000f20:	2100      	movs	r1, #0
 8000f22:	20ad      	movs	r0, #173	; 0xad
 8000f24:	f7ff ffc0 	bl	8000ea8 <I2C_Write_Byte>
    command(0x30);//--
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2030      	movs	r0, #48	; 0x30
 8000f2c:	f7ff ffbc 	bl	8000ea8 <I2C_Write_Byte>

    command(0x8d);//--set Charge Pump enable/disable
 8000f30:	2100      	movs	r1, #0
 8000f32:	208d      	movs	r0, #141	; 0x8d
 8000f34:	f7ff ffb8 	bl	8000ea8 <I2C_Write_Byte>
    command(0x14);//--set(0x10) disable
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2014      	movs	r0, #20
 8000f3c:	f7ff ffb4 	bl	8000ea8 <I2C_Write_Byte>

    command(0x40);//--set start line address
 8000f40:	2100      	movs	r1, #0
 8000f42:	2040      	movs	r0, #64	; 0x40
 8000f44:	f7ff ffb0 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa6);//--set normal display
 8000f48:	2100      	movs	r1, #0
 8000f4a:	20a6      	movs	r0, #166	; 0xa6
 8000f4c:	f7ff ffac 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa4);//Disable Entire Display On
 8000f50:	2100      	movs	r1, #0
 8000f52:	20a4      	movs	r0, #164	; 0xa4
 8000f54:	f7ff ffa8 	bl	8000ea8 <I2C_Write_Byte>

    command(0xa1);//--set segment re-map 128 to 0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	20a1      	movs	r0, #161	; 0xa1
 8000f5c:	f7ff ffa4 	bl	8000ea8 <I2C_Write_Byte>

    command(0xC8);//--Set COM Output Scan Direction 64 to 0
 8000f60:	2100      	movs	r1, #0
 8000f62:	20c8      	movs	r0, #200	; 0xc8
 8000f64:	f7ff ffa0 	bl	8000ea8 <I2C_Write_Byte>

    command(0xda);//--set com pins hardware configuration
 8000f68:	2100      	movs	r1, #0
 8000f6a:	20da      	movs	r0, #218	; 0xda
 8000f6c:	f7ff ff9c 	bl	8000ea8 <I2C_Write_Byte>
    command(0x12);
 8000f70:	2100      	movs	r1, #0
 8000f72:	2012      	movs	r0, #18
 8000f74:	f7ff ff98 	bl	8000ea8 <I2C_Write_Byte>

    command(0x81);//--set contrast control register
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2081      	movs	r0, #129	; 0x81
 8000f7c:	f7ff ff94 	bl	8000ea8 <I2C_Write_Byte>
    command(0xaf);
 8000f80:	2100      	movs	r1, #0
 8000f82:	20af      	movs	r0, #175	; 0xaf
 8000f84:	f7ff ff90 	bl	8000ea8 <I2C_Write_Byte>

    command(0xd9);//--set pre-charge period
 8000f88:	2100      	movs	r1, #0
 8000f8a:	20d9      	movs	r0, #217	; 0xd9
 8000f8c:	f7ff ff8c 	bl	8000ea8 <I2C_Write_Byte>
    command(0x22);
 8000f90:	2100      	movs	r1, #0
 8000f92:	2022      	movs	r0, #34	; 0x22
 8000f94:	f7ff ff88 	bl	8000ea8 <I2C_Write_Byte>

    command(0xdb);//--set vcomh
 8000f98:	2100      	movs	r1, #0
 8000f9a:	20db      	movs	r0, #219	; 0xdb
 8000f9c:	f7ff ff84 	bl	8000ea8 <I2C_Write_Byte>
    command(0x20);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2020      	movs	r0, #32
 8000fa4:	f7ff ff80 	bl	8000ea8 <I2C_Write_Byte>

    command(0xaf);//--turn on oled panel
 8000fa8:	2100      	movs	r1, #0
 8000faa:	20af      	movs	r0, #175	; 0xaf
 8000fac:	f7ff ff7c 	bl	8000ea8 <I2C_Write_Byte>

}
 8000fb0:	bf00      	nop
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <er_oled_clear>:

void er_oled_clear(uint8_t* buffer)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	int i;
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	e007      	b.n	8000fd2 <er_oled_clear+0x1e>
	{
		buffer[i] = 0;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	687a      	ldr	r2, [r7, #4]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	2200      	movs	r2, #0
 8000fca:	701a      	strb	r2, [r3, #0]
	for(i = 0;i < WIDTH * HEIGHT / 8;i++)
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8000fd8:	dbf3      	blt.n	8000fc2 <er_oled_clear+0xe>
	}
}
 8000fda:	bf00      	nop
 8000fdc:	3714      	adds	r7, #20
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <er_oled_pixel>:

void er_oled_pixel(int x, int y, char color, uint8_t* buffer)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b085      	sub	sp, #20
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	60f8      	str	r0, [r7, #12]
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4613      	mov	r3, r2
 8000ff4:	71fb      	strb	r3, [r7, #7]
    if(x > WIDTH || y > HEIGHT)return ;
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2b48      	cmp	r3, #72	; 0x48
 8000ffa:	dc61      	bgt.n	80010c0 <er_oled_pixel+0xda>
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b28      	cmp	r3, #40	; 0x28
 8001000:	dc5e      	bgt.n	80010c0 <er_oled_pixel+0xda>
    if(color)
 8001002:	79fb      	ldrb	r3, [r7, #7]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d02c      	beq.n	8001062 <er_oled_pixel+0x7c>
        buffer[x+(y/8)*WIDTH] |= 1<<(y%8);
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	2b00      	cmp	r3, #0
 800100c:	da00      	bge.n	8001010 <er_oled_pixel+0x2a>
 800100e:	3307      	adds	r3, #7
 8001010:	10db      	asrs	r3, r3, #3
 8001012:	461a      	mov	r2, r3
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	4413      	add	r3, r2
 800101a:	00db      	lsls	r3, r3, #3
 800101c:	4619      	mov	r1, r3
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	440b      	add	r3, r1
 8001022:	4619      	mov	r1, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	440b      	add	r3, r1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b259      	sxtb	r1, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	4258      	negs	r0, r3
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	f000 0007 	and.w	r0, r0, #7
 8001038:	bf58      	it	pl
 800103a:	4243      	negpl	r3, r0
 800103c:	2001      	movs	r0, #1
 800103e:	fa00 f303 	lsl.w	r3, r0, r3
 8001042:	b25b      	sxtb	r3, r3
 8001044:	430b      	orrs	r3, r1
 8001046:	b259      	sxtb	r1, r3
 8001048:	4613      	mov	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	4413      	add	r3, r2
 800104e:	00db      	lsls	r3, r3, #3
 8001050:	461a      	mov	r2, r3
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	4413      	add	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	4413      	add	r3, r2
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
 8001060:	e02f      	b.n	80010c2 <er_oled_pixel+0xdc>
    else
        buffer[x+(y/8)*WIDTH] &= ~(1<<(y%8));
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	2b00      	cmp	r3, #0
 8001066:	da00      	bge.n	800106a <er_oled_pixel+0x84>
 8001068:	3307      	adds	r3, #7
 800106a:	10db      	asrs	r3, r3, #3
 800106c:	461a      	mov	r2, r3
 800106e:	4613      	mov	r3, r2
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4619      	mov	r1, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	440b      	add	r3, r1
 800107c:	4619      	mov	r1, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	440b      	add	r3, r1
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	b259      	sxtb	r1, r3
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	4258      	negs	r0, r3
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	f000 0007 	and.w	r0, r0, #7
 8001092:	bf58      	it	pl
 8001094:	4243      	negpl	r3, r0
 8001096:	2001      	movs	r0, #1
 8001098:	fa00 f303 	lsl.w	r3, r0, r3
 800109c:	b25b      	sxtb	r3, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	b25b      	sxtb	r3, r3
 80010a2:	400b      	ands	r3, r1
 80010a4:	b259      	sxtb	r1, r3
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	4413      	add	r3, r2
 80010ac:	00db      	lsls	r3, r3, #3
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	e000      	b.n	80010c2 <er_oled_pixel+0xdc>
    if(x > WIDTH || y > HEIGHT)return ;
 80010c0:	bf00      	nop
}
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <er_oled_char>:
		}
	}
}

void er_oled_char(unsigned char x, unsigned char y, char acsii, char size, char mode, uint8_t* buffer)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4604      	mov	r4, r0
 80010d4:	4608      	mov	r0, r1
 80010d6:	4611      	mov	r1, r2
 80010d8:	461a      	mov	r2, r3
 80010da:	4623      	mov	r3, r4
 80010dc:	71fb      	strb	r3, [r7, #7]
 80010de:	4603      	mov	r3, r0
 80010e0:	71bb      	strb	r3, [r7, #6]
 80010e2:	460b      	mov	r3, r1
 80010e4:	717b      	strb	r3, [r7, #5]
 80010e6:	4613      	mov	r3, r2
 80010e8:	713b      	strb	r3, [r7, #4]
    unsigned char i, j, y0=y;
 80010ea:	79bb      	ldrb	r3, [r7, #6]
 80010ec:	743b      	strb	r3, [r7, #16]
    uint16_t temp;
    uint16_t position = 0x80;
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	827b      	strh	r3, [r7, #18]
    uint8_t maxindex = 8;
 80010f2:	2308      	movs	r3, #8
 80010f4:	747b      	strb	r3, [r7, #17]
    unsigned char ch = acsii - ' ';
 80010f6:	797b      	ldrb	r3, [r7, #5]
 80010f8:	3b20      	subs	r3, #32
 80010fa:	73fb      	strb	r3, [r7, #15]

    if (size == 32){
 80010fc:	793b      	ldrb	r3, [r7, #4]
 80010fe:	2b20      	cmp	r3, #32
 8001100:	d104      	bne.n	800110c <er_oled_char+0x40>
    	position = 0x8000;
 8001102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001106:	827b      	strh	r3, [r7, #18]
    	maxindex =16;
 8001108:	2310      	movs	r3, #16
 800110a:	747b      	strb	r3, [r7, #17]
    }

    for(i = 0;i<size;i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	75fb      	strb	r3, [r7, #23]
 8001110:	e0b1      	b.n	8001276 <er_oled_char+0x1aa>
        if(size == 12)
 8001112:	793b      	ldrb	r3, [r7, #4]
 8001114:	2b0c      	cmp	r3, #12
 8001116:	d11d      	bne.n	8001154 <er_oled_char+0x88>
        {
            if(mode)temp = Font1206[ch][i];
 8001118:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00b      	beq.n	8001138 <er_oled_char+0x6c>
 8001120:	7bfa      	ldrb	r2, [r7, #15]
 8001122:	7df9      	ldrb	r1, [r7, #23]
 8001124:	4858      	ldr	r0, [pc, #352]	; (8001288 <er_oled_char+0x1bc>)
 8001126:	4613      	mov	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	4413      	add	r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	4403      	add	r3, r0
 8001130:	440b      	add	r3, r1
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	82bb      	strh	r3, [r7, #20]
 8001136:	e06c      	b.n	8001212 <er_oled_char+0x146>
            else temp = ~Font1206[ch][i];
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	7df9      	ldrb	r1, [r7, #23]
 800113c:	4852      	ldr	r0, [pc, #328]	; (8001288 <er_oled_char+0x1bc>)
 800113e:	4613      	mov	r3, r2
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	4403      	add	r3, r0
 8001148:	440b      	add	r3, r1
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b29b      	uxth	r3, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	82bb      	strh	r3, [r7, #20]
 8001152:	e05e      	b.n	8001212 <er_oled_char+0x146>
        }
        else if(size == 16)
 8001154:	793b      	ldrb	r3, [r7, #4]
 8001156:	2b10      	cmp	r3, #16
 8001158:	d117      	bne.n	800118a <er_oled_char+0xbe>
        {
            if(mode)temp = Font1608[ch][i];
 800115a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <er_oled_char+0xa8>
 8001162:	7bfa      	ldrb	r2, [r7, #15]
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	4949      	ldr	r1, [pc, #292]	; (800128c <er_oled_char+0x1c0>)
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	440a      	add	r2, r1
 800116c:	4413      	add	r3, r2
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	82bb      	strh	r3, [r7, #20]
 8001172:	e04e      	b.n	8001212 <er_oled_char+0x146>
            else temp = ~Font1608[ch][i];
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	7dfb      	ldrb	r3, [r7, #23]
 8001178:	4944      	ldr	r1, [pc, #272]	; (800128c <er_oled_char+0x1c0>)
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	440a      	add	r2, r1
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	b29b      	uxth	r3, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	82bb      	strh	r3, [r7, #20]
 8001188:	e043      	b.n	8001212 <er_oled_char+0x146>
        }
        else {
            if(mode) {
 800118a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800118e:	2b00      	cmp	r3, #0
 8001190:	d01c      	beq.n	80011cc <er_oled_char+0x100>
            	temp = Font3216[ch - 16][2*i] << 8;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	f1a3 0210 	sub.w	r2, r3, #16
 8001198:	7dfb      	ldrb	r3, [r7, #23]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	493c      	ldr	r1, [pc, #240]	; (8001290 <er_oled_char+0x1c4>)
 800119e:	0192      	lsls	r2, r2, #6
 80011a0:	440a      	add	r2, r1
 80011a2:	4413      	add	r3, r2
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	021b      	lsls	r3, r3, #8
 80011aa:	82bb      	strh	r3, [r7, #20]
                temp |= Font3216[ch-16][2*i + 1];
 80011ac:	7bfb      	ldrb	r3, [r7, #15]
 80011ae:	f1a3 0210 	sub.w	r2, r3, #16
 80011b2:	7dfb      	ldrb	r3, [r7, #23]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	3301      	adds	r3, #1
 80011b8:	4935      	ldr	r1, [pc, #212]	; (8001290 <er_oled_char+0x1c4>)
 80011ba:	0192      	lsls	r2, r2, #6
 80011bc:	440a      	add	r2, r1
 80011be:	4413      	add	r3, r2
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	8abb      	ldrh	r3, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	82bb      	strh	r3, [r7, #20]
 80011ca:	e022      	b.n	8001212 <er_oled_char+0x146>
            }
            else {
            	temp = ~Font3216[ch - 16][2*i] << 8;
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	f1a3 0210 	sub.w	r2, r3, #16
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	492e      	ldr	r1, [pc, #184]	; (8001290 <er_oled_char+0x1c4>)
 80011d8:	0192      	lsls	r2, r2, #6
 80011da:	440a      	add	r2, r1
 80011dc:	4413      	add	r3, r2
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	43db      	mvns	r3, r3
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	82bb      	strh	r3, [r7, #20]
            	temp |= ~Font3216[ch - 16][2*i + 1];
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	f1a3 0210 	sub.w	r2, r3, #16
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	3301      	adds	r3, #1
 80011f6:	4926      	ldr	r1, [pc, #152]	; (8001290 <er_oled_char+0x1c4>)
 80011f8:	0192      	lsls	r2, r2, #6
 80011fa:	440a      	add	r2, r1
 80011fc:	4413      	add	r3, r2
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b29b      	uxth	r3, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	b21a      	sxth	r2, r3
 8001208:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	b21b      	sxth	r3, r3
 8001210:	82bb      	strh	r3, [r7, #20]
            }
        }
        for(j =0;j<maxindex;j++)
 8001212:	2300      	movs	r3, #0
 8001214:	75bb      	strb	r3, [r7, #22]
 8001216:	e027      	b.n	8001268 <er_oled_char+0x19c>
        {
            if(temp & position) er_oled_pixel(x, y, 1, buffer);
 8001218:	8aba      	ldrh	r2, [r7, #20]
 800121a:	8a7b      	ldrh	r3, [r7, #18]
 800121c:	4013      	ands	r3, r2
 800121e:	b29b      	uxth	r3, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <er_oled_char+0x166>
 8001224:	79f8      	ldrb	r0, [r7, #7]
 8001226:	79b9      	ldrb	r1, [r7, #6]
 8001228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800122a:	2201      	movs	r2, #1
 800122c:	f7ff fedb 	bl	8000fe6 <er_oled_pixel>
 8001230:	e005      	b.n	800123e <er_oled_char+0x172>
            else er_oled_pixel(x, y, 0, buffer);
 8001232:	79f8      	ldrb	r0, [r7, #7]
 8001234:	79b9      	ldrb	r1, [r7, #6]
 8001236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001238:	2200      	movs	r2, #0
 800123a:	f7ff fed4 	bl	8000fe6 <er_oled_pixel>
            temp <<= 1;
 800123e:	8abb      	ldrh	r3, [r7, #20]
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	82bb      	strh	r3, [r7, #20]
            y++;
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	3301      	adds	r3, #1
 8001248:	71bb      	strb	r3, [r7, #6]
            if((y-y0) == size)
 800124a:	79ba      	ldrb	r2, [r7, #6]
 800124c:	7c3b      	ldrb	r3, [r7, #16]
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	793b      	ldrb	r3, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d105      	bne.n	8001262 <er_oled_char+0x196>
            {
                y = y0;
 8001256:	7c3b      	ldrb	r3, [r7, #16]
 8001258:	71bb      	strb	r3, [r7, #6]
                x++;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	3301      	adds	r3, #1
 800125e:	71fb      	strb	r3, [r7, #7]
                break;
 8001260:	e006      	b.n	8001270 <er_oled_char+0x1a4>
        for(j =0;j<maxindex;j++)
 8001262:	7dbb      	ldrb	r3, [r7, #22]
 8001264:	3301      	adds	r3, #1
 8001266:	75bb      	strb	r3, [r7, #22]
 8001268:	7dba      	ldrb	r2, [r7, #22]
 800126a:	7c7b      	ldrb	r3, [r7, #17]
 800126c:	429a      	cmp	r2, r3
 800126e:	d3d3      	bcc.n	8001218 <er_oled_char+0x14c>
    for(i = 0;i<size;i++) {
 8001270:	7dfb      	ldrb	r3, [r7, #23]
 8001272:	3301      	adds	r3, #1
 8001274:	75fb      	strb	r3, [r7, #23]
 8001276:	7dfa      	ldrb	r2, [r7, #23]
 8001278:	793b      	ldrb	r3, [r7, #4]
 800127a:	429a      	cmp	r2, r3
 800127c:	f4ff af49 	bcc.w	8001112 <er_oled_char+0x46>
            }
        }
    }
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	bd90      	pop	{r4, r7, pc}
 8001288:	08008928 	.word	0x08008928
 800128c:	08008d9c 	.word	0x08008d9c
 8001290:	0800938c 	.word	0x0800938c

08001294 <er_oled_string>:

void er_oled_string(uint8_t x, uint8_t y, const char *pString, uint8_t Size, uint8_t Mode, uint8_t* buffer)
{
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b085      	sub	sp, #20
 8001298:	af02      	add	r7, sp, #8
 800129a:	603a      	str	r2, [r7, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]
 80012a2:	460b      	mov	r3, r1
 80012a4:	71bb      	strb	r3, [r7, #6]
 80012a6:	4613      	mov	r3, r2
 80012a8:	717b      	strb	r3, [r7, #5]
    while (*pString != '\0') {
 80012aa:	e02c      	b.n	8001306 <er_oled_string+0x72>
        if (x > (WIDTH - Size / 2)) {
 80012ac:	79fa      	ldrb	r2, [r7, #7]
 80012ae:	797b      	ldrb	r3, [r7, #5]
 80012b0:	085b      	lsrs	r3, r3, #1
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f1c3 0348 	rsb	r3, r3, #72	; 0x48
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dd0f      	ble.n	80012dc <er_oled_string+0x48>
            x = 0;
 80012bc:	2300      	movs	r3, #0
 80012be:	71fb      	strb	r3, [r7, #7]
            y += Size;
 80012c0:	79ba      	ldrb	r2, [r7, #6]
 80012c2:	797b      	ldrb	r3, [r7, #5]
 80012c4:	4413      	add	r3, r2
 80012c6:	71bb      	strb	r3, [r7, #6]
            if (y > (HEIGHT - Size)) {
 80012c8:	79ba      	ldrb	r2, [r7, #6]
 80012ca:	797b      	ldrb	r3, [r7, #5]
 80012cc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80012d0:	429a      	cmp	r2, r3
 80012d2:	dd03      	ble.n	80012dc <er_oled_string+0x48>
                y = x = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	71fb      	strb	r3, [r7, #7]
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	71bb      	strb	r3, [r7, #6]
            }
        }

        er_oled_char(x, y, *pString, Size, Mode, buffer);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	781a      	ldrb	r2, [r3, #0]
 80012e0:	797c      	ldrb	r4, [r7, #5]
 80012e2:	79b9      	ldrb	r1, [r7, #6]
 80012e4:	79f8      	ldrb	r0, [r7, #7]
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	7e3b      	ldrb	r3, [r7, #24]
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	4623      	mov	r3, r4
 80012f0:	f7ff feec 	bl	80010cc <er_oled_char>
        x += Size / 2;
 80012f4:	797b      	ldrb	r3, [r7, #5]
 80012f6:	085b      	lsrs	r3, r3, #1
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4413      	add	r3, r2
 80012fe:	71fb      	strb	r3, [r7, #7]
        pString++;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3301      	adds	r3, #1
 8001304:	603b      	str	r3, [r7, #0]
    while (*pString != '\0') {
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d1ce      	bne.n	80012ac <er_oled_string+0x18>
    }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}

08001316 <er_oled_display>:
		}
	}
}

void er_oled_display(uint8_t* pBuf)
{    uint8_t page,i;
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
    for (page = 0; page < PAGES; page++) {
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e029      	b.n	8001378 <er_oled_display+0x62>
        command(0xB0 + page);/* set page address */
 8001324:	7bfb      	ldrb	r3, [r7, #15]
 8001326:	3b50      	subs	r3, #80	; 0x50
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2100      	movs	r1, #0
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fdbb 	bl	8000ea8 <I2C_Write_Byte>
        command(0x0c);   /* set low column address */
 8001332:	2100      	movs	r1, #0
 8001334:	200c      	movs	r0, #12
 8001336:	f7ff fdb7 	bl	8000ea8 <I2C_Write_Byte>
        command(0x11);  /* set high column address */
 800133a:	2100      	movs	r1, #0
 800133c:	2011      	movs	r0, #17
 800133e:	f7ff fdb3 	bl	8000ea8 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8001342:	2300      	movs	r3, #0
 8001344:	73bb      	strb	r3, [r7, #14]
 8001346:	e011      	b.n	800136c <er_oled_display+0x56>
          data(pBuf[i+page*WIDTH]);// write data one
 8001348:	7bb9      	ldrb	r1, [r7, #14]
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	4613      	mov	r3, r2
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2140      	movs	r1, #64	; 0x40
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fda1 	bl	8000ea8 <I2C_Write_Byte>
        for(i = 0; i< WIDTH; i++ ) {
 8001366:	7bbb      	ldrb	r3, [r7, #14]
 8001368:	3301      	adds	r3, #1
 800136a:	73bb      	strb	r3, [r7, #14]
 800136c:	7bbb      	ldrb	r3, [r7, #14]
 800136e:	2b47      	cmp	r3, #71	; 0x47
 8001370:	d9ea      	bls.n	8001348 <er_oled_display+0x32>
    for (page = 0; page < PAGES; page++) {
 8001372:	7bfb      	ldrb	r3, [r7, #15]
 8001374:	3301      	adds	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	2b04      	cmp	r3, #4
 800137c:	d9d2      	bls.n	8001324 <er_oled_display+0xe>
        }
    }
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800138e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001392:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001394:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4313      	orrs	r3, r2
 800139c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800139e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4013      	ands	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013aa:	68fb      	ldr	r3, [r7, #12]
}
 80013ac:	bf00      	nop
 80013ae:	3714      	adds	r7, #20
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	f5ad 7d11 	sub.w	sp, sp, #580	; 0x244
 80013be:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c0:	f000 ff2a 	bl	8002218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c4:	f000 f8c6 	bl	8001554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013c8:	f000 f9ba 	bl	8001740 <MX_GPIO_Init>
  MX_SPI1_Init();
 80013cc:	f000 f97a 	bl	80016c4 <MX_SPI1_Init>
  MX_I2C1_Init();
 80013d0:	f000 f938 	bl	8001644 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  DotStar_InitHandle dotstar;
  dotstar.spiHandle = &hspi1;
 80013d4:	4b5a      	ldr	r3, [pc, #360]	; (8001540 <main+0x188>)
 80013d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
  dotstar.numLEDs = NUM_PIXELS;
 80013da:	230c      	movs	r3, #12
 80013dc:	f8a7 31ec 	strh.w	r3, [r7, #492]	; 0x1ec
  dotstar.colorOrder = DOTSTAR_BGR;
 80013e0:	2306      	movs	r3, #6
 80013e2:	f887 31ee 	strb.w	r3, [r7, #494]	; 0x1ee
  Dotstar_Init(&dotstar);
 80013e6:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fc04 	bl	8000bf8 <Dotstar_Init>

  ds_clear();  //turn off
 80013f0:	f7ff fcee 	bl	8000dd0 <ds_clear>
  ds_show();
 80013f4:	f7ff fc50 	bl	8000c98 <ds_show>

  ds_setBrightness(40);
 80013f8:	2028      	movs	r0, #40	; 0x28
 80013fa:	f7ff fd43 	bl	8000e84 <ds_setBrightness>
  HAL_Delay(3000);
 80013fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001402:	f000 ff8f 	bl	8002324 <HAL_Delay>

  int head = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  uint32_t color = 0xFF0000;
 800140c:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001410:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

  uint8_t oled_buf[WIDTH * HEIGHT / 8];

  er_oled_begin();
 8001414:	f7ff fd66 	bl	8000ee4 <er_oled_begin>
  er_oled_clear(oled_buf);
 8001418:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fdc9 	bl	8000fb4 <er_oled_clear>
  er_oled_string(6, 14, "  DRAMSAY", 12, 1, oled_buf);
 8001422:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001426:	9301      	str	r3, [sp, #4]
 8001428:	2301      	movs	r3, #1
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	230c      	movs	r3, #12
 800142e:	4a45      	ldr	r2, [pc, #276]	; (8001544 <main+0x18c>)
 8001430:	210e      	movs	r1, #14
 8001432:	2006      	movs	r0, #6
 8001434:	f7ff ff2e 	bl	8001294 <er_oled_string>
  er_oled_display(oled_buf);
 8001438:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff6a 	bl	8001316 <er_oled_display>
  HAL_Delay(3000);
 8001442:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001446:	f000 ff6d 	bl	8002324 <HAL_Delay>


  	veml_Setup(hi2c1, VEML_100MS_POLLING);
 800144a:	4e3f      	ldr	r6, [pc, #252]	; (8001548 <main+0x190>)
 800144c:	2301      	movs	r3, #1
 800144e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001450:	466d      	mov	r5, sp
 8001452:	f106 0410 	add.w	r4, r6, #16
 8001456:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001458:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001466:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800146a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800146e:	f000 fb8b 	bl	8001b88 <veml_Setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  lux = veml_Get_Lux();
 8001472:	f000 fcc9 	bl	8001e08 <veml_Get_Lux>
 8001476:	ed87 0a7d 	vstr	s0, [r7, #500]	; 0x1f4
	  whitelux = veml_Get_White_Lux();
 800147a:	f000 fdad 	bl	8001fd8 <veml_Get_White_Lux>
 800147e:	ed87 0a7c 	vstr	s0, [r7, #496]	; 0x1f0

	  er_oled_clear(oled_buf);
 8001482:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fd94 	bl	8000fb4 <er_oled_clear>
	  sprintf(printstring, "  lux:%.1f", lux);
 800148c:	f8d7 01f4 	ldr.w	r0, [r7, #500]	; 0x1f4
 8001490:	f7ff f832 	bl	80004f8 <__aeabi_f2d>
 8001494:	4603      	mov	r3, r0
 8001496:	460c      	mov	r4, r1
 8001498:	4638      	mov	r0, r7
 800149a:	461a      	mov	r2, r3
 800149c:	4623      	mov	r3, r4
 800149e:	492b      	ldr	r1, [pc, #172]	; (800154c <main+0x194>)
 80014a0:	f004 fe9e 	bl	80061e0 <siprintf>
	  er_oled_string(6, 14, printstring, 12, 1, oled_buf);
 80014a4:	463a      	mov	r2, r7
 80014a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2301      	movs	r3, #1
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	230c      	movs	r3, #12
 80014b2:	210e      	movs	r1, #14
 80014b4:	2006      	movs	r0, #6
 80014b6:	f7ff feed 	bl	8001294 <er_oled_string>
	  sprintf(printstring, "white:%.1f", whitelux);
 80014ba:	f8d7 01f0 	ldr.w	r0, [r7, #496]	; 0x1f0
 80014be:	f7ff f81b 	bl	80004f8 <__aeabi_f2d>
 80014c2:	4603      	mov	r3, r0
 80014c4:	460c      	mov	r4, r1
 80014c6:	4638      	mov	r0, r7
 80014c8:	461a      	mov	r2, r3
 80014ca:	4623      	mov	r3, r4
 80014cc:	4920      	ldr	r1, [pc, #128]	; (8001550 <main+0x198>)
 80014ce:	f004 fe87 	bl	80061e0 <siprintf>
	  er_oled_string(6, 28, printstring, 12, 1, oled_buf);
 80014d2:	463a      	mov	r2, r7
 80014d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2301      	movs	r3, #1
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	230c      	movs	r3, #12
 80014e0:	211c      	movs	r1, #28
 80014e2:	2006      	movs	r0, #6
 80014e4:	f7ff fed6 	bl	8001294 <er_oled_string>
	  er_oled_display(oled_buf);
 80014e8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ff12 	bl	8001316 <er_oled_display>

	  ds_setPixelColor32B(head, color); // 'On' pixel at head
 80014f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fc8b 	bl	8000e18 <ds_setPixelColor32B>
	  ds_show();                        // Refresh strip
 8001502:	f7ff fbc9 	bl	8000c98 <ds_show>

	  if(++head >= NUM_PIXELS) {         // Increment head index.  Off end of strip?
 8001506:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800150a:	3301      	adds	r3, #1
 800150c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8001510:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001514:	2b0b      	cmp	r3, #11
 8001516:	dd0f      	ble.n	8001538 <main+0x180>
	     head = 0;                       //  Yes, reset head index to start
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
	     if((color >>= 8) == 0)          //  Next color (R->G->B) ... past blue now?
 800151e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d103      	bne.n	8001538 <main+0x180>
	       color = 0xFF0000;             //   Yes, reset to red
 8001530:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 8001534:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	  }

	  HAL_Delay(80);
 8001538:	2050      	movs	r0, #80	; 0x50
 800153a:	f000 fef3 	bl	8002324 <HAL_Delay>
	  lux = veml_Get_Lux();
 800153e:	e798      	b.n	8001472 <main+0xba>
 8001540:	20000268 	.word	0x20000268
 8001544:	080088d8 	.word	0x080088d8
 8001548:	2000021c 	.word	0x2000021c
 800154c:	080088e4 	.word	0x080088e4
 8001550:	080088f0 	.word	0x080088f0

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b0ae      	sub	sp, #184	; 0xb8
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800155e:	2248      	movs	r2, #72	; 0x48
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f004 f91f 	bl	80057a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
 8001578:	615a      	str	r2, [r3, #20]
 800157a:	619a      	str	r2, [r3, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157c:	1d3b      	adds	r3, r7, #4
 800157e:	2250      	movs	r2, #80	; 0x50
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f004 f90f 	bl	80057a6 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	4b2d      	ldr	r3, [pc, #180]	; (8001640 <SystemClock_Config+0xec>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001590:	4a2b      	ldr	r2, [pc, #172]	; (8001640 <SystemClock_Config+0xec>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b29      	ldr	r3, [pc, #164]	; (8001640 <SystemClock_Config+0xec>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_MSI;
 80015a4:	2322      	movs	r3, #34	; 0x22
 80015a6:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015ae:	2301      	movs	r3, #1
 80015b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015c0:	2360      	movs	r3, #96	; 0x60
 80015c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015cc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015d0:	4618      	mov	r0, r3
 80015d2:	f002 fb17 	bl	8003c04 <HAL_RCC_OscConfig>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d001      	beq.n	80015e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80015dc:	f000 f8f2 	bl	80017c4 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 80015e0:	236f      	movs	r3, #111	; 0x6f
 80015e2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015e4:	2300      	movs	r3, #0
 80015e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e8:	2300      	movs	r3, #0
 80015ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f002 fe8a 	bl	800431c <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800160e:	f000 f8d9 	bl	80017c4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_I2C1;
 8001612:	f242 0304 	movw	r3, #8196	; 0x2004
 8001616:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001618:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 800161e:	2300      	movs	r3, #0
 8001620:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8001622:	2310      	movs	r3, #16
 8001624:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	4618      	mov	r0, r3
 800162a:	f003 fa8c 	bl	8004b46 <HAL_RCCEx_PeriphCLKConfig>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001634:	f000 f8c6 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8001638:	bf00      	nop
 800163a:	37b8      	adds	r7, #184	; 0xb8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58000400 	.word	0x58000400

08001644 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001648:	4b1b      	ldr	r3, [pc, #108]	; (80016b8 <MX_I2C1_Init+0x74>)
 800164a:	4a1c      	ldr	r2, [pc, #112]	; (80016bc <MX_I2C1_Init+0x78>)
 800164c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F38;
 800164e:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001650:	4a1b      	ldr	r2, [pc, #108]	; (80016c0 <MX_I2C1_Init+0x7c>)
 8001652:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800165a:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <MX_I2C1_Init+0x74>)
 800165c:	2201      	movs	r2, #1
 800165e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001660:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001666:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C1_Init+0x74>)
 800166e:	2200      	movs	r2, #0
 8001670:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001674:	2200      	movs	r2, #0
 8001676:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C1_Init+0x74>)
 800167a:	2200      	movs	r2, #0
 800167c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800167e:	480e      	ldr	r0, [pc, #56]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001680:	f001 f8de 	bl	8002840 <HAL_I2C_Init>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800168a:	f000 f89b 	bl	80017c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800168e:	2100      	movs	r1, #0
 8001690:	4809      	ldr	r0, [pc, #36]	; (80016b8 <MX_I2C1_Init+0x74>)
 8001692:	f001 fea3 	bl	80033dc <HAL_I2CEx_ConfigAnalogFilter>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800169c:	f000 f892 	bl	80017c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016a0:	2100      	movs	r1, #0
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_I2C1_Init+0x74>)
 80016a4:	f001 fee5 	bl	8003472 <HAL_I2CEx_ConfigDigitalFilter>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016ae:	f000 f889 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	2000021c 	.word	0x2000021c
 80016bc:	40005400 	.word	0x40005400
 80016c0:	00300f38 	.word	0x00300f38

080016c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ca:	4a1c      	ldr	r2, [pc, #112]	; (800173c <MX_SPI1_Init+0x78>)
 80016cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016ce:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016d6:	4b18      	ldr	r3, [pc, #96]	; (8001738 <MX_SPI1_Init+0x74>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016dc:	4b16      	ldr	r3, [pc, #88]	; (8001738 <MX_SPI1_Init+0x74>)
 80016de:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e4:	4b14      	ldr	r3, [pc, #80]	; (8001738 <MX_SPI1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ea:	4b13      	ldr	r3, [pc, #76]	; (8001738 <MX_SPI1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <MX_SPI1_Init+0x74>)
 80016f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <MX_SPI1_Init+0x74>)
 80016fa:	2208      	movs	r2, #8
 80016fc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	; (8001738 <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001704:	4b0c      	ldr	r3, [pc, #48]	; (8001738 <MX_SPI1_Init+0x74>)
 8001706:	2200      	movs	r2, #0
 8001708:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170a:	4b0b      	ldr	r3, [pc, #44]	; (8001738 <MX_SPI1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001710:	4b09      	ldr	r3, [pc, #36]	; (8001738 <MX_SPI1_Init+0x74>)
 8001712:	2207      	movs	r2, #7
 8001714:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001716:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_SPI1_Init+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800171c:	4b06      	ldr	r3, [pc, #24]	; (8001738 <MX_SPI1_Init+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001722:	4805      	ldr	r0, [pc, #20]	; (8001738 <MX_SPI1_Init+0x74>)
 8001724:	f003 fc95 	bl	8005052 <HAL_SPI_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800172e:	f000 f849 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000268 	.word	0x20000268
 800173c:	40013000 	.word	0x40013000

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	1d3b      	adds	r3, r7, #4
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	2002      	movs	r0, #2
 8001756:	f7ff fe16 	bl	8001386 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800175a:	2001      	movs	r0, #1
 800175c:	f7ff fe13 	bl	8001386 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001760:	2201      	movs	r2, #1
 8001762:	2110      	movs	r1, #16
 8001764:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001768:	f001 f852 	bl	8002810 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800176c:	2310      	movs	r3, #16
 800176e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f000 fed4 	bl	8002530 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_RESET);
 8001788:	2200      	movs	r2, #0
 800178a:	2101      	movs	r1, #1
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <MX_GPIO_Init+0x80>)
 800178e:	f001 f83f 	bl	8002810 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : OLED_RESET_Pin */
    GPIO_InitStruct.Pin = OLED_RESET_Pin;
 8001792:	2301      	movs	r3, #1
 8001794:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(OLED_RESET_GPIO_Port, &GPIO_InitStruct);
 80017a2:	1d3b      	adds	r3, r7, #4
 80017a4:	4619      	mov	r1, r3
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <MX_GPIO_Init+0x80>)
 80017a8:	f000 fec2 	bl	8002530 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(OLED_RESET_GPIO_Port, OLED_RESET_Pin, GPIO_PIN_SET);
 80017ac:	2201      	movs	r2, #1
 80017ae:	2101      	movs	r1, #1
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <MX_GPIO_Init+0x80>)
 80017b2:	f001 f82d 	bl	8002810 <HAL_GPIO_WritePin>

}
 80017b6:	bf00      	nop
 80017b8:	3718      	adds	r7, #24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	48000400 	.word	0x48000400

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ca:	e7fe      	b.n	80017ca <Error_Handler+0x6>

080017cc <LL_AHB2_GRP1_EnableClock>:
{
 80017cc:	b480      	push	{r7}
 80017ce:	b085      	sub	sp, #20
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4013      	ands	r3, r2
 80017ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017f0:	68fb      	ldr	r3, [r7, #12]
}
 80017f2:	bf00      	nop
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80017fe:	b480      	push	{r7}
 8001800:	b085      	sub	sp, #20
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800180c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	4313      	orrs	r3, r2
 8001814:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800181a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	4013      	ands	r3, r2
 8001820:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001822:	68fb      	ldr	r3, [r7, #12]
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001838:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800183c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800183e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4313      	orrs	r3, r2
 8001846:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4013      	ands	r3, r2
 8001852:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001854:	68fb      	ldr	r3, [r7, #12]
}
 8001856:	bf00      	nop
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001862:	b480      	push	{r7}
 8001864:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b088      	sub	sp, #32
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0f      	ldr	r2, [pc, #60]	; (80018cc <HAL_I2C_MspInit+0x5c>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d117      	bne.n	80018c2 <HAL_I2C_MspInit+0x52>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff ff9a 	bl	80017cc <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001898:	f44f 7340 	mov.w	r3, #768	; 0x300
 800189c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800189e:	2312      	movs	r3, #18
 80018a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018a2:	2301      	movs	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018aa:	2304      	movs	r3, #4
 80018ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 030c 	add.w	r3, r7, #12
 80018b2:	4619      	mov	r1, r3
 80018b4:	4806      	ldr	r0, [pc, #24]	; (80018d0 <HAL_I2C_MspInit+0x60>)
 80018b6:	f000 fe3b 	bl	8002530 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018ba:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80018be:	f7ff ff9e 	bl	80017fe <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3720      	adds	r7, #32
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40005400 	.word	0x40005400
 80018d0:	48000400 	.word	0x48000400

080018d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b088      	sub	sp, #32
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <HAL_SPI_MspInit+0x5c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d117      	bne.n	8001926 <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80018fa:	f7ff ff99 	bl	8001830 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2001      	movs	r0, #1
 8001900:	f7ff ff64 	bl	80017cc <LL_AHB2_GRP1_EnableClock>
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 8001904:	2382      	movs	r3, #130	; 0x82
 8001906:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001908:	2302      	movs	r3, #2
 800190a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001910:	2300      	movs	r3, #0
 8001912:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001914:	2305      	movs	r3, #5
 8001916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4619      	mov	r1, r3
 800191e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001922:	f000 fe05 	bl	8002530 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001926:	bf00      	nop
 8001928:	3720      	adds	r7, #32
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40013000 	.word	0x40013000

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001944:	e7fe      	b.n	8001944 <MemManage_Handler+0x4>

08001946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194a:	e7fe      	b.n	800194a <BusFault_Handler+0x4>

0800194c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001950:	e7fe      	b.n	8001950 <UsageFault_Handler+0x4>

08001952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr

08001960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001964:	bf00      	nop
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001980:	f000 fca4 	bl	80022cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	; (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	; (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	; (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	; (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	; (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f003 feb8 	bl	800572c <__errno>
 80019bc:	4602      	mov	r2, r0
 80019be:	230c      	movs	r3, #12
 80019c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	; (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20030000 	.word	0x20030000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	20000200 	.word	0x20000200
 80019f0:	20000328 	.word	0x20000328

080019f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80019f8:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <SystemInit+0xa0>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <SystemInit+0xa0>)
 8001a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a04:	4a23      	ldr	r2, [pc, #140]	; (8001a94 <SystemInit+0xa0>)
 8001a06:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a0a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001a0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001a1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a22:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001a26:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8001a28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <SystemInit+0xa4>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8001a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a44:	f023 0305 	bic.w	r3, r3, #5
 8001a48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001a60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <SystemInit+0xa8>)
 8001a66:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8001a68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a6c:	4a0b      	ldr	r2, [pc, #44]	; (8001a9c <SystemInit+0xa8>)
 8001a6e:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	e000ed00 	.word	0xe000ed00
 8001a98:	faf6fefb 	.word	0xfaf6fefb
 8001a9c:	22041000 	.word	0x22041000

08001aa0 <veml_PushState>:
  HAL_I2C_Master_Transmit(&VEML_State.i2cHandle, VEML_ADDR, Data, 3, HAL_MAX_DELAY);
}



HAL_StatusTypeDef veml_PushState(){ //helper to push power/gain/it to VEML7700
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af04      	add	r7, sp, #16

	//main config register; gain and integration time
	HAL_StatusTypeDef resp = HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	71fb      	strb	r3, [r7, #7]
	uint8_t out_data[2] = {0x00, 0x00};
 8001aaa:	2300      	movs	r3, #0
 8001aac:	713b      	strb	r3, [r7, #4]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	717b      	strb	r3, [r7, #5]
	out_data[1] |= (VEML_State.gain << 3);
 8001ab2:	797b      	ldrb	r3, [r7, #5]
 8001ab4:	b25a      	sxtb	r2, r3
 8001ab6:	4b33      	ldr	r3, [pc, #204]	; (8001b84 <veml_PushState+0xe4>)
 8001ab8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001abc:	00db      	lsls	r3, r3, #3
 8001abe:	b25b      	sxtb	r3, r3
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	717b      	strb	r3, [r7, #5]
	out_data[1] |= ((VEML_State.integrationTime & 0x0C) >> 2);
 8001ac8:	797b      	ldrb	r3, [r7, #5]
 8001aca:	b25a      	sxtb	r2, r3
 8001acc:	4b2d      	ldr	r3, [pc, #180]	; (8001b84 <veml_PushState+0xe4>)
 8001ace:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001ad2:	109b      	asrs	r3, r3, #2
 8001ad4:	b25b      	sxtb	r3, r3
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	b25b      	sxtb	r3, r3
 8001adc:	4313      	orrs	r3, r2
 8001ade:	b25b      	sxtb	r3, r3
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	717b      	strb	r3, [r7, #5]
	out_data[0] |= ((VEML_State.integrationTime & 0x03) << 6);
 8001ae4:	793b      	ldrb	r3, [r7, #4]
 8001ae6:	b25a      	sxtb	r2, r3
 8001ae8:	4b26      	ldr	r3, [pc, #152]	; (8001b84 <veml_PushState+0xe4>)
 8001aea:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001aee:	019b      	lsls	r3, r3, #6
 8001af0:	b25b      	sxtb	r3, r3
 8001af2:	4313      	orrs	r3, r2
 8001af4:	b25b      	sxtb	r3, r3
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	713b      	strb	r3, [r7, #4]
	out_data[0] |= (VEML7700_PERS_1 << 4);
 8001afa:	793b      	ldrb	r3, [r7, #4]
 8001afc:	713b      	strb	r3, [r7, #4]

	//out_data |= (VEML_State.gain << 11);
	//out_data |= (VEML_State.integrationTime << 6);
	//out_data |= (VEML7700_PERS_1 << 4);

	while (resp == HAL_ERROR){
 8001afe:	e00e      	b.n	8001b1e <veml_PushState+0x7e>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	9302      	str	r3, [sp, #8]
 8001b06:	2302      	movs	r3, #2
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2200      	movs	r2, #0
 8001b12:	2120      	movs	r1, #32
 8001b14:	481b      	ldr	r0, [pc, #108]	; (8001b84 <veml_PushState+0xe4>)
 8001b16:	f001 f817 	bl	8002b48 <HAL_I2C_Mem_Write>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d0ed      	beq.n	8001b00 <veml_PushState+0x60>
	  						   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	//power save config register
	resp = HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	71fb      	strb	r3, [r7, #7]
	out_data[0] = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	713b      	strb	r3, [r7, #4]
	out_data[1] = 0x00;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	717b      	strb	r3, [r7, #5]

	out_data[0] |= (VEML_State.powerSaveMode << 1);
 8001b30:	793b      	ldrb	r3, [r7, #4]
 8001b32:	b25a      	sxtb	r2, r3
 8001b34:	4b13      	ldr	r3, [pc, #76]	; (8001b84 <veml_PushState+0xe4>)
 8001b36:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	b25b      	sxtb	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	713b      	strb	r3, [r7, #4]
	out_data[0] |= VEML_State.powerSaveEnable;
 8001b46:	793a      	ldrb	r2, [r7, #4]
 8001b48:	4b0e      	ldr	r3, [pc, #56]	; (8001b84 <veml_PushState+0xe4>)
 8001b4a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	713b      	strb	r3, [r7, #4]


	//out_data |= (VEML_State.powerSaveMode << 1);
	//out_data |= VEML_State.powerSaveEnable;

	while (resp == HAL_ERROR){
 8001b54:	e00e      	b.n	8001b74 <veml_PushState+0xd4>
	  resp = HAL_I2C_Mem_Write(&(VEML_State.i2cHandle),
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	2203      	movs	r2, #3
 8001b68:	2120      	movs	r1, #32
 8001b6a:	4806      	ldr	r0, [pc, #24]	; (8001b84 <veml_PushState+0xe4>)
 8001b6c:	f000 ffec 	bl	8002b48 <HAL_I2C_Mem_Write>
 8001b70:	4603      	mov	r3, r0
 8001b72:	71fb      	strb	r3, [r7, #7]
	while (resp == HAL_ERROR){
 8001b74:	79fb      	ldrb	r3, [r7, #7]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d0ed      	beq.n	8001b56 <veml_PushState+0xb6>
							   out_data, 2,
							   HAL_MAX_DELAY);
	  //I2C_Write_16b(VEML7700_ALS_CONFIG, out_data);
	}

	return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	200002cc 	.word	0x200002cc

08001b88 <veml_Setup>:

HAL_StatusTypeDef veml_Setup(I2C_HandleTypeDef i2cHandle, VEML7700_Mode_t Mode){
 8001b88:	b084      	sub	sp, #16
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	f107 0c08 	add.w	ip, r7, #8
 8001b92:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	VEML_State.i2cHandle = i2cHandle;
 8001b96:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <veml_Setup+0xb0>)
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f107 0108 	add.w	r1, r7, #8
 8001b9e:	234c      	movs	r3, #76	; 0x4c
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	f003 fdf5 	bl	8005790 <memcpy>
	VEML_State.autoGain = 0;
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <veml_Setup+0xb0>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	switch (Mode){
 8001bae:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d014      	beq.n	8001be0 <veml_Setup+0x58>
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d023      	beq.n	8001c02 <veml_Setup+0x7a>
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d132      	bne.n	8001c24 <veml_Setup+0x9c>
		case VEML_5S_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE4;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <veml_Setup+0xb0>)
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x01;
 8001bc6:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <veml_Setup+0xb0>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_1_4;
 8001bce:	4b1a      	ldr	r3, [pc, #104]	; (8001c38 <veml_Setup+0xb0>)
 8001bd0:	2203      	movs	r2, #3
 8001bd2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_800MS;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <veml_Setup+0xb0>)
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8001bde:	e021      	b.n	8001c24 <veml_Setup+0x9c>

		case VEML_100MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 8001be0:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <veml_Setup+0xb0>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <veml_Setup+0xb0>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_1_4;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <veml_Setup+0xb0>)
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_100MS;
 8001bf8:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <veml_Setup+0xb0>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8001c00:	e010      	b.n	8001c24 <veml_Setup+0x9c>

		case VEML_25MS_POLLING:
			VEML_State.powerSaveMode = VEML7700_POWERSAVE_MODE1;
 8001c02:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <veml_Setup+0xb0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			VEML_State.powerSaveEnable = 0x00;
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <veml_Setup+0xb0>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			VEML_State.gain = VEML7700_GAIN_1_4;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <veml_Setup+0xb0>)
 8001c14:	2203      	movs	r2, #3
 8001c16:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
			VEML_State.integrationTime = VEML7700_IT_25MS;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <veml_Setup+0xb0>)
 8001c1c:	220c      	movs	r2, #12
 8001c1e:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
			break;
 8001c22:	bf00      	nop
	}

	return veml_PushState();
 8001c24:	f7ff ff3c 	bl	8001aa0 <veml_PushState>
 8001c28:	4603      	mov	r3, r0

}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c32:	b004      	add	sp, #16
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200002cc 	.word	0x200002cc

08001c3c <autoGain>:
HAL_StatusTypeDef veml_Set_IntegrationTime(uint8_t integrationTime){
	VEML_State.integrationTime = integrationTime;
	return veml_PushState();
}

void autoGain(uint16_t raw_data){
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]

	if (VEML_State.autoGain){ //if we are autoGaining
 8001c46:	4b29      	ldr	r3, [pc, #164]	; (8001cec <autoGain+0xb0>)
 8001c48:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d049      	beq.n	8001ce4 <autoGain+0xa8>

		//if raw value is > ~90% of 0xFFFF and we're not at min gain
		if (VEML_State.gain != VEML7700_GAIN_1_8 && raw_data > 0xE665) {
 8001c50:	4b26      	ldr	r3, [pc, #152]	; (8001cec <autoGain+0xb0>)
 8001c52:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d01f      	beq.n	8001c9a <autoGain+0x5e>
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	f24e 6265 	movw	r2, #58981	; 0xe665
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d91a      	bls.n	8001c9a <autoGain+0x5e>
			switch (VEML_State.gain){
 8001c64:	4b21      	ldr	r3, [pc, #132]	; (8001cec <autoGain+0xb0>)
 8001c66:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d004      	beq.n	8001c78 <autoGain+0x3c>
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d00c      	beq.n	8001c8c <autoGain+0x50>
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <autoGain+0x46>
 8001c76:	e00e      	b.n	8001c96 <autoGain+0x5a>
				case VEML7700_GAIN_2:
					VEML_State.gain = VEML7700_GAIN_1;
 8001c78:	4b1c      	ldr	r3, [pc, #112]	; (8001cec <autoGain+0xb0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8001c80:	e009      	b.n	8001c96 <autoGain+0x5a>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_1_4;
 8001c82:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <autoGain+0xb0>)
 8001c84:	2203      	movs	r2, #3
 8001c86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8001c8a:	e004      	b.n	8001c96 <autoGain+0x5a>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1_8;
 8001c8c:	4b17      	ldr	r3, [pc, #92]	; (8001cec <autoGain+0xb0>)
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8001c94:	bf00      	nop
			}
			veml_PushState();
 8001c96:	f7ff ff03 	bl	8001aa0 <veml_PushState>
		}

		//if raw value is < ~45% of 0xFFFF and we're not at max gain
		if (VEML_State.gain != VEML7700_GAIN_2 && raw_data < 0x7332) {
 8001c9a:	4b14      	ldr	r3, [pc, #80]	; (8001cec <autoGain+0xb0>)
 8001c9c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d01f      	beq.n	8001ce4 <autoGain+0xa8>
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	f247 3231 	movw	r2, #29489	; 0x7331
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d81a      	bhi.n	8001ce4 <autoGain+0xa8>
			switch (VEML_State.gain){
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <autoGain+0xb0>)
 8001cb0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d004      	beq.n	8001cc2 <autoGain+0x86>
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d007      	beq.n	8001ccc <autoGain+0x90>
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d00a      	beq.n	8001cd6 <autoGain+0x9a>
 8001cc0:	e00e      	b.n	8001ce0 <autoGain+0xa4>
				case VEML7700_GAIN_1_8:
					VEML_State.gain = VEML7700_GAIN_1_4;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <autoGain+0xb0>)
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8001cca:	e009      	b.n	8001ce0 <autoGain+0xa4>
				case VEML7700_GAIN_1_4:
					VEML_State.gain = VEML7700_GAIN_1;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <autoGain+0xb0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
				    break;
 8001cd4:	e004      	b.n	8001ce0 <autoGain+0xa4>
				case VEML7700_GAIN_1:
					VEML_State.gain = VEML7700_GAIN_2;
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <autoGain+0xb0>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
					break;
 8001cde:	bf00      	nop
			}
			veml_PushState();
 8001ce0:	f7ff fede 	bl	8001aa0 <veml_PushState>
		}
	}
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200002cc 	.word	0x200002cc

08001cf0 <veml_norm_data>:

float veml_norm_data(uint16_t raw_data){
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	80fb      	strh	r3, [r7, #6]

	float lux = (float)raw_data;
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d04:	edc7 7a03 	vstr	s15, [r7, #12]

	switch (VEML_State.gain){
 8001d08:	4b3d      	ldr	r3, [pc, #244]	; (8001e00 <veml_norm_data+0x110>)
 8001d0a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d015      	beq.n	8001d3e <veml_norm_data+0x4e>
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d00a      	beq.n	8001d2c <veml_norm_data+0x3c>
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d11a      	bne.n	8001d50 <veml_norm_data+0x60>
		case VEML7700_GAIN_2:
			lux /= 2.0;
 8001d1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001d1e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001d22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d26:	edc7 7a03 	vstr	s15, [r7, #12]
			break;
 8001d2a:	e011      	b.n	8001d50 <veml_norm_data+0x60>
		case VEML7700_GAIN_1_4:
		    lux *= 4;
 8001d2c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d30:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d38:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 8001d3c:	e008      	b.n	8001d50 <veml_norm_data+0x60>
		case VEML7700_GAIN_1_8:
		    lux *= 8;
 8001d3e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d42:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001d46:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d4a:	edc7 7a03 	vstr	s15, [r7, #12]
		    break;
 8001d4e:	bf00      	nop
	}

	switch (VEML_State.integrationTime){
 8001d50:	4b2b      	ldr	r3, [pc, #172]	; (8001e00 <veml_norm_data+0x110>)
 8001d52:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001d56:	3b01      	subs	r3, #1
 8001d58:	2b0b      	cmp	r3, #11
 8001d5a:	d846      	bhi.n	8001dea <veml_norm_data+0xfa>
 8001d5c:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <veml_norm_data+0x74>)
 8001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d62:	bf00      	nop
 8001d64:	08001db5 	.word	0x08001db5
 8001d68:	08001dc7 	.word	0x08001dc7
 8001d6c:	08001dd9 	.word	0x08001dd9
 8001d70:	08001deb 	.word	0x08001deb
 8001d74:	08001deb 	.word	0x08001deb
 8001d78:	08001deb 	.word	0x08001deb
 8001d7c:	08001deb 	.word	0x08001deb
 8001d80:	08001da7 	.word	0x08001da7
 8001d84:	08001deb 	.word	0x08001deb
 8001d88:	08001deb 	.word	0x08001deb
 8001d8c:	08001deb 	.word	0x08001deb
 8001d90:	08001d95 	.word	0x08001d95
	  	case VEML7700_IT_25MS:
	  		lux *= 4;
 8001d94:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d98:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001da0:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8001da4:	e021      	b.n	8001dea <veml_norm_data+0xfa>
	  	case VEML7700_IT_50MS:
	  		lux *= 2;
 8001da6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001daa:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001dae:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8001db2:	e01a      	b.n	8001dea <veml_norm_data+0xfa>
	  	case VEML7700_IT_200MS:
	  		lux /= 2.0;
 8001db4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001db8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001dbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dc0:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8001dc4:	e011      	b.n	8001dea <veml_norm_data+0xfa>
	  	case VEML7700_IT_400MS:
	  		lux /= 4.0;
 8001dc6:	ed97 7a03 	vldr	s14, [r7, #12]
 8001dca:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001dce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd2:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8001dd6:	e008      	b.n	8001dea <veml_norm_data+0xfa>
	  	case VEML7700_IT_800MS:
	  		lux /= 8.0;
 8001dd8:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ddc:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
 8001de0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de4:	edc7 7a03 	vstr	s15, [r7, #12]
	  		break;
 8001de8:	bf00      	nop
	}

	return lux;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	ee07 3a90 	vmov	s15, r3
}
 8001df0:	eeb0 0a67 	vmov.f32	s0, s15
 8001df4:	3714      	adds	r7, #20
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	200002cc 	.word	0x200002cc
 8001e04:	00000000 	.word	0x00000000

08001e08 <veml_Get_Lux>:

float veml_Get_Lux(){
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b088      	sub	sp, #32
 8001e0c:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 8001e0e:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001e12:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 8001e14:	2300      	movs	r3, #0
 8001e16:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 8001e1c:	e011      	b.n	8001e42 <veml_Get_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	9302      	str	r3, [sp, #8]
 8001e24:	2302      	movs	r3, #2
 8001e26:	9301      	str	r3, [sp, #4]
 8001e28:	463b      	mov	r3, r7
 8001e2a:	9300      	str	r3, [sp, #0]
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	2204      	movs	r2, #4
 8001e30:	2120      	movs	r1, #32
 8001e32:	4867      	ldr	r0, [pc, #412]	; (8001fd0 <veml_Get_Lux+0x1c8>)
 8001e34:	f000 ff9c 	bl	8002d70 <HAL_I2C_Mem_Read>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	737b      	strb	r3, [r7, #13]
							  HAL_MAX_DELAY);

	  //resp = HAL_I2C_Master_Receive(&VEML_State.i2cHandle,
	  //	  	  	  VEML_ADDR,&buffer, 2,
	//			  HAL_MAX_DELAY);
	  current_tries++;
 8001e3c:	89fb      	ldrh	r3, [r7, #14]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 8001e42:	7b7b      	ldrb	r3, [r7, #13]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d103      	bne.n	8001e50 <veml_Get_Lux+0x48>
 8001e48:	89fa      	ldrh	r2, [r7, #14]
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d3e6      	bcc.n	8001e1e <veml_Get_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 8001e50:	89fa      	ldrh	r2, [r7, #14]
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d301      	bcc.n	8001e5c <veml_Get_Lux+0x54>
	  return -1;
 8001e58:	4b5e      	ldr	r3, [pc, #376]	; (8001fd4 <veml_Get_Lux+0x1cc>)
 8001e5a:	e090      	b.n	8001f7e <veml_Get_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	b21a      	sxth	r2, r3
 8001e62:	783b      	ldrb	r3, [r7, #0]
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	4313      	orrs	r3, r2
 8001e68:	b21b      	sxth	r3, r3
 8001e6a:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fee4 	bl	8001c3c <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 8001e74:	88bb      	ldrh	r3, [r7, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff ff3a 	bl	8001cf0 <veml_norm_data>
 8001e7c:	ee10 3a10 	vmov	r3, s0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb39 	bl	80004f8 <__aeabi_f2d>
 8001e86:	a342      	add	r3, pc, #264	; (adr r3, 8001f90 <veml_Get_Lux+0x188>)
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f7fe fb8c 	bl	80005a8 <__aeabi_dmul>
 8001e90:	4603      	mov	r3, r0
 8001e92:	460c      	mov	r4, r1
 8001e94:	4618      	mov	r0, r3
 8001e96:	4621      	mov	r1, r4
 8001e98:	f7fe fe5e 	bl	8000b58 <__aeabi_d2f>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8001ea0:	4b4b      	ldr	r3, [pc, #300]	; (8001fd0 <veml_Get_Lux+0x1c8>)
 8001ea2:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d168      	bne.n	8001f7c <veml_Get_Lux+0x174>
 8001eaa:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <veml_Get_Lux+0x1c8>)
 8001eac:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8001eb0:	2b0c      	cmp	r3, #12
 8001eb2:	d163      	bne.n	8001f7c <veml_Get_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 8001eb4:	68b8      	ldr	r0, [r7, #8]
 8001eb6:	f7fe fb1f 	bl	80004f8 <__aeabi_f2d>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	460c      	mov	r4, r1
 8001ebe:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001f98 <veml_Get_Lux+0x190>
 8001ec2:	ec44 3b10 	vmov	d0, r3, r4
 8001ec6:	f005 fca1 	bl	800780c <pow>
 8001eca:	ec51 0b10 	vmov	r0, r1, d0
 8001ece:	a334      	add	r3, pc, #208	; (adr r3, 8001fa0 <veml_Get_Lux+0x198>)
 8001ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed4:	f7fe fb68 	bl	80005a8 <__aeabi_dmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	460c      	mov	r4, r1
 8001edc:	4625      	mov	r5, r4
 8001ede:	461c      	mov	r4, r3
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fb09 	bl	80004f8 <__aeabi_f2d>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001fa8 <veml_Get_Lux+0x1a0>
 8001eee:	ec43 2b10 	vmov	d0, r2, r3
 8001ef2:	f005 fc8b 	bl	800780c <pow>
 8001ef6:	ec51 0b10 	vmov	r0, r1, d0
 8001efa:	a32d      	add	r3, pc, #180	; (adr r3, 8001fb0 <veml_Get_Lux+0x1a8>)
 8001efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f00:	f7fe fb52 	bl	80005a8 <__aeabi_dmul>
 8001f04:	4602      	mov	r2, r0
 8001f06:	460b      	mov	r3, r1
 8001f08:	4620      	mov	r0, r4
 8001f0a:	4629      	mov	r1, r5
 8001f0c:	f7fe f994 	bl	8000238 <__aeabi_dsub>
 8001f10:	4603      	mov	r3, r0
 8001f12:	460c      	mov	r4, r1
 8001f14:	4625      	mov	r5, r4
 8001f16:	461c      	mov	r4, r3
 8001f18:	68b8      	ldr	r0, [r7, #8]
 8001f1a:	f7fe faed 	bl	80004f8 <__aeabi_f2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8001fb8 <veml_Get_Lux+0x1b0>
 8001f26:	ec43 2b10 	vmov	d0, r2, r3
 8001f2a:	f005 fc6f 	bl	800780c <pow>
 8001f2e:	ec51 0b10 	vmov	r0, r1, d0
 8001f32:	a323      	add	r3, pc, #140	; (adr r3, 8001fc0 <veml_Get_Lux+0x1b8>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb36 	bl	80005a8 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4620      	mov	r0, r4
 8001f42:	4629      	mov	r1, r5
 8001f44:	f7fe f97a 	bl	800023c <__adddf3>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	460c      	mov	r4, r1
 8001f4c:	4625      	mov	r5, r4
 8001f4e:	461c      	mov	r4, r3
 8001f50:	68b8      	ldr	r0, [r7, #8]
 8001f52:	f7fe fad1 	bl	80004f8 <__aeabi_f2d>
 8001f56:	a31c      	add	r3, pc, #112	; (adr r3, 8001fc8 <veml_Get_Lux+0x1c0>)
 8001f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f5c:	f7fe fb24 	bl	80005a8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4620      	mov	r0, r4
 8001f66:	4629      	mov	r1, r5
 8001f68:	f7fe f968 	bl	800023c <__adddf3>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	460c      	mov	r4, r1
 8001f70:	4618      	mov	r0, r3
 8001f72:	4621      	mov	r1, r4
 8001f74:	f7fe fdf0 	bl	8000b58 <__aeabi_d2f>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	ee07 3a90 	vmov	s15, r3
}
 8001f82:	eeb0 0a67 	vmov.f32	s0, s15
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8001f8c:	f3af 8000 	nop.w
 8001f90:	487fcb92 	.word	0x487fcb92
 8001f94:	3fad7dbf 	.word	0x3fad7dbf
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	40100000 	.word	0x40100000
 8001fa0:	b18f283b 	.word	0xb18f283b
 8001fa4:	3d65287a 	.word	0x3d65287a
 8001fa8:	00000000 	.word	0x00000000
 8001fac:	40080000 	.word	0x40080000
 8001fb0:	c91ef46e 	.word	0xc91ef46e
 8001fb4:	3e442b86 	.word	0x3e442b86
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	40000000 	.word	0x40000000
 8001fc0:	2e18cab0 	.word	0x2e18cab0
 8001fc4:	3f155c91 	.word	0x3f155c91
 8001fc8:	b98c7e28 	.word	0xb98c7e28
 8001fcc:	3ff0096b 	.word	0x3ff0096b
 8001fd0:	200002cc 	.word	0x200002cc
 8001fd4:	bf800000 	.word	0xbf800000

08001fd8 <veml_Get_White_Lux>:

float veml_Get_White_Lux(){
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b088      	sub	sp, #32
 8001fdc:	af04      	add	r7, sp, #16

	const uint16_t max_tries = 300;
 8001fde:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001fe2:	80fb      	strh	r3, [r7, #6]
	uint16_t current_tries = 0;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	81fb      	strh	r3, [r7, #14]

	uint8_t buffer[2];

	HAL_StatusTypeDef resp = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	737b      	strb	r3, [r7, #13]

	while (resp == HAL_ERROR && current_tries < max_tries){
 8001fec:	e011      	b.n	8002012 <veml_Get_White_Lux+0x3a>
	  resp = HAL_I2C_Mem_Read(&(VEML_State.i2cHandle),
 8001fee:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff2:	9302      	str	r3, [sp, #8]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	9301      	str	r3, [sp, #4]
 8001ff8:	463b      	mov	r3, r7
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	2205      	movs	r2, #5
 8002000:	2120      	movs	r1, #32
 8002002:	4867      	ldr	r0, [pc, #412]	; (80021a0 <veml_Get_White_Lux+0x1c8>)
 8002004:	f000 feb4 	bl	8002d70 <HAL_I2C_Mem_Read>
 8002008:	4603      	mov	r3, r0
 800200a:	737b      	strb	r3, [r7, #13]
			  	  	  	  	  VEML_ADDR,
							  VEML7700_WHITE_DATA, 1,
							  buffer, 2,
							  HAL_MAX_DELAY);
	  current_tries++;
 800200c:	89fb      	ldrh	r3, [r7, #14]
 800200e:	3301      	adds	r3, #1
 8002010:	81fb      	strh	r3, [r7, #14]
	while (resp == HAL_ERROR && current_tries < max_tries){
 8002012:	7b7b      	ldrb	r3, [r7, #13]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d103      	bne.n	8002020 <veml_Get_White_Lux+0x48>
 8002018:	89fa      	ldrh	r2, [r7, #14]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	429a      	cmp	r2, r3
 800201e:	d3e6      	bcc.n	8001fee <veml_Get_White_Lux+0x16>
	}

	if (current_tries >= max_tries) {
 8002020:	89fa      	ldrh	r2, [r7, #14]
 8002022:	88fb      	ldrh	r3, [r7, #6]
 8002024:	429a      	cmp	r2, r3
 8002026:	d301      	bcc.n	800202c <veml_Get_White_Lux+0x54>
	  return -1;
 8002028:	4b5e      	ldr	r3, [pc, #376]	; (80021a4 <veml_Get_White_Lux+0x1cc>)
 800202a:	e090      	b.n	800214e <veml_Get_White_Lux+0x176>
	}

	uint16_t data = (buffer[1] << 8) | buffer[0];
 800202c:	787b      	ldrb	r3, [r7, #1]
 800202e:	021b      	lsls	r3, r3, #8
 8002030:	b21a      	sxth	r2, r3
 8002032:	783b      	ldrb	r3, [r7, #0]
 8002034:	b21b      	sxth	r3, r3
 8002036:	4313      	orrs	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	80bb      	strh	r3, [r7, #4]

	autoGain(data);
 800203c:	88bb      	ldrh	r3, [r7, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fdfc 	bl	8001c3c <autoGain>

	float lux = (veml_norm_data(data) * 0.0576);
 8002044:	88bb      	ldrh	r3, [r7, #4]
 8002046:	4618      	mov	r0, r3
 8002048:	f7ff fe52 	bl	8001cf0 <veml_norm_data>
 800204c:	ee10 3a10 	vmov	r3, s0
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa51 	bl	80004f8 <__aeabi_f2d>
 8002056:	a342      	add	r3, pc, #264	; (adr r3, 8002160 <veml_Get_White_Lux+0x188>)
 8002058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800205c:	f7fe faa4 	bl	80005a8 <__aeabi_dmul>
 8002060:	4603      	mov	r3, r0
 8002062:	460c      	mov	r4, r1
 8002064:	4618      	mov	r0, r3
 8002066:	4621      	mov	r1, r4
 8002068:	f7fe fd76 	bl	8000b58 <__aeabi_d2f>
 800206c:	4603      	mov	r3, r0
 800206e:	60bb      	str	r3, [r7, #8]

	if (VEML_State.gain == VEML7700_GAIN_1_8 && VEML_State.integrationTime == VEML7700_IT_25MS){
 8002070:	4b4b      	ldr	r3, [pc, #300]	; (80021a0 <veml_Get_White_Lux+0x1c8>)
 8002072:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8002076:	2b02      	cmp	r3, #2
 8002078:	d168      	bne.n	800214c <veml_Get_White_Lux+0x174>
 800207a:	4b49      	ldr	r3, [pc, #292]	; (80021a0 <veml_Get_White_Lux+0x1c8>)
 800207c:	f893 304f 	ldrb.w	r3, [r3, #79]	; 0x4f
 8002080:	2b0c      	cmp	r3, #12
 8002082:	d163      	bne.n	800214c <veml_Get_White_Lux+0x174>
		lux = 6.0135e-13 * pow(lux, 4) - 9.3924e-9 * pow(lux, 3) + 8.1488e-5 * pow(lux, 2) + 1.0023 * lux;
 8002084:	68b8      	ldr	r0, [r7, #8]
 8002086:	f7fe fa37 	bl	80004f8 <__aeabi_f2d>
 800208a:	4603      	mov	r3, r0
 800208c:	460c      	mov	r4, r1
 800208e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8002168 <veml_Get_White_Lux+0x190>
 8002092:	ec44 3b10 	vmov	d0, r3, r4
 8002096:	f005 fbb9 	bl	800780c <pow>
 800209a:	ec51 0b10 	vmov	r0, r1, d0
 800209e:	a334      	add	r3, pc, #208	; (adr r3, 8002170 <veml_Get_White_Lux+0x198>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe fa80 	bl	80005a8 <__aeabi_dmul>
 80020a8:	4603      	mov	r3, r0
 80020aa:	460c      	mov	r4, r1
 80020ac:	4625      	mov	r5, r4
 80020ae:	461c      	mov	r4, r3
 80020b0:	68b8      	ldr	r0, [r7, #8]
 80020b2:	f7fe fa21 	bl	80004f8 <__aeabi_f2d>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8002178 <veml_Get_White_Lux+0x1a0>
 80020be:	ec43 2b10 	vmov	d0, r2, r3
 80020c2:	f005 fba3 	bl	800780c <pow>
 80020c6:	ec51 0b10 	vmov	r0, r1, d0
 80020ca:	a32d      	add	r3, pc, #180	; (adr r3, 8002180 <veml_Get_White_Lux+0x1a8>)
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	f7fe fa6a 	bl	80005a8 <__aeabi_dmul>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4620      	mov	r0, r4
 80020da:	4629      	mov	r1, r5
 80020dc:	f7fe f8ac 	bl	8000238 <__aeabi_dsub>
 80020e0:	4603      	mov	r3, r0
 80020e2:	460c      	mov	r4, r1
 80020e4:	4625      	mov	r5, r4
 80020e6:	461c      	mov	r4, r3
 80020e8:	68b8      	ldr	r0, [r7, #8]
 80020ea:	f7fe fa05 	bl	80004f8 <__aeabi_f2d>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8002188 <veml_Get_White_Lux+0x1b0>
 80020f6:	ec43 2b10 	vmov	d0, r2, r3
 80020fa:	f005 fb87 	bl	800780c <pow>
 80020fe:	ec51 0b10 	vmov	r0, r1, d0
 8002102:	a323      	add	r3, pc, #140	; (adr r3, 8002190 <veml_Get_White_Lux+0x1b8>)
 8002104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002108:	f7fe fa4e 	bl	80005a8 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4620      	mov	r0, r4
 8002112:	4629      	mov	r1, r5
 8002114:	f7fe f892 	bl	800023c <__adddf3>
 8002118:	4603      	mov	r3, r0
 800211a:	460c      	mov	r4, r1
 800211c:	4625      	mov	r5, r4
 800211e:	461c      	mov	r4, r3
 8002120:	68b8      	ldr	r0, [r7, #8]
 8002122:	f7fe f9e9 	bl	80004f8 <__aeabi_f2d>
 8002126:	a31c      	add	r3, pc, #112	; (adr r3, 8002198 <veml_Get_White_Lux+0x1c0>)
 8002128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800212c:	f7fe fa3c 	bl	80005a8 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4620      	mov	r0, r4
 8002136:	4629      	mov	r1, r5
 8002138:	f7fe f880 	bl	800023c <__adddf3>
 800213c:	4603      	mov	r3, r0
 800213e:	460c      	mov	r4, r1
 8002140:	4618      	mov	r0, r3
 8002142:	4621      	mov	r1, r4
 8002144:	f7fe fd08 	bl	8000b58 <__aeabi_d2f>
 8002148:	4603      	mov	r3, r0
 800214a:	60bb      	str	r3, [r7, #8]
	}

	return lux;
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	ee07 3a90 	vmov	s15, r3

}
 8002152:	eeb0 0a67 	vmov.f32	s0, s15
 8002156:	3710      	adds	r7, #16
 8002158:	46bd      	mov	sp, r7
 800215a:	bdb0      	pop	{r4, r5, r7, pc}
 800215c:	f3af 8000 	nop.w
 8002160:	487fcb92 	.word	0x487fcb92
 8002164:	3fad7dbf 	.word	0x3fad7dbf
 8002168:	00000000 	.word	0x00000000
 800216c:	40100000 	.word	0x40100000
 8002170:	b18f283b 	.word	0xb18f283b
 8002174:	3d65287a 	.word	0x3d65287a
 8002178:	00000000 	.word	0x00000000
 800217c:	40080000 	.word	0x40080000
 8002180:	c91ef46e 	.word	0xc91ef46e
 8002184:	3e442b86 	.word	0x3e442b86
 8002188:	00000000 	.word	0x00000000
 800218c:	40000000 	.word	0x40000000
 8002190:	2e18cab0 	.word	0x2e18cab0
 8002194:	3f155c91 	.word	0x3f155c91
 8002198:	b98c7e28 	.word	0xb98c7e28
 800219c:	3ff0096b 	.word	0x3ff0096b
 80021a0:	200002cc 	.word	0x200002cc
 80021a4:	bf800000 	.word	0xbf800000

080021a8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80021a8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021aa:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021ac:	3304      	adds	r3, #4

080021ae <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021ae:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80021b2:	d3f9      	bcc.n	80021a8 <CopyDataInit>
  bx lr
 80021b4:	4770      	bx	lr

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80021b6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80021b8:	3004      	adds	r0, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80021ba:	4288      	cmp	r0, r1
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>
  bx lr
 80021be:	4770      	bx	lr

080021c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80021c0:	480c      	ldr	r0, [pc, #48]	; (80021f4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 80021c2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80021c4:	f7ff fc16 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 80021c8:	480b      	ldr	r0, [pc, #44]	; (80021f8 <LoopForever+0x8>)
 80021ca:	490c      	ldr	r1, [pc, #48]	; (80021fc <LoopForever+0xc>)
 80021cc:	4a0c      	ldr	r2, [pc, #48]	; (8002200 <LoopForever+0x10>)
 80021ce:	2300      	movs	r3, #0
 80021d0:	f7ff ffed 	bl	80021ae <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 80021d4:	480b      	ldr	r0, [pc, #44]	; (8002204 <LoopForever+0x14>)
 80021d6:	490c      	ldr	r1, [pc, #48]	; (8002208 <LoopForever+0x18>)
 80021d8:	2300      	movs	r3, #0
 80021da:	f7ff ffee 	bl	80021ba <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 80021de:	480b      	ldr	r0, [pc, #44]	; (800220c <LoopForever+0x1c>)
 80021e0:	490b      	ldr	r1, [pc, #44]	; (8002210 <LoopForever+0x20>)
 80021e2:	2300      	movs	r3, #0
 80021e4:	f7ff ffe9 	bl	80021ba <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80021e8:	f003 faa6 	bl	8005738 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 80021ec:	f7ff f8e4 	bl	80013b8 <main>

080021f0 <LoopForever>:

LoopForever:
  b LoopForever
 80021f0:	e7fe      	b.n	80021f0 <LoopForever>
 80021f2:	0000      	.short	0x0000
  ldr   r0, =_estack
 80021f4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80021f8:	20000004 	.word	0x20000004
 80021fc:	200001e4 	.word	0x200001e4
 8002200:	08009978 	.word	0x08009978
  INIT_BSS _sbss, _ebss
 8002204:	200001e4 	.word	0x200001e4
 8002208:	20000328 	.word	0x20000328
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800220c:	20030000 	.word	0x20030000
 8002210:	20030000 	.word	0x20030000

08002214 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002214:	e7fe      	b.n	8002214 <ADC1_IRQHandler>
	...

08002218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <HAL_Init+0x3c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a0b      	ldr	r2, [pc, #44]	; (8002254 <HAL_Init+0x3c>)
 8002228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800222c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222e:	2003      	movs	r0, #3
 8002230:	f000 f94c 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002234:	2000      	movs	r0, #0
 8002236:	f000 f80f 	bl	8002258 <HAL_InitTick>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	71fb      	strb	r3, [r7, #7]
 8002244:	e001      	b.n	800224a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002246:	f7ff fb0c 	bl	8001862 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800224a:	79fb      	ldrb	r3, [r7, #7]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58004000 	.word	0x58004000

08002258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b084      	sub	sp, #16
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002260:	2300      	movs	r3, #0
 8002262:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_InitTick+0x6c>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d024      	beq.n	80022b6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 800226c:	f002 fa02 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8002270:	4602      	mov	r2, r0
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <HAL_InitTick+0x6c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	4619      	mov	r1, r3
 8002278:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227c:	fbb3 f3f1 	udiv	r3, r3, r1
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	4618      	mov	r0, r3
 8002286:	f000 f946 	bl	8002516 <HAL_SYSTICK_Config>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10f      	bne.n	80022b0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b0f      	cmp	r3, #15
 8002294:	d809      	bhi.n	80022aa <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002296:	2200      	movs	r2, #0
 8002298:	6879      	ldr	r1, [r7, #4]
 800229a:	f04f 30ff 	mov.w	r0, #4294967295
 800229e:	f000 f920 	bl	80024e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022a2:	4a09      	ldr	r2, [pc, #36]	; (80022c8 <HAL_InitTick+0x70>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	e007      	b.n	80022ba <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	73fb      	strb	r3, [r7, #15]
 80022ae:	e004      	b.n	80022ba <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	e001      	b.n	80022ba <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000000c 	.word	0x2000000c
 80022c8:	20000008 	.word	0x20000008

080022cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_IncTick+0x20>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	461a      	mov	r2, r3
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <HAL_IncTick+0x24>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4413      	add	r3, r2
 80022dc:	4a04      	ldr	r2, [pc, #16]	; (80022f0 <HAL_IncTick+0x24>)
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	2000000c 	.word	0x2000000c
 80022f0:	20000320 	.word	0x20000320

080022f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return uwTick;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_GetTick+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000320 	.word	0x20000320

0800230c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_GetTickPrio+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008

08002324 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
  __weak void HAL_Delay(uint32_t Delay)
  {
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff ffe2 	bl	80022f4 <HAL_GetTick>
 8002330:	60b8      	str	r0, [r7, #8]
    uint32_t wait = Delay;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	60fb      	str	r3, [r7, #12]
  
    /* Add a freq to guarantee minimum wait */
    if (wait < HAL_MAX_DELAY)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d005      	beq.n	800234a <HAL_Delay+0x26>
    {
      wait += (uint32_t)(uwTickFreq);
 800233e:	4b09      	ldr	r3, [pc, #36]	; (8002364 <HAL_Delay+0x40>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4413      	add	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]
    }
  
    while ((HAL_GetTick() - tickstart) < wait)
 800234a:	bf00      	nop
 800234c:	f7ff ffd2 	bl	80022f4 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	429a      	cmp	r2, r3
 800235a:	d8f7      	bhi.n	800234c <HAL_Delay+0x28>
    {
    }
  }
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	2000000c 	.word	0x2000000c

08002368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002384:	4013      	ands	r3, r2
 8002386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239a:	4a04      	ldr	r2, [pc, #16]	; (80023ac <__NVIC_SetPriorityGrouping+0x44>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	60d3      	str	r3, [r2, #12]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <__NVIC_GetPriorityGrouping+0x18>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0a1b      	lsrs	r3, r3, #8
 80023ba:	f003 0307 	and.w	r3, r3, #7
}
 80023be:	4618      	mov	r0, r3
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff47 	bl	8002368 <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80024f0:	f7ff ff5e 	bl	80023b0 <__NVIC_GetPriorityGrouping>
 80024f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	68b9      	ldr	r1, [r7, #8]
 80024fa:	6978      	ldr	r0, [r7, #20]
 80024fc:	f7ff ff90 	bl	8002420 <NVIC_EncodePriority>
 8002500:	4602      	mov	r2, r0
 8002502:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ff5f 	bl	80023cc <__NVIC_SetPriority>
}
 800250e:	bf00      	nop
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ffb2 	bl	8002488 <SysTick_Config>
 8002524:	4603      	mov	r3, r0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e14c      	b.n	80027da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	4013      	ands	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 813e 	beq.w	80027d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d00b      	beq.n	8002578 <HAL_GPIO_Init+0x48>
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d007      	beq.n	8002578 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800256c:	2b11      	cmp	r3, #17
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	2b12      	cmp	r3, #18
 8002576:	d130      	bne.n	80025da <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	4013      	ands	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68da      	ldr	r2, [r3, #12]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	4313      	orrs	r3, r2
 80025a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025ae:	2201      	movs	r2, #1
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43db      	mvns	r3, r3
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	4013      	ands	r3, r2
 80025bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	091b      	lsrs	r3, r3, #4
 80025c4:	f003 0201 	and.w	r2, r3, #1
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	2203      	movs	r2, #3
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	693a      	ldr	r2, [r7, #16]
 80025ee:	4013      	ands	r3, r2
 80025f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	693a      	ldr	r2, [r7, #16]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0xea>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b12      	cmp	r3, #18
 8002618:	d123      	bne.n	8002662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	6939      	ldr	r1, [r7, #16]
 800265e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0203 	and.w	r2, r3, #3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8098 	beq.w	80027d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80026a4:	4a54      	ldr	r2, [pc, #336]	; (80027f8 <HAL_GPIO_Init+0x2c8>)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	089b      	lsrs	r3, r3, #2
 80026aa:	3302      	adds	r3, #2
 80026ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	220f      	movs	r2, #15
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	693a      	ldr	r2, [r7, #16]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ce:	d019      	beq.n	8002704 <HAL_GPIO_Init+0x1d4>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <HAL_GPIO_Init+0x2cc>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d013      	beq.n	8002700 <HAL_GPIO_Init+0x1d0>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a49      	ldr	r2, [pc, #292]	; (8002800 <HAL_GPIO_Init+0x2d0>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d00d      	beq.n	80026fc <HAL_GPIO_Init+0x1cc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a48      	ldr	r2, [pc, #288]	; (8002804 <HAL_GPIO_Init+0x2d4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d007      	beq.n	80026f8 <HAL_GPIO_Init+0x1c8>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a47      	ldr	r2, [pc, #284]	; (8002808 <HAL_GPIO_Init+0x2d8>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d101      	bne.n	80026f4 <HAL_GPIO_Init+0x1c4>
 80026f0:	2304      	movs	r3, #4
 80026f2:	e008      	b.n	8002706 <HAL_GPIO_Init+0x1d6>
 80026f4:	2307      	movs	r3, #7
 80026f6:	e006      	b.n	8002706 <HAL_GPIO_Init+0x1d6>
 80026f8:	2303      	movs	r3, #3
 80026fa:	e004      	b.n	8002706 <HAL_GPIO_Init+0x1d6>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e002      	b.n	8002706 <HAL_GPIO_Init+0x1d6>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_GPIO_Init+0x1d6>
 8002704:	2300      	movs	r3, #0
 8002706:	697a      	ldr	r2, [r7, #20]
 8002708:	f002 0203 	and.w	r2, r2, #3
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	4093      	lsls	r3, r2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002716:	4938      	ldr	r1, [pc, #224]	; (80027f8 <HAL_GPIO_Init+0x2c8>)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	089b      	lsrs	r3, r3, #2
 800271c:	3302      	adds	r3, #2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002724:	4b39      	ldr	r3, [pc, #228]	; (800280c <HAL_GPIO_Init+0x2dc>)
 8002726:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800272a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	43db      	mvns	r3, r3
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	4013      	ands	r3, r2
 8002734:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002742:	693a      	ldr	r2, [r7, #16]
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800274a:	4a30      	ldr	r2, [pc, #192]	; (800280c <HAL_GPIO_Init+0x2dc>)
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8002752:	4b2e      	ldr	r3, [pc, #184]	; (800280c <HAL_GPIO_Init+0x2dc>)
 8002754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	43db      	mvns	r3, r3
 800275e:	693a      	ldr	r2, [r7, #16]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002770:	693a      	ldr	r2, [r7, #16]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	4313      	orrs	r3, r2
 8002776:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002778:	4a24      	ldr	r2, [pc, #144]	; (800280c <HAL_GPIO_Init+0x2dc>)
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002780:	4b22      	ldr	r3, [pc, #136]	; (800280c <HAL_GPIO_Init+0x2dc>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	43db      	mvns	r3, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4013      	ands	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x274>
        {
          temp |= iocurrent;
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80027a4:	4a19      	ldr	r2, [pc, #100]	; (800280c <HAL_GPIO_Init+0x2dc>)
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <HAL_GPIO_Init+0x2dc>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	693a      	ldr	r2, [r7, #16]
 80027b6:	4013      	ands	r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027ce:	4a0f      	ldr	r2, [pc, #60]	; (800280c <HAL_GPIO_Init+0x2dc>)
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	6053      	str	r3, [r2, #4]
      }
    }
    
    position++;
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	3301      	adds	r3, #1
 80027d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	fa22 f303 	lsr.w	r3, r2, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f47f aeab 	bne.w	8002540 <HAL_GPIO_Init+0x10>
  }
}
 80027ea:	bf00      	nop
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40010000 	.word	0x40010000
 80027fc:	48000400 	.word	0x48000400
 8002800:	48000800 	.word	0x48000800
 8002804:	48000c00 	.word	0x48000c00
 8002808:	48001000 	.word	0x48001000
 800280c:	58000800 	.word	0x58000800

08002810 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	807b      	strh	r3, [r7, #2]
 800281c:	4613      	mov	r3, r2
 800281e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002820:	787b      	ldrb	r3, [r7, #1]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d003      	beq.n	800282e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800282c:	e002      	b.n	8002834 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800282e:	887a      	ldrh	r2, [r7, #2]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e081      	b.n	8002956 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff f802 	bl	8001870 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002890:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d107      	bne.n	80028ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	e006      	b.n	80028c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689a      	ldr	r2, [r3, #8]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	d104      	bne.n	80028da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68da      	ldr	r2, [r3, #12]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691a      	ldr	r2, [r3, #16]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	ea42 0103 	orr.w	r1, r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	021a      	lsls	r2, r3, #8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	69d9      	ldr	r1, [r3, #28]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1a      	ldr	r2, [r3, #32]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	430a      	orrs	r2, r1
 8002926:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0201 	orr.w	r2, r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2220      	movs	r2, #32
 8002942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	607a      	str	r2, [r7, #4]
 800296a:	461a      	mov	r2, r3
 800296c:	460b      	mov	r3, r1
 800296e:	817b      	strh	r3, [r7, #10]
 8002970:	4613      	mov	r3, r2
 8002972:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 80da 	bne.w	8002b36 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002988:	2b01      	cmp	r3, #1
 800298a:	d101      	bne.n	8002990 <HAL_I2C_Master_Transmit+0x30>
 800298c:	2302      	movs	r3, #2
 800298e:	e0d3      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002998:	f7ff fcac 	bl	80022f4 <HAL_GetTick>
 800299c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	9300      	str	r3, [sp, #0]
 80029a2:	2319      	movs	r3, #25
 80029a4:	2201      	movs	r2, #1
 80029a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fbc6 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e0be      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2221      	movs	r2, #33	; 0x21
 80029be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2210      	movs	r2, #16
 80029c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	893a      	ldrh	r2, [r7, #8]
 80029da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2bff      	cmp	r3, #255	; 0xff
 80029ea:	d90e      	bls.n	8002a0a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	8979      	ldrh	r1, [r7, #10]
 80029fa:	4b51      	ldr	r3, [pc, #324]	; (8002b40 <HAL_I2C_Master_Transmit+0x1e0>)
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 fcbc 	bl	8003380 <I2C_TransferConfig>
 8002a08:	e06c      	b.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	8979      	ldrh	r1, [r7, #10]
 8002a1c:	4b48      	ldr	r3, [pc, #288]	; (8002b40 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 fcab 	bl	8003380 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8002a2a:	e05b      	b.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6a39      	ldr	r1, [r7, #32]
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fbc3 	bl	80031bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e07b      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	1c5a      	adds	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d034      	beq.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d130      	bne.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2180      	movs	r1, #128	; 0x80
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f000 fb55 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e04d      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2bff      	cmp	r3, #255	; 0xff
 8002aa4:	d90e      	bls.n	8002ac4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	22ff      	movs	r2, #255	; 0xff
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f000 fc5f 	bl	8003380 <I2C_TransferConfig>
 8002ac2:	e00f      	b.n	8002ae4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac8:	b29a      	uxth	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	8979      	ldrh	r1, [r7, #10]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ade:	68f8      	ldr	r0, [r7, #12]
 8002ae0:	f000 fc4e 	bl	8003380 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d19e      	bne.n	8002a2c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6a39      	ldr	r1, [r7, #32]
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fba2 	bl	800323c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e01a      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2220      	movs	r2, #32
 8002b08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6859      	ldr	r1, [r3, #4]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <HAL_I2C_Master_Transmit+0x1e4>)
 8002b16:	400b      	ands	r3, r1
 8002b18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b32:	2300      	movs	r3, #0
 8002b34:	e000      	b.n	8002b38 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002b36:	2302      	movs	r3, #2
  }
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	80002000 	.word	0x80002000
 8002b44:	fe00e800 	.word	0xfe00e800

08002b48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	817b      	strh	r3, [r7, #10]
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	813b      	strh	r3, [r7, #8]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b20      	cmp	r3, #32
 8002b6c:	f040 80f9 	bne.w	8002d62 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b70:	6a3b      	ldr	r3, [r7, #32]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d002      	beq.n	8002b7c <HAL_I2C_Mem_Write+0x34>
 8002b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d105      	bne.n	8002b88 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0ed      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_I2C_Mem_Write+0x4e>
 8002b92:	2302      	movs	r3, #2
 8002b94:	e0e6      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002b9e:	f7ff fba9 	bl	80022f4 <HAL_GetTick>
 8002ba2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	9300      	str	r3, [sp, #0]
 8002ba8:	2319      	movs	r3, #25
 8002baa:	2201      	movs	r2, #1
 8002bac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb0:	68f8      	ldr	r0, [r7, #12]
 8002bb2:	f000 fac3 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0d1      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2221      	movs	r2, #33	; 0x21
 8002bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6a3a      	ldr	r2, [r7, #32]
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002be0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002be8:	88f8      	ldrh	r0, [r7, #6]
 8002bea:	893a      	ldrh	r2, [r7, #8]
 8002bec:	8979      	ldrh	r1, [r7, #10]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 f9d3 	bl	8002fa4 <I2C_RequestMemoryWrite>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0a9      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2bff      	cmp	r3, #255	; 0xff
 8002c18:	d90e      	bls.n	8002c38 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	22ff      	movs	r2, #255	; 0xff
 8002c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	8979      	ldrh	r1, [r7, #10]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9300      	str	r3, [sp, #0]
 8002c2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 fba5 	bl	8003380 <I2C_TransferConfig>
 8002c36:	e00f      	b.n	8002c58 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	8979      	ldrh	r1, [r7, #10]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 fb94 	bl	8003380 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c58:	697a      	ldr	r2, [r7, #20]
 8002c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 faad 	bl	80031bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e07b      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	781a      	ldrb	r2, [r3, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	3b01      	subs	r3, #1
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d034      	beq.n	8002d10 <HAL_I2C_Mem_Write+0x1c8>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d130      	bne.n	8002d10 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	9300      	str	r3, [sp, #0]
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 fa3f 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d001      	beq.n	8002cc8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e04d      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2bff      	cmp	r3, #255	; 0xff
 8002cd0:	d90e      	bls.n	8002cf0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	22ff      	movs	r2, #255	; 0xff
 8002cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	8979      	ldrh	r1, [r7, #10]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f000 fb49 	bl	8003380 <I2C_TransferConfig>
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	8979      	ldrh	r1, [r7, #10]
 8002d02:	2300      	movs	r3, #0
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fb38 	bl	8003380 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d19e      	bne.n	8002c58 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002d1e:	68f8      	ldr	r0, [r7, #12]
 8002d20:	f000 fa8c 	bl	800323c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e01a      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2220      	movs	r2, #32
 8002d34:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_I2C_Mem_Write+0x224>)
 8002d42:	400b      	ands	r3, r1
 8002d44:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e000      	b.n	8002d64 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002d62:	2302      	movs	r3, #2
  }
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	fe00e800 	.word	0xfe00e800

08002d70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af02      	add	r7, sp, #8
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	4608      	mov	r0, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4603      	mov	r3, r0
 8002d80:	817b      	strh	r3, [r7, #10]
 8002d82:	460b      	mov	r3, r1
 8002d84:	813b      	strh	r3, [r7, #8]
 8002d86:	4613      	mov	r3, r2
 8002d88:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b20      	cmp	r3, #32
 8002d94:	f040 80fd 	bne.w	8002f92 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d98:	6a3b      	ldr	r3, [r7, #32]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <HAL_I2C_Mem_Read+0x34>
 8002d9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002daa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e0f1      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Mem_Read+0x4e>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e0ea      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002dc6:	f7ff fa95 	bl	80022f4 <HAL_GetTick>
 8002dca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2319      	movs	r3, #25
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f9af 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e0d5      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2222      	movs	r2, #34	; 0x22
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2240      	movs	r2, #64	; 0x40
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6a3a      	ldr	r2, [r7, #32]
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e10:	88f8      	ldrh	r0, [r7, #6]
 8002e12:	893a      	ldrh	r2, [r7, #8]
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	4603      	mov	r3, r0
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 f913 	bl	800304c <I2C_RequestMemoryRead>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d005      	beq.n	8002e38 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e0ad      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	2bff      	cmp	r3, #255	; 0xff
 8002e40:	d90e      	bls.n	8002e60 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	22ff      	movs	r2, #255	; 0xff
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e4c:	b2da      	uxtb	r2, r3
 8002e4e:	8979      	ldrh	r1, [r7, #10]
 8002e50:	4b52      	ldr	r3, [pc, #328]	; (8002f9c <HAL_I2C_Mem_Read+0x22c>)
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fa91 	bl	8003380 <I2C_TransferConfig>
 8002e5e:	e00f      	b.n	8002e80 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29a      	uxth	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	8979      	ldrh	r1, [r7, #10]
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_I2C_Mem_Read+0x22c>)
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fa80 	bl	8003380 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	9300      	str	r3, [sp, #0]
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2200      	movs	r2, #0
 8002e88:	2104      	movs	r1, #4
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f956 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e07c      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	b2d2      	uxtb	r2, r2
 8002ea6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	b29a      	uxth	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d034      	beq.n	8002f40 <HAL_I2C_Mem_Read+0x1d0>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d130      	bne.n	8002f40 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	2180      	movs	r1, #128	; 0x80
 8002ee8:	68f8      	ldr	r0, [r7, #12]
 8002eea:	f000 f927 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d001      	beq.n	8002ef8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e04d      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2bff      	cmp	r3, #255	; 0xff
 8002f00:	d90e      	bls.n	8002f20 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	22ff      	movs	r2, #255	; 0xff
 8002f06:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	b2da      	uxtb	r2, r3
 8002f0e:	8979      	ldrh	r1, [r7, #10]
 8002f10:	2300      	movs	r3, #0
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fa31 	bl	8003380 <I2C_TransferConfig>
 8002f1e:	e00f      	b.n	8002f40 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2e:	b2da      	uxtb	r2, r3
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	2300      	movs	r3, #0
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 fa20 	bl	8003380 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d19a      	bne.n	8002e80 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f974 	bl	800323c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e01a      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2220      	movs	r2, #32
 8002f64:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6859      	ldr	r1, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b0b      	ldr	r3, [pc, #44]	; (8002fa0 <HAL_I2C_Mem_Read+0x230>)
 8002f72:	400b      	ands	r3, r1
 8002f74:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e000      	b.n	8002f94 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
  }
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	80002400 	.word	0x80002400
 8002fa0:	fe00e800 	.word	0xfe00e800

08002fa4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af02      	add	r7, sp, #8
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	4608      	mov	r0, r1
 8002fae:	4611      	mov	r1, r2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	460b      	mov	r3, r1
 8002fb8:	813b      	strh	r3, [r7, #8]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002fbe:	88fb      	ldrh	r3, [r7, #6]
 8002fc0:	b2da      	uxtb	r2, r3
 8002fc2:	8979      	ldrh	r1, [r7, #10]
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <I2C_RequestMemoryWrite+0xa4>)
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f9d7 	bl	8003380 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	69b9      	ldr	r1, [r7, #24]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f8f0 	bl	80031bc <I2C_WaitOnTXISFlagUntilTimeout>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e02c      	b.n	8003040 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002fec:	893b      	ldrh	r3, [r7, #8]
 8002fee:	b2da      	uxtb	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff6:	e015      	b.n	8003024 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	b2da      	uxtb	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	69b9      	ldr	r1, [r7, #24]
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f8d6 	bl	80031bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e012      	b.n	8003040 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800301a:	893b      	ldrh	r3, [r7, #8]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	2200      	movs	r2, #0
 800302c:	2180      	movs	r1, #128	; 0x80
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f884 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	80002000 	.word	0x80002000

0800304c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af02      	add	r7, sp, #8
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	4608      	mov	r0, r1
 8003056:	4611      	mov	r1, r2
 8003058:	461a      	mov	r2, r3
 800305a:	4603      	mov	r3, r0
 800305c:	817b      	strh	r3, [r7, #10]
 800305e:	460b      	mov	r3, r1
 8003060:	813b      	strh	r3, [r7, #8]
 8003062:	4613      	mov	r3, r2
 8003064:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003066:	88fb      	ldrh	r3, [r7, #6]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	8979      	ldrh	r1, [r7, #10]
 800306c:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <I2C_RequestMemoryRead+0xa4>)
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	2300      	movs	r3, #0
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f000 f984 	bl	8003380 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f89d 	bl	80031bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e02c      	b.n	80030e6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003092:	893b      	ldrh	r3, [r7, #8]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
 800309c:	e015      	b.n	80030ca <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800309e:	893b      	ldrh	r3, [r7, #8]
 80030a0:	0a1b      	lsrs	r3, r3, #8
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	b2da      	uxtb	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ac:	69fa      	ldr	r2, [r7, #28]
 80030ae:	69b9      	ldr	r1, [r7, #24]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f883 	bl	80031bc <I2C_WaitOnTXISFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e012      	b.n	80030e6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80030c0:	893b      	ldrh	r3, [r7, #8]
 80030c2:	b2da      	uxtb	r2, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2140      	movs	r1, #64	; 0x40
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f831 	bl	800313c <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d001      	beq.n	80030e4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	80002000 	.word	0x80002000

080030f4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	2b02      	cmp	r3, #2
 8003108:	d103      	bne.n	8003112 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2200      	movs	r2, #0
 8003110:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	2b01      	cmp	r3, #1
 800311e:	d007      	beq.n	8003130 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0201 	orr.w	r2, r2, #1
 800312e:	619a      	str	r2, [r3, #24]
  }
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800314c:	e022      	b.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003154:	d01e      	beq.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003156:	f7ff f8cd 	bl	80022f4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d302      	bcc.n	800316c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d113      	bne.n	8003194 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	f043 0220 	orr.w	r2, r3, #32
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2220      	movs	r2, #32
 800317c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e00f      	b.n	80031b4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	699a      	ldr	r2, [r3, #24]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	4013      	ands	r3, r2
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	429a      	cmp	r2, r3
 80031a2:	bf0c      	ite	eq
 80031a4:	2301      	moveq	r3, #1
 80031a6:	2300      	movne	r3, #0
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	79fb      	ldrb	r3, [r7, #7]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d0cd      	beq.n	800314e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031b2:	2300      	movs	r3, #0
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3710      	adds	r7, #16
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80031c8:	e02c      	b.n	8003224 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68b9      	ldr	r1, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f000 f870 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d001      	beq.n	80031de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e02a      	b.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e4:	d01e      	beq.n	8003224 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e6:	f7ff f885 	bl	80022f4 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	68ba      	ldr	r2, [r7, #8]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d302      	bcc.n	80031fc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d113      	bne.n	8003224 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	f043 0220 	orr.w	r2, r3, #32
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e007      	b.n	8003234 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f003 0302 	and.w	r3, r3, #2
 800322e:	2b02      	cmp	r3, #2
 8003230:	d1cb      	bne.n	80031ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b084      	sub	sp, #16
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003248:	e028      	b.n	800329c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68b9      	ldr	r1, [r7, #8]
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f830 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e026      	b.n	80032ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800325e:	f7ff f849 	bl	80022f4 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	68ba      	ldr	r2, [r7, #8]
 800326a:	429a      	cmp	r2, r3
 800326c:	d302      	bcc.n	8003274 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d113      	bne.n	800329c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003278:	f043 0220 	orr.w	r2, r3, #32
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2220      	movs	r2, #32
 8003284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e007      	b.n	80032ac <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	f003 0320 	and.w	r3, r3, #32
 80032a6:	2b20      	cmp	r3, #32
 80032a8:	d1cf      	bne.n	800324a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f003 0310 	and.w	r3, r3, #16
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d151      	bne.n	8003372 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80032ce:	e022      	b.n	8003316 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d01e      	beq.n	8003316 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7ff f80c 	bl	80022f4 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <I2C_IsAcknowledgeFailed+0x3a>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d113      	bne.n	8003316 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2220      	movs	r2, #32
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e02e      	b.n	8003374 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b20      	cmp	r3, #32
 8003322:	d1d5      	bne.n	80032d0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2210      	movs	r2, #16
 800332a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2220      	movs	r2, #32
 8003332:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff fedd 	bl	80030f4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6859      	ldr	r1, [r3, #4]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <I2C_IsAcknowledgeFailed+0xc8>)
 8003346:	400b      	ands	r3, r1
 8003348:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2220      	movs	r2, #32
 800335a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	fe00e800 	.word	0xfe00e800

08003380 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	60f8      	str	r0, [r7, #12]
 8003388:	607b      	str	r3, [r7, #4]
 800338a:	460b      	mov	r3, r1
 800338c:	817b      	strh	r3, [r7, #10]
 800338e:	4613      	mov	r3, r2
 8003390:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	0d5b      	lsrs	r3, r3, #21
 800339c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80033a0:	4b0d      	ldr	r3, [pc, #52]	; (80033d8 <I2C_TransferConfig+0x58>)
 80033a2:	430b      	orrs	r3, r1
 80033a4:	43db      	mvns	r3, r3
 80033a6:	ea02 0103 	and.w	r1, r2, r3
 80033aa:	897b      	ldrh	r3, [r7, #10]
 80033ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80033b0:	7a7b      	ldrb	r3, [r7, #9]
 80033b2:	041b      	lsls	r3, r3, #16
 80033b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80033b8:	431a      	orrs	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	431a      	orrs	r2, r3
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80033ca:	bf00      	nop
 80033cc:	3714      	adds	r7, #20
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	03ff63ff 	.word	0x03ff63ff

080033dc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b20      	cmp	r3, #32
 80033f0:	d138      	bne.n	8003464 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d101      	bne.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033fc:	2302      	movs	r3, #2
 80033fe:	e032      	b.n	8003466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2224      	movs	r2, #36	; 0x24
 800340c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800342e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6819      	ldr	r1, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2220      	movs	r2, #32
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003472:	b480      	push	{r7}
 8003474:	b085      	sub	sp, #20
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b20      	cmp	r3, #32
 8003486:	d139      	bne.n	80034fc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003492:	2302      	movs	r3, #2
 8003494:	e033      	b.n	80034fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2224      	movs	r2, #36	; 0x24
 80034a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f022 0201 	bic.w	r2, r2, #1
 80034b4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034c4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f042 0201 	orr.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e000      	b.n	80034fe <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034fc:	2302      	movs	r3, #2
  }
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3714      	adds	r7, #20
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800350c:	b480      	push	{r7}
 800350e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003510:	4b05      	ldr	r3, [pc, #20]	; (8003528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a04      	ldr	r2, [pc, #16]	; (8003528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800351a:	6013      	str	r3, [r2, #0]
}
 800351c:	bf00      	nop
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	58000400 	.word	0x58000400

0800352c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */  
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003530:	4b04      	ldr	r3, [pc, #16]	; (8003544 <HAL_PWREx_GetVoltageRange+0x18>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003538:	4618      	mov	r0, r3
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	58000400 	.word	0x58000400

08003548 <LL_RCC_HSE_IsEnabledDiv2>:
  * @brief  Get HSE sysclk and pll prescaler
  * @rmtoll CR           HSEPRE        LL_RCC_HSE_IsEnabledDiv2
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsEnabledDiv2(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800355a:	d101      	bne.n	8003560 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800355c:	2301      	movs	r3, #1
 800355e:	e000      	b.n	8003562 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800357a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357e:	6013      	str	r3, [r2, #0]
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_RCC_HSE_Disable>:
  * @brief  Disable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Disable(void)
{
 800358a:	b480      	push	{r7}
 800358c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800358e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359c:	6013      	str	r3, [r2, #0]
}
 800359e:	bf00      	nop
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80035ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035ba:	d101      	bne.n	80035c0 <LL_RCC_HSE_IsReady+0x18>
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <LL_RCC_HSE_IsReady+0x1a>
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80035d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035de:	6013      	str	r3, [r2, #0]
}
 80035e0:	bf00      	nop
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <LL_RCC_HSI_Disable>:
  * @brief  Disable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Disable(void)
{
 80035ea:	b480      	push	{r7}
 80035ec:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80035ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]
}
 80035fe:	bf00      	nop
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800360c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800361a:	d101      	bne.n	8003620 <LL_RCC_HSI_IsReady+0x18>
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <LL_RCC_HSI_IsReady+0x1a>
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll ICSCR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 127
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003634:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003646:	4313      	orrs	r3, r2
 8003648:	604b      	str	r3, [r1, #4]
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003662:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800366e:	bf00      	nop
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <LL_RCC_HSI48_Disable>:
  * @brief  Disable HSI48
  * @rmtoll CRRCR          HSI48ON       LL_RCC_HSI48_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Disable(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800367c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003680:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003684:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CRRCR          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 800369a:	b480      	push	{r7}
 800369c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800369e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d101      	bne.n	80036b2 <LL_RCC_HSI48_IsReady+0x18>
 80036ae:	2301      	movs	r3, #1
 80036b0:	e000      	b.n	80036b4 <LL_RCC_HSI48_IsReady+0x1a>
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr

080036be <LL_RCC_LSE_Enable>:
  * @brief  Enable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Enable(void)
{
 80036be:	b480      	push	{r7}
 80036c0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036d6:	bf00      	nop
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <LL_RCC_LSE_Disable>:
  * @brief  Disable  Low Speed External (LSE) crystal.
  * @rmtoll BDCR         LSEON         LL_RCC_LSE_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_Disable(void)
{
 80036e0:	b480      	push	{r7}
 80036e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80036e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80036f8:	bf00      	nop
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_RCC_LSE_EnableBypass>:
  * @brief  Enable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_EnableBypass(void)
{
 8003702:	b480      	push	{r7}
 8003704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800371a:	bf00      	nop
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_RCC_LSE_DisableBypass>:
  * @brief  Disable external clock source (LSE bypass).
  * @rmtoll BDCR         LSEBYP        LL_RCC_LSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_DisableBypass(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003728:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003734:	f023 0304 	bic.w	r3, r3, #4
 8003738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800373c:	bf00      	nop
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8003746:	b480      	push	{r7}
 8003748:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800374a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b02      	cmp	r3, #2
 8003758:	d101      	bne.n	800375e <LL_RCC_LSE_IsReady+0x18>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <LL_RCC_LSE_IsReady+0x1a>
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <LL_RCC_LSI1_Enable>:
  * @brief  Enable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Enable(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800376e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003772:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003776:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800377a:	f043 0301 	orr.w	r3, r3, #1
 800377e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003782:	bf00      	nop
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_RCC_LSI1_Disable>:
  * @brief  Disable LSI1 Oscillator
  * @rmtoll CSR          LSI1ON         LL_RCC_LSI1_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI1_Disable(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037a4:	bf00      	nop
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_RCC_LSI1_IsReady>:
  * @brief  Check if LSI1 is Ready
  * @rmtoll CSR          LSI1RDY        LL_RCC_LSI1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI1_IsReady(void)
{
 80037ae:	b480      	push	{r7}
 80037b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80037b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b02      	cmp	r3, #2
 80037c0:	d101      	bne.n	80037c6 <LL_RCC_LSI1_IsReady+0x18>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <LL_RCC_LSI1_IsReady+0x1a>
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <LL_RCC_LSI2_Enable>:
  * @brief  Enable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Enable(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80037d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037e2:	f043 0304 	orr.w	r3, r3, #4
 80037e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80037ea:	bf00      	nop
 80037ec:	46bd      	mov	sp, r7
 80037ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f2:	4770      	bx	lr

080037f4 <LL_RCC_LSI2_Disable>:
  * @brief  Disable LSI2 Oscillator
  * @rmtoll CSR          LSI2ON         LL_RCC_LSI2_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_Disable(void)
{
 80037f4:	b480      	push	{r7}
 80037f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003800:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003804:	f023 0304 	bic.w	r3, r3, #4
 8003808:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <LL_RCC_LSI2_IsReady>:
  * @brief  Check if LSI2 is Ready
  * @rmtoll CSR          LSI2RDY        LL_RCC_LSI2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI2_IsReady(void)
{
 8003816:	b480      	push	{r7}
 8003818:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800381a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b08      	cmp	r3, #8
 8003828:	d101      	bne.n	800382e <LL_RCC_LSI2_IsReady+0x18>
 800382a:	2301      	movs	r3, #1
 800382c:	e000      	b.n	8003830 <LL_RCC_LSI2_IsReady+0x1a>
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <LL_RCC_LSI2_SetTrimming>:
  * @rmtoll CSR        LSI2TRIM       LL_RCC_LSI2_SetTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI2_SetTrimming(uint32_t Value)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800384a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800386c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6013      	str	r3, [r2, #0]
}
 800387c:	bf00      	nop
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8003886:	b480      	push	{r7}
 8003888:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800388a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	6013      	str	r3, [r2, #0]
}
 800389a:	bf00      	nop
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80038a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d101      	bne.n	80038ba <LL_RCC_MSI_IsReady+0x16>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <LL_RCC_MSI_IsReady+0x18>
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b083      	sub	sp, #12
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80038ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]
}
 80038e2:	bf00      	nop
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80038f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fe:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2bb0      	cmp	r3, #176	; 0xb0
 8003904:	d901      	bls.n	800390a <LL_RCC_MSI_GetRange+0x1c>
  {
    msiRange = LL_RCC_MSIRANGE_11;
 8003906:	23b0      	movs	r3, #176	; 0xb0
 8003908:	607b      	str	r3, [r7, #4]
  }
  return msiRange;
 800390a:	687b      	ldr	r3, [r7, #4]
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003920:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003932:	4313      	orrs	r3, r2
 8003934:	604b      	str	r3, [r1, #4]
}
 8003936:	bf00      	nop
 8003938:	370c      	adds	r7, #12
 800393a:	46bd      	mov	sp, r7
 800393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003940:	4770      	bx	lr

08003942 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800394a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f023 0203 	bic.w	r2, r3, #3
 8003954:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800396e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f003 030c 	and.w	r3, r3, #12
}
 8003978:	4618      	mov	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800398a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003994:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80039b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <LL_RCC_SetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB4Prescaler(uint32_t Prescaler)
{
 80039d6:	b480      	push	{r7}
 80039d8:	b083      	sub	sp, #12
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80039de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039e6:	f023 020f 	bic.w	r2, r3, #15
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8003a0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	608b      	str	r3, [r1, #8]
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a38:	689b      	ldr	r3, [r3, #8]
 8003a3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	608b      	str	r3, [r1, #8]
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003a58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <LL_RCC_GetAHB4Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB4Prescaler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8003a70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a74:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a9a:	6013      	str	r3, [r2, #0]
}
 8003a9c:	bf00      	nop
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ab8:	6013      	str	r3, [r2, #0]
}
 8003aba:	bf00      	nop
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ad6:	d101      	bne.n	8003adc <LL_RCC_PLL_IsReady+0x18>
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e000      	b.n	8003ade <LL_RCC_PLL_IsReady+0x1a>
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003aec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	0a1b      	lsrs	r3, r3, #8
 8003af4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8003b02:	b480      	push	{r7}
 8003b04:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003b06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003b1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f003 0303 	and.w	r3, r3, #3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8003b4a:	b480      	push	{r7}
 8003b4c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8003b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b5c:	d101      	bne.n	8003b62 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e000      	b.n	8003b64 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8003b62:	2300      	movs	r3, #0
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b82:	d101      	bne.n	8003b88 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003b94:	b480      	push	{r7}
 8003b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b9c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d101      	bne.n	8003bae <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bcc:	d101      	bne.n	8003bd2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8003bde:	b480      	push	{r7}
 8003be0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003bf0:	d101      	bne.n	8003bf6 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c04:	b590      	push	{r4, r7, lr}
 8003c06:	b08d      	sub	sp, #52	; 0x34
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e37e      	b.n	8004314 <HAL_RCC_OscConfig+0x710>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0320 	and.w	r3, r3, #32
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8092 	beq.w	8003d48 <HAL_RCC_OscConfig+0x144>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c24:	f7ff fea1 	bl	800396a <LL_RCC_GetSysClkSource>
 8003c28:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c2a:	f7ff ff82 	bl	8003b32 <LL_RCC_PLL_GetMainSource>
 8003c2e:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d005      	beq.n	8003c42 <HAL_RCC_OscConfig+0x3e>
 8003c36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c38:	2b0c      	cmp	r3, #12
 8003c3a:	d14c      	bne.n	8003cd6 <HAL_RCC_OscConfig+0xd2>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d149      	bne.n	8003cd6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c42:	f7ff fe2f 	bl	80038a4 <LL_RCC_MSI_IsReady>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d005      	beq.n	8003c58 <HAL_RCC_OscConfig+0x54>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d101      	bne.n	8003c58 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e35d      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8003c5c:	f7ff fe47 	bl	80038ee <LL_RCC_MSI_GetRange>
 8003c60:	4603      	mov	r3, r0
 8003c62:	429c      	cmp	r4, r3
 8003c64:	d914      	bls.n	8003c90 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fd16 	bl	800469c <RCC_SetFlashLatencyFromMSIRange>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e34c      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7ff fe21 	bl	80038c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff fe45 	bl	8003918 <LL_RCC_MSI_SetCalibTrimming>
 8003c8e:	e013      	b.n	8003cb8 <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c94:	4618      	mov	r0, r3
 8003c96:	f7ff fe16 	bl	80038c6 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff fe3a 	bl	8003918 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f000 fcf7 	bl	800469c <RCC_SetFlashLatencyFromMSIRange>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e32d      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003cb8:	f000 fcdc 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	4bb3      	ldr	r3, [pc, #716]	; (8003f8c <HAL_RCC_OscConfig+0x388>)
 8003cc0:	601a      	str	r2, [r3, #0]
        
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cc2:	4bb3      	ldr	r3, [pc, #716]	; (8003f90 <HAL_RCC_OscConfig+0x38c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7fe fac6 	bl	8002258 <HAL_InitTick>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d039      	beq.n	8003d46 <HAL_RCC_OscConfig+0x142>
        {
          return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e31e      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d01e      	beq.n	8003d1c <HAL_RCC_OscConfig+0x118>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003cde:	f7ff fdc3 	bl	8003868 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fb07 	bl	80022f4 <HAL_GetTick>
 8003ce6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0xf8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cea:	f7fe fb03 	bl	80022f4 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e30b      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003cfc:	f7ff fdd2 	bl	80038a4 <LL_RCC_MSI_IsReady>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f1      	beq.n	8003cea <HAL_RCC_OscConfig+0xe6>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7ff fddb 	bl	80038c6 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	4618      	mov	r0, r3
 8003d16:	f7ff fdff 	bl	8003918 <LL_RCC_MSI_SetCalibTrimming>
 8003d1a:	e015      	b.n	8003d48 <HAL_RCC_OscConfig+0x144>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003d1c:	f7ff fdb3 	bl	8003886 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d20:	f7fe fae8 	bl	80022f4 <HAL_GetTick>
 8003d24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d26:	e008      	b.n	8003d3a <HAL_RCC_OscConfig+0x136>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d28:	f7fe fae4 	bl	80022f4 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	2b02      	cmp	r3, #2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_OscConfig+0x136>
          {
            return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e2ec      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003d3a:	f7ff fdb3 	bl	80038a4 <LL_RCC_MSI_IsReady>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d1f1      	bne.n	8003d28 <HAL_RCC_OscConfig+0x124>
 8003d44:	e000      	b.n	8003d48 <HAL_RCC_OscConfig+0x144>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d46:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d04e      	beq.n	8003df2 <HAL_RCC_OscConfig+0x1ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d54:	f7ff fe09 	bl	800396a <LL_RCC_GetSysClkSource>
 8003d58:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5a:	f7ff feea 	bl	8003b32 <LL_RCC_PLL_GetMainSource>
 8003d5e:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d60:	6a3b      	ldr	r3, [r7, #32]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d005      	beq.n	8003d72 <HAL_RCC_OscConfig+0x16e>
 8003d66:	6a3b      	ldr	r3, [r7, #32]
 8003d68:	2b0c      	cmp	r3, #12
 8003d6a:	d10d      	bne.n	8003d88 <HAL_RCC_OscConfig+0x184>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d10a      	bne.n	8003d88 <HAL_RCC_OscConfig+0x184>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d72:	f7ff fc19 	bl	80035a8 <LL_RCC_HSE_IsReady>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d039      	beq.n	8003df0 <HAL_RCC_OscConfig+0x1ec>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d135      	bne.n	8003df0 <HAL_RCC_OscConfig+0x1ec>
      {
        return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e2c5      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d90:	d102      	bne.n	8003d98 <HAL_RCC_OscConfig+0x194>
 8003d92:	f7ff fbeb 	bl	800356c <LL_RCC_HSE_Enable>
 8003d96:	e001      	b.n	8003d9c <HAL_RCC_OscConfig+0x198>
 8003d98:	f7ff fbf7 	bl	800358a <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da4:	f7fe faa6 	bl	80022f4 <HAL_GetTick>
 8003da8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0x1ba>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fe faa2 	bl	80022f4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0x1ba>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e2aa      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003dbe:	f7ff fbf3 	bl	80035a8 <LL_RCC_HSE_IsReady>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0f1      	beq.n	8003dac <HAL_RCC_OscConfig+0x1a8>
 8003dc8:	e013      	b.n	8003df2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dca:	f7fe fa93 	bl	80022f4 <HAL_GetTick>
 8003dce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003dd0:	e008      	b.n	8003de4 <HAL_RCC_OscConfig+0x1e0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd2:	f7fe fa8f 	bl	80022f4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	2b64      	cmp	r3, #100	; 0x64
 8003dde:	d901      	bls.n	8003de4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003de0:	2303      	movs	r3, #3
 8003de2:	e297      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003de4:	f7ff fbe0 	bl	80035a8 <LL_RCC_HSE_IsReady>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d1f1      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x1ce>
 8003dee:	e000      	b.n	8003df2 <HAL_RCC_OscConfig+0x1ee>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d051      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x29e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dfe:	f7ff fdb4 	bl	800396a <LL_RCC_GetSysClkSource>
 8003e02:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e04:	f7ff fe95 	bl	8003b32 <LL_RCC_PLL_GetMainSource>
 8003e08:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d005      	beq.n	8003e1c <HAL_RCC_OscConfig+0x218>
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b0c      	cmp	r3, #12
 8003e14:	d113      	bne.n	8003e3e <HAL_RCC_OscConfig+0x23a>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d110      	bne.n	8003e3e <HAL_RCC_OscConfig+0x23a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e1c:	f7ff fbf4 	bl	8003608 <LL_RCC_HSI_IsReady>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d005      	beq.n	8003e32 <HAL_RCC_OscConfig+0x22e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_OscConfig+0x22e>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e270      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7ff fbf8 	bl	800362c <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e3c:	e031      	b.n	8003ea2 <HAL_RCC_OscConfig+0x29e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d019      	beq.n	8003e7a <HAL_RCC_OscConfig+0x276>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e46:	f7ff fbc1 	bl	80035cc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fa53 	bl	80022f4 <HAL_GetTick>
 8003e4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x260>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fe fa4f 	bl	80022f4 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x260>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e257      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003e64:	f7ff fbd0 	bl	8003608 <LL_RCC_HSI_IsReady>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f1      	beq.n	8003e52 <HAL_RCC_OscConfig+0x24e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7ff fbda 	bl	800362c <LL_RCC_HSI_SetCalibTrimming>
 8003e78:	e013      	b.n	8003ea2 <HAL_RCC_OscConfig+0x29e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e7a:	f7ff fbb6 	bl	80035ea <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fe fa39 	bl	80022f4 <HAL_GetTick>
 8003e82:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e84:	e008      	b.n	8003e98 <HAL_RCC_OscConfig+0x294>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e86:	f7fe fa35 	bl	80022f4 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_OscConfig+0x294>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e23d      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003e98:	f7ff fbb6 	bl	8003608 <LL_RCC_HSI_IsReady>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f1      	bne.n	8003e86 <HAL_RCC_OscConfig+0x282>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d106      	bne.n	8003ebc <HAL_RCC_OscConfig+0x2b8>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 80a3 	beq.w	8004002 <HAL_RCC_OscConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d076      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x3ae>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d046      	beq.n	8003f5e <HAL_RCC_OscConfig+0x35a>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8003ed0:	f7ff fc6d 	bl	80037ae <LL_RCC_LSI1_IsReady>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d113      	bne.n	8003f02 <HAL_RCC_OscConfig+0x2fe>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8003eda:	f7ff fc46 	bl	800376a <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ede:	f7fe fa09 	bl	80022f4 <HAL_GetTick>
 8003ee2:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x2f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003ee6:	f7fe fa05 	bl	80022f4 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x2f4>
            {
              return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e20d      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8003ef8:	f7ff fc59 	bl	80037ae <LL_RCC_LSI1_IsReady>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d0f1      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x2e2>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8003f02:	f7ff fc66 	bl	80037d2 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fe f9f5 	bl	80022f4 <HAL_GetTick>
 8003f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x31c>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f0e:	f7fe f9f1 	bl	80022f4 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e1f9      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8003f20:	f7ff fc79 	bl	8003816 <LL_RCC_LSI2_IsReady>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0f1      	beq.n	8003f0e <HAL_RCC_OscConfig+0x30a>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff fc83 	bl	800383a <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8003f34:	f7ff fc2a 	bl	800378c <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe f9dc 	bl	80022f4 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0x34e>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f40:	f7fe f9d8 	bl	80022f4 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0x34e>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e1e0      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8003f52:	f7ff fc2c 	bl	80037ae <LL_RCC_LSI1_IsReady>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1f1      	bne.n	8003f40 <HAL_RCC_OscConfig+0x33c>
 8003f5c:	e051      	b.n	8004002 <HAL_RCC_OscConfig+0x3fe>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8003f5e:	f7ff fc04 	bl	800376a <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f62:	f7fe f9c7 	bl	80022f4 <HAL_GetTick>
 8003f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003f68:	e008      	b.n	8003f7c <HAL_RCC_OscConfig+0x378>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003f6a:	f7fe f9c3 	bl	80022f4 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x378>
          {
            return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e1cb      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8003f7c:	f7ff fc17 	bl	80037ae <LL_RCC_LSI1_IsReady>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d0f1      	beq.n	8003f6a <HAL_RCC_OscConfig+0x366>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8003f86:	f7ff fc35 	bl	80037f4 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003f8a:	e00c      	b.n	8003fa6 <HAL_RCC_OscConfig+0x3a2>
 8003f8c:	20000004 	.word	0x20000004
 8003f90:	20000008 	.word	0x20000008
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003f94:	f7fe f9ae 	bl	80022f4 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e1b6      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8003fa6:	f7ff fc36 	bl	8003816 <LL_RCC_LSI2_IsReady>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f1      	bne.n	8003f94 <HAL_RCC_OscConfig+0x390>
 8003fb0:	e027      	b.n	8004002 <HAL_RCC_OscConfig+0x3fe>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8003fb2:	f7ff fc1f 	bl	80037f4 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb6:	f7fe f99d 	bl	80022f4 <HAL_GetTick>
 8003fba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003fbc:	e008      	b.n	8003fd0 <HAL_RCC_OscConfig+0x3cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8003fbe:	f7fe f999 	bl	80022f4 <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	2b03      	cmp	r3, #3
 8003fca:	d901      	bls.n	8003fd0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fcc:	2303      	movs	r3, #3
 8003fce:	e1a1      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8003fd0:	f7ff fc21 	bl	8003816 <LL_RCC_LSI2_IsReady>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d1f1      	bne.n	8003fbe <HAL_RCC_OscConfig+0x3ba>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8003fda:	f7ff fbd7 	bl	800378c <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fde:	f7fe f989 	bl	80022f4 <HAL_GetTick>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003fe4:	e008      	b.n	8003ff8 <HAL_RCC_OscConfig+0x3f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8003fe6:	f7fe f985 	bl	80022f4 <HAL_GetTick>
 8003fea:	4602      	mov	r2, r0
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d901      	bls.n	8003ff8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8003ff4:	2303      	movs	r3, #3
 8003ff6:	e18d      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8003ff8:	f7ff fbd9 	bl	80037ae <LL_RCC_LSI1_IsReady>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1f1      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x3e2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 0304 	and.w	r3, r3, #4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d05b      	beq.n	80040c6 <HAL_RCC_OscConfig+0x4c2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800400e:	4bb5      	ldr	r3, [pc, #724]	; (80042e4 <HAL_RCC_OscConfig+0x6e0>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004016:	2b00      	cmp	r3, #0
 8004018:	d114      	bne.n	8004044 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800401a:	f7ff fa77 	bl	800350c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800401e:	f7fe f969 	bl	80022f4 <HAL_GetTick>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x434>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004026:	f7fe f965 	bl	80022f4 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e16d      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004038:	4baa      	ldr	r3, [pc, #680]	; (80042e4 <HAL_RCC_OscConfig+0x6e0>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d0f0      	beq.n	8004026 <HAL_RCC_OscConfig+0x422>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d102      	bne.n	8004052 <HAL_RCC_OscConfig+0x44e>
 800404c:	f7ff fb37 	bl	80036be <LL_RCC_LSE_Enable>
 8004050:	e00c      	b.n	800406c <HAL_RCC_OscConfig+0x468>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	2b05      	cmp	r3, #5
 8004058:	d104      	bne.n	8004064 <HAL_RCC_OscConfig+0x460>
 800405a:	f7ff fb52 	bl	8003702 <LL_RCC_LSE_EnableBypass>
 800405e:	f7ff fb2e 	bl	80036be <LL_RCC_LSE_Enable>
 8004062:	e003      	b.n	800406c <HAL_RCC_OscConfig+0x468>
 8004064:	f7ff fb3c 	bl	80036e0 <LL_RCC_LSE_Disable>
 8004068:	f7ff fb5c 	bl	8003724 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d014      	beq.n	800409e <HAL_RCC_OscConfig+0x49a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fe f93e 	bl	80022f4 <HAL_GetTick>
 8004078:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x48e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fe f93a 	bl	80022f4 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x48e>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e140      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004092:	f7ff fb58 	bl	8003746 <LL_RCC_LSE_IsReady>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ef      	beq.n	800407c <HAL_RCC_OscConfig+0x478>
 800409c:	e013      	b.n	80040c6 <HAL_RCC_OscConfig+0x4c2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fe f929 	bl	80022f4 <HAL_GetTick>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80040a4:	e00a      	b.n	80040bc <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040a6:	f7fe f925 	bl	80022f4 <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e12b      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_LSE_IsReady() != 0U)
 80040bc:	f7ff fb43 	bl	8003746 <LL_RCC_LSE_IsReady>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ef      	bne.n	80040a6 <HAL_RCC_OscConfig+0x4a2>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02c      	beq.n	800412c <HAL_RCC_OscConfig+0x528>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d014      	beq.n	8004104 <HAL_RCC_OscConfig+0x500>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040da:	f7ff fabc 	bl	8003656 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fe f909 	bl	80022f4 <HAL_GetTick>
 80040e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f4>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040e6:	f7fe f905 	bl	80022f4 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x4f4>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e10d      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() == 0U)
 80040f8:	f7ff facf 	bl	800369a <LL_RCC_HSI48_IsReady>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d0f1      	beq.n	80040e6 <HAL_RCC_OscConfig+0x4e2>
 8004102:	e013      	b.n	800412c <HAL_RCC_OscConfig+0x528>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004104:	f7ff fab8 	bl	8003678 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004108:	f7fe f8f4 	bl	80022f4 <HAL_GetTick>
 800410c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800410e:	e008      	b.n	8004122 <HAL_RCC_OscConfig+0x51e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004110:	f7fe f8f0 	bl	80022f4 <HAL_GetTick>
 8004114:	4602      	mov	r2, r0
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	2b02      	cmp	r3, #2
 800411c:	d901      	bls.n	8004122 <HAL_RCC_OscConfig+0x51e>
        {
          return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e0f8      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8004122:	f7ff faba 	bl	800369a <LL_RCC_HSI48_IsReady>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f1      	bne.n	8004110 <HAL_RCC_OscConfig+0x50c>
#endif
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 80ee 	beq.w	8004312 <HAL_RCC_OscConfig+0x70e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004136:	f7ff fc18 	bl	800396a <LL_RCC_GetSysClkSource>
 800413a:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800413c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	2b02      	cmp	r3, #2
 800414a:	f040 80af 	bne.w	80042ac <HAL_RCC_OscConfig+0x6a8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0203 	and.w	r2, r3, #3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	429a      	cmp	r2, r3
 800415a:	d123      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d11c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	0a1b      	lsrs	r3, r3, #8
 800416e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d114      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004184:	429a      	cmp	r2, r3
 8004186:	d10d      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004192:	429a      	cmp	r2, r3
 8004194:	d106      	bne.n	80041a4 <HAL_RCC_OscConfig+0x5a0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d05d      	beq.n	8004260 <HAL_RCC_OscConfig+0x65c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	2b0c      	cmp	r3, #12
 80041a8:	d058      	beq.n	800425c <HAL_RCC_OscConfig+0x658>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80041aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_RCC_OscConfig+0x5b8>

          {
            return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0ab      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80041bc:	f7ff fc73 	bl	8003aa6 <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041c0:	f7fe f898 	bl	80022f4 <HAL_GetTick>
 80041c4:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x5d6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c8:	f7fe f894 	bl	80022f4 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x5d6>
              {
                return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e09c      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1ef      	bne.n	80041c8 <HAL_RCC_OscConfig+0x5c4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	4b3e      	ldr	r3, [pc, #248]	; (80042e8 <HAL_RCC_OscConfig+0x6e4>)
 80041f0:	4013      	ands	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004200:	0212      	lsls	r2, r2, #8
 8004202:	4311      	orrs	r1, r2
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004208:	4311      	orrs	r1, r2
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800420e:	4311      	orrs	r1, r2
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004214:	430a      	orrs	r2, r1
 8004216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800421a:	4313      	orrs	r3, r2
 800421c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800421e:	f7ff fc33 	bl	8003a88 <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800422c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004230:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004232:	f7fe f85f 	bl	80022f4 <HAL_GetTick>
 8004236:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004238:	e008      	b.n	800424c <HAL_RCC_OscConfig+0x648>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423a:	f7fe f85b 	bl	80022f4 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b02      	cmp	r3, #2
 8004246:	d901      	bls.n	800424c <HAL_RCC_OscConfig+0x648>
              {
                return HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	e063      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0ef      	beq.n	800423a <HAL_RCC_OscConfig+0x636>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800425a:	e05a      	b.n	8004312 <HAL_RCC_OscConfig+0x70e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e059      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d151      	bne.n	8004312 <HAL_RCC_OscConfig+0x70e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800426e:	f7ff fc0b 	bl	8003a88 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800427c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004280:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004282:	f7fe f837 	bl	80022f4 <HAL_GetTick>
 8004286:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004288:	e008      	b.n	800429c <HAL_RCC_OscConfig+0x698>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800428a:	f7fe f833 	bl	80022f4 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	2b02      	cmp	r3, #2
 8004296:	d901      	bls.n	800429c <HAL_RCC_OscConfig+0x698>
            {
              return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e03b      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800429c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ef      	beq.n	800428a <HAL_RCC_OscConfig+0x686>
 80042aa:	e032      	b.n	8004312 <HAL_RCC_OscConfig+0x70e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d02d      	beq.n	800430e <HAL_RCC_OscConfig+0x70a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042b2:	f7ff fbf8 	bl	8003aa6 <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80042b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042c0:	f023 0303 	bic.w	r3, r3, #3
 80042c4:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 80042c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80042d0:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042da:	f7fe f80b 	bl	80022f4 <HAL_GetTick>
 80042de:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e0:	e00d      	b.n	80042fe <HAL_RCC_OscConfig+0x6fa>
 80042e2:	bf00      	nop
 80042e4:	58000400 	.word	0x58000400
 80042e8:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042ec:	f7fe f802 	bl	80022f4 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d901      	bls.n	80042fe <HAL_RCC_OscConfig+0x6fa>
          {
            return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e00a      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1ef      	bne.n	80042ec <HAL_RCC_OscConfig+0x6e8>
 800430c:	e001      	b.n	8004312 <HAL_RCC_OscConfig+0x70e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <HAL_RCC_OscConfig+0x710>
      }
    }
  }
  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3734      	adds	r7, #52	; 0x34
 8004318:	46bd      	mov	sp, r7
 800431a:	bd90      	pop	{r4, r7, pc}

0800431c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e12d      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004330:	4b98      	ldr	r3, [pc, #608]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	683a      	ldr	r2, [r7, #0]
 800433a:	429a      	cmp	r2, r3
 800433c:	d91b      	bls.n	8004376 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433e:	4b95      	ldr	r3, [pc, #596]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 0207 	bic.w	r2, r3, #7
 8004346:	4993      	ldr	r1, [pc, #588]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	4313      	orrs	r3, r2
 800434c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434e:	f7fd ffd1 	bl	80022f4 <HAL_GetTick>
 8004352:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004354:	e008      	b.n	8004368 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004356:	f7fd ffcd 	bl	80022f4 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	2b02      	cmp	r3, #2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e111      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004368:	4b8a      	ldr	r3, [pc, #552]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0307 	and.w	r3, r3, #7
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d1ef      	bne.n	8004356 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff fafb 	bl	8003982 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800438c:	f7fd ffb2 	bl	80022f4 <HAL_GetTick>
 8004390:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004392:	e008      	b.n	80043a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004394:	f7fd ffae 	bl	80022f4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d901      	bls.n	80043a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e0f2      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80043a6:	f7ff fbd0 	bl	8003b4a <LL_RCC_IsActiveFlag_HPRE>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d0f1      	beq.n	8004394 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0320 	and.w	r3, r3, #32
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d016      	beq.n	80043ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff faf2 	bl	80039aa <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80043c6:	f7fd ff95 	bl	80022f4 <HAL_GetTick>
 80043ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80043cc:	e008      	b.n	80043e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80043ce:	f7fd ff91 	bl	80022f4 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d901      	bls.n	80043e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e0d5      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80043e0:	f7ff fbc5 	bl	8003b6e <LL_RCC_IsActiveFlag_C2HPRE>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0f1      	beq.n	80043ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff faeb 	bl	80039d6 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004400:	f7fd ff78 	bl	80022f4 <HAL_GetTick>
 8004404:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004406:	e008      	b.n	800441a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004408:	f7fd ff74 	bl	80022f4 <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0b8      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800441a:	f7ff fbbb 	bl	8003b94 <LL_RCC_IsActiveFlag_SHDHPRE>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f1      	beq.n	8004408 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b00      	cmp	r3, #0
 800442e:	d016      	beq.n	800445e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4618      	mov	r0, r3
 8004436:	f7ff fae5 	bl	8003a04 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800443a:	f7fd ff5b 	bl	80022f4 <HAL_GetTick>
 800443e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004442:	f7fd ff57 	bl	80022f4 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d901      	bls.n	8004454 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e09b      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004454:	f7ff fbb1 	bl	8003bba <LL_RCC_IsActiveFlag_PPRE1>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f1      	beq.n	8004442 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff fadb 	bl	8003a2c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004476:	f7fd ff3d 	bl	80022f4 <HAL_GetTick>
 800447a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800447c:	e008      	b.n	8004490 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800447e:	f7fd ff39 	bl	80022f4 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	2b02      	cmp	r3, #2
 800448a:	d901      	bls.n	8004490 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800448c:	2303      	movs	r3, #3
 800448e:	e07d      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004490:	f7ff fba5 	bl	8003bde <LL_RCC_IsActiveFlag_PPRE2>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d0f1      	beq.n	800447e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0301 	and.w	r3, r3, #1
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d043      	beq.n	800452e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d106      	bne.n	80044bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80044ae:	f7ff f87b 	bl	80035a8 <LL_RCC_HSE_IsReady>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d11e      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e067      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b03      	cmp	r3, #3
 80044c2:	d106      	bne.n	80044d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80044c4:	f7ff fafe 	bl	8003ac4 <LL_RCC_PLL_IsReady>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d113      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e05c      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d106      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80044da:	f7ff f9e3 	bl	80038a4 <LL_RCC_MSI_IsReady>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d108      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e051      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80044e8:	f7ff f88e 	bl	8003608 <LL_RCC_HSI_IsReady>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e04a      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f7ff fa21 	bl	8003942 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004500:	f7fd fef8 	bl	80022f4 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fd fef4 	bl	80022f4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e036      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	f7ff fa24 	bl	800396a <LL_RCC_GetSysClkSource>
 8004522:	4602      	mov	r2, r0
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	429a      	cmp	r2, r3
 800452c:	d1ec      	bne.n	8004508 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800452e:	4b19      	ldr	r3, [pc, #100]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d21b      	bcs.n	8004574 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453c:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f023 0207 	bic.w	r2, r3, #7
 8004544:	4913      	ldr	r1, [pc, #76]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	4313      	orrs	r3, r2
 800454a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454c:	f7fd fed2 	bl	80022f4 <HAL_GetTick>
 8004550:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004552:	e008      	b.n	8004566 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004554:	f7fd fece 	bl	80022f4 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e012      	b.n	800458c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004566:	4b0b      	ldr	r3, [pc, #44]	; (8004594 <HAL_RCC_ClockConfig+0x278>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0307 	and.w	r3, r3, #7
 800456e:	683a      	ldr	r2, [r7, #0]
 8004570:	429a      	cmp	r2, r3
 8004572:	d1ef      	bne.n	8004554 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004574:	f000 f87e 	bl	8004674 <HAL_RCC_GetHCLKFreq>
 8004578:	4602      	mov	r2, r0
 800457a:	4b07      	ldr	r3, [pc, #28]	; (8004598 <HAL_RCC_ClockConfig+0x27c>)
 800457c:	601a      	str	r2, [r3, #0]
  
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800457e:	f7fd fec5 	bl	800230c <HAL_GetTickPrio>
 8004582:	4603      	mov	r3, r0
 8004584:	4618      	mov	r0, r3
 8004586:	f7fd fe67 	bl	8002258 <HAL_InitTick>
 800458a:	4603      	mov	r3, r0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3710      	adds	r7, #16
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}
 8004594:	58004000 	.word	0x58004000
 8004598:	20000004 	.word	0x20000004

0800459c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800459c:	b590      	push	{r4, r7, lr}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045a2:	f7ff f9e2 	bl	800396a <LL_RCC_GetSysClkSource>
 80045a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d10a      	bne.n	80045c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80045ae:	f7ff f99e 	bl	80038ee <LL_RCC_MSI_GetRange>
 80045b2:	4603      	mov	r3, r0
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	4a2a      	ldr	r2, [pc, #168]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc8>)
 80045bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e04a      	b.n	800465a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d102      	bne.n	80045d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80045ca:	4b27      	ldr	r3, [pc, #156]	; (8004668 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045cc:	60fb      	str	r3, [r7, #12]
 80045ce:	e044      	b.n	800465a <HAL_RCC_GetSysClockFreq+0xbe>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b08      	cmp	r3, #8
 80045d4:	d10a      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80045d6:	f7fe ffb7 	bl	8003548 <LL_RCC_HSE_IsEnabledDiv2>
 80045da:	4603      	mov	r3, r0
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d102      	bne.n	80045e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80045e0:	4b22      	ldr	r3, [pc, #136]	; (800466c <HAL_RCC_GetSysClockFreq+0xd0>)
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e039      	b.n	800465a <HAL_RCC_GetSysClockFreq+0xbe>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80045e6:	4b22      	ldr	r3, [pc, #136]	; (8004670 <HAL_RCC_GetSysClockFreq+0xd4>)
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e036      	b.n	800465a <HAL_RCC_GetSysClockFreq+0xbe>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80045ec:	f7ff faa1 	bl	8003b32 <LL_RCC_PLL_GetMainSource>
 80045f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b02      	cmp	r3, #2
 80045f6:	d002      	beq.n	80045fe <HAL_RCC_GetSysClockFreq+0x62>
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d003      	beq.n	8004604 <HAL_RCC_GetSysClockFreq+0x68>
 80045fc:	e00d      	b.n	800461a <HAL_RCC_GetSysClockFreq+0x7e>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80045fe:	4b1a      	ldr	r3, [pc, #104]	; (8004668 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004600:	60bb      	str	r3, [r7, #8]
        break;
 8004602:	e015      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004604:	f7fe ffa0 	bl	8003548 <LL_RCC_HSE_IsEnabledDiv2>
 8004608:	4603      	mov	r3, r0
 800460a:	2b01      	cmp	r3, #1
 800460c:	d102      	bne.n	8004614 <HAL_RCC_GetSysClockFreq+0x78>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800460e:	4b17      	ldr	r3, [pc, #92]	; (800466c <HAL_RCC_GetSysClockFreq+0xd0>)
 8004610:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004612:	e00d      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x94>
          pllinputfreq = HSE_VALUE;
 8004614:	4b16      	ldr	r3, [pc, #88]	; (8004670 <HAL_RCC_GetSysClockFreq+0xd4>)
 8004616:	60bb      	str	r3, [r7, #8]
        break;
 8004618:	e00a      	b.n	8004630 <HAL_RCC_GetSysClockFreq+0x94>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800461a:	f7ff f968 	bl	80038ee <LL_RCC_MSI_GetRange>
 800461e:	4603      	mov	r3, r0
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	4a0f      	ldr	r2, [pc, #60]	; (8004664 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800462c:	60bb      	str	r3, [r7, #8]
        break;
 800462e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004630:	f7ff fa5a 	bl	8003ae8 <LL_RCC_PLL_GetN>
 8004634:	4602      	mov	r2, r0
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	fb03 f402 	mul.w	r4, r3, r2
 800463c:	f7ff fa6d 	bl	8003b1a <LL_RCC_PLL_GetDivider>
 8004640:	4603      	mov	r3, r0
 8004642:	091b      	lsrs	r3, r3, #4
 8004644:	3301      	adds	r3, #1
 8004646:	fbb4 f4f3 	udiv	r4, r4, r3
 800464a:	f7ff fa5a 	bl	8003b02 <LL_RCC_PLL_GetR>
 800464e:	4603      	mov	r3, r0
 8004650:	0f5b      	lsrs	r3, r3, #29
 8004652:	3301      	adds	r3, #1
 8004654:	fbb4 f3f3 	udiv	r3, r4, r3
 8004658:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 800465a:	68fb      	ldr	r3, [r7, #12]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3714      	adds	r7, #20
 8004660:	46bd      	mov	sp, r7
 8004662:	bd90      	pop	{r4, r7, pc}
 8004664:	0800968c 	.word	0x0800968c
 8004668:	00f42400 	.word	0x00f42400
 800466c:	003d0900 	.word	0x003d0900
 8004670:	007a1200 	.word	0x007a1200

08004674 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004674:	b598      	push	{r3, r4, r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004678:	f7ff ff90 	bl	800459c <HAL_RCC_GetSysClockFreq>
 800467c:	4604      	mov	r4, r0
 800467e:	f7ff f9e9 	bl	8003a54 <LL_RCC_GetAHBPrescaler>
 8004682:	4603      	mov	r3, r0
 8004684:	091b      	lsrs	r3, r3, #4
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	4a03      	ldr	r2, [pc, #12]	; (8004698 <HAL_RCC_GetHCLKFreq+0x24>)
 800468c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004690:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004694:	4618      	mov	r0, r3
 8004696:	bd98      	pop	{r3, r4, r7, pc}
 8004698:	0800964c 	.word	0x0800964c

0800469c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800469c:	b590      	push	{r4, r7, lr}
 800469e:	b085      	sub	sp, #20
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2bb0      	cmp	r3, #176	; 0xb0
 80046a8:	d903      	bls.n	80046b2 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80046aa:	4b15      	ldr	r3, [pc, #84]	; (8004700 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e007      	b.n	80046c2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	4a11      	ldr	r2, [pc, #68]	; (8004700 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 80046bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046c0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80046c2:	f7ff f9d3 	bl	8003a6c <LL_RCC_GetAHB4Prescaler>
 80046c6:	4603      	mov	r3, r0
 80046c8:	091b      	lsrs	r3, r3, #4
 80046ca:	f003 030f 	and.w	r3, r3, #15
 80046ce:	4a0d      	ldr	r2, [pc, #52]	; (8004704 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80046d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046da:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	4a0a      	ldr	r2, [pc, #40]	; (8004708 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80046e0:	fba2 2303 	umull	r2, r3, r2, r3
 80046e4:	0c9c      	lsrs	r4, r3, #18
 80046e6:	f7fe ff21 	bl	800352c <HAL_PWREx_GetVoltageRange>
 80046ea:	4603      	mov	r3, r0
 80046ec:	4619      	mov	r1, r3
 80046ee:	4620      	mov	r0, r4
 80046f0:	f000 f80c 	bl	800470c <RCC_SetFlashLatency>
 80046f4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd90      	pop	{r4, r7, pc}
 80046fe:	bf00      	nop
 8004700:	0800968c 	.word	0x0800968c
 8004704:	0800964c 	.word	0x0800964c
 8004708:	431bde83 	.word	0x431bde83

0800470c <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800470c:	b590      	push	{r4, r7, lr}
 800470e:	b093      	sub	sp, #76	; 0x4c
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004716:	4b39      	ldr	r3, [pc, #228]	; (80047fc <RCC_SetFlashLatency+0xf0>)
 8004718:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800471c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800471e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004722:	4a37      	ldr	r2, [pc, #220]	; (8004800 <RCC_SetFlashLatency+0xf4>)
 8004724:	f107 031c 	add.w	r3, r7, #28
 8004728:	ca07      	ldmia	r2, {r0, r1, r2}
 800472a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800472e:	4b35      	ldr	r3, [pc, #212]	; (8004804 <RCC_SetFlashLatency+0xf8>)
 8004730:	f107 040c 	add.w	r4, r7, #12
 8004734:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004736:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800473a:	2300      	movs	r3, #0
 800473c:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d11c      	bne.n	8004780 <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004746:	2300      	movs	r3, #0
 8004748:	643b      	str	r3, [r7, #64]	; 0x40
 800474a:	e015      	b.n	8004778 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800474c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004754:	4413      	add	r3, r2
 8004756:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d808      	bhi.n	8004772 <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004768:	4413      	add	r3, r2
 800476a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800476e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004770:	e022      	b.n	80047b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004774:	3301      	adds	r3, #1
 8004776:	643b      	str	r3, [r7, #64]	; 0x40
 8004778:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800477a:	2b03      	cmp	r3, #3
 800477c:	d9e6      	bls.n	800474c <RCC_SetFlashLatency+0x40>
 800477e:	e01b      	b.n	80047b8 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004780:	2300      	movs	r3, #0
 8004782:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004784:	e015      	b.n	80047b2 <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800478e:	4413      	add	r3, r2
 8004790:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	429a      	cmp	r2, r3
 8004798:	d808      	bhi.n	80047ac <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800479a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047a2:	4413      	add	r3, r2
 80047a4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80047aa:	e005      	b.n	80047b8 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80047ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ae:	3301      	adds	r3, #1
 80047b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d9e6      	bls.n	8004786 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 80047b8:	4b13      	ldr	r3, [pc, #76]	; (8004808 <RCC_SetFlashLatency+0xfc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f023 0207 	bic.w	r2, r3, #7
 80047c0:	4911      	ldr	r1, [pc, #68]	; (8004808 <RCC_SetFlashLatency+0xfc>)
 80047c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c4:	4313      	orrs	r3, r2
 80047c6:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80047c8:	f7fd fd94 	bl	80022f4 <HAL_GetTick>
 80047cc:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047ce:	e008      	b.n	80047e2 <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80047d0:	f7fd fd90 	bl	80022f4 <HAL_GetTick>
 80047d4:	4602      	mov	r2, r0
 80047d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	2b02      	cmp	r3, #2
 80047dc:	d901      	bls.n	80047e2 <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e007      	b.n	80047f2 <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80047e2:	4b09      	ldr	r3, [pc, #36]	; (8004808 <RCC_SetFlashLatency+0xfc>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d1ef      	bne.n	80047d0 <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	374c      	adds	r7, #76	; 0x4c
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd90      	pop	{r4, r7, pc}
 80047fa:	bf00      	nop
 80047fc:	080088fc 	.word	0x080088fc
 8004800:	0800890c 	.word	0x0800890c
 8004804:	08008918 	.word	0x08008918
 8004808:	58004000 	.word	0x58004000

0800480c <LL_RCC_LSE_IsEnabled>:
{
 800480c:	b480      	push	{r7}
 800480e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004810:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004818:	f003 0301 	and.w	r3, r3, #1
 800481c:	2b01      	cmp	r3, #1
 800481e:	d101      	bne.n	8004824 <LL_RCC_LSE_IsEnabled+0x18>
 8004820:	2301      	movs	r3, #1
 8004822:	e000      	b.n	8004826 <LL_RCC_LSE_IsEnabled+0x1a>
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <LL_RCC_LSE_IsReady>:
{
 8004830:	b480      	push	{r7}
 8004832:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004834:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b02      	cmp	r3, #2
 8004842:	d101      	bne.n	8004848 <LL_RCC_LSE_IsReady+0x18>
 8004844:	2301      	movs	r3, #1
 8004846:	e000      	b.n	800484a <LL_RCC_LSE_IsReady+0x1a>
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <LL_RCC_SetRFWKPClockSource>:
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800485c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004864:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004868:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <LL_RCC_SetSMPSClockSource>:
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004888:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	f023 0203 	bic.w	r2, r3, #3
 8004892:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4313      	orrs	r3, r2
 800489a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <LL_RCC_SetSMPSPrescaler>:
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80048b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4313      	orrs	r3, r2
 80048c2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80048c4:	bf00      	nop
 80048c6:	370c      	adds	r7, #12
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <LL_RCC_SetUSARTClockSource>:
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80048d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e0:	f023 0203 	bic.w	r2, r3, #3
 80048e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <LL_RCC_SetLPUARTClockSource>:
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004904:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <LL_RCC_SetI2CClockSource>:
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004940:	43db      	mvns	r3, r3
 8004942:	401a      	ands	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	011b      	lsls	r3, r3, #4
 8004948:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800494c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004950:	4313      	orrs	r3, r2
 8004952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <LL_RCC_SetLPTIMClockSource>:
{
 8004962:	b480      	push	{r7}
 8004964:	b083      	sub	sp, #12
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800496a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800496e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	0c1b      	lsrs	r3, r3, #16
 8004976:	041b      	lsls	r3, r3, #16
 8004978:	43db      	mvns	r3, r3
 800497a:	401a      	ands	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_RCC_SetSAIClockSource>:
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800499e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <LL_RCC_SetRNGClockSource>:
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80049ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80049d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80049e2:	bf00      	nop
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <LL_RCC_SetCLK48ClockSource>:
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80049f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a0e:	bf00      	nop
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <LL_RCC_SetUSBClockSource>:
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7ff ffe3 	bl	80049ee <LL_RCC_SetCLK48ClockSource>
}
 8004a28:	bf00      	nop
 8004a2a:	3708      	adds	r7, #8
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <LL_RCC_SetADCClockSource>:
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8004a38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a40:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <LL_RCC_SetRTCClockSource>:
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8004a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <LL_RCC_GetRTCClockSource>:
{
 8004a88:	b480      	push	{r7}
 8004a8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8004a8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <LL_RCC_ForceBackupDomainReset>:
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ab2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004aba:	bf00      	nop
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <LL_RCC_ReleaseBackupDomainReset>:
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004ac8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ad0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004adc:	bf00      	nop
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <LL_RCC_PLLSAI1_Enable>:
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004aea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004af4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004af8:	6013      	str	r3, [r2, #0]
}
 8004afa:	bf00      	nop
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <LL_RCC_PLLSAI1_Disable>:
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8004b08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b16:	6013      	str	r3, [r2, #0]
}
 8004b18:	bf00      	nop
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <LL_RCC_PLLSAI1_IsReady>:
{
 8004b22:	b480      	push	{r7}
 8004b24:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8004b26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b34:	d101      	bne.n	8004b3a <LL_RCC_PLLSAI1_IsReady+0x18>
 8004b36:	2301      	movs	r3, #1
 8004b38:	e000      	b.n	8004b3c <LL_RCC_PLLSAI1_IsReady+0x1a>
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b088      	sub	sp, #32
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8004b4e:	2300      	movs	r3, #0
 8004b50:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004b52:	2300      	movs	r3, #0
 8004b54:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d033      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b6a:	d00c      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004b6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b70:	d802      	bhi.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d010      	beq.n	8004b98 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b76:	e017      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004b78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b7c:	d017      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x68>
 8004b7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b82:	d016      	beq.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8004b84:	e010      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8004b86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8004b96:	e00d      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>

#if defined(SAI1)
      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 f947 	bl	8004e30 <RCCEx_PLLSAI1_ConfigNP>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ba6:	e005      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	77fb      	strb	r3, [r7, #31]
        break;
 8004bac:	e002      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004bae:	bf00      	nop
 8004bb0:	e000      	b.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        break;
 8004bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb4:	7ffb      	ldrb	r3, [r7, #31]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7ff fee9 	bl	8004996 <LL_RCC_SetSAIClockSource>
 8004bc4:	e001      	b.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x84>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc6:	7ffb      	ldrb	r3, [r7, #31]
 8004bc8:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d046      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8004bd6:	f7ff ff57 	bl	8004a88 <LL_RCC_GetRTCClockSource>
 8004bda:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be0:	69ba      	ldr	r2, [r7, #24]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d03c      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8004be6:	f7fe fc91 	bl	800350c <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff31 	bl	8004a5c <LL_RCC_SetRTCClockSource>
 8004bfa:	e02e      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x114>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8004bfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8004c06:	f7ff ff4c 	bl	8004aa2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8004c0a:	f7ff ff5b 	bl	8004ac4 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8004c1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8004c26:	f7ff fdf1 	bl	800480c <LL_RCC_LSE_IsEnabled>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d114      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c30:	f7fd fb60 	bl	80022f4 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c36:	e00b      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c38:	f7fd fb5c 	bl	80022f4 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d902      	bls.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x10a>
            {
              ret = HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	77fb      	strb	r3, [r7, #31]
              break;
 8004c4e:	e004      	b.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0x114>
          while (LL_RCC_LSE_IsReady() != 1U)
 8004c50:	f7ff fdee 	bl	8004830 <LL_RCC_LSE_IsReady>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d1ee      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8004c5a:	7ffb      	ldrb	r3, [r7, #31]
 8004c5c:	77bb      	strb	r3, [r7, #30]
 8004c5e:	e001      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x11e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c60:	7ffb      	ldrb	r3, [r7, #31]
 8004c62:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d004      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7ff fe2b 	bl	80048d0 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7ff fe36 	bl	80048fc <LL_RCC_SetLPUARTClockSource>
  }
#endif

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d004      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7ff fe5e 	bl	8004962 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0320 	and.w	r3, r3, #32
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d004      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fe53 	bl	8004962 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0304 	and.w	r3, r3, #4
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d004      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff fe2b 	bl	8004928 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7ff fe20 	bl	8004928 <LL_RCC_SetI2CClockSource>
  }
#endif

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d022      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff fe8e 	bl	8004a1a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d06:	d107      	bne.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8004d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d16:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
  if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d20:	d10b      	bne.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f8dd 	bl	8004ee6 <RCCEx_PLLSAI1_ConfigNQ>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004d30:	7ffb      	ldrb	r3, [r7, #31]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    {
      /* set overall return value */
      status = ret;
 8004d36:	7ffb      	ldrb	r3, [r7, #31]
 8004d38:	77bb      	strb	r3, [r7, #30]
#endif
  }
#endif

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d02b      	beq.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d4e:	d008      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d58:	d003      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d105      	bne.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x228>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7ff fe2b 	bl	80049c2 <LL_RCC_SetRNGClockSource>
 8004d6c:	e00a      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d76:	60fb      	str	r3, [r7, #12]
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f7ff fe22 	bl	80049c2 <LL_RCC_SetRNGClockSource>
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff fe35 	bl	80049ee <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d88:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x258>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004d98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d022      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fe3e 	bl	8004a30 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dbc:	d107      	bne.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dcc:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
  if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004dd6:	d10b      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
    ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	3304      	adds	r3, #4
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f000 f8dd 	bl	8004f9c <RCCEx_PLLSAI1_ConfigNR>
 8004de2:	4603      	mov	r3, r0
 8004de4:	77fb      	strb	r3, [r7, #31]

    if (ret != HAL_OK)
 8004de6:	7ffb      	ldrb	r3, [r7, #31]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
      /* set overall return value */
      status = ret;
 8004dec:	7ffb      	ldrb	r3, [r7, #31]
 8004dee:	77bb      	strb	r3, [r7, #30]
  }
#endif
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d004      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7ff fd27 	bl	8004854 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e16:	4618      	mov	r0, r3
 8004e18:	f7ff fd46 	bl	80048a8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7ff fd2d 	bl	8004880 <LL_RCC_SetSMPSClockSource>
  }
#endif


  return status;
 8004e26:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3720      	adds	r7, #32
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004e3c:	f7ff fe62 	bl	8004b04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e40:	f7fd fa58 	bl	80022f4 <HAL_GetTick>
 8004e44:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e46:	e009      	b.n	8004e5c <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e48:	f7fd fa54 	bl	80022f4 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d902      	bls.n	8004e5c <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	73fb      	strb	r3, [r7, #15]
      break;
 8004e5a:	e004      	b.n	8004e66 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004e5c:	f7ff fe61 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004e60:	4603      	mov	r3, r0
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1f0      	bne.n	8004e48 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8004e66:	7bfb      	ldrb	r3, [r7, #15]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d137      	bne.n	8004edc <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004e6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	021b      	lsls	r3, r3, #8
 8004e7c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e80:	4313      	orrs	r3, r2
 8004e82:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8004e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004e96:	4313      	orrs	r3, r2
 8004e98:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004e9a:	f7ff fe24 	bl	8004ae6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9e:	f7fd fa29 	bl	80022f4 <HAL_GetTick>
 8004ea2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004ea4:	e009      	b.n	8004eba <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea6:	f7fd fa25 	bl	80022f4 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d902      	bls.n	8004eba <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	73fb      	strb	r3, [r7, #15]
        break;
 8004eb8:	e004      	b.n	8004ec4 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004eba:	f7ff fe32 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d1f0      	bne.n	8004ea6 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d108      	bne.n	8004edc <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004eca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b084      	sub	sp, #16
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004ef2:	f7ff fe07 	bl	8004b04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004ef6:	f7fd f9fd 	bl	80022f4 <HAL_GetTick>
 8004efa:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004efc:	e009      	b.n	8004f12 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004efe:	f7fd f9f9 	bl	80022f4 <HAL_GetTick>
 8004f02:	4602      	mov	r2, r0
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	1ad3      	subs	r3, r2, r3
 8004f08:	2b02      	cmp	r3, #2
 8004f0a:	d902      	bls.n	8004f12 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8004f0c:	2303      	movs	r3, #3
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e004      	b.n	8004f1c <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004f12:	f7ff fe06 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d1f0      	bne.n	8004efe <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d137      	bne.n	8004f92 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004f22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	021b      	lsls	r3, r3, #8
 8004f32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f36:	4313      	orrs	r3, r2
 8004f38:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8004f3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8004f50:	f7ff fdc9 	bl	8004ae6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f54:	f7fd f9ce 	bl	80022f4 <HAL_GetTick>
 8004f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f5a:	e009      	b.n	8004f70 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f5c:	f7fd f9ca 	bl	80022f4 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d902      	bls.n	8004f70 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8004f6e:	e004      	b.n	8004f7a <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8004f70:	f7ff fdd7 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d1f0      	bne.n	8004f5c <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8004f7a:	7bfb      	ldrb	r3, [r7, #15]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d108      	bne.n	8004f92 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8004f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f84:	691a      	ldr	r2, [r3, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8004fa8:	f7ff fdac 	bl	8004b04 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004fac:	f7fd f9a2 	bl	80022f4 <HAL_GetTick>
 8004fb0:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fb2:	e009      	b.n	8004fc8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004fb4:	f7fd f99e 	bl	80022f4 <HAL_GetTick>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	1ad3      	subs	r3, r2, r3
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d902      	bls.n	8004fc8 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	73fb      	strb	r3, [r7, #15]
      break;
 8004fc6:	e004      	b.n	8004fd2 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8004fc8:	f7ff fdab 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1f0      	bne.n	8004fb4 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8004fd2:	7bfb      	ldrb	r3, [r7, #15]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d137      	bne.n	8005048 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8004fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fec:	4313      	orrs	r3, r2
 8004fee:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8004ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005002:	4313      	orrs	r3, r2
 8005004:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8005006:	f7ff fd6e 	bl	8004ae6 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800500a:	f7fd f973 	bl	80022f4 <HAL_GetTick>
 800500e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005010:	e009      	b.n	8005026 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005012:	f7fd f96f 	bl	80022f4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d902      	bls.n	8005026 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	73fb      	strb	r3, [r7, #15]
        break;
 8005024:	e004      	b.n	8005030 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8005026:	f7ff fd7c 	bl	8004b22 <LL_RCC_PLLSAI1_IsReady>
 800502a:	4603      	mov	r3, r0
 800502c:	2b01      	cmp	r3, #1
 800502e:	d1f0      	bne.n	8005012 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d108      	bne.n	8005048 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800503a:	691a      	ldr	r2, [r3, #16]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005044:	4313      	orrs	r3, r2
 8005046:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8005048:	7bfb      	ldrb	r3, [r7, #15]
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}

08005052 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005052:	b580      	push	{r7, lr}
 8005054:	b084      	sub	sp, #16
 8005056:	af00      	add	r7, sp, #0
 8005058:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e095      	b.n	8005190 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d108      	bne.n	800507e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005074:	d009      	beq.n	800508a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	61da      	str	r2, [r3, #28]
 800507c:	e005      	b.n	800508a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005096:	b2db      	uxtb	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fc fc15 	bl	80018d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ca:	d902      	bls.n	80050d2 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e002      	b.n	80050d8 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80050d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80050e0:	d007      	beq.n	80050f2 <HAL_SPI_Init+0xa0>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80050ea:	d002      	beq.n	80050f2 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005102:	431a      	orrs	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	431a      	orrs	r2, r3
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	431a      	orrs	r2, r3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800512a:	431a      	orrs	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6a1b      	ldr	r3, [r3, #32]
 8005130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005134:	ea42 0103 	orr.w	r1, r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	699b      	ldr	r3, [r3, #24]
 800514c:	0c1b      	lsrs	r3, r3, #16
 800514e:	f003 0204 	and.w	r2, r3, #4
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005156:	f003 0310 	and.w	r3, r3, #16
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800516e:	ea42 0103 	orr.w	r1, r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	603b      	str	r3, [r7, #0]
 80051a4:	4613      	mov	r3, r2
 80051a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d101      	bne.n	80051ba <HAL_SPI_Transmit+0x22>
 80051b6:	2302      	movs	r3, #2
 80051b8:	e158      	b.n	800546c <HAL_SPI_Transmit+0x2d4>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80051c2:	f7fd f897 	bl	80022f4 <HAL_GetTick>
 80051c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80051c8:	88fb      	ldrh	r3, [r7, #6]
 80051ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d002      	beq.n	80051de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80051d8:	2302      	movs	r3, #2
 80051da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051dc:	e13d      	b.n	800545a <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d002      	beq.n	80051ea <HAL_SPI_Transmit+0x52>
 80051e4:	88fb      	ldrh	r3, [r7, #6]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d102      	bne.n	80051f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80051ee:	e134      	b.n	800545a <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2203      	movs	r2, #3
 80051f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	88fa      	ldrh	r2, [r7, #6]
 800520e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2200      	movs	r2, #0
 8005222:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2200      	movs	r2, #0
 800522a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2200      	movs	r2, #0
 8005230:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800523a:	d10f      	bne.n	800525c <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800524a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800525a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d007      	beq.n	800527a <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005278:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005282:	d94b      	bls.n	800531c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <HAL_SPI_Transmit+0xfa>
 800528c:	8afb      	ldrh	r3, [r7, #22]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d13e      	bne.n	8005310 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	881a      	ldrh	r2, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a2:	1c9a      	adds	r2, r3, #2
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	3b01      	subs	r3, #1
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80052b6:	e02b      	b.n	8005310 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b02      	cmp	r3, #2
 80052c4:	d112      	bne.n	80052ec <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	1c9a      	adds	r2, r3, #2
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	3b01      	subs	r3, #1
 80052e4:	b29a      	uxth	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052ea:	e011      	b.n	8005310 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052ec:	f7fd f802 	bl	80022f4 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d803      	bhi.n	8005304 <HAL_SPI_Transmit+0x16c>
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d102      	bne.n	800530a <HAL_SPI_Transmit+0x172>
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d102      	bne.n	8005310 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800530e:	e0a4      	b.n	800545a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005314:	b29b      	uxth	r3, r3
 8005316:	2b00      	cmp	r3, #0
 8005318:	d1ce      	bne.n	80052b8 <HAL_SPI_Transmit+0x120>
 800531a:	e07c      	b.n	8005416 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_SPI_Transmit+0x192>
 8005324:	8afb      	ldrh	r3, [r7, #22]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d170      	bne.n	800540c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b01      	cmp	r3, #1
 8005332:	d912      	bls.n	800535a <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005338:	881a      	ldrh	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	1c9a      	adds	r2, r3, #2
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b02      	subs	r3, #2
 8005352:	b29a      	uxth	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005358:	e058      	b.n	800540c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	7812      	ldrb	r2, [r2, #0]
 8005366:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005380:	e044      	b.n	800540c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0302 	and.w	r3, r3, #2
 800538c:	2b02      	cmp	r3, #2
 800538e:	d12b      	bne.n	80053e8 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005394:	b29b      	uxth	r3, r3
 8005396:	2b01      	cmp	r3, #1
 8005398:	d912      	bls.n	80053c0 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	881a      	ldrh	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053aa:	1c9a      	adds	r2, r3, #2
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3b02      	subs	r3, #2
 80053b8:	b29a      	uxth	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053be:	e025      	b.n	800540c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	330c      	adds	r3, #12
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053e6:	e011      	b.n	800540c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053e8:	f7fc ff84 	bl	80022f4 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d803      	bhi.n	8005400 <HAL_SPI_Transmit+0x268>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fe:	d102      	bne.n	8005406 <HAL_SPI_Transmit+0x26e>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	77fb      	strb	r3, [r7, #31]
          goto error;
 800540a:	e026      	b.n	800545a <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005410:	b29b      	uxth	r3, r3
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1b5      	bne.n	8005382 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	6839      	ldr	r1, [r7, #0]
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	f000 f940 	bl	80056a0 <SPI_EndRxTxTransaction>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d002      	beq.n	800542c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2220      	movs	r2, #32
 800542a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005434:	2300      	movs	r3, #0
 8005436:	613b      	str	r3, [r7, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544e:	2b00      	cmp	r3, #0
 8005450:	d002      	beq.n	8005458 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e000      	b.n	800545a <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005458:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2200      	movs	r2, #0
 8005466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800546a:	7ffb      	ldrb	r3, [r7, #31]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005484:	f7fc ff36 	bl	80022f4 <HAL_GetTick>
 8005488:	4602      	mov	r2, r0
 800548a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548c:	1a9b      	subs	r3, r3, r2
 800548e:	683a      	ldr	r2, [r7, #0]
 8005490:	4413      	add	r3, r2
 8005492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005494:	f7fc ff2e 	bl	80022f4 <HAL_GetTick>
 8005498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800549a:	4b39      	ldr	r3, [pc, #228]	; (8005580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	015b      	lsls	r3, r3, #5
 80054a0:	0d1b      	lsrs	r3, r3, #20
 80054a2:	69fa      	ldr	r2, [r7, #28]
 80054a4:	fb02 f303 	mul.w	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054aa:	e054      	b.n	8005556 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b2:	d050      	beq.n	8005556 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054b4:	f7fc ff1e 	bl	80022f4 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d902      	bls.n	80054ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d13d      	bne.n	8005546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e2:	d111      	bne.n	8005508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ec:	d004      	beq.n	80054f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f6:	d107      	bne.n	8005508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005510:	d10f      	bne.n	8005532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	e017      	b.n	8005576 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	3b01      	subs	r3, #1
 8005554:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689a      	ldr	r2, [r3, #8]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4013      	ands	r3, r2
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	bf0c      	ite	eq
 8005566:	2301      	moveq	r3, #1
 8005568:	2300      	movne	r3, #0
 800556a:	b2db      	uxtb	r3, r3
 800556c:	461a      	mov	r2, r3
 800556e:	79fb      	ldrb	r3, [r7, #7]
 8005570:	429a      	cmp	r2, r3
 8005572:	d19b      	bne.n	80054ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000004 	.word	0x20000004

08005584 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b088      	sub	sp, #32
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
 8005590:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005592:	f7fc feaf 	bl	80022f4 <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559a:	1a9b      	subs	r3, r3, r2
 800559c:	683a      	ldr	r2, [r7, #0]
 800559e:	4413      	add	r3, r2
 80055a0:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80055a2:	f7fc fea7 	bl	80022f4 <HAL_GetTick>
 80055a6:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055a8:	4b3c      	ldr	r3, [pc, #240]	; (800569c <SPI_WaitFifoStateUntilTimeout+0x118>)
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	4413      	add	r3, r2
 80055b2:	00da      	lsls	r2, r3, #3
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	0d1b      	lsrs	r3, r3, #20
 80055b8:	69fa      	ldr	r2, [r7, #28]
 80055ba:	fb02 f303 	mul.w	r3, r2, r3
 80055be:	617b      	str	r3, [r7, #20]

  while ((hspi->Instance->SR & Fifo) != State)
 80055c0:	e05f      	b.n	8005682 <SPI_WaitFifoStateUntilTimeout+0xfe>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055c8:	d106      	bne.n	80055d8 <SPI_WaitFifoStateUntilTimeout+0x54>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d103      	bne.n	80055d8 <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055de:	d050      	beq.n	8005682 <SPI_WaitFifoStateUntilTimeout+0xfe>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055e0:	f7fc fe88 	bl	80022f4 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d902      	bls.n	80055f6 <SPI_WaitFifoStateUntilTimeout+0x72>
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d13d      	bne.n	8005672 <SPI_WaitFifoStateUntilTimeout+0xee>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685a      	ldr	r2, [r3, #4]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005604:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800560e:	d111      	bne.n	8005634 <SPI_WaitFifoStateUntilTimeout+0xb0>
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005618:	d004      	beq.n	8005624 <SPI_WaitFifoStateUntilTimeout+0xa0>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005622:	d107      	bne.n	8005634 <SPI_WaitFifoStateUntilTimeout+0xb0>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005632:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800563c:	d10f      	bne.n	800565e <SPI_WaitFifoStateUntilTimeout+0xda>
        {
          SPI_RESET_CRC(hspi);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800564c:	601a      	str	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800565c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2201      	movs	r2, #1
 8005662:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800566e:	2303      	movs	r3, #3
 8005670:	e010      	b.n	8005694 <SPI_WaitFifoStateUntilTimeout+0x110>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <SPI_WaitFifoStateUntilTimeout+0xf8>
      {
        tmp_timeout = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	3b01      	subs	r3, #1
 8005680:	617b      	str	r3, [r7, #20]
  while ((hspi->Instance->SR & Fifo) != State)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	4013      	ands	r3, r2
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	429a      	cmp	r2, r3
 8005690:	d197      	bne.n	80055c2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3720      	adds	r7, #32
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	20000004 	.word	0x20000004

080056a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af02      	add	r7, sp, #8
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	9300      	str	r3, [sp, #0]
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80056b8:	68f8      	ldr	r0, [r7, #12]
 80056ba:	f7ff ff63 	bl	8005584 <SPI_WaitFifoStateUntilTimeout>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056c8:	f043 0220 	orr.w	r2, r3, #32
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e027      	b.n	8005724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f7ff fec8 	bl	8005474 <SPI_WaitFlagStateUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d007      	beq.n	80056fa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	f043 0220 	orr.w	r2, r3, #32
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	e014      	b.n	8005724 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	9300      	str	r3, [sp, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	2200      	movs	r2, #0
 8005702:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7ff ff3c 	bl	8005584 <SPI_WaitFifoStateUntilTimeout>
 800570c:	4603      	mov	r3, r0
 800570e:	2b00      	cmp	r3, #0
 8005710:	d007      	beq.n	8005722 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005716:	f043 0220 	orr.w	r2, r3, #32
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e000      	b.n	8005724 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005722:	2300      	movs	r3, #0
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <__errno>:
 800572c:	4b01      	ldr	r3, [pc, #4]	; (8005734 <__errno+0x8>)
 800572e:	6818      	ldr	r0, [r3, #0]
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000010 	.word	0x20000010

08005738 <__libc_init_array>:
 8005738:	b570      	push	{r4, r5, r6, lr}
 800573a:	4e0d      	ldr	r6, [pc, #52]	; (8005770 <__libc_init_array+0x38>)
 800573c:	4c0d      	ldr	r4, [pc, #52]	; (8005774 <__libc_init_array+0x3c>)
 800573e:	1ba4      	subs	r4, r4, r6
 8005740:	10a4      	asrs	r4, r4, #2
 8005742:	2500      	movs	r5, #0
 8005744:	42a5      	cmp	r5, r4
 8005746:	d109      	bne.n	800575c <__libc_init_array+0x24>
 8005748:	4e0b      	ldr	r6, [pc, #44]	; (8005778 <__libc_init_array+0x40>)
 800574a:	4c0c      	ldr	r4, [pc, #48]	; (800577c <__libc_init_array+0x44>)
 800574c:	f003 f8b6 	bl	80088bc <_init>
 8005750:	1ba4      	subs	r4, r4, r6
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	2500      	movs	r5, #0
 8005756:	42a5      	cmp	r5, r4
 8005758:	d105      	bne.n	8005766 <__libc_init_array+0x2e>
 800575a:	bd70      	pop	{r4, r5, r6, pc}
 800575c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005760:	4798      	blx	r3
 8005762:	3501      	adds	r5, #1
 8005764:	e7ee      	b.n	8005744 <__libc_init_array+0xc>
 8005766:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800576a:	4798      	blx	r3
 800576c:	3501      	adds	r5, #1
 800576e:	e7f2      	b.n	8005756 <__libc_init_array+0x1e>
 8005770:	08009970 	.word	0x08009970
 8005774:	08009970 	.word	0x08009970
 8005778:	08009970 	.word	0x08009970
 800577c:	08009974 	.word	0x08009974

08005780 <malloc>:
 8005780:	4b02      	ldr	r3, [pc, #8]	; (800578c <malloc+0xc>)
 8005782:	4601      	mov	r1, r0
 8005784:	6818      	ldr	r0, [r3, #0]
 8005786:	f000 b865 	b.w	8005854 <_malloc_r>
 800578a:	bf00      	nop
 800578c:	20000010 	.word	0x20000010

08005790 <memcpy>:
 8005790:	b510      	push	{r4, lr}
 8005792:	1e43      	subs	r3, r0, #1
 8005794:	440a      	add	r2, r1
 8005796:	4291      	cmp	r1, r2
 8005798:	d100      	bne.n	800579c <memcpy+0xc>
 800579a:	bd10      	pop	{r4, pc}
 800579c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057a4:	e7f7      	b.n	8005796 <memcpy+0x6>

080057a6 <memset>:
 80057a6:	4402      	add	r2, r0
 80057a8:	4603      	mov	r3, r0
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d100      	bne.n	80057b0 <memset+0xa>
 80057ae:	4770      	bx	lr
 80057b0:	f803 1b01 	strb.w	r1, [r3], #1
 80057b4:	e7f9      	b.n	80057aa <memset+0x4>
	...

080057b8 <_free_r>:
 80057b8:	b538      	push	{r3, r4, r5, lr}
 80057ba:	4605      	mov	r5, r0
 80057bc:	2900      	cmp	r1, #0
 80057be:	d045      	beq.n	800584c <_free_r+0x94>
 80057c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c4:	1f0c      	subs	r4, r1, #4
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	bfb8      	it	lt
 80057ca:	18e4      	addlt	r4, r4, r3
 80057cc:	f001 fb7a 	bl	8006ec4 <__malloc_lock>
 80057d0:	4a1f      	ldr	r2, [pc, #124]	; (8005850 <_free_r+0x98>)
 80057d2:	6813      	ldr	r3, [r2, #0]
 80057d4:	4610      	mov	r0, r2
 80057d6:	b933      	cbnz	r3, 80057e6 <_free_r+0x2e>
 80057d8:	6063      	str	r3, [r4, #4]
 80057da:	6014      	str	r4, [r2, #0]
 80057dc:	4628      	mov	r0, r5
 80057de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057e2:	f001 bb70 	b.w	8006ec6 <__malloc_unlock>
 80057e6:	42a3      	cmp	r3, r4
 80057e8:	d90c      	bls.n	8005804 <_free_r+0x4c>
 80057ea:	6821      	ldr	r1, [r4, #0]
 80057ec:	1862      	adds	r2, r4, r1
 80057ee:	4293      	cmp	r3, r2
 80057f0:	bf04      	itt	eq
 80057f2:	681a      	ldreq	r2, [r3, #0]
 80057f4:	685b      	ldreq	r3, [r3, #4]
 80057f6:	6063      	str	r3, [r4, #4]
 80057f8:	bf04      	itt	eq
 80057fa:	1852      	addeq	r2, r2, r1
 80057fc:	6022      	streq	r2, [r4, #0]
 80057fe:	6004      	str	r4, [r0, #0]
 8005800:	e7ec      	b.n	80057dc <_free_r+0x24>
 8005802:	4613      	mov	r3, r2
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	b10a      	cbz	r2, 800580c <_free_r+0x54>
 8005808:	42a2      	cmp	r2, r4
 800580a:	d9fa      	bls.n	8005802 <_free_r+0x4a>
 800580c:	6819      	ldr	r1, [r3, #0]
 800580e:	1858      	adds	r0, r3, r1
 8005810:	42a0      	cmp	r0, r4
 8005812:	d10b      	bne.n	800582c <_free_r+0x74>
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	4401      	add	r1, r0
 8005818:	1858      	adds	r0, r3, r1
 800581a:	4282      	cmp	r2, r0
 800581c:	6019      	str	r1, [r3, #0]
 800581e:	d1dd      	bne.n	80057dc <_free_r+0x24>
 8005820:	6810      	ldr	r0, [r2, #0]
 8005822:	6852      	ldr	r2, [r2, #4]
 8005824:	605a      	str	r2, [r3, #4]
 8005826:	4401      	add	r1, r0
 8005828:	6019      	str	r1, [r3, #0]
 800582a:	e7d7      	b.n	80057dc <_free_r+0x24>
 800582c:	d902      	bls.n	8005834 <_free_r+0x7c>
 800582e:	230c      	movs	r3, #12
 8005830:	602b      	str	r3, [r5, #0]
 8005832:	e7d3      	b.n	80057dc <_free_r+0x24>
 8005834:	6820      	ldr	r0, [r4, #0]
 8005836:	1821      	adds	r1, r4, r0
 8005838:	428a      	cmp	r2, r1
 800583a:	bf04      	itt	eq
 800583c:	6811      	ldreq	r1, [r2, #0]
 800583e:	6852      	ldreq	r2, [r2, #4]
 8005840:	6062      	str	r2, [r4, #4]
 8005842:	bf04      	itt	eq
 8005844:	1809      	addeq	r1, r1, r0
 8005846:	6021      	streq	r1, [r4, #0]
 8005848:	605c      	str	r4, [r3, #4]
 800584a:	e7c7      	b.n	80057dc <_free_r+0x24>
 800584c:	bd38      	pop	{r3, r4, r5, pc}
 800584e:	bf00      	nop
 8005850:	20000204 	.word	0x20000204

08005854 <_malloc_r>:
 8005854:	b570      	push	{r4, r5, r6, lr}
 8005856:	1ccd      	adds	r5, r1, #3
 8005858:	f025 0503 	bic.w	r5, r5, #3
 800585c:	3508      	adds	r5, #8
 800585e:	2d0c      	cmp	r5, #12
 8005860:	bf38      	it	cc
 8005862:	250c      	movcc	r5, #12
 8005864:	2d00      	cmp	r5, #0
 8005866:	4606      	mov	r6, r0
 8005868:	db01      	blt.n	800586e <_malloc_r+0x1a>
 800586a:	42a9      	cmp	r1, r5
 800586c:	d903      	bls.n	8005876 <_malloc_r+0x22>
 800586e:	230c      	movs	r3, #12
 8005870:	6033      	str	r3, [r6, #0]
 8005872:	2000      	movs	r0, #0
 8005874:	bd70      	pop	{r4, r5, r6, pc}
 8005876:	f001 fb25 	bl	8006ec4 <__malloc_lock>
 800587a:	4a21      	ldr	r2, [pc, #132]	; (8005900 <_malloc_r+0xac>)
 800587c:	6814      	ldr	r4, [r2, #0]
 800587e:	4621      	mov	r1, r4
 8005880:	b991      	cbnz	r1, 80058a8 <_malloc_r+0x54>
 8005882:	4c20      	ldr	r4, [pc, #128]	; (8005904 <_malloc_r+0xb0>)
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	b91b      	cbnz	r3, 8005890 <_malloc_r+0x3c>
 8005888:	4630      	mov	r0, r6
 800588a:	f000 fc99 	bl	80061c0 <_sbrk_r>
 800588e:	6020      	str	r0, [r4, #0]
 8005890:	4629      	mov	r1, r5
 8005892:	4630      	mov	r0, r6
 8005894:	f000 fc94 	bl	80061c0 <_sbrk_r>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d124      	bne.n	80058e6 <_malloc_r+0x92>
 800589c:	230c      	movs	r3, #12
 800589e:	6033      	str	r3, [r6, #0]
 80058a0:	4630      	mov	r0, r6
 80058a2:	f001 fb10 	bl	8006ec6 <__malloc_unlock>
 80058a6:	e7e4      	b.n	8005872 <_malloc_r+0x1e>
 80058a8:	680b      	ldr	r3, [r1, #0]
 80058aa:	1b5b      	subs	r3, r3, r5
 80058ac:	d418      	bmi.n	80058e0 <_malloc_r+0x8c>
 80058ae:	2b0b      	cmp	r3, #11
 80058b0:	d90f      	bls.n	80058d2 <_malloc_r+0x7e>
 80058b2:	600b      	str	r3, [r1, #0]
 80058b4:	50cd      	str	r5, [r1, r3]
 80058b6:	18cc      	adds	r4, r1, r3
 80058b8:	4630      	mov	r0, r6
 80058ba:	f001 fb04 	bl	8006ec6 <__malloc_unlock>
 80058be:	f104 000b 	add.w	r0, r4, #11
 80058c2:	1d23      	adds	r3, r4, #4
 80058c4:	f020 0007 	bic.w	r0, r0, #7
 80058c8:	1ac3      	subs	r3, r0, r3
 80058ca:	d0d3      	beq.n	8005874 <_malloc_r+0x20>
 80058cc:	425a      	negs	r2, r3
 80058ce:	50e2      	str	r2, [r4, r3]
 80058d0:	e7d0      	b.n	8005874 <_malloc_r+0x20>
 80058d2:	428c      	cmp	r4, r1
 80058d4:	684b      	ldr	r3, [r1, #4]
 80058d6:	bf16      	itet	ne
 80058d8:	6063      	strne	r3, [r4, #4]
 80058da:	6013      	streq	r3, [r2, #0]
 80058dc:	460c      	movne	r4, r1
 80058de:	e7eb      	b.n	80058b8 <_malloc_r+0x64>
 80058e0:	460c      	mov	r4, r1
 80058e2:	6849      	ldr	r1, [r1, #4]
 80058e4:	e7cc      	b.n	8005880 <_malloc_r+0x2c>
 80058e6:	1cc4      	adds	r4, r0, #3
 80058e8:	f024 0403 	bic.w	r4, r4, #3
 80058ec:	42a0      	cmp	r0, r4
 80058ee:	d005      	beq.n	80058fc <_malloc_r+0xa8>
 80058f0:	1a21      	subs	r1, r4, r0
 80058f2:	4630      	mov	r0, r6
 80058f4:	f000 fc64 	bl	80061c0 <_sbrk_r>
 80058f8:	3001      	adds	r0, #1
 80058fa:	d0cf      	beq.n	800589c <_malloc_r+0x48>
 80058fc:	6025      	str	r5, [r4, #0]
 80058fe:	e7db      	b.n	80058b8 <_malloc_r+0x64>
 8005900:	20000204 	.word	0x20000204
 8005904:	20000208 	.word	0x20000208

08005908 <__cvt>:
 8005908:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800590c:	ec55 4b10 	vmov	r4, r5, d0
 8005910:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005912:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005916:	2d00      	cmp	r5, #0
 8005918:	460e      	mov	r6, r1
 800591a:	4691      	mov	r9, r2
 800591c:	4619      	mov	r1, r3
 800591e:	bfb8      	it	lt
 8005920:	4622      	movlt	r2, r4
 8005922:	462b      	mov	r3, r5
 8005924:	f027 0720 	bic.w	r7, r7, #32
 8005928:	bfbb      	ittet	lt
 800592a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800592e:	461d      	movlt	r5, r3
 8005930:	2300      	movge	r3, #0
 8005932:	232d      	movlt	r3, #45	; 0x2d
 8005934:	bfb8      	it	lt
 8005936:	4614      	movlt	r4, r2
 8005938:	2f46      	cmp	r7, #70	; 0x46
 800593a:	700b      	strb	r3, [r1, #0]
 800593c:	d004      	beq.n	8005948 <__cvt+0x40>
 800593e:	2f45      	cmp	r7, #69	; 0x45
 8005940:	d100      	bne.n	8005944 <__cvt+0x3c>
 8005942:	3601      	adds	r6, #1
 8005944:	2102      	movs	r1, #2
 8005946:	e000      	b.n	800594a <__cvt+0x42>
 8005948:	2103      	movs	r1, #3
 800594a:	ab03      	add	r3, sp, #12
 800594c:	9301      	str	r3, [sp, #4]
 800594e:	ab02      	add	r3, sp, #8
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	4632      	mov	r2, r6
 8005954:	4653      	mov	r3, sl
 8005956:	ec45 4b10 	vmov	d0, r4, r5
 800595a:	f000 fced 	bl	8006338 <_dtoa_r>
 800595e:	2f47      	cmp	r7, #71	; 0x47
 8005960:	4680      	mov	r8, r0
 8005962:	d102      	bne.n	800596a <__cvt+0x62>
 8005964:	f019 0f01 	tst.w	r9, #1
 8005968:	d026      	beq.n	80059b8 <__cvt+0xb0>
 800596a:	2f46      	cmp	r7, #70	; 0x46
 800596c:	eb08 0906 	add.w	r9, r8, r6
 8005970:	d111      	bne.n	8005996 <__cvt+0x8e>
 8005972:	f898 3000 	ldrb.w	r3, [r8]
 8005976:	2b30      	cmp	r3, #48	; 0x30
 8005978:	d10a      	bne.n	8005990 <__cvt+0x88>
 800597a:	2200      	movs	r2, #0
 800597c:	2300      	movs	r3, #0
 800597e:	4620      	mov	r0, r4
 8005980:	4629      	mov	r1, r5
 8005982:	f7fb f879 	bl	8000a78 <__aeabi_dcmpeq>
 8005986:	b918      	cbnz	r0, 8005990 <__cvt+0x88>
 8005988:	f1c6 0601 	rsb	r6, r6, #1
 800598c:	f8ca 6000 	str.w	r6, [sl]
 8005990:	f8da 3000 	ldr.w	r3, [sl]
 8005994:	4499      	add	r9, r3
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	4620      	mov	r0, r4
 800599c:	4629      	mov	r1, r5
 800599e:	f7fb f86b 	bl	8000a78 <__aeabi_dcmpeq>
 80059a2:	b938      	cbnz	r0, 80059b4 <__cvt+0xac>
 80059a4:	2230      	movs	r2, #48	; 0x30
 80059a6:	9b03      	ldr	r3, [sp, #12]
 80059a8:	454b      	cmp	r3, r9
 80059aa:	d205      	bcs.n	80059b8 <__cvt+0xb0>
 80059ac:	1c59      	adds	r1, r3, #1
 80059ae:	9103      	str	r1, [sp, #12]
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	e7f8      	b.n	80059a6 <__cvt+0x9e>
 80059b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059b8:	9b03      	ldr	r3, [sp, #12]
 80059ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80059bc:	eba3 0308 	sub.w	r3, r3, r8
 80059c0:	4640      	mov	r0, r8
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	b004      	add	sp, #16
 80059c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080059ca <__exponent>:
 80059ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059cc:	2900      	cmp	r1, #0
 80059ce:	4604      	mov	r4, r0
 80059d0:	bfba      	itte	lt
 80059d2:	4249      	neglt	r1, r1
 80059d4:	232d      	movlt	r3, #45	; 0x2d
 80059d6:	232b      	movge	r3, #43	; 0x2b
 80059d8:	2909      	cmp	r1, #9
 80059da:	f804 2b02 	strb.w	r2, [r4], #2
 80059de:	7043      	strb	r3, [r0, #1]
 80059e0:	dd20      	ble.n	8005a24 <__exponent+0x5a>
 80059e2:	f10d 0307 	add.w	r3, sp, #7
 80059e6:	461f      	mov	r7, r3
 80059e8:	260a      	movs	r6, #10
 80059ea:	fb91 f5f6 	sdiv	r5, r1, r6
 80059ee:	fb06 1115 	mls	r1, r6, r5, r1
 80059f2:	3130      	adds	r1, #48	; 0x30
 80059f4:	2d09      	cmp	r5, #9
 80059f6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80059fa:	f103 32ff 	add.w	r2, r3, #4294967295
 80059fe:	4629      	mov	r1, r5
 8005a00:	dc09      	bgt.n	8005a16 <__exponent+0x4c>
 8005a02:	3130      	adds	r1, #48	; 0x30
 8005a04:	3b02      	subs	r3, #2
 8005a06:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005a0a:	42bb      	cmp	r3, r7
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	d304      	bcc.n	8005a1a <__exponent+0x50>
 8005a10:	1a10      	subs	r0, r2, r0
 8005a12:	b003      	add	sp, #12
 8005a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a16:	4613      	mov	r3, r2
 8005a18:	e7e7      	b.n	80059ea <__exponent+0x20>
 8005a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a1e:	f804 2b01 	strb.w	r2, [r4], #1
 8005a22:	e7f2      	b.n	8005a0a <__exponent+0x40>
 8005a24:	2330      	movs	r3, #48	; 0x30
 8005a26:	4419      	add	r1, r3
 8005a28:	7083      	strb	r3, [r0, #2]
 8005a2a:	1d02      	adds	r2, r0, #4
 8005a2c:	70c1      	strb	r1, [r0, #3]
 8005a2e:	e7ef      	b.n	8005a10 <__exponent+0x46>

08005a30 <_printf_float>:
 8005a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a34:	b08d      	sub	sp, #52	; 0x34
 8005a36:	460c      	mov	r4, r1
 8005a38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005a3c:	4616      	mov	r6, r2
 8005a3e:	461f      	mov	r7, r3
 8005a40:	4605      	mov	r5, r0
 8005a42:	f001 fa31 	bl	8006ea8 <_localeconv_r>
 8005a46:	6803      	ldr	r3, [r0, #0]
 8005a48:	9304      	str	r3, [sp, #16]
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fa fb98 	bl	8000180 <strlen>
 8005a50:	2300      	movs	r3, #0
 8005a52:	930a      	str	r3, [sp, #40]	; 0x28
 8005a54:	f8d8 3000 	ldr.w	r3, [r8]
 8005a58:	9005      	str	r0, [sp, #20]
 8005a5a:	3307      	adds	r3, #7
 8005a5c:	f023 0307 	bic.w	r3, r3, #7
 8005a60:	f103 0208 	add.w	r2, r3, #8
 8005a64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a68:	f8d4 b000 	ldr.w	fp, [r4]
 8005a6c:	f8c8 2000 	str.w	r2, [r8]
 8005a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a80:	9307      	str	r3, [sp, #28]
 8005a82:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8a:	4ba7      	ldr	r3, [pc, #668]	; (8005d28 <_printf_float+0x2f8>)
 8005a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a90:	f7fb f824 	bl	8000adc <__aeabi_dcmpun>
 8005a94:	bb70      	cbnz	r0, 8005af4 <_printf_float+0xc4>
 8005a96:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9a:	4ba3      	ldr	r3, [pc, #652]	; (8005d28 <_printf_float+0x2f8>)
 8005a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aa0:	f7fa fffe 	bl	8000aa0 <__aeabi_dcmple>
 8005aa4:	bb30      	cbnz	r0, 8005af4 <_printf_float+0xc4>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4640      	mov	r0, r8
 8005aac:	4649      	mov	r1, r9
 8005aae:	f7fa ffed 	bl	8000a8c <__aeabi_dcmplt>
 8005ab2:	b110      	cbz	r0, 8005aba <_printf_float+0x8a>
 8005ab4:	232d      	movs	r3, #45	; 0x2d
 8005ab6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aba:	4a9c      	ldr	r2, [pc, #624]	; (8005d2c <_printf_float+0x2fc>)
 8005abc:	4b9c      	ldr	r3, [pc, #624]	; (8005d30 <_printf_float+0x300>)
 8005abe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005ac2:	bf8c      	ite	hi
 8005ac4:	4690      	movhi	r8, r2
 8005ac6:	4698      	movls	r8, r3
 8005ac8:	2303      	movs	r3, #3
 8005aca:	f02b 0204 	bic.w	r2, fp, #4
 8005ace:	6123      	str	r3, [r4, #16]
 8005ad0:	6022      	str	r2, [r4, #0]
 8005ad2:	f04f 0900 	mov.w	r9, #0
 8005ad6:	9700      	str	r7, [sp, #0]
 8005ad8:	4633      	mov	r3, r6
 8005ada:	aa0b      	add	r2, sp, #44	; 0x2c
 8005adc:	4621      	mov	r1, r4
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f000 f9e6 	bl	8005eb0 <_printf_common>
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	f040 808d 	bne.w	8005c04 <_printf_float+0x1d4>
 8005aea:	f04f 30ff 	mov.w	r0, #4294967295
 8005aee:	b00d      	add	sp, #52	; 0x34
 8005af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005af4:	4642      	mov	r2, r8
 8005af6:	464b      	mov	r3, r9
 8005af8:	4640      	mov	r0, r8
 8005afa:	4649      	mov	r1, r9
 8005afc:	f7fa ffee 	bl	8000adc <__aeabi_dcmpun>
 8005b00:	b110      	cbz	r0, 8005b08 <_printf_float+0xd8>
 8005b02:	4a8c      	ldr	r2, [pc, #560]	; (8005d34 <_printf_float+0x304>)
 8005b04:	4b8c      	ldr	r3, [pc, #560]	; (8005d38 <_printf_float+0x308>)
 8005b06:	e7da      	b.n	8005abe <_printf_float+0x8e>
 8005b08:	6861      	ldr	r1, [r4, #4]
 8005b0a:	1c4b      	adds	r3, r1, #1
 8005b0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005b10:	a80a      	add	r0, sp, #40	; 0x28
 8005b12:	d13e      	bne.n	8005b92 <_printf_float+0x162>
 8005b14:	2306      	movs	r3, #6
 8005b16:	6063      	str	r3, [r4, #4]
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005b1e:	ab09      	add	r3, sp, #36	; 0x24
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	ec49 8b10 	vmov	d0, r8, r9
 8005b26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b2a:	6022      	str	r2, [r4, #0]
 8005b2c:	f8cd a004 	str.w	sl, [sp, #4]
 8005b30:	6861      	ldr	r1, [r4, #4]
 8005b32:	4628      	mov	r0, r5
 8005b34:	f7ff fee8 	bl	8005908 <__cvt>
 8005b38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005b3c:	2b47      	cmp	r3, #71	; 0x47
 8005b3e:	4680      	mov	r8, r0
 8005b40:	d109      	bne.n	8005b56 <_printf_float+0x126>
 8005b42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b44:	1cd8      	adds	r0, r3, #3
 8005b46:	db02      	blt.n	8005b4e <_printf_float+0x11e>
 8005b48:	6862      	ldr	r2, [r4, #4]
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	dd47      	ble.n	8005bde <_printf_float+0x1ae>
 8005b4e:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b52:	fa5f fa8a 	uxtb.w	sl, sl
 8005b56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005b5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b5c:	d824      	bhi.n	8005ba8 <_printf_float+0x178>
 8005b5e:	3901      	subs	r1, #1
 8005b60:	4652      	mov	r2, sl
 8005b62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b66:	9109      	str	r1, [sp, #36]	; 0x24
 8005b68:	f7ff ff2f 	bl	80059ca <__exponent>
 8005b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b6e:	1813      	adds	r3, r2, r0
 8005b70:	2a01      	cmp	r2, #1
 8005b72:	4681      	mov	r9, r0
 8005b74:	6123      	str	r3, [r4, #16]
 8005b76:	dc02      	bgt.n	8005b7e <_printf_float+0x14e>
 8005b78:	6822      	ldr	r2, [r4, #0]
 8005b7a:	07d1      	lsls	r1, r2, #31
 8005b7c:	d501      	bpl.n	8005b82 <_printf_float+0x152>
 8005b7e:	3301      	adds	r3, #1
 8005b80:	6123      	str	r3, [r4, #16]
 8005b82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d0a5      	beq.n	8005ad6 <_printf_float+0xa6>
 8005b8a:	232d      	movs	r3, #45	; 0x2d
 8005b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b90:	e7a1      	b.n	8005ad6 <_printf_float+0xa6>
 8005b92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005b96:	f000 8177 	beq.w	8005e88 <_printf_float+0x458>
 8005b9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005b9e:	d1bb      	bne.n	8005b18 <_printf_float+0xe8>
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	d1b9      	bne.n	8005b18 <_printf_float+0xe8>
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e7b6      	b.n	8005b16 <_printf_float+0xe6>
 8005ba8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005bac:	d119      	bne.n	8005be2 <_printf_float+0x1b2>
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	6863      	ldr	r3, [r4, #4]
 8005bb2:	dd0c      	ble.n	8005bce <_printf_float+0x19e>
 8005bb4:	6121      	str	r1, [r4, #16]
 8005bb6:	b913      	cbnz	r3, 8005bbe <_printf_float+0x18e>
 8005bb8:	6822      	ldr	r2, [r4, #0]
 8005bba:	07d2      	lsls	r2, r2, #31
 8005bbc:	d502      	bpl.n	8005bc4 <_printf_float+0x194>
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	440b      	add	r3, r1
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005bc8:	f04f 0900 	mov.w	r9, #0
 8005bcc:	e7d9      	b.n	8005b82 <_printf_float+0x152>
 8005bce:	b913      	cbnz	r3, 8005bd6 <_printf_float+0x1a6>
 8005bd0:	6822      	ldr	r2, [r4, #0]
 8005bd2:	07d0      	lsls	r0, r2, #31
 8005bd4:	d501      	bpl.n	8005bda <_printf_float+0x1aa>
 8005bd6:	3302      	adds	r3, #2
 8005bd8:	e7f3      	b.n	8005bc2 <_printf_float+0x192>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e7f1      	b.n	8005bc2 <_printf_float+0x192>
 8005bde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005be2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005be6:	4293      	cmp	r3, r2
 8005be8:	db05      	blt.n	8005bf6 <_printf_float+0x1c6>
 8005bea:	6822      	ldr	r2, [r4, #0]
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	07d1      	lsls	r1, r2, #31
 8005bf0:	d5e8      	bpl.n	8005bc4 <_printf_float+0x194>
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	e7e5      	b.n	8005bc2 <_printf_float+0x192>
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	bfd4      	ite	le
 8005bfa:	f1c3 0302 	rsble	r3, r3, #2
 8005bfe:	2301      	movgt	r3, #1
 8005c00:	4413      	add	r3, r2
 8005c02:	e7de      	b.n	8005bc2 <_printf_float+0x192>
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	055a      	lsls	r2, r3, #21
 8005c08:	d407      	bmi.n	8005c1a <_printf_float+0x1ea>
 8005c0a:	6923      	ldr	r3, [r4, #16]
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	4631      	mov	r1, r6
 8005c10:	4628      	mov	r0, r5
 8005c12:	47b8      	blx	r7
 8005c14:	3001      	adds	r0, #1
 8005c16:	d12b      	bne.n	8005c70 <_printf_float+0x240>
 8005c18:	e767      	b.n	8005aea <_printf_float+0xba>
 8005c1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005c1e:	f240 80dc 	bls.w	8005dda <_printf_float+0x3aa>
 8005c22:	2200      	movs	r2, #0
 8005c24:	2300      	movs	r3, #0
 8005c26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005c2a:	f7fa ff25 	bl	8000a78 <__aeabi_dcmpeq>
 8005c2e:	2800      	cmp	r0, #0
 8005c30:	d033      	beq.n	8005c9a <_printf_float+0x26a>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4a41      	ldr	r2, [pc, #260]	; (8005d3c <_printf_float+0x30c>)
 8005c36:	4631      	mov	r1, r6
 8005c38:	4628      	mov	r0, r5
 8005c3a:	47b8      	blx	r7
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	f43f af54 	beq.w	8005aea <_printf_float+0xba>
 8005c42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c46:	429a      	cmp	r2, r3
 8005c48:	db02      	blt.n	8005c50 <_printf_float+0x220>
 8005c4a:	6823      	ldr	r3, [r4, #0]
 8005c4c:	07d8      	lsls	r0, r3, #31
 8005c4e:	d50f      	bpl.n	8005c70 <_printf_float+0x240>
 8005c50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c54:	4631      	mov	r1, r6
 8005c56:	4628      	mov	r0, r5
 8005c58:	47b8      	blx	r7
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	f43f af45 	beq.w	8005aea <_printf_float+0xba>
 8005c60:	f04f 0800 	mov.w	r8, #0
 8005c64:	f104 091a 	add.w	r9, r4, #26
 8005c68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c6a:	3b01      	subs	r3, #1
 8005c6c:	4543      	cmp	r3, r8
 8005c6e:	dc09      	bgt.n	8005c84 <_printf_float+0x254>
 8005c70:	6823      	ldr	r3, [r4, #0]
 8005c72:	079b      	lsls	r3, r3, #30
 8005c74:	f100 8103 	bmi.w	8005e7e <_printf_float+0x44e>
 8005c78:	68e0      	ldr	r0, [r4, #12]
 8005c7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c7c:	4298      	cmp	r0, r3
 8005c7e:	bfb8      	it	lt
 8005c80:	4618      	movlt	r0, r3
 8005c82:	e734      	b.n	8005aee <_printf_float+0xbe>
 8005c84:	2301      	movs	r3, #1
 8005c86:	464a      	mov	r2, r9
 8005c88:	4631      	mov	r1, r6
 8005c8a:	4628      	mov	r0, r5
 8005c8c:	47b8      	blx	r7
 8005c8e:	3001      	adds	r0, #1
 8005c90:	f43f af2b 	beq.w	8005aea <_printf_float+0xba>
 8005c94:	f108 0801 	add.w	r8, r8, #1
 8005c98:	e7e6      	b.n	8005c68 <_printf_float+0x238>
 8005c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dc2b      	bgt.n	8005cf8 <_printf_float+0x2c8>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4a26      	ldr	r2, [pc, #152]	; (8005d3c <_printf_float+0x30c>)
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f af1d 	beq.w	8005aea <_printf_float+0xba>
 8005cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cb2:	b923      	cbnz	r3, 8005cbe <_printf_float+0x28e>
 8005cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cb6:	b913      	cbnz	r3, 8005cbe <_printf_float+0x28e>
 8005cb8:	6823      	ldr	r3, [r4, #0]
 8005cba:	07d9      	lsls	r1, r3, #31
 8005cbc:	d5d8      	bpl.n	8005c70 <_printf_float+0x240>
 8005cbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cc2:	4631      	mov	r1, r6
 8005cc4:	4628      	mov	r0, r5
 8005cc6:	47b8      	blx	r7
 8005cc8:	3001      	adds	r0, #1
 8005cca:	f43f af0e 	beq.w	8005aea <_printf_float+0xba>
 8005cce:	f04f 0900 	mov.w	r9, #0
 8005cd2:	f104 0a1a 	add.w	sl, r4, #26
 8005cd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cd8:	425b      	negs	r3, r3
 8005cda:	454b      	cmp	r3, r9
 8005cdc:	dc01      	bgt.n	8005ce2 <_printf_float+0x2b2>
 8005cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ce0:	e794      	b.n	8005c0c <_printf_float+0x1dc>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	4652      	mov	r2, sl
 8005ce6:	4631      	mov	r1, r6
 8005ce8:	4628      	mov	r0, r5
 8005cea:	47b8      	blx	r7
 8005cec:	3001      	adds	r0, #1
 8005cee:	f43f aefc 	beq.w	8005aea <_printf_float+0xba>
 8005cf2:	f109 0901 	add.w	r9, r9, #1
 8005cf6:	e7ee      	b.n	8005cd6 <_printf_float+0x2a6>
 8005cf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cfa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	bfa8      	it	ge
 8005d00:	461a      	movge	r2, r3
 8005d02:	2a00      	cmp	r2, #0
 8005d04:	4691      	mov	r9, r2
 8005d06:	dd07      	ble.n	8005d18 <_printf_float+0x2e8>
 8005d08:	4613      	mov	r3, r2
 8005d0a:	4631      	mov	r1, r6
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	4628      	mov	r0, r5
 8005d10:	47b8      	blx	r7
 8005d12:	3001      	adds	r0, #1
 8005d14:	f43f aee9 	beq.w	8005aea <_printf_float+0xba>
 8005d18:	f104 031a 	add.w	r3, r4, #26
 8005d1c:	f04f 0b00 	mov.w	fp, #0
 8005d20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d24:	9306      	str	r3, [sp, #24]
 8005d26:	e015      	b.n	8005d54 <_printf_float+0x324>
 8005d28:	7fefffff 	.word	0x7fefffff
 8005d2c:	080096d0 	.word	0x080096d0
 8005d30:	080096cc 	.word	0x080096cc
 8005d34:	080096d8 	.word	0x080096d8
 8005d38:	080096d4 	.word	0x080096d4
 8005d3c:	080096dc 	.word	0x080096dc
 8005d40:	2301      	movs	r3, #1
 8005d42:	9a06      	ldr	r2, [sp, #24]
 8005d44:	4631      	mov	r1, r6
 8005d46:	4628      	mov	r0, r5
 8005d48:	47b8      	blx	r7
 8005d4a:	3001      	adds	r0, #1
 8005d4c:	f43f aecd 	beq.w	8005aea <_printf_float+0xba>
 8005d50:	f10b 0b01 	add.w	fp, fp, #1
 8005d54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005d58:	ebaa 0309 	sub.w	r3, sl, r9
 8005d5c:	455b      	cmp	r3, fp
 8005d5e:	dcef      	bgt.n	8005d40 <_printf_float+0x310>
 8005d60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d64:	429a      	cmp	r2, r3
 8005d66:	44d0      	add	r8, sl
 8005d68:	db15      	blt.n	8005d96 <_printf_float+0x366>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	07da      	lsls	r2, r3, #31
 8005d6e:	d412      	bmi.n	8005d96 <_printf_float+0x366>
 8005d70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d72:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d74:	eba3 020a 	sub.w	r2, r3, sl
 8005d78:	eba3 0a01 	sub.w	sl, r3, r1
 8005d7c:	4592      	cmp	sl, r2
 8005d7e:	bfa8      	it	ge
 8005d80:	4692      	movge	sl, r2
 8005d82:	f1ba 0f00 	cmp.w	sl, #0
 8005d86:	dc0e      	bgt.n	8005da6 <_printf_float+0x376>
 8005d88:	f04f 0800 	mov.w	r8, #0
 8005d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d90:	f104 091a 	add.w	r9, r4, #26
 8005d94:	e019      	b.n	8005dca <_printf_float+0x39a>
 8005d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d9a:	4631      	mov	r1, r6
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	47b8      	blx	r7
 8005da0:	3001      	adds	r0, #1
 8005da2:	d1e5      	bne.n	8005d70 <_printf_float+0x340>
 8005da4:	e6a1      	b.n	8005aea <_printf_float+0xba>
 8005da6:	4653      	mov	r3, sl
 8005da8:	4642      	mov	r2, r8
 8005daa:	4631      	mov	r1, r6
 8005dac:	4628      	mov	r0, r5
 8005dae:	47b8      	blx	r7
 8005db0:	3001      	adds	r0, #1
 8005db2:	d1e9      	bne.n	8005d88 <_printf_float+0x358>
 8005db4:	e699      	b.n	8005aea <_printf_float+0xba>
 8005db6:	2301      	movs	r3, #1
 8005db8:	464a      	mov	r2, r9
 8005dba:	4631      	mov	r1, r6
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	47b8      	blx	r7
 8005dc0:	3001      	adds	r0, #1
 8005dc2:	f43f ae92 	beq.w	8005aea <_printf_float+0xba>
 8005dc6:	f108 0801 	add.w	r8, r8, #1
 8005dca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005dce:	1a9b      	subs	r3, r3, r2
 8005dd0:	eba3 030a 	sub.w	r3, r3, sl
 8005dd4:	4543      	cmp	r3, r8
 8005dd6:	dcee      	bgt.n	8005db6 <_printf_float+0x386>
 8005dd8:	e74a      	b.n	8005c70 <_printf_float+0x240>
 8005dda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ddc:	2a01      	cmp	r2, #1
 8005dde:	dc01      	bgt.n	8005de4 <_printf_float+0x3b4>
 8005de0:	07db      	lsls	r3, r3, #31
 8005de2:	d53a      	bpl.n	8005e5a <_printf_float+0x42a>
 8005de4:	2301      	movs	r3, #1
 8005de6:	4642      	mov	r2, r8
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	47b8      	blx	r7
 8005dee:	3001      	adds	r0, #1
 8005df0:	f43f ae7b 	beq.w	8005aea <_printf_float+0xba>
 8005df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005df8:	4631      	mov	r1, r6
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	47b8      	blx	r7
 8005dfe:	3001      	adds	r0, #1
 8005e00:	f108 0801 	add.w	r8, r8, #1
 8005e04:	f43f ae71 	beq.w	8005aea <_printf_float+0xba>
 8005e08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f103 3aff 	add.w	sl, r3, #4294967295
 8005e10:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005e14:	2300      	movs	r3, #0
 8005e16:	f7fa fe2f 	bl	8000a78 <__aeabi_dcmpeq>
 8005e1a:	b9c8      	cbnz	r0, 8005e50 <_printf_float+0x420>
 8005e1c:	4653      	mov	r3, sl
 8005e1e:	4642      	mov	r2, r8
 8005e20:	4631      	mov	r1, r6
 8005e22:	4628      	mov	r0, r5
 8005e24:	47b8      	blx	r7
 8005e26:	3001      	adds	r0, #1
 8005e28:	d10e      	bne.n	8005e48 <_printf_float+0x418>
 8005e2a:	e65e      	b.n	8005aea <_printf_float+0xba>
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	4652      	mov	r2, sl
 8005e30:	4631      	mov	r1, r6
 8005e32:	4628      	mov	r0, r5
 8005e34:	47b8      	blx	r7
 8005e36:	3001      	adds	r0, #1
 8005e38:	f43f ae57 	beq.w	8005aea <_printf_float+0xba>
 8005e3c:	f108 0801 	add.w	r8, r8, #1
 8005e40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4543      	cmp	r3, r8
 8005e46:	dcf1      	bgt.n	8005e2c <_printf_float+0x3fc>
 8005e48:	464b      	mov	r3, r9
 8005e4a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e4e:	e6de      	b.n	8005c0e <_printf_float+0x1de>
 8005e50:	f04f 0800 	mov.w	r8, #0
 8005e54:	f104 0a1a 	add.w	sl, r4, #26
 8005e58:	e7f2      	b.n	8005e40 <_printf_float+0x410>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e7df      	b.n	8005e1e <_printf_float+0x3ee>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	464a      	mov	r2, r9
 8005e62:	4631      	mov	r1, r6
 8005e64:	4628      	mov	r0, r5
 8005e66:	47b8      	blx	r7
 8005e68:	3001      	adds	r0, #1
 8005e6a:	f43f ae3e 	beq.w	8005aea <_printf_float+0xba>
 8005e6e:	f108 0801 	add.w	r8, r8, #1
 8005e72:	68e3      	ldr	r3, [r4, #12]
 8005e74:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005e76:	1a9b      	subs	r3, r3, r2
 8005e78:	4543      	cmp	r3, r8
 8005e7a:	dcf0      	bgt.n	8005e5e <_printf_float+0x42e>
 8005e7c:	e6fc      	b.n	8005c78 <_printf_float+0x248>
 8005e7e:	f04f 0800 	mov.w	r8, #0
 8005e82:	f104 0919 	add.w	r9, r4, #25
 8005e86:	e7f4      	b.n	8005e72 <_printf_float+0x442>
 8005e88:	2900      	cmp	r1, #0
 8005e8a:	f43f ae8b 	beq.w	8005ba4 <_printf_float+0x174>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005e94:	ab09      	add	r3, sp, #36	; 0x24
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	ec49 8b10 	vmov	d0, r8, r9
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	f8cd a004 	str.w	sl, [sp, #4]
 8005ea2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f7ff fd2e 	bl	8005908 <__cvt>
 8005eac:	4680      	mov	r8, r0
 8005eae:	e648      	b.n	8005b42 <_printf_float+0x112>

08005eb0 <_printf_common>:
 8005eb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	4691      	mov	r9, r2
 8005eb6:	461f      	mov	r7, r3
 8005eb8:	688a      	ldr	r2, [r1, #8]
 8005eba:	690b      	ldr	r3, [r1, #16]
 8005ebc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	bfb8      	it	lt
 8005ec4:	4613      	movlt	r3, r2
 8005ec6:	f8c9 3000 	str.w	r3, [r9]
 8005eca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ece:	4606      	mov	r6, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	b112      	cbz	r2, 8005eda <_printf_common+0x2a>
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	f8c9 3000 	str.w	r3, [r9]
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	0699      	lsls	r1, r3, #26
 8005ede:	bf42      	ittt	mi
 8005ee0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ee4:	3302      	addmi	r3, #2
 8005ee6:	f8c9 3000 	strmi.w	r3, [r9]
 8005eea:	6825      	ldr	r5, [r4, #0]
 8005eec:	f015 0506 	ands.w	r5, r5, #6
 8005ef0:	d107      	bne.n	8005f02 <_printf_common+0x52>
 8005ef2:	f104 0a19 	add.w	sl, r4, #25
 8005ef6:	68e3      	ldr	r3, [r4, #12]
 8005ef8:	f8d9 2000 	ldr.w	r2, [r9]
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	42ab      	cmp	r3, r5
 8005f00:	dc28      	bgt.n	8005f54 <_printf_common+0xa4>
 8005f02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f06:	6822      	ldr	r2, [r4, #0]
 8005f08:	3300      	adds	r3, #0
 8005f0a:	bf18      	it	ne
 8005f0c:	2301      	movne	r3, #1
 8005f0e:	0692      	lsls	r2, r2, #26
 8005f10:	d42d      	bmi.n	8005f6e <_printf_common+0xbe>
 8005f12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f16:	4639      	mov	r1, r7
 8005f18:	4630      	mov	r0, r6
 8005f1a:	47c0      	blx	r8
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d020      	beq.n	8005f62 <_printf_common+0xb2>
 8005f20:	6823      	ldr	r3, [r4, #0]
 8005f22:	68e5      	ldr	r5, [r4, #12]
 8005f24:	f8d9 2000 	ldr.w	r2, [r9]
 8005f28:	f003 0306 	and.w	r3, r3, #6
 8005f2c:	2b04      	cmp	r3, #4
 8005f2e:	bf08      	it	eq
 8005f30:	1aad      	subeq	r5, r5, r2
 8005f32:	68a3      	ldr	r3, [r4, #8]
 8005f34:	6922      	ldr	r2, [r4, #16]
 8005f36:	bf0c      	ite	eq
 8005f38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f3c:	2500      	movne	r5, #0
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	bfc4      	itt	gt
 8005f42:	1a9b      	subgt	r3, r3, r2
 8005f44:	18ed      	addgt	r5, r5, r3
 8005f46:	f04f 0900 	mov.w	r9, #0
 8005f4a:	341a      	adds	r4, #26
 8005f4c:	454d      	cmp	r5, r9
 8005f4e:	d11a      	bne.n	8005f86 <_printf_common+0xd6>
 8005f50:	2000      	movs	r0, #0
 8005f52:	e008      	b.n	8005f66 <_printf_common+0xb6>
 8005f54:	2301      	movs	r3, #1
 8005f56:	4652      	mov	r2, sl
 8005f58:	4639      	mov	r1, r7
 8005f5a:	4630      	mov	r0, r6
 8005f5c:	47c0      	blx	r8
 8005f5e:	3001      	adds	r0, #1
 8005f60:	d103      	bne.n	8005f6a <_printf_common+0xba>
 8005f62:	f04f 30ff 	mov.w	r0, #4294967295
 8005f66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f6a:	3501      	adds	r5, #1
 8005f6c:	e7c3      	b.n	8005ef6 <_printf_common+0x46>
 8005f6e:	18e1      	adds	r1, r4, r3
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	2030      	movs	r0, #48	; 0x30
 8005f74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f78:	4422      	add	r2, r4
 8005f7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f82:	3302      	adds	r3, #2
 8005f84:	e7c5      	b.n	8005f12 <_printf_common+0x62>
 8005f86:	2301      	movs	r3, #1
 8005f88:	4622      	mov	r2, r4
 8005f8a:	4639      	mov	r1, r7
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	47c0      	blx	r8
 8005f90:	3001      	adds	r0, #1
 8005f92:	d0e6      	beq.n	8005f62 <_printf_common+0xb2>
 8005f94:	f109 0901 	add.w	r9, r9, #1
 8005f98:	e7d8      	b.n	8005f4c <_printf_common+0x9c>
	...

08005f9c <_printf_i>:
 8005f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005fa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	7e09      	ldrb	r1, [r1, #24]
 8005fa8:	b085      	sub	sp, #20
 8005faa:	296e      	cmp	r1, #110	; 0x6e
 8005fac:	4617      	mov	r7, r2
 8005fae:	4606      	mov	r6, r0
 8005fb0:	4698      	mov	r8, r3
 8005fb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fb4:	f000 80b3 	beq.w	800611e <_printf_i+0x182>
 8005fb8:	d822      	bhi.n	8006000 <_printf_i+0x64>
 8005fba:	2963      	cmp	r1, #99	; 0x63
 8005fbc:	d036      	beq.n	800602c <_printf_i+0x90>
 8005fbe:	d80a      	bhi.n	8005fd6 <_printf_i+0x3a>
 8005fc0:	2900      	cmp	r1, #0
 8005fc2:	f000 80b9 	beq.w	8006138 <_printf_i+0x19c>
 8005fc6:	2958      	cmp	r1, #88	; 0x58
 8005fc8:	f000 8083 	beq.w	80060d2 <_printf_i+0x136>
 8005fcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005fd4:	e032      	b.n	800603c <_printf_i+0xa0>
 8005fd6:	2964      	cmp	r1, #100	; 0x64
 8005fd8:	d001      	beq.n	8005fde <_printf_i+0x42>
 8005fda:	2969      	cmp	r1, #105	; 0x69
 8005fdc:	d1f6      	bne.n	8005fcc <_printf_i+0x30>
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	6813      	ldr	r3, [r2, #0]
 8005fe2:	0605      	lsls	r5, r0, #24
 8005fe4:	f103 0104 	add.w	r1, r3, #4
 8005fe8:	d52a      	bpl.n	8006040 <_printf_i+0xa4>
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6011      	str	r1, [r2, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da03      	bge.n	8005ffa <_printf_i+0x5e>
 8005ff2:	222d      	movs	r2, #45	; 0x2d
 8005ff4:	425b      	negs	r3, r3
 8005ff6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ffa:	486f      	ldr	r0, [pc, #444]	; (80061b8 <_printf_i+0x21c>)
 8005ffc:	220a      	movs	r2, #10
 8005ffe:	e039      	b.n	8006074 <_printf_i+0xd8>
 8006000:	2973      	cmp	r1, #115	; 0x73
 8006002:	f000 809d 	beq.w	8006140 <_printf_i+0x1a4>
 8006006:	d808      	bhi.n	800601a <_printf_i+0x7e>
 8006008:	296f      	cmp	r1, #111	; 0x6f
 800600a:	d020      	beq.n	800604e <_printf_i+0xb2>
 800600c:	2970      	cmp	r1, #112	; 0x70
 800600e:	d1dd      	bne.n	8005fcc <_printf_i+0x30>
 8006010:	6823      	ldr	r3, [r4, #0]
 8006012:	f043 0320 	orr.w	r3, r3, #32
 8006016:	6023      	str	r3, [r4, #0]
 8006018:	e003      	b.n	8006022 <_printf_i+0x86>
 800601a:	2975      	cmp	r1, #117	; 0x75
 800601c:	d017      	beq.n	800604e <_printf_i+0xb2>
 800601e:	2978      	cmp	r1, #120	; 0x78
 8006020:	d1d4      	bne.n	8005fcc <_printf_i+0x30>
 8006022:	2378      	movs	r3, #120	; 0x78
 8006024:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006028:	4864      	ldr	r0, [pc, #400]	; (80061bc <_printf_i+0x220>)
 800602a:	e055      	b.n	80060d8 <_printf_i+0x13c>
 800602c:	6813      	ldr	r3, [r2, #0]
 800602e:	1d19      	adds	r1, r3, #4
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6011      	str	r1, [r2, #0]
 8006034:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006038:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800603c:	2301      	movs	r3, #1
 800603e:	e08c      	b.n	800615a <_printf_i+0x1be>
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	6011      	str	r1, [r2, #0]
 8006044:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006048:	bf18      	it	ne
 800604a:	b21b      	sxthne	r3, r3
 800604c:	e7cf      	b.n	8005fee <_printf_i+0x52>
 800604e:	6813      	ldr	r3, [r2, #0]
 8006050:	6825      	ldr	r5, [r4, #0]
 8006052:	1d18      	adds	r0, r3, #4
 8006054:	6010      	str	r0, [r2, #0]
 8006056:	0628      	lsls	r0, r5, #24
 8006058:	d501      	bpl.n	800605e <_printf_i+0xc2>
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	e002      	b.n	8006064 <_printf_i+0xc8>
 800605e:	0668      	lsls	r0, r5, #25
 8006060:	d5fb      	bpl.n	800605a <_printf_i+0xbe>
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	4854      	ldr	r0, [pc, #336]	; (80061b8 <_printf_i+0x21c>)
 8006066:	296f      	cmp	r1, #111	; 0x6f
 8006068:	bf14      	ite	ne
 800606a:	220a      	movne	r2, #10
 800606c:	2208      	moveq	r2, #8
 800606e:	2100      	movs	r1, #0
 8006070:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006074:	6865      	ldr	r5, [r4, #4]
 8006076:	60a5      	str	r5, [r4, #8]
 8006078:	2d00      	cmp	r5, #0
 800607a:	f2c0 8095 	blt.w	80061a8 <_printf_i+0x20c>
 800607e:	6821      	ldr	r1, [r4, #0]
 8006080:	f021 0104 	bic.w	r1, r1, #4
 8006084:	6021      	str	r1, [r4, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d13d      	bne.n	8006106 <_printf_i+0x16a>
 800608a:	2d00      	cmp	r5, #0
 800608c:	f040 808e 	bne.w	80061ac <_printf_i+0x210>
 8006090:	4665      	mov	r5, ip
 8006092:	2a08      	cmp	r2, #8
 8006094:	d10b      	bne.n	80060ae <_printf_i+0x112>
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	07db      	lsls	r3, r3, #31
 800609a:	d508      	bpl.n	80060ae <_printf_i+0x112>
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	bfde      	ittt	le
 80060a4:	2330      	movle	r3, #48	; 0x30
 80060a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060ae:	ebac 0305 	sub.w	r3, ip, r5
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	f8cd 8000 	str.w	r8, [sp]
 80060b8:	463b      	mov	r3, r7
 80060ba:	aa03      	add	r2, sp, #12
 80060bc:	4621      	mov	r1, r4
 80060be:	4630      	mov	r0, r6
 80060c0:	f7ff fef6 	bl	8005eb0 <_printf_common>
 80060c4:	3001      	adds	r0, #1
 80060c6:	d14d      	bne.n	8006164 <_printf_i+0x1c8>
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
 80060cc:	b005      	add	sp, #20
 80060ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80060d2:	4839      	ldr	r0, [pc, #228]	; (80061b8 <_printf_i+0x21c>)
 80060d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80060d8:	6813      	ldr	r3, [r2, #0]
 80060da:	6821      	ldr	r1, [r4, #0]
 80060dc:	1d1d      	adds	r5, r3, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6015      	str	r5, [r2, #0]
 80060e2:	060a      	lsls	r2, r1, #24
 80060e4:	d50b      	bpl.n	80060fe <_printf_i+0x162>
 80060e6:	07ca      	lsls	r2, r1, #31
 80060e8:	bf44      	itt	mi
 80060ea:	f041 0120 	orrmi.w	r1, r1, #32
 80060ee:	6021      	strmi	r1, [r4, #0]
 80060f0:	b91b      	cbnz	r3, 80060fa <_printf_i+0x15e>
 80060f2:	6822      	ldr	r2, [r4, #0]
 80060f4:	f022 0220 	bic.w	r2, r2, #32
 80060f8:	6022      	str	r2, [r4, #0]
 80060fa:	2210      	movs	r2, #16
 80060fc:	e7b7      	b.n	800606e <_printf_i+0xd2>
 80060fe:	064d      	lsls	r5, r1, #25
 8006100:	bf48      	it	mi
 8006102:	b29b      	uxthmi	r3, r3
 8006104:	e7ef      	b.n	80060e6 <_printf_i+0x14a>
 8006106:	4665      	mov	r5, ip
 8006108:	fbb3 f1f2 	udiv	r1, r3, r2
 800610c:	fb02 3311 	mls	r3, r2, r1, r3
 8006110:	5cc3      	ldrb	r3, [r0, r3]
 8006112:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006116:	460b      	mov	r3, r1
 8006118:	2900      	cmp	r1, #0
 800611a:	d1f5      	bne.n	8006108 <_printf_i+0x16c>
 800611c:	e7b9      	b.n	8006092 <_printf_i+0xf6>
 800611e:	6813      	ldr	r3, [r2, #0]
 8006120:	6825      	ldr	r5, [r4, #0]
 8006122:	6961      	ldr	r1, [r4, #20]
 8006124:	1d18      	adds	r0, r3, #4
 8006126:	6010      	str	r0, [r2, #0]
 8006128:	0628      	lsls	r0, r5, #24
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	d501      	bpl.n	8006132 <_printf_i+0x196>
 800612e:	6019      	str	r1, [r3, #0]
 8006130:	e002      	b.n	8006138 <_printf_i+0x19c>
 8006132:	066a      	lsls	r2, r5, #25
 8006134:	d5fb      	bpl.n	800612e <_printf_i+0x192>
 8006136:	8019      	strh	r1, [r3, #0]
 8006138:	2300      	movs	r3, #0
 800613a:	6123      	str	r3, [r4, #16]
 800613c:	4665      	mov	r5, ip
 800613e:	e7b9      	b.n	80060b4 <_printf_i+0x118>
 8006140:	6813      	ldr	r3, [r2, #0]
 8006142:	1d19      	adds	r1, r3, #4
 8006144:	6011      	str	r1, [r2, #0]
 8006146:	681d      	ldr	r5, [r3, #0]
 8006148:	6862      	ldr	r2, [r4, #4]
 800614a:	2100      	movs	r1, #0
 800614c:	4628      	mov	r0, r5
 800614e:	f7fa f81f 	bl	8000190 <memchr>
 8006152:	b108      	cbz	r0, 8006158 <_printf_i+0x1bc>
 8006154:	1b40      	subs	r0, r0, r5
 8006156:	6060      	str	r0, [r4, #4]
 8006158:	6863      	ldr	r3, [r4, #4]
 800615a:	6123      	str	r3, [r4, #16]
 800615c:	2300      	movs	r3, #0
 800615e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006162:	e7a7      	b.n	80060b4 <_printf_i+0x118>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	462a      	mov	r2, r5
 8006168:	4639      	mov	r1, r7
 800616a:	4630      	mov	r0, r6
 800616c:	47c0      	blx	r8
 800616e:	3001      	adds	r0, #1
 8006170:	d0aa      	beq.n	80060c8 <_printf_i+0x12c>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	079b      	lsls	r3, r3, #30
 8006176:	d413      	bmi.n	80061a0 <_printf_i+0x204>
 8006178:	68e0      	ldr	r0, [r4, #12]
 800617a:	9b03      	ldr	r3, [sp, #12]
 800617c:	4298      	cmp	r0, r3
 800617e:	bfb8      	it	lt
 8006180:	4618      	movlt	r0, r3
 8006182:	e7a3      	b.n	80060cc <_printf_i+0x130>
 8006184:	2301      	movs	r3, #1
 8006186:	464a      	mov	r2, r9
 8006188:	4639      	mov	r1, r7
 800618a:	4630      	mov	r0, r6
 800618c:	47c0      	blx	r8
 800618e:	3001      	adds	r0, #1
 8006190:	d09a      	beq.n	80060c8 <_printf_i+0x12c>
 8006192:	3501      	adds	r5, #1
 8006194:	68e3      	ldr	r3, [r4, #12]
 8006196:	9a03      	ldr	r2, [sp, #12]
 8006198:	1a9b      	subs	r3, r3, r2
 800619a:	42ab      	cmp	r3, r5
 800619c:	dcf2      	bgt.n	8006184 <_printf_i+0x1e8>
 800619e:	e7eb      	b.n	8006178 <_printf_i+0x1dc>
 80061a0:	2500      	movs	r5, #0
 80061a2:	f104 0919 	add.w	r9, r4, #25
 80061a6:	e7f5      	b.n	8006194 <_printf_i+0x1f8>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1ac      	bne.n	8006106 <_printf_i+0x16a>
 80061ac:	7803      	ldrb	r3, [r0, #0]
 80061ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061b6:	e76c      	b.n	8006092 <_printf_i+0xf6>
 80061b8:	080096de 	.word	0x080096de
 80061bc:	080096ef 	.word	0x080096ef

080061c0 <_sbrk_r>:
 80061c0:	b538      	push	{r3, r4, r5, lr}
 80061c2:	4c06      	ldr	r4, [pc, #24]	; (80061dc <_sbrk_r+0x1c>)
 80061c4:	2300      	movs	r3, #0
 80061c6:	4605      	mov	r5, r0
 80061c8:	4608      	mov	r0, r1
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	f7fb fbdc 	bl	8001988 <_sbrk>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d102      	bne.n	80061da <_sbrk_r+0x1a>
 80061d4:	6823      	ldr	r3, [r4, #0]
 80061d6:	b103      	cbz	r3, 80061da <_sbrk_r+0x1a>
 80061d8:	602b      	str	r3, [r5, #0]
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20000324 	.word	0x20000324

080061e0 <siprintf>:
 80061e0:	b40e      	push	{r1, r2, r3}
 80061e2:	b500      	push	{lr}
 80061e4:	b09c      	sub	sp, #112	; 0x70
 80061e6:	ab1d      	add	r3, sp, #116	; 0x74
 80061e8:	9002      	str	r0, [sp, #8]
 80061ea:	9006      	str	r0, [sp, #24]
 80061ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061f0:	4809      	ldr	r0, [pc, #36]	; (8006218 <siprintf+0x38>)
 80061f2:	9107      	str	r1, [sp, #28]
 80061f4:	9104      	str	r1, [sp, #16]
 80061f6:	4909      	ldr	r1, [pc, #36]	; (800621c <siprintf+0x3c>)
 80061f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80061fc:	9105      	str	r1, [sp, #20]
 80061fe:	6800      	ldr	r0, [r0, #0]
 8006200:	9301      	str	r3, [sp, #4]
 8006202:	a902      	add	r1, sp, #8
 8006204:	f001 f9a4 	bl	8007550 <_svfiprintf_r>
 8006208:	9b02      	ldr	r3, [sp, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	701a      	strb	r2, [r3, #0]
 800620e:	b01c      	add	sp, #112	; 0x70
 8006210:	f85d eb04 	ldr.w	lr, [sp], #4
 8006214:	b003      	add	sp, #12
 8006216:	4770      	bx	lr
 8006218:	20000010 	.word	0x20000010
 800621c:	ffff0208 	.word	0xffff0208

08006220 <quorem>:
 8006220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	6903      	ldr	r3, [r0, #16]
 8006226:	690c      	ldr	r4, [r1, #16]
 8006228:	42a3      	cmp	r3, r4
 800622a:	4680      	mov	r8, r0
 800622c:	f2c0 8082 	blt.w	8006334 <quorem+0x114>
 8006230:	3c01      	subs	r4, #1
 8006232:	f101 0714 	add.w	r7, r1, #20
 8006236:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800623a:	f100 0614 	add.w	r6, r0, #20
 800623e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006242:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006246:	eb06 030c 	add.w	r3, r6, ip
 800624a:	3501      	adds	r5, #1
 800624c:	eb07 090c 	add.w	r9, r7, ip
 8006250:	9301      	str	r3, [sp, #4]
 8006252:	fbb0 f5f5 	udiv	r5, r0, r5
 8006256:	b395      	cbz	r5, 80062be <quorem+0x9e>
 8006258:	f04f 0a00 	mov.w	sl, #0
 800625c:	4638      	mov	r0, r7
 800625e:	46b6      	mov	lr, r6
 8006260:	46d3      	mov	fp, sl
 8006262:	f850 2b04 	ldr.w	r2, [r0], #4
 8006266:	b293      	uxth	r3, r2
 8006268:	fb05 a303 	mla	r3, r5, r3, sl
 800626c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006270:	b29b      	uxth	r3, r3
 8006272:	ebab 0303 	sub.w	r3, fp, r3
 8006276:	0c12      	lsrs	r2, r2, #16
 8006278:	f8de b000 	ldr.w	fp, [lr]
 800627c:	fb05 a202 	mla	r2, r5, r2, sl
 8006280:	fa13 f38b 	uxtah	r3, r3, fp
 8006284:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006288:	fa1f fb82 	uxth.w	fp, r2
 800628c:	f8de 2000 	ldr.w	r2, [lr]
 8006290:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006294:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006298:	b29b      	uxth	r3, r3
 800629a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800629e:	4581      	cmp	r9, r0
 80062a0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80062a4:	f84e 3b04 	str.w	r3, [lr], #4
 80062a8:	d2db      	bcs.n	8006262 <quorem+0x42>
 80062aa:	f856 300c 	ldr.w	r3, [r6, ip]
 80062ae:	b933      	cbnz	r3, 80062be <quorem+0x9e>
 80062b0:	9b01      	ldr	r3, [sp, #4]
 80062b2:	3b04      	subs	r3, #4
 80062b4:	429e      	cmp	r6, r3
 80062b6:	461a      	mov	r2, r3
 80062b8:	d330      	bcc.n	800631c <quorem+0xfc>
 80062ba:	f8c8 4010 	str.w	r4, [r8, #16]
 80062be:	4640      	mov	r0, r8
 80062c0:	f001 f818 	bl	80072f4 <__mcmp>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	db25      	blt.n	8006314 <quorem+0xf4>
 80062c8:	3501      	adds	r5, #1
 80062ca:	4630      	mov	r0, r6
 80062cc:	f04f 0c00 	mov.w	ip, #0
 80062d0:	f857 2b04 	ldr.w	r2, [r7], #4
 80062d4:	f8d0 e000 	ldr.w	lr, [r0]
 80062d8:	b293      	uxth	r3, r2
 80062da:	ebac 0303 	sub.w	r3, ip, r3
 80062de:	0c12      	lsrs	r2, r2, #16
 80062e0:	fa13 f38e 	uxtah	r3, r3, lr
 80062e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80062e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062f2:	45b9      	cmp	r9, r7
 80062f4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80062f8:	f840 3b04 	str.w	r3, [r0], #4
 80062fc:	d2e8      	bcs.n	80062d0 <quorem+0xb0>
 80062fe:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006302:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006306:	b92a      	cbnz	r2, 8006314 <quorem+0xf4>
 8006308:	3b04      	subs	r3, #4
 800630a:	429e      	cmp	r6, r3
 800630c:	461a      	mov	r2, r3
 800630e:	d30b      	bcc.n	8006328 <quorem+0x108>
 8006310:	f8c8 4010 	str.w	r4, [r8, #16]
 8006314:	4628      	mov	r0, r5
 8006316:	b003      	add	sp, #12
 8006318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800631c:	6812      	ldr	r2, [r2, #0]
 800631e:	3b04      	subs	r3, #4
 8006320:	2a00      	cmp	r2, #0
 8006322:	d1ca      	bne.n	80062ba <quorem+0x9a>
 8006324:	3c01      	subs	r4, #1
 8006326:	e7c5      	b.n	80062b4 <quorem+0x94>
 8006328:	6812      	ldr	r2, [r2, #0]
 800632a:	3b04      	subs	r3, #4
 800632c:	2a00      	cmp	r2, #0
 800632e:	d1ef      	bne.n	8006310 <quorem+0xf0>
 8006330:	3c01      	subs	r4, #1
 8006332:	e7ea      	b.n	800630a <quorem+0xea>
 8006334:	2000      	movs	r0, #0
 8006336:	e7ee      	b.n	8006316 <quorem+0xf6>

08006338 <_dtoa_r>:
 8006338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800633c:	ec57 6b10 	vmov	r6, r7, d0
 8006340:	b097      	sub	sp, #92	; 0x5c
 8006342:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006344:	9106      	str	r1, [sp, #24]
 8006346:	4604      	mov	r4, r0
 8006348:	920b      	str	r2, [sp, #44]	; 0x2c
 800634a:	9312      	str	r3, [sp, #72]	; 0x48
 800634c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006350:	e9cd 6700 	strd	r6, r7, [sp]
 8006354:	b93d      	cbnz	r5, 8006366 <_dtoa_r+0x2e>
 8006356:	2010      	movs	r0, #16
 8006358:	f7ff fa12 	bl	8005780 <malloc>
 800635c:	6260      	str	r0, [r4, #36]	; 0x24
 800635e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006362:	6005      	str	r5, [r0, #0]
 8006364:	60c5      	str	r5, [r0, #12]
 8006366:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006368:	6819      	ldr	r1, [r3, #0]
 800636a:	b151      	cbz	r1, 8006382 <_dtoa_r+0x4a>
 800636c:	685a      	ldr	r2, [r3, #4]
 800636e:	604a      	str	r2, [r1, #4]
 8006370:	2301      	movs	r3, #1
 8006372:	4093      	lsls	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
 8006376:	4620      	mov	r0, r4
 8006378:	f000 fdda 	bl	8006f30 <_Bfree>
 800637c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	1e3b      	subs	r3, r7, #0
 8006384:	bfbb      	ittet	lt
 8006386:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800638a:	9301      	strlt	r3, [sp, #4]
 800638c:	2300      	movge	r3, #0
 800638e:	2201      	movlt	r2, #1
 8006390:	bfac      	ite	ge
 8006392:	f8c8 3000 	strge.w	r3, [r8]
 8006396:	f8c8 2000 	strlt.w	r2, [r8]
 800639a:	4baf      	ldr	r3, [pc, #700]	; (8006658 <_dtoa_r+0x320>)
 800639c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80063a0:	ea33 0308 	bics.w	r3, r3, r8
 80063a4:	d114      	bne.n	80063d0 <_dtoa_r+0x98>
 80063a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	9b00      	ldr	r3, [sp, #0]
 80063b0:	b923      	cbnz	r3, 80063bc <_dtoa_r+0x84>
 80063b2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f000 8542 	beq.w	8006e40 <_dtoa_r+0xb08>
 80063bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063be:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800666c <_dtoa_r+0x334>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 8544 	beq.w	8006e50 <_dtoa_r+0xb18>
 80063c8:	f10b 0303 	add.w	r3, fp, #3
 80063cc:	f000 bd3e 	b.w	8006e4c <_dtoa_r+0xb14>
 80063d0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80063d4:	2200      	movs	r2, #0
 80063d6:	2300      	movs	r3, #0
 80063d8:	4630      	mov	r0, r6
 80063da:	4639      	mov	r1, r7
 80063dc:	f7fa fb4c 	bl	8000a78 <__aeabi_dcmpeq>
 80063e0:	4681      	mov	r9, r0
 80063e2:	b168      	cbz	r0, 8006400 <_dtoa_r+0xc8>
 80063e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80063e6:	2301      	movs	r3, #1
 80063e8:	6013      	str	r3, [r2, #0]
 80063ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f000 8524 	beq.w	8006e3a <_dtoa_r+0xb02>
 80063f2:	4b9a      	ldr	r3, [pc, #616]	; (800665c <_dtoa_r+0x324>)
 80063f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80063f6:	f103 3bff 	add.w	fp, r3, #4294967295
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	f000 bd28 	b.w	8006e50 <_dtoa_r+0xb18>
 8006400:	aa14      	add	r2, sp, #80	; 0x50
 8006402:	a915      	add	r1, sp, #84	; 0x54
 8006404:	ec47 6b10 	vmov	d0, r6, r7
 8006408:	4620      	mov	r0, r4
 800640a:	f000 ffea 	bl	80073e2 <__d2b>
 800640e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006412:	9004      	str	r0, [sp, #16]
 8006414:	2d00      	cmp	r5, #0
 8006416:	d07c      	beq.n	8006512 <_dtoa_r+0x1da>
 8006418:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800641c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006420:	46b2      	mov	sl, r6
 8006422:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800642a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800642e:	2200      	movs	r2, #0
 8006430:	4b8b      	ldr	r3, [pc, #556]	; (8006660 <_dtoa_r+0x328>)
 8006432:	4650      	mov	r0, sl
 8006434:	4659      	mov	r1, fp
 8006436:	f7f9 feff 	bl	8000238 <__aeabi_dsub>
 800643a:	a381      	add	r3, pc, #516	; (adr r3, 8006640 <_dtoa_r+0x308>)
 800643c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006440:	f7fa f8b2 	bl	80005a8 <__aeabi_dmul>
 8006444:	a380      	add	r3, pc, #512	; (adr r3, 8006648 <_dtoa_r+0x310>)
 8006446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644a:	f7f9 fef7 	bl	800023c <__adddf3>
 800644e:	4606      	mov	r6, r0
 8006450:	4628      	mov	r0, r5
 8006452:	460f      	mov	r7, r1
 8006454:	f7fa f83e 	bl	80004d4 <__aeabi_i2d>
 8006458:	a37d      	add	r3, pc, #500	; (adr r3, 8006650 <_dtoa_r+0x318>)
 800645a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645e:	f7fa f8a3 	bl	80005a8 <__aeabi_dmul>
 8006462:	4602      	mov	r2, r0
 8006464:	460b      	mov	r3, r1
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	f7f9 fee7 	bl	800023c <__adddf3>
 800646e:	4606      	mov	r6, r0
 8006470:	460f      	mov	r7, r1
 8006472:	f7fa fb49 	bl	8000b08 <__aeabi_d2iz>
 8006476:	2200      	movs	r2, #0
 8006478:	4682      	mov	sl, r0
 800647a:	2300      	movs	r3, #0
 800647c:	4630      	mov	r0, r6
 800647e:	4639      	mov	r1, r7
 8006480:	f7fa fb04 	bl	8000a8c <__aeabi_dcmplt>
 8006484:	b148      	cbz	r0, 800649a <_dtoa_r+0x162>
 8006486:	4650      	mov	r0, sl
 8006488:	f7fa f824 	bl	80004d4 <__aeabi_i2d>
 800648c:	4632      	mov	r2, r6
 800648e:	463b      	mov	r3, r7
 8006490:	f7fa faf2 	bl	8000a78 <__aeabi_dcmpeq>
 8006494:	b908      	cbnz	r0, 800649a <_dtoa_r+0x162>
 8006496:	f10a 3aff 	add.w	sl, sl, #4294967295
 800649a:	f1ba 0f16 	cmp.w	sl, #22
 800649e:	d859      	bhi.n	8006554 <_dtoa_r+0x21c>
 80064a0:	4970      	ldr	r1, [pc, #448]	; (8006664 <_dtoa_r+0x32c>)
 80064a2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80064a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80064ae:	f7fa fb0b 	bl	8000ac8 <__aeabi_dcmpgt>
 80064b2:	2800      	cmp	r0, #0
 80064b4:	d050      	beq.n	8006558 <_dtoa_r+0x220>
 80064b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80064ba:	2300      	movs	r3, #0
 80064bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80064be:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80064c0:	1b5d      	subs	r5, r3, r5
 80064c2:	f1b5 0801 	subs.w	r8, r5, #1
 80064c6:	bf49      	itett	mi
 80064c8:	f1c5 0301 	rsbmi	r3, r5, #1
 80064cc:	2300      	movpl	r3, #0
 80064ce:	9305      	strmi	r3, [sp, #20]
 80064d0:	f04f 0800 	movmi.w	r8, #0
 80064d4:	bf58      	it	pl
 80064d6:	9305      	strpl	r3, [sp, #20]
 80064d8:	f1ba 0f00 	cmp.w	sl, #0
 80064dc:	db3e      	blt.n	800655c <_dtoa_r+0x224>
 80064de:	2300      	movs	r3, #0
 80064e0:	44d0      	add	r8, sl
 80064e2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80064e6:	9307      	str	r3, [sp, #28]
 80064e8:	9b06      	ldr	r3, [sp, #24]
 80064ea:	2b09      	cmp	r3, #9
 80064ec:	f200 8090 	bhi.w	8006610 <_dtoa_r+0x2d8>
 80064f0:	2b05      	cmp	r3, #5
 80064f2:	bfc4      	itt	gt
 80064f4:	3b04      	subgt	r3, #4
 80064f6:	9306      	strgt	r3, [sp, #24]
 80064f8:	9b06      	ldr	r3, [sp, #24]
 80064fa:	f1a3 0302 	sub.w	r3, r3, #2
 80064fe:	bfcc      	ite	gt
 8006500:	2500      	movgt	r5, #0
 8006502:	2501      	movle	r5, #1
 8006504:	2b03      	cmp	r3, #3
 8006506:	f200 808f 	bhi.w	8006628 <_dtoa_r+0x2f0>
 800650a:	e8df f003 	tbb	[pc, r3]
 800650e:	7f7d      	.short	0x7f7d
 8006510:	7131      	.short	0x7131
 8006512:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006516:	441d      	add	r5, r3
 8006518:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800651c:	2820      	cmp	r0, #32
 800651e:	dd13      	ble.n	8006548 <_dtoa_r+0x210>
 8006520:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006524:	9b00      	ldr	r3, [sp, #0]
 8006526:	fa08 f800 	lsl.w	r8, r8, r0
 800652a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800652e:	fa23 f000 	lsr.w	r0, r3, r0
 8006532:	ea48 0000 	orr.w	r0, r8, r0
 8006536:	f7f9 ffbd 	bl	80004b4 <__aeabi_ui2d>
 800653a:	2301      	movs	r3, #1
 800653c:	4682      	mov	sl, r0
 800653e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006542:	3d01      	subs	r5, #1
 8006544:	9313      	str	r3, [sp, #76]	; 0x4c
 8006546:	e772      	b.n	800642e <_dtoa_r+0xf6>
 8006548:	9b00      	ldr	r3, [sp, #0]
 800654a:	f1c0 0020 	rsb	r0, r0, #32
 800654e:	fa03 f000 	lsl.w	r0, r3, r0
 8006552:	e7f0      	b.n	8006536 <_dtoa_r+0x1fe>
 8006554:	2301      	movs	r3, #1
 8006556:	e7b1      	b.n	80064bc <_dtoa_r+0x184>
 8006558:	900f      	str	r0, [sp, #60]	; 0x3c
 800655a:	e7b0      	b.n	80064be <_dtoa_r+0x186>
 800655c:	9b05      	ldr	r3, [sp, #20]
 800655e:	eba3 030a 	sub.w	r3, r3, sl
 8006562:	9305      	str	r3, [sp, #20]
 8006564:	f1ca 0300 	rsb	r3, sl, #0
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	2300      	movs	r3, #0
 800656c:	930e      	str	r3, [sp, #56]	; 0x38
 800656e:	e7bb      	b.n	80064e8 <_dtoa_r+0x1b0>
 8006570:	2301      	movs	r3, #1
 8006572:	930a      	str	r3, [sp, #40]	; 0x28
 8006574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	dd59      	ble.n	800662e <_dtoa_r+0x2f6>
 800657a:	9302      	str	r3, [sp, #8]
 800657c:	4699      	mov	r9, r3
 800657e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006580:	2200      	movs	r2, #0
 8006582:	6072      	str	r2, [r6, #4]
 8006584:	2204      	movs	r2, #4
 8006586:	f102 0014 	add.w	r0, r2, #20
 800658a:	4298      	cmp	r0, r3
 800658c:	6871      	ldr	r1, [r6, #4]
 800658e:	d953      	bls.n	8006638 <_dtoa_r+0x300>
 8006590:	4620      	mov	r0, r4
 8006592:	f000 fc99 	bl	8006ec8 <_Balloc>
 8006596:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006598:	6030      	str	r0, [r6, #0]
 800659a:	f1b9 0f0e 	cmp.w	r9, #14
 800659e:	f8d3 b000 	ldr.w	fp, [r3]
 80065a2:	f200 80e6 	bhi.w	8006772 <_dtoa_r+0x43a>
 80065a6:	2d00      	cmp	r5, #0
 80065a8:	f000 80e3 	beq.w	8006772 <_dtoa_r+0x43a>
 80065ac:	ed9d 7b00 	vldr	d7, [sp]
 80065b0:	f1ba 0f00 	cmp.w	sl, #0
 80065b4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80065b8:	dd74      	ble.n	80066a4 <_dtoa_r+0x36c>
 80065ba:	4a2a      	ldr	r2, [pc, #168]	; (8006664 <_dtoa_r+0x32c>)
 80065bc:	f00a 030f 	and.w	r3, sl, #15
 80065c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80065c4:	ed93 7b00 	vldr	d7, [r3]
 80065c8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80065cc:	06f0      	lsls	r0, r6, #27
 80065ce:	ed8d 7b08 	vstr	d7, [sp, #32]
 80065d2:	d565      	bpl.n	80066a0 <_dtoa_r+0x368>
 80065d4:	4b24      	ldr	r3, [pc, #144]	; (8006668 <_dtoa_r+0x330>)
 80065d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80065da:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80065de:	f7fa f90d 	bl	80007fc <__aeabi_ddiv>
 80065e2:	e9cd 0100 	strd	r0, r1, [sp]
 80065e6:	f006 060f 	and.w	r6, r6, #15
 80065ea:	2503      	movs	r5, #3
 80065ec:	4f1e      	ldr	r7, [pc, #120]	; (8006668 <_dtoa_r+0x330>)
 80065ee:	e04c      	b.n	800668a <_dtoa_r+0x352>
 80065f0:	2301      	movs	r3, #1
 80065f2:	930a      	str	r3, [sp, #40]	; 0x28
 80065f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065f6:	4453      	add	r3, sl
 80065f8:	f103 0901 	add.w	r9, r3, #1
 80065fc:	9302      	str	r3, [sp, #8]
 80065fe:	464b      	mov	r3, r9
 8006600:	2b01      	cmp	r3, #1
 8006602:	bfb8      	it	lt
 8006604:	2301      	movlt	r3, #1
 8006606:	e7ba      	b.n	800657e <_dtoa_r+0x246>
 8006608:	2300      	movs	r3, #0
 800660a:	e7b2      	b.n	8006572 <_dtoa_r+0x23a>
 800660c:	2300      	movs	r3, #0
 800660e:	e7f0      	b.n	80065f2 <_dtoa_r+0x2ba>
 8006610:	2501      	movs	r5, #1
 8006612:	2300      	movs	r3, #0
 8006614:	9306      	str	r3, [sp, #24]
 8006616:	950a      	str	r5, [sp, #40]	; 0x28
 8006618:	f04f 33ff 	mov.w	r3, #4294967295
 800661c:	9302      	str	r3, [sp, #8]
 800661e:	4699      	mov	r9, r3
 8006620:	2200      	movs	r2, #0
 8006622:	2312      	movs	r3, #18
 8006624:	920b      	str	r2, [sp, #44]	; 0x2c
 8006626:	e7aa      	b.n	800657e <_dtoa_r+0x246>
 8006628:	2301      	movs	r3, #1
 800662a:	930a      	str	r3, [sp, #40]	; 0x28
 800662c:	e7f4      	b.n	8006618 <_dtoa_r+0x2e0>
 800662e:	2301      	movs	r3, #1
 8006630:	9302      	str	r3, [sp, #8]
 8006632:	4699      	mov	r9, r3
 8006634:	461a      	mov	r2, r3
 8006636:	e7f5      	b.n	8006624 <_dtoa_r+0x2ec>
 8006638:	3101      	adds	r1, #1
 800663a:	6071      	str	r1, [r6, #4]
 800663c:	0052      	lsls	r2, r2, #1
 800663e:	e7a2      	b.n	8006586 <_dtoa_r+0x24e>
 8006640:	636f4361 	.word	0x636f4361
 8006644:	3fd287a7 	.word	0x3fd287a7
 8006648:	8b60c8b3 	.word	0x8b60c8b3
 800664c:	3fc68a28 	.word	0x3fc68a28
 8006650:	509f79fb 	.word	0x509f79fb
 8006654:	3fd34413 	.word	0x3fd34413
 8006658:	7ff00000 	.word	0x7ff00000
 800665c:	080096dd 	.word	0x080096dd
 8006660:	3ff80000 	.word	0x3ff80000
 8006664:	08009738 	.word	0x08009738
 8006668:	08009710 	.word	0x08009710
 800666c:	08009709 	.word	0x08009709
 8006670:	07f1      	lsls	r1, r6, #31
 8006672:	d508      	bpl.n	8006686 <_dtoa_r+0x34e>
 8006674:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006678:	e9d7 2300 	ldrd	r2, r3, [r7]
 800667c:	f7f9 ff94 	bl	80005a8 <__aeabi_dmul>
 8006680:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006684:	3501      	adds	r5, #1
 8006686:	1076      	asrs	r6, r6, #1
 8006688:	3708      	adds	r7, #8
 800668a:	2e00      	cmp	r6, #0
 800668c:	d1f0      	bne.n	8006670 <_dtoa_r+0x338>
 800668e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006692:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006696:	f7fa f8b1 	bl	80007fc <__aeabi_ddiv>
 800669a:	e9cd 0100 	strd	r0, r1, [sp]
 800669e:	e01a      	b.n	80066d6 <_dtoa_r+0x39e>
 80066a0:	2502      	movs	r5, #2
 80066a2:	e7a3      	b.n	80065ec <_dtoa_r+0x2b4>
 80066a4:	f000 80a0 	beq.w	80067e8 <_dtoa_r+0x4b0>
 80066a8:	f1ca 0600 	rsb	r6, sl, #0
 80066ac:	4b9f      	ldr	r3, [pc, #636]	; (800692c <_dtoa_r+0x5f4>)
 80066ae:	4fa0      	ldr	r7, [pc, #640]	; (8006930 <_dtoa_r+0x5f8>)
 80066b0:	f006 020f 	and.w	r2, r6, #15
 80066b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066c0:	f7f9 ff72 	bl	80005a8 <__aeabi_dmul>
 80066c4:	e9cd 0100 	strd	r0, r1, [sp]
 80066c8:	1136      	asrs	r6, r6, #4
 80066ca:	2300      	movs	r3, #0
 80066cc:	2502      	movs	r5, #2
 80066ce:	2e00      	cmp	r6, #0
 80066d0:	d17f      	bne.n	80067d2 <_dtoa_r+0x49a>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d1e1      	bne.n	800669a <_dtoa_r+0x362>
 80066d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 8087 	beq.w	80067ec <_dtoa_r+0x4b4>
 80066de:	e9dd 6700 	ldrd	r6, r7, [sp]
 80066e2:	2200      	movs	r2, #0
 80066e4:	4b93      	ldr	r3, [pc, #588]	; (8006934 <_dtoa_r+0x5fc>)
 80066e6:	4630      	mov	r0, r6
 80066e8:	4639      	mov	r1, r7
 80066ea:	f7fa f9cf 	bl	8000a8c <__aeabi_dcmplt>
 80066ee:	2800      	cmp	r0, #0
 80066f0:	d07c      	beq.n	80067ec <_dtoa_r+0x4b4>
 80066f2:	f1b9 0f00 	cmp.w	r9, #0
 80066f6:	d079      	beq.n	80067ec <_dtoa_r+0x4b4>
 80066f8:	9b02      	ldr	r3, [sp, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	dd35      	ble.n	800676a <_dtoa_r+0x432>
 80066fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006702:	9308      	str	r3, [sp, #32]
 8006704:	4639      	mov	r1, r7
 8006706:	2200      	movs	r2, #0
 8006708:	4b8b      	ldr	r3, [pc, #556]	; (8006938 <_dtoa_r+0x600>)
 800670a:	4630      	mov	r0, r6
 800670c:	f7f9 ff4c 	bl	80005a8 <__aeabi_dmul>
 8006710:	e9cd 0100 	strd	r0, r1, [sp]
 8006714:	9f02      	ldr	r7, [sp, #8]
 8006716:	3501      	adds	r5, #1
 8006718:	4628      	mov	r0, r5
 800671a:	f7f9 fedb 	bl	80004d4 <__aeabi_i2d>
 800671e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006722:	f7f9 ff41 	bl	80005a8 <__aeabi_dmul>
 8006726:	2200      	movs	r2, #0
 8006728:	4b84      	ldr	r3, [pc, #528]	; (800693c <_dtoa_r+0x604>)
 800672a:	f7f9 fd87 	bl	800023c <__adddf3>
 800672e:	4605      	mov	r5, r0
 8006730:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006734:	2f00      	cmp	r7, #0
 8006736:	d15d      	bne.n	80067f4 <_dtoa_r+0x4bc>
 8006738:	2200      	movs	r2, #0
 800673a:	4b81      	ldr	r3, [pc, #516]	; (8006940 <_dtoa_r+0x608>)
 800673c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006740:	f7f9 fd7a 	bl	8000238 <__aeabi_dsub>
 8006744:	462a      	mov	r2, r5
 8006746:	4633      	mov	r3, r6
 8006748:	e9cd 0100 	strd	r0, r1, [sp]
 800674c:	f7fa f9bc 	bl	8000ac8 <__aeabi_dcmpgt>
 8006750:	2800      	cmp	r0, #0
 8006752:	f040 8288 	bne.w	8006c66 <_dtoa_r+0x92e>
 8006756:	462a      	mov	r2, r5
 8006758:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800675c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006760:	f7fa f994 	bl	8000a8c <__aeabi_dcmplt>
 8006764:	2800      	cmp	r0, #0
 8006766:	f040 827c 	bne.w	8006c62 <_dtoa_r+0x92a>
 800676a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800676e:	e9cd 2300 	strd	r2, r3, [sp]
 8006772:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006774:	2b00      	cmp	r3, #0
 8006776:	f2c0 8150 	blt.w	8006a1a <_dtoa_r+0x6e2>
 800677a:	f1ba 0f0e 	cmp.w	sl, #14
 800677e:	f300 814c 	bgt.w	8006a1a <_dtoa_r+0x6e2>
 8006782:	4b6a      	ldr	r3, [pc, #424]	; (800692c <_dtoa_r+0x5f4>)
 8006784:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006788:	ed93 7b00 	vldr	d7, [r3]
 800678c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800678e:	2b00      	cmp	r3, #0
 8006790:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006794:	f280 80d8 	bge.w	8006948 <_dtoa_r+0x610>
 8006798:	f1b9 0f00 	cmp.w	r9, #0
 800679c:	f300 80d4 	bgt.w	8006948 <_dtoa_r+0x610>
 80067a0:	f040 825e 	bne.w	8006c60 <_dtoa_r+0x928>
 80067a4:	2200      	movs	r2, #0
 80067a6:	4b66      	ldr	r3, [pc, #408]	; (8006940 <_dtoa_r+0x608>)
 80067a8:	ec51 0b17 	vmov	r0, r1, d7
 80067ac:	f7f9 fefc 	bl	80005a8 <__aeabi_dmul>
 80067b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067b4:	f7fa f97e 	bl	8000ab4 <__aeabi_dcmpge>
 80067b8:	464f      	mov	r7, r9
 80067ba:	464e      	mov	r6, r9
 80067bc:	2800      	cmp	r0, #0
 80067be:	f040 8234 	bne.w	8006c2a <_dtoa_r+0x8f2>
 80067c2:	2331      	movs	r3, #49	; 0x31
 80067c4:	f10b 0501 	add.w	r5, fp, #1
 80067c8:	f88b 3000 	strb.w	r3, [fp]
 80067cc:	f10a 0a01 	add.w	sl, sl, #1
 80067d0:	e22f      	b.n	8006c32 <_dtoa_r+0x8fa>
 80067d2:	07f2      	lsls	r2, r6, #31
 80067d4:	d505      	bpl.n	80067e2 <_dtoa_r+0x4aa>
 80067d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067da:	f7f9 fee5 	bl	80005a8 <__aeabi_dmul>
 80067de:	3501      	adds	r5, #1
 80067e0:	2301      	movs	r3, #1
 80067e2:	1076      	asrs	r6, r6, #1
 80067e4:	3708      	adds	r7, #8
 80067e6:	e772      	b.n	80066ce <_dtoa_r+0x396>
 80067e8:	2502      	movs	r5, #2
 80067ea:	e774      	b.n	80066d6 <_dtoa_r+0x39e>
 80067ec:	f8cd a020 	str.w	sl, [sp, #32]
 80067f0:	464f      	mov	r7, r9
 80067f2:	e791      	b.n	8006718 <_dtoa_r+0x3e0>
 80067f4:	4b4d      	ldr	r3, [pc, #308]	; (800692c <_dtoa_r+0x5f4>)
 80067f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067fa:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80067fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006800:	2b00      	cmp	r3, #0
 8006802:	d047      	beq.n	8006894 <_dtoa_r+0x55c>
 8006804:	4602      	mov	r2, r0
 8006806:	460b      	mov	r3, r1
 8006808:	2000      	movs	r0, #0
 800680a:	494e      	ldr	r1, [pc, #312]	; (8006944 <_dtoa_r+0x60c>)
 800680c:	f7f9 fff6 	bl	80007fc <__aeabi_ddiv>
 8006810:	462a      	mov	r2, r5
 8006812:	4633      	mov	r3, r6
 8006814:	f7f9 fd10 	bl	8000238 <__aeabi_dsub>
 8006818:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800681c:	465d      	mov	r5, fp
 800681e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006822:	f7fa f971 	bl	8000b08 <__aeabi_d2iz>
 8006826:	4606      	mov	r6, r0
 8006828:	f7f9 fe54 	bl	80004d4 <__aeabi_i2d>
 800682c:	4602      	mov	r2, r0
 800682e:	460b      	mov	r3, r1
 8006830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006834:	f7f9 fd00 	bl	8000238 <__aeabi_dsub>
 8006838:	3630      	adds	r6, #48	; 0x30
 800683a:	f805 6b01 	strb.w	r6, [r5], #1
 800683e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006842:	e9cd 0100 	strd	r0, r1, [sp]
 8006846:	f7fa f921 	bl	8000a8c <__aeabi_dcmplt>
 800684a:	2800      	cmp	r0, #0
 800684c:	d163      	bne.n	8006916 <_dtoa_r+0x5de>
 800684e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006852:	2000      	movs	r0, #0
 8006854:	4937      	ldr	r1, [pc, #220]	; (8006934 <_dtoa_r+0x5fc>)
 8006856:	f7f9 fcef 	bl	8000238 <__aeabi_dsub>
 800685a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800685e:	f7fa f915 	bl	8000a8c <__aeabi_dcmplt>
 8006862:	2800      	cmp	r0, #0
 8006864:	f040 80b7 	bne.w	80069d6 <_dtoa_r+0x69e>
 8006868:	eba5 030b 	sub.w	r3, r5, fp
 800686c:	429f      	cmp	r7, r3
 800686e:	f77f af7c 	ble.w	800676a <_dtoa_r+0x432>
 8006872:	2200      	movs	r2, #0
 8006874:	4b30      	ldr	r3, [pc, #192]	; (8006938 <_dtoa_r+0x600>)
 8006876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800687a:	f7f9 fe95 	bl	80005a8 <__aeabi_dmul>
 800687e:	2200      	movs	r2, #0
 8006880:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006884:	4b2c      	ldr	r3, [pc, #176]	; (8006938 <_dtoa_r+0x600>)
 8006886:	e9dd 0100 	ldrd	r0, r1, [sp]
 800688a:	f7f9 fe8d 	bl	80005a8 <__aeabi_dmul>
 800688e:	e9cd 0100 	strd	r0, r1, [sp]
 8006892:	e7c4      	b.n	800681e <_dtoa_r+0x4e6>
 8006894:	462a      	mov	r2, r5
 8006896:	4633      	mov	r3, r6
 8006898:	f7f9 fe86 	bl	80005a8 <__aeabi_dmul>
 800689c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80068a0:	eb0b 0507 	add.w	r5, fp, r7
 80068a4:	465e      	mov	r6, fp
 80068a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068aa:	f7fa f92d 	bl	8000b08 <__aeabi_d2iz>
 80068ae:	4607      	mov	r7, r0
 80068b0:	f7f9 fe10 	bl	80004d4 <__aeabi_i2d>
 80068b4:	3730      	adds	r7, #48	; 0x30
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068be:	f7f9 fcbb 	bl	8000238 <__aeabi_dsub>
 80068c2:	f806 7b01 	strb.w	r7, [r6], #1
 80068c6:	42ae      	cmp	r6, r5
 80068c8:	e9cd 0100 	strd	r0, r1, [sp]
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	d126      	bne.n	8006920 <_dtoa_r+0x5e8>
 80068d2:	4b1c      	ldr	r3, [pc, #112]	; (8006944 <_dtoa_r+0x60c>)
 80068d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80068d8:	f7f9 fcb0 	bl	800023c <__adddf3>
 80068dc:	4602      	mov	r2, r0
 80068de:	460b      	mov	r3, r1
 80068e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80068e4:	f7fa f8f0 	bl	8000ac8 <__aeabi_dcmpgt>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d174      	bne.n	80069d6 <_dtoa_r+0x69e>
 80068ec:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80068f0:	2000      	movs	r0, #0
 80068f2:	4914      	ldr	r1, [pc, #80]	; (8006944 <_dtoa_r+0x60c>)
 80068f4:	f7f9 fca0 	bl	8000238 <__aeabi_dsub>
 80068f8:	4602      	mov	r2, r0
 80068fa:	460b      	mov	r3, r1
 80068fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006900:	f7fa f8c4 	bl	8000a8c <__aeabi_dcmplt>
 8006904:	2800      	cmp	r0, #0
 8006906:	f43f af30 	beq.w	800676a <_dtoa_r+0x432>
 800690a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800690e:	2b30      	cmp	r3, #48	; 0x30
 8006910:	f105 32ff 	add.w	r2, r5, #4294967295
 8006914:	d002      	beq.n	800691c <_dtoa_r+0x5e4>
 8006916:	f8dd a020 	ldr.w	sl, [sp, #32]
 800691a:	e04a      	b.n	80069b2 <_dtoa_r+0x67a>
 800691c:	4615      	mov	r5, r2
 800691e:	e7f4      	b.n	800690a <_dtoa_r+0x5d2>
 8006920:	4b05      	ldr	r3, [pc, #20]	; (8006938 <_dtoa_r+0x600>)
 8006922:	f7f9 fe41 	bl	80005a8 <__aeabi_dmul>
 8006926:	e9cd 0100 	strd	r0, r1, [sp]
 800692a:	e7bc      	b.n	80068a6 <_dtoa_r+0x56e>
 800692c:	08009738 	.word	0x08009738
 8006930:	08009710 	.word	0x08009710
 8006934:	3ff00000 	.word	0x3ff00000
 8006938:	40240000 	.word	0x40240000
 800693c:	401c0000 	.word	0x401c0000
 8006940:	40140000 	.word	0x40140000
 8006944:	3fe00000 	.word	0x3fe00000
 8006948:	e9dd 6700 	ldrd	r6, r7, [sp]
 800694c:	465d      	mov	r5, fp
 800694e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006952:	4630      	mov	r0, r6
 8006954:	4639      	mov	r1, r7
 8006956:	f7f9 ff51 	bl	80007fc <__aeabi_ddiv>
 800695a:	f7fa f8d5 	bl	8000b08 <__aeabi_d2iz>
 800695e:	4680      	mov	r8, r0
 8006960:	f7f9 fdb8 	bl	80004d4 <__aeabi_i2d>
 8006964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006968:	f7f9 fe1e 	bl	80005a8 <__aeabi_dmul>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4630      	mov	r0, r6
 8006972:	4639      	mov	r1, r7
 8006974:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8006978:	f7f9 fc5e 	bl	8000238 <__aeabi_dsub>
 800697c:	f805 6b01 	strb.w	r6, [r5], #1
 8006980:	eba5 060b 	sub.w	r6, r5, fp
 8006984:	45b1      	cmp	r9, r6
 8006986:	4602      	mov	r2, r0
 8006988:	460b      	mov	r3, r1
 800698a:	d139      	bne.n	8006a00 <_dtoa_r+0x6c8>
 800698c:	f7f9 fc56 	bl	800023c <__adddf3>
 8006990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006994:	4606      	mov	r6, r0
 8006996:	460f      	mov	r7, r1
 8006998:	f7fa f896 	bl	8000ac8 <__aeabi_dcmpgt>
 800699c:	b9c8      	cbnz	r0, 80069d2 <_dtoa_r+0x69a>
 800699e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069a2:	4630      	mov	r0, r6
 80069a4:	4639      	mov	r1, r7
 80069a6:	f7fa f867 	bl	8000a78 <__aeabi_dcmpeq>
 80069aa:	b110      	cbz	r0, 80069b2 <_dtoa_r+0x67a>
 80069ac:	f018 0f01 	tst.w	r8, #1
 80069b0:	d10f      	bne.n	80069d2 <_dtoa_r+0x69a>
 80069b2:	9904      	ldr	r1, [sp, #16]
 80069b4:	4620      	mov	r0, r4
 80069b6:	f000 fabb 	bl	8006f30 <_Bfree>
 80069ba:	2300      	movs	r3, #0
 80069bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069be:	702b      	strb	r3, [r5, #0]
 80069c0:	f10a 0301 	add.w	r3, sl, #1
 80069c4:	6013      	str	r3, [r2, #0]
 80069c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f000 8241 	beq.w	8006e50 <_dtoa_r+0xb18>
 80069ce:	601d      	str	r5, [r3, #0]
 80069d0:	e23e      	b.n	8006e50 <_dtoa_r+0xb18>
 80069d2:	f8cd a020 	str.w	sl, [sp, #32]
 80069d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80069da:	2a39      	cmp	r2, #57	; 0x39
 80069dc:	f105 33ff 	add.w	r3, r5, #4294967295
 80069e0:	d108      	bne.n	80069f4 <_dtoa_r+0x6bc>
 80069e2:	459b      	cmp	fp, r3
 80069e4:	d10a      	bne.n	80069fc <_dtoa_r+0x6c4>
 80069e6:	9b08      	ldr	r3, [sp, #32]
 80069e8:	3301      	adds	r3, #1
 80069ea:	9308      	str	r3, [sp, #32]
 80069ec:	2330      	movs	r3, #48	; 0x30
 80069ee:	f88b 3000 	strb.w	r3, [fp]
 80069f2:	465b      	mov	r3, fp
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	3201      	adds	r2, #1
 80069f8:	701a      	strb	r2, [r3, #0]
 80069fa:	e78c      	b.n	8006916 <_dtoa_r+0x5de>
 80069fc:	461d      	mov	r5, r3
 80069fe:	e7ea      	b.n	80069d6 <_dtoa_r+0x69e>
 8006a00:	2200      	movs	r2, #0
 8006a02:	4b9b      	ldr	r3, [pc, #620]	; (8006c70 <_dtoa_r+0x938>)
 8006a04:	f7f9 fdd0 	bl	80005a8 <__aeabi_dmul>
 8006a08:	2200      	movs	r2, #0
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	4606      	mov	r6, r0
 8006a0e:	460f      	mov	r7, r1
 8006a10:	f7fa f832 	bl	8000a78 <__aeabi_dcmpeq>
 8006a14:	2800      	cmp	r0, #0
 8006a16:	d09a      	beq.n	800694e <_dtoa_r+0x616>
 8006a18:	e7cb      	b.n	80069b2 <_dtoa_r+0x67a>
 8006a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1c:	2a00      	cmp	r2, #0
 8006a1e:	f000 808b 	beq.w	8006b38 <_dtoa_r+0x800>
 8006a22:	9a06      	ldr	r2, [sp, #24]
 8006a24:	2a01      	cmp	r2, #1
 8006a26:	dc6e      	bgt.n	8006b06 <_dtoa_r+0x7ce>
 8006a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a2a:	2a00      	cmp	r2, #0
 8006a2c:	d067      	beq.n	8006afe <_dtoa_r+0x7c6>
 8006a2e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a32:	9f07      	ldr	r7, [sp, #28]
 8006a34:	9d05      	ldr	r5, [sp, #20]
 8006a36:	9a05      	ldr	r2, [sp, #20]
 8006a38:	2101      	movs	r1, #1
 8006a3a:	441a      	add	r2, r3
 8006a3c:	4620      	mov	r0, r4
 8006a3e:	9205      	str	r2, [sp, #20]
 8006a40:	4498      	add	r8, r3
 8006a42:	f000 fb15 	bl	8007070 <__i2b>
 8006a46:	4606      	mov	r6, r0
 8006a48:	2d00      	cmp	r5, #0
 8006a4a:	dd0c      	ble.n	8006a66 <_dtoa_r+0x72e>
 8006a4c:	f1b8 0f00 	cmp.w	r8, #0
 8006a50:	dd09      	ble.n	8006a66 <_dtoa_r+0x72e>
 8006a52:	4545      	cmp	r5, r8
 8006a54:	9a05      	ldr	r2, [sp, #20]
 8006a56:	462b      	mov	r3, r5
 8006a58:	bfa8      	it	ge
 8006a5a:	4643      	movge	r3, r8
 8006a5c:	1ad2      	subs	r2, r2, r3
 8006a5e:	9205      	str	r2, [sp, #20]
 8006a60:	1aed      	subs	r5, r5, r3
 8006a62:	eba8 0803 	sub.w	r8, r8, r3
 8006a66:	9b07      	ldr	r3, [sp, #28]
 8006a68:	b1eb      	cbz	r3, 8006aa6 <_dtoa_r+0x76e>
 8006a6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d067      	beq.n	8006b40 <_dtoa_r+0x808>
 8006a70:	b18f      	cbz	r7, 8006a96 <_dtoa_r+0x75e>
 8006a72:	4631      	mov	r1, r6
 8006a74:	463a      	mov	r2, r7
 8006a76:	4620      	mov	r0, r4
 8006a78:	f000 fb9a 	bl	80071b0 <__pow5mult>
 8006a7c:	9a04      	ldr	r2, [sp, #16]
 8006a7e:	4601      	mov	r1, r0
 8006a80:	4606      	mov	r6, r0
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fafd 	bl	8007082 <__multiply>
 8006a88:	9904      	ldr	r1, [sp, #16]
 8006a8a:	9008      	str	r0, [sp, #32]
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	f000 fa4f 	bl	8006f30 <_Bfree>
 8006a92:	9b08      	ldr	r3, [sp, #32]
 8006a94:	9304      	str	r3, [sp, #16]
 8006a96:	9b07      	ldr	r3, [sp, #28]
 8006a98:	1bda      	subs	r2, r3, r7
 8006a9a:	d004      	beq.n	8006aa6 <_dtoa_r+0x76e>
 8006a9c:	9904      	ldr	r1, [sp, #16]
 8006a9e:	4620      	mov	r0, r4
 8006aa0:	f000 fb86 	bl	80071b0 <__pow5mult>
 8006aa4:	9004      	str	r0, [sp, #16]
 8006aa6:	2101      	movs	r1, #1
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	f000 fae1 	bl	8007070 <__i2b>
 8006aae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006ab0:	4607      	mov	r7, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	f000 81d0 	beq.w	8006e58 <_dtoa_r+0xb20>
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4601      	mov	r1, r0
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fb77 	bl	80071b0 <__pow5mult>
 8006ac2:	9b06      	ldr	r3, [sp, #24]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	4607      	mov	r7, r0
 8006ac8:	dc40      	bgt.n	8006b4c <_dtoa_r+0x814>
 8006aca:	9b00      	ldr	r3, [sp, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d139      	bne.n	8006b44 <_dtoa_r+0x80c>
 8006ad0:	9b01      	ldr	r3, [sp, #4]
 8006ad2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d136      	bne.n	8006b48 <_dtoa_r+0x810>
 8006ada:	9b01      	ldr	r3, [sp, #4]
 8006adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ae0:	0d1b      	lsrs	r3, r3, #20
 8006ae2:	051b      	lsls	r3, r3, #20
 8006ae4:	b12b      	cbz	r3, 8006af2 <_dtoa_r+0x7ba>
 8006ae6:	9b05      	ldr	r3, [sp, #20]
 8006ae8:	3301      	adds	r3, #1
 8006aea:	9305      	str	r3, [sp, #20]
 8006aec:	f108 0801 	add.w	r8, r8, #1
 8006af0:	2301      	movs	r3, #1
 8006af2:	9307      	str	r3, [sp, #28]
 8006af4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d12a      	bne.n	8006b50 <_dtoa_r+0x818>
 8006afa:	2001      	movs	r0, #1
 8006afc:	e030      	b.n	8006b60 <_dtoa_r+0x828>
 8006afe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006b00:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b04:	e795      	b.n	8006a32 <_dtoa_r+0x6fa>
 8006b06:	9b07      	ldr	r3, [sp, #28]
 8006b08:	f109 37ff 	add.w	r7, r9, #4294967295
 8006b0c:	42bb      	cmp	r3, r7
 8006b0e:	bfbf      	itttt	lt
 8006b10:	9b07      	ldrlt	r3, [sp, #28]
 8006b12:	9707      	strlt	r7, [sp, #28]
 8006b14:	1afa      	sublt	r2, r7, r3
 8006b16:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006b18:	bfbb      	ittet	lt
 8006b1a:	189b      	addlt	r3, r3, r2
 8006b1c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006b1e:	1bdf      	subge	r7, r3, r7
 8006b20:	2700      	movlt	r7, #0
 8006b22:	f1b9 0f00 	cmp.w	r9, #0
 8006b26:	bfb5      	itete	lt
 8006b28:	9b05      	ldrlt	r3, [sp, #20]
 8006b2a:	9d05      	ldrge	r5, [sp, #20]
 8006b2c:	eba3 0509 	sublt.w	r5, r3, r9
 8006b30:	464b      	movge	r3, r9
 8006b32:	bfb8      	it	lt
 8006b34:	2300      	movlt	r3, #0
 8006b36:	e77e      	b.n	8006a36 <_dtoa_r+0x6fe>
 8006b38:	9f07      	ldr	r7, [sp, #28]
 8006b3a:	9d05      	ldr	r5, [sp, #20]
 8006b3c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006b3e:	e783      	b.n	8006a48 <_dtoa_r+0x710>
 8006b40:	9a07      	ldr	r2, [sp, #28]
 8006b42:	e7ab      	b.n	8006a9c <_dtoa_r+0x764>
 8006b44:	2300      	movs	r3, #0
 8006b46:	e7d4      	b.n	8006af2 <_dtoa_r+0x7ba>
 8006b48:	9b00      	ldr	r3, [sp, #0]
 8006b4a:	e7d2      	b.n	8006af2 <_dtoa_r+0x7ba>
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	9307      	str	r3, [sp, #28]
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8006b56:	6918      	ldr	r0, [r3, #16]
 8006b58:	f000 fa3c 	bl	8006fd4 <__hi0bits>
 8006b5c:	f1c0 0020 	rsb	r0, r0, #32
 8006b60:	4440      	add	r0, r8
 8006b62:	f010 001f 	ands.w	r0, r0, #31
 8006b66:	d047      	beq.n	8006bf8 <_dtoa_r+0x8c0>
 8006b68:	f1c0 0320 	rsb	r3, r0, #32
 8006b6c:	2b04      	cmp	r3, #4
 8006b6e:	dd3b      	ble.n	8006be8 <_dtoa_r+0x8b0>
 8006b70:	9b05      	ldr	r3, [sp, #20]
 8006b72:	f1c0 001c 	rsb	r0, r0, #28
 8006b76:	4403      	add	r3, r0
 8006b78:	9305      	str	r3, [sp, #20]
 8006b7a:	4405      	add	r5, r0
 8006b7c:	4480      	add	r8, r0
 8006b7e:	9b05      	ldr	r3, [sp, #20]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dd05      	ble.n	8006b90 <_dtoa_r+0x858>
 8006b84:	461a      	mov	r2, r3
 8006b86:	9904      	ldr	r1, [sp, #16]
 8006b88:	4620      	mov	r0, r4
 8006b8a:	f000 fb5f 	bl	800724c <__lshift>
 8006b8e:	9004      	str	r0, [sp, #16]
 8006b90:	f1b8 0f00 	cmp.w	r8, #0
 8006b94:	dd05      	ble.n	8006ba2 <_dtoa_r+0x86a>
 8006b96:	4639      	mov	r1, r7
 8006b98:	4642      	mov	r2, r8
 8006b9a:	4620      	mov	r0, r4
 8006b9c:	f000 fb56 	bl	800724c <__lshift>
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006ba4:	b353      	cbz	r3, 8006bfc <_dtoa_r+0x8c4>
 8006ba6:	4639      	mov	r1, r7
 8006ba8:	9804      	ldr	r0, [sp, #16]
 8006baa:	f000 fba3 	bl	80072f4 <__mcmp>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	da24      	bge.n	8006bfc <_dtoa_r+0x8c4>
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	220a      	movs	r2, #10
 8006bb6:	9904      	ldr	r1, [sp, #16]
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 f9d0 	bl	8006f5e <__multadd>
 8006bbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc0:	9004      	str	r0, [sp, #16]
 8006bc2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 814d 	beq.w	8006e66 <_dtoa_r+0xb2e>
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4631      	mov	r1, r6
 8006bd0:	220a      	movs	r2, #10
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	f000 f9c3 	bl	8006f5e <__multadd>
 8006bd8:	9b02      	ldr	r3, [sp, #8]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	4606      	mov	r6, r0
 8006bde:	dc4f      	bgt.n	8006c80 <_dtoa_r+0x948>
 8006be0:	9b06      	ldr	r3, [sp, #24]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	dd4c      	ble.n	8006c80 <_dtoa_r+0x948>
 8006be6:	e011      	b.n	8006c0c <_dtoa_r+0x8d4>
 8006be8:	d0c9      	beq.n	8006b7e <_dtoa_r+0x846>
 8006bea:	9a05      	ldr	r2, [sp, #20]
 8006bec:	331c      	adds	r3, #28
 8006bee:	441a      	add	r2, r3
 8006bf0:	9205      	str	r2, [sp, #20]
 8006bf2:	441d      	add	r5, r3
 8006bf4:	4498      	add	r8, r3
 8006bf6:	e7c2      	b.n	8006b7e <_dtoa_r+0x846>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	e7f6      	b.n	8006bea <_dtoa_r+0x8b2>
 8006bfc:	f1b9 0f00 	cmp.w	r9, #0
 8006c00:	dc38      	bgt.n	8006c74 <_dtoa_r+0x93c>
 8006c02:	9b06      	ldr	r3, [sp, #24]
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	dd35      	ble.n	8006c74 <_dtoa_r+0x93c>
 8006c08:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c0c:	9b02      	ldr	r3, [sp, #8]
 8006c0e:	b963      	cbnz	r3, 8006c2a <_dtoa_r+0x8f2>
 8006c10:	4639      	mov	r1, r7
 8006c12:	2205      	movs	r2, #5
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 f9a2 	bl	8006f5e <__multadd>
 8006c1a:	4601      	mov	r1, r0
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	9804      	ldr	r0, [sp, #16]
 8006c20:	f000 fb68 	bl	80072f4 <__mcmp>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	f73f adcc 	bgt.w	80067c2 <_dtoa_r+0x48a>
 8006c2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c2c:	465d      	mov	r5, fp
 8006c2e:	ea6f 0a03 	mvn.w	sl, r3
 8006c32:	f04f 0900 	mov.w	r9, #0
 8006c36:	4639      	mov	r1, r7
 8006c38:	4620      	mov	r0, r4
 8006c3a:	f000 f979 	bl	8006f30 <_Bfree>
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	f43f aeb7 	beq.w	80069b2 <_dtoa_r+0x67a>
 8006c44:	f1b9 0f00 	cmp.w	r9, #0
 8006c48:	d005      	beq.n	8006c56 <_dtoa_r+0x91e>
 8006c4a:	45b1      	cmp	r9, r6
 8006c4c:	d003      	beq.n	8006c56 <_dtoa_r+0x91e>
 8006c4e:	4649      	mov	r1, r9
 8006c50:	4620      	mov	r0, r4
 8006c52:	f000 f96d 	bl	8006f30 <_Bfree>
 8006c56:	4631      	mov	r1, r6
 8006c58:	4620      	mov	r0, r4
 8006c5a:	f000 f969 	bl	8006f30 <_Bfree>
 8006c5e:	e6a8      	b.n	80069b2 <_dtoa_r+0x67a>
 8006c60:	2700      	movs	r7, #0
 8006c62:	463e      	mov	r6, r7
 8006c64:	e7e1      	b.n	8006c2a <_dtoa_r+0x8f2>
 8006c66:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006c6a:	463e      	mov	r6, r7
 8006c6c:	e5a9      	b.n	80067c2 <_dtoa_r+0x48a>
 8006c6e:	bf00      	nop
 8006c70:	40240000 	.word	0x40240000
 8006c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c76:	f8cd 9008 	str.w	r9, [sp, #8]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80fa 	beq.w	8006e74 <_dtoa_r+0xb3c>
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	dd05      	ble.n	8006c90 <_dtoa_r+0x958>
 8006c84:	4631      	mov	r1, r6
 8006c86:	462a      	mov	r2, r5
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 fadf 	bl	800724c <__lshift>
 8006c8e:	4606      	mov	r6, r0
 8006c90:	9b07      	ldr	r3, [sp, #28]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d04c      	beq.n	8006d30 <_dtoa_r+0x9f8>
 8006c96:	6871      	ldr	r1, [r6, #4]
 8006c98:	4620      	mov	r0, r4
 8006c9a:	f000 f915 	bl	8006ec8 <_Balloc>
 8006c9e:	6932      	ldr	r2, [r6, #16]
 8006ca0:	3202      	adds	r2, #2
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	0092      	lsls	r2, r2, #2
 8006ca6:	f106 010c 	add.w	r1, r6, #12
 8006caa:	300c      	adds	r0, #12
 8006cac:	f7fe fd70 	bl	8005790 <memcpy>
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	4629      	mov	r1, r5
 8006cb4:	4620      	mov	r0, r4
 8006cb6:	f000 fac9 	bl	800724c <__lshift>
 8006cba:	9b00      	ldr	r3, [sp, #0]
 8006cbc:	f8cd b014 	str.w	fp, [sp, #20]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	46b1      	mov	r9, r6
 8006cc6:	9307      	str	r3, [sp, #28]
 8006cc8:	4606      	mov	r6, r0
 8006cca:	4639      	mov	r1, r7
 8006ccc:	9804      	ldr	r0, [sp, #16]
 8006cce:	f7ff faa7 	bl	8006220 <quorem>
 8006cd2:	4649      	mov	r1, r9
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006cda:	9804      	ldr	r0, [sp, #16]
 8006cdc:	f000 fb0a 	bl	80072f4 <__mcmp>
 8006ce0:	4632      	mov	r2, r6
 8006ce2:	9000      	str	r0, [sp, #0]
 8006ce4:	4639      	mov	r1, r7
 8006ce6:	4620      	mov	r0, r4
 8006ce8:	f000 fb1e 	bl	8007328 <__mdiff>
 8006cec:	68c3      	ldr	r3, [r0, #12]
 8006cee:	4602      	mov	r2, r0
 8006cf0:	bb03      	cbnz	r3, 8006d34 <_dtoa_r+0x9fc>
 8006cf2:	4601      	mov	r1, r0
 8006cf4:	9008      	str	r0, [sp, #32]
 8006cf6:	9804      	ldr	r0, [sp, #16]
 8006cf8:	f000 fafc 	bl	80072f4 <__mcmp>
 8006cfc:	9a08      	ldr	r2, [sp, #32]
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4611      	mov	r1, r2
 8006d02:	4620      	mov	r0, r4
 8006d04:	9308      	str	r3, [sp, #32]
 8006d06:	f000 f913 	bl	8006f30 <_Bfree>
 8006d0a:	9b08      	ldr	r3, [sp, #32]
 8006d0c:	b9a3      	cbnz	r3, 8006d38 <_dtoa_r+0xa00>
 8006d0e:	9a06      	ldr	r2, [sp, #24]
 8006d10:	b992      	cbnz	r2, 8006d38 <_dtoa_r+0xa00>
 8006d12:	9a07      	ldr	r2, [sp, #28]
 8006d14:	b982      	cbnz	r2, 8006d38 <_dtoa_r+0xa00>
 8006d16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d1a:	d029      	beq.n	8006d70 <_dtoa_r+0xa38>
 8006d1c:	9b00      	ldr	r3, [sp, #0]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dd01      	ble.n	8006d26 <_dtoa_r+0x9ee>
 8006d22:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006d26:	9b05      	ldr	r3, [sp, #20]
 8006d28:	1c5d      	adds	r5, r3, #1
 8006d2a:	f883 8000 	strb.w	r8, [r3]
 8006d2e:	e782      	b.n	8006c36 <_dtoa_r+0x8fe>
 8006d30:	4630      	mov	r0, r6
 8006d32:	e7c2      	b.n	8006cba <_dtoa_r+0x982>
 8006d34:	2301      	movs	r3, #1
 8006d36:	e7e3      	b.n	8006d00 <_dtoa_r+0x9c8>
 8006d38:	9a00      	ldr	r2, [sp, #0]
 8006d3a:	2a00      	cmp	r2, #0
 8006d3c:	db04      	blt.n	8006d48 <_dtoa_r+0xa10>
 8006d3e:	d125      	bne.n	8006d8c <_dtoa_r+0xa54>
 8006d40:	9a06      	ldr	r2, [sp, #24]
 8006d42:	bb1a      	cbnz	r2, 8006d8c <_dtoa_r+0xa54>
 8006d44:	9a07      	ldr	r2, [sp, #28]
 8006d46:	bb0a      	cbnz	r2, 8006d8c <_dtoa_r+0xa54>
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	ddec      	ble.n	8006d26 <_dtoa_r+0x9ee>
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	9904      	ldr	r1, [sp, #16]
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 fa7b 	bl	800724c <__lshift>
 8006d56:	4639      	mov	r1, r7
 8006d58:	9004      	str	r0, [sp, #16]
 8006d5a:	f000 facb 	bl	80072f4 <__mcmp>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	dc03      	bgt.n	8006d6a <_dtoa_r+0xa32>
 8006d62:	d1e0      	bne.n	8006d26 <_dtoa_r+0x9ee>
 8006d64:	f018 0f01 	tst.w	r8, #1
 8006d68:	d0dd      	beq.n	8006d26 <_dtoa_r+0x9ee>
 8006d6a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d6e:	d1d8      	bne.n	8006d22 <_dtoa_r+0x9ea>
 8006d70:	9b05      	ldr	r3, [sp, #20]
 8006d72:	9a05      	ldr	r2, [sp, #20]
 8006d74:	1c5d      	adds	r5, r3, #1
 8006d76:	2339      	movs	r3, #57	; 0x39
 8006d78:	7013      	strb	r3, [r2, #0]
 8006d7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d7e:	2b39      	cmp	r3, #57	; 0x39
 8006d80:	f105 32ff 	add.w	r2, r5, #4294967295
 8006d84:	d04f      	beq.n	8006e26 <_dtoa_r+0xaee>
 8006d86:	3301      	adds	r3, #1
 8006d88:	7013      	strb	r3, [r2, #0]
 8006d8a:	e754      	b.n	8006c36 <_dtoa_r+0x8fe>
 8006d8c:	9a05      	ldr	r2, [sp, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f102 0501 	add.w	r5, r2, #1
 8006d94:	dd06      	ble.n	8006da4 <_dtoa_r+0xa6c>
 8006d96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006d9a:	d0e9      	beq.n	8006d70 <_dtoa_r+0xa38>
 8006d9c:	f108 0801 	add.w	r8, r8, #1
 8006da0:	9b05      	ldr	r3, [sp, #20]
 8006da2:	e7c2      	b.n	8006d2a <_dtoa_r+0x9f2>
 8006da4:	9a02      	ldr	r2, [sp, #8]
 8006da6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006daa:	eba5 030b 	sub.w	r3, r5, fp
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d021      	beq.n	8006df6 <_dtoa_r+0xabe>
 8006db2:	2300      	movs	r3, #0
 8006db4:	220a      	movs	r2, #10
 8006db6:	9904      	ldr	r1, [sp, #16]
 8006db8:	4620      	mov	r0, r4
 8006dba:	f000 f8d0 	bl	8006f5e <__multadd>
 8006dbe:	45b1      	cmp	r9, r6
 8006dc0:	9004      	str	r0, [sp, #16]
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	f04f 020a 	mov.w	r2, #10
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4620      	mov	r0, r4
 8006dce:	d105      	bne.n	8006ddc <_dtoa_r+0xaa4>
 8006dd0:	f000 f8c5 	bl	8006f5e <__multadd>
 8006dd4:	4681      	mov	r9, r0
 8006dd6:	4606      	mov	r6, r0
 8006dd8:	9505      	str	r5, [sp, #20]
 8006dda:	e776      	b.n	8006cca <_dtoa_r+0x992>
 8006ddc:	f000 f8bf 	bl	8006f5e <__multadd>
 8006de0:	4631      	mov	r1, r6
 8006de2:	4681      	mov	r9, r0
 8006de4:	2300      	movs	r3, #0
 8006de6:	220a      	movs	r2, #10
 8006de8:	4620      	mov	r0, r4
 8006dea:	f000 f8b8 	bl	8006f5e <__multadd>
 8006dee:	4606      	mov	r6, r0
 8006df0:	e7f2      	b.n	8006dd8 <_dtoa_r+0xaa0>
 8006df2:	f04f 0900 	mov.w	r9, #0
 8006df6:	2201      	movs	r2, #1
 8006df8:	9904      	ldr	r1, [sp, #16]
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f000 fa26 	bl	800724c <__lshift>
 8006e00:	4639      	mov	r1, r7
 8006e02:	9004      	str	r0, [sp, #16]
 8006e04:	f000 fa76 	bl	80072f4 <__mcmp>
 8006e08:	2800      	cmp	r0, #0
 8006e0a:	dcb6      	bgt.n	8006d7a <_dtoa_r+0xa42>
 8006e0c:	d102      	bne.n	8006e14 <_dtoa_r+0xadc>
 8006e0e:	f018 0f01 	tst.w	r8, #1
 8006e12:	d1b2      	bne.n	8006d7a <_dtoa_r+0xa42>
 8006e14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006e18:	2b30      	cmp	r3, #48	; 0x30
 8006e1a:	f105 32ff 	add.w	r2, r5, #4294967295
 8006e1e:	f47f af0a 	bne.w	8006c36 <_dtoa_r+0x8fe>
 8006e22:	4615      	mov	r5, r2
 8006e24:	e7f6      	b.n	8006e14 <_dtoa_r+0xadc>
 8006e26:	4593      	cmp	fp, r2
 8006e28:	d105      	bne.n	8006e36 <_dtoa_r+0xafe>
 8006e2a:	2331      	movs	r3, #49	; 0x31
 8006e2c:	f10a 0a01 	add.w	sl, sl, #1
 8006e30:	f88b 3000 	strb.w	r3, [fp]
 8006e34:	e6ff      	b.n	8006c36 <_dtoa_r+0x8fe>
 8006e36:	4615      	mov	r5, r2
 8006e38:	e79f      	b.n	8006d7a <_dtoa_r+0xa42>
 8006e3a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8006ea0 <_dtoa_r+0xb68>
 8006e3e:	e007      	b.n	8006e50 <_dtoa_r+0xb18>
 8006e40:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e42:	f8df b060 	ldr.w	fp, [pc, #96]	; 8006ea4 <_dtoa_r+0xb6c>
 8006e46:	b11b      	cbz	r3, 8006e50 <_dtoa_r+0xb18>
 8006e48:	f10b 0308 	add.w	r3, fp, #8
 8006e4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e4e:	6013      	str	r3, [r2, #0]
 8006e50:	4658      	mov	r0, fp
 8006e52:	b017      	add	sp, #92	; 0x5c
 8006e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e58:	9b06      	ldr	r3, [sp, #24]
 8006e5a:	2b01      	cmp	r3, #1
 8006e5c:	f77f ae35 	ble.w	8006aca <_dtoa_r+0x792>
 8006e60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006e62:	9307      	str	r3, [sp, #28]
 8006e64:	e649      	b.n	8006afa <_dtoa_r+0x7c2>
 8006e66:	9b02      	ldr	r3, [sp, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	dc03      	bgt.n	8006e74 <_dtoa_r+0xb3c>
 8006e6c:	9b06      	ldr	r3, [sp, #24]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	f73f aecc 	bgt.w	8006c0c <_dtoa_r+0x8d4>
 8006e74:	465d      	mov	r5, fp
 8006e76:	4639      	mov	r1, r7
 8006e78:	9804      	ldr	r0, [sp, #16]
 8006e7a:	f7ff f9d1 	bl	8006220 <quorem>
 8006e7e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006e82:	f805 8b01 	strb.w	r8, [r5], #1
 8006e86:	9a02      	ldr	r2, [sp, #8]
 8006e88:	eba5 030b 	sub.w	r3, r5, fp
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	ddb0      	ble.n	8006df2 <_dtoa_r+0xaba>
 8006e90:	2300      	movs	r3, #0
 8006e92:	220a      	movs	r2, #10
 8006e94:	9904      	ldr	r1, [sp, #16]
 8006e96:	4620      	mov	r0, r4
 8006e98:	f000 f861 	bl	8006f5e <__multadd>
 8006e9c:	9004      	str	r0, [sp, #16]
 8006e9e:	e7ea      	b.n	8006e76 <_dtoa_r+0xb3e>
 8006ea0:	080096dc 	.word	0x080096dc
 8006ea4:	08009700 	.word	0x08009700

08006ea8 <_localeconv_r>:
 8006ea8:	4b04      	ldr	r3, [pc, #16]	; (8006ebc <_localeconv_r+0x14>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	6a18      	ldr	r0, [r3, #32]
 8006eae:	4b04      	ldr	r3, [pc, #16]	; (8006ec0 <_localeconv_r+0x18>)
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	bf08      	it	eq
 8006eb4:	4618      	moveq	r0, r3
 8006eb6:	30f0      	adds	r0, #240	; 0xf0
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	20000010 	.word	0x20000010
 8006ec0:	20000074 	.word	0x20000074

08006ec4 <__malloc_lock>:
 8006ec4:	4770      	bx	lr

08006ec6 <__malloc_unlock>:
 8006ec6:	4770      	bx	lr

08006ec8 <_Balloc>:
 8006ec8:	b570      	push	{r4, r5, r6, lr}
 8006eca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006ecc:	4604      	mov	r4, r0
 8006ece:	460e      	mov	r6, r1
 8006ed0:	b93d      	cbnz	r5, 8006ee2 <_Balloc+0x1a>
 8006ed2:	2010      	movs	r0, #16
 8006ed4:	f7fe fc54 	bl	8005780 <malloc>
 8006ed8:	6260      	str	r0, [r4, #36]	; 0x24
 8006eda:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006ede:	6005      	str	r5, [r0, #0]
 8006ee0:	60c5      	str	r5, [r0, #12]
 8006ee2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006ee4:	68eb      	ldr	r3, [r5, #12]
 8006ee6:	b183      	cbz	r3, 8006f0a <_Balloc+0x42>
 8006ee8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006eea:	68db      	ldr	r3, [r3, #12]
 8006eec:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006ef0:	b9b8      	cbnz	r0, 8006f22 <_Balloc+0x5a>
 8006ef2:	2101      	movs	r1, #1
 8006ef4:	fa01 f506 	lsl.w	r5, r1, r6
 8006ef8:	1d6a      	adds	r2, r5, #5
 8006efa:	0092      	lsls	r2, r2, #2
 8006efc:	4620      	mov	r0, r4
 8006efe:	f000 fabf 	bl	8007480 <_calloc_r>
 8006f02:	b160      	cbz	r0, 8006f1e <_Balloc+0x56>
 8006f04:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006f08:	e00e      	b.n	8006f28 <_Balloc+0x60>
 8006f0a:	2221      	movs	r2, #33	; 0x21
 8006f0c:	2104      	movs	r1, #4
 8006f0e:	4620      	mov	r0, r4
 8006f10:	f000 fab6 	bl	8007480 <_calloc_r>
 8006f14:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f16:	60e8      	str	r0, [r5, #12]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1e4      	bne.n	8006ee8 <_Balloc+0x20>
 8006f1e:	2000      	movs	r0, #0
 8006f20:	bd70      	pop	{r4, r5, r6, pc}
 8006f22:	6802      	ldr	r2, [r0, #0]
 8006f24:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f2e:	e7f7      	b.n	8006f20 <_Balloc+0x58>

08006f30 <_Bfree>:
 8006f30:	b570      	push	{r4, r5, r6, lr}
 8006f32:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006f34:	4606      	mov	r6, r0
 8006f36:	460d      	mov	r5, r1
 8006f38:	b93c      	cbnz	r4, 8006f4a <_Bfree+0x1a>
 8006f3a:	2010      	movs	r0, #16
 8006f3c:	f7fe fc20 	bl	8005780 <malloc>
 8006f40:	6270      	str	r0, [r6, #36]	; 0x24
 8006f42:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f46:	6004      	str	r4, [r0, #0]
 8006f48:	60c4      	str	r4, [r0, #12]
 8006f4a:	b13d      	cbz	r5, 8006f5c <_Bfree+0x2c>
 8006f4c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f4e:	686a      	ldr	r2, [r5, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f56:	6029      	str	r1, [r5, #0]
 8006f58:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}

08006f5e <__multadd>:
 8006f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f62:	690d      	ldr	r5, [r1, #16]
 8006f64:	461f      	mov	r7, r3
 8006f66:	4606      	mov	r6, r0
 8006f68:	460c      	mov	r4, r1
 8006f6a:	f101 0c14 	add.w	ip, r1, #20
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f8dc 0000 	ldr.w	r0, [ip]
 8006f74:	b281      	uxth	r1, r0
 8006f76:	fb02 7101 	mla	r1, r2, r1, r7
 8006f7a:	0c0f      	lsrs	r7, r1, #16
 8006f7c:	0c00      	lsrs	r0, r0, #16
 8006f7e:	fb02 7000 	mla	r0, r2, r0, r7
 8006f82:	b289      	uxth	r1, r1
 8006f84:	3301      	adds	r3, #1
 8006f86:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006f8a:	429d      	cmp	r5, r3
 8006f8c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006f90:	f84c 1b04 	str.w	r1, [ip], #4
 8006f94:	dcec      	bgt.n	8006f70 <__multadd+0x12>
 8006f96:	b1d7      	cbz	r7, 8006fce <__multadd+0x70>
 8006f98:	68a3      	ldr	r3, [r4, #8]
 8006f9a:	42ab      	cmp	r3, r5
 8006f9c:	dc12      	bgt.n	8006fc4 <__multadd+0x66>
 8006f9e:	6861      	ldr	r1, [r4, #4]
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	3101      	adds	r1, #1
 8006fa4:	f7ff ff90 	bl	8006ec8 <_Balloc>
 8006fa8:	6922      	ldr	r2, [r4, #16]
 8006faa:	3202      	adds	r2, #2
 8006fac:	f104 010c 	add.w	r1, r4, #12
 8006fb0:	4680      	mov	r8, r0
 8006fb2:	0092      	lsls	r2, r2, #2
 8006fb4:	300c      	adds	r0, #12
 8006fb6:	f7fe fbeb 	bl	8005790 <memcpy>
 8006fba:	4621      	mov	r1, r4
 8006fbc:	4630      	mov	r0, r6
 8006fbe:	f7ff ffb7 	bl	8006f30 <_Bfree>
 8006fc2:	4644      	mov	r4, r8
 8006fc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fc8:	3501      	adds	r5, #1
 8006fca:	615f      	str	r7, [r3, #20]
 8006fcc:	6125      	str	r5, [r4, #16]
 8006fce:	4620      	mov	r0, r4
 8006fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006fd4 <__hi0bits>:
 8006fd4:	0c02      	lsrs	r2, r0, #16
 8006fd6:	0412      	lsls	r2, r2, #16
 8006fd8:	4603      	mov	r3, r0
 8006fda:	b9b2      	cbnz	r2, 800700a <__hi0bits+0x36>
 8006fdc:	0403      	lsls	r3, r0, #16
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006fe4:	bf04      	itt	eq
 8006fe6:	021b      	lsleq	r3, r3, #8
 8006fe8:	3008      	addeq	r0, #8
 8006fea:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006fee:	bf04      	itt	eq
 8006ff0:	011b      	lsleq	r3, r3, #4
 8006ff2:	3004      	addeq	r0, #4
 8006ff4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006ff8:	bf04      	itt	eq
 8006ffa:	009b      	lsleq	r3, r3, #2
 8006ffc:	3002      	addeq	r0, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	db06      	blt.n	8007010 <__hi0bits+0x3c>
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	d503      	bpl.n	800700e <__hi0bits+0x3a>
 8007006:	3001      	adds	r0, #1
 8007008:	4770      	bx	lr
 800700a:	2000      	movs	r0, #0
 800700c:	e7e8      	b.n	8006fe0 <__hi0bits+0xc>
 800700e:	2020      	movs	r0, #32
 8007010:	4770      	bx	lr

08007012 <__lo0bits>:
 8007012:	6803      	ldr	r3, [r0, #0]
 8007014:	f013 0207 	ands.w	r2, r3, #7
 8007018:	4601      	mov	r1, r0
 800701a:	d00b      	beq.n	8007034 <__lo0bits+0x22>
 800701c:	07da      	lsls	r2, r3, #31
 800701e:	d423      	bmi.n	8007068 <__lo0bits+0x56>
 8007020:	0798      	lsls	r0, r3, #30
 8007022:	bf49      	itett	mi
 8007024:	085b      	lsrmi	r3, r3, #1
 8007026:	089b      	lsrpl	r3, r3, #2
 8007028:	2001      	movmi	r0, #1
 800702a:	600b      	strmi	r3, [r1, #0]
 800702c:	bf5c      	itt	pl
 800702e:	600b      	strpl	r3, [r1, #0]
 8007030:	2002      	movpl	r0, #2
 8007032:	4770      	bx	lr
 8007034:	b298      	uxth	r0, r3
 8007036:	b9a8      	cbnz	r0, 8007064 <__lo0bits+0x52>
 8007038:	0c1b      	lsrs	r3, r3, #16
 800703a:	2010      	movs	r0, #16
 800703c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007040:	bf04      	itt	eq
 8007042:	0a1b      	lsreq	r3, r3, #8
 8007044:	3008      	addeq	r0, #8
 8007046:	071a      	lsls	r2, r3, #28
 8007048:	bf04      	itt	eq
 800704a:	091b      	lsreq	r3, r3, #4
 800704c:	3004      	addeq	r0, #4
 800704e:	079a      	lsls	r2, r3, #30
 8007050:	bf04      	itt	eq
 8007052:	089b      	lsreq	r3, r3, #2
 8007054:	3002      	addeq	r0, #2
 8007056:	07da      	lsls	r2, r3, #31
 8007058:	d402      	bmi.n	8007060 <__lo0bits+0x4e>
 800705a:	085b      	lsrs	r3, r3, #1
 800705c:	d006      	beq.n	800706c <__lo0bits+0x5a>
 800705e:	3001      	adds	r0, #1
 8007060:	600b      	str	r3, [r1, #0]
 8007062:	4770      	bx	lr
 8007064:	4610      	mov	r0, r2
 8007066:	e7e9      	b.n	800703c <__lo0bits+0x2a>
 8007068:	2000      	movs	r0, #0
 800706a:	4770      	bx	lr
 800706c:	2020      	movs	r0, #32
 800706e:	4770      	bx	lr

08007070 <__i2b>:
 8007070:	b510      	push	{r4, lr}
 8007072:	460c      	mov	r4, r1
 8007074:	2101      	movs	r1, #1
 8007076:	f7ff ff27 	bl	8006ec8 <_Balloc>
 800707a:	2201      	movs	r2, #1
 800707c:	6144      	str	r4, [r0, #20]
 800707e:	6102      	str	r2, [r0, #16]
 8007080:	bd10      	pop	{r4, pc}

08007082 <__multiply>:
 8007082:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007086:	4614      	mov	r4, r2
 8007088:	690a      	ldr	r2, [r1, #16]
 800708a:	6923      	ldr	r3, [r4, #16]
 800708c:	429a      	cmp	r2, r3
 800708e:	bfb8      	it	lt
 8007090:	460b      	movlt	r3, r1
 8007092:	4688      	mov	r8, r1
 8007094:	bfbc      	itt	lt
 8007096:	46a0      	movlt	r8, r4
 8007098:	461c      	movlt	r4, r3
 800709a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800709e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80070a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80070a6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070aa:	eb07 0609 	add.w	r6, r7, r9
 80070ae:	42b3      	cmp	r3, r6
 80070b0:	bfb8      	it	lt
 80070b2:	3101      	addlt	r1, #1
 80070b4:	f7ff ff08 	bl	8006ec8 <_Balloc>
 80070b8:	f100 0514 	add.w	r5, r0, #20
 80070bc:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80070c0:	462b      	mov	r3, r5
 80070c2:	2200      	movs	r2, #0
 80070c4:	4573      	cmp	r3, lr
 80070c6:	d316      	bcc.n	80070f6 <__multiply+0x74>
 80070c8:	f104 0214 	add.w	r2, r4, #20
 80070cc:	f108 0114 	add.w	r1, r8, #20
 80070d0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80070d4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80070d8:	9300      	str	r3, [sp, #0]
 80070da:	9b00      	ldr	r3, [sp, #0]
 80070dc:	9201      	str	r2, [sp, #4]
 80070de:	4293      	cmp	r3, r2
 80070e0:	d80c      	bhi.n	80070fc <__multiply+0x7a>
 80070e2:	2e00      	cmp	r6, #0
 80070e4:	dd03      	ble.n	80070ee <__multiply+0x6c>
 80070e6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d05d      	beq.n	80071aa <__multiply+0x128>
 80070ee:	6106      	str	r6, [r0, #16]
 80070f0:	b003      	add	sp, #12
 80070f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f6:	f843 2b04 	str.w	r2, [r3], #4
 80070fa:	e7e3      	b.n	80070c4 <__multiply+0x42>
 80070fc:	f8b2 b000 	ldrh.w	fp, [r2]
 8007100:	f1bb 0f00 	cmp.w	fp, #0
 8007104:	d023      	beq.n	800714e <__multiply+0xcc>
 8007106:	4689      	mov	r9, r1
 8007108:	46ac      	mov	ip, r5
 800710a:	f04f 0800 	mov.w	r8, #0
 800710e:	f859 4b04 	ldr.w	r4, [r9], #4
 8007112:	f8dc a000 	ldr.w	sl, [ip]
 8007116:	b2a3      	uxth	r3, r4
 8007118:	fa1f fa8a 	uxth.w	sl, sl
 800711c:	fb0b a303 	mla	r3, fp, r3, sl
 8007120:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007124:	f8dc 4000 	ldr.w	r4, [ip]
 8007128:	4443      	add	r3, r8
 800712a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800712e:	fb0b 840a 	mla	r4, fp, sl, r8
 8007132:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007136:	46e2      	mov	sl, ip
 8007138:	b29b      	uxth	r3, r3
 800713a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800713e:	454f      	cmp	r7, r9
 8007140:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007144:	f84a 3b04 	str.w	r3, [sl], #4
 8007148:	d82b      	bhi.n	80071a2 <__multiply+0x120>
 800714a:	f8cc 8004 	str.w	r8, [ip, #4]
 800714e:	9b01      	ldr	r3, [sp, #4]
 8007150:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007154:	3204      	adds	r2, #4
 8007156:	f1ba 0f00 	cmp.w	sl, #0
 800715a:	d020      	beq.n	800719e <__multiply+0x11c>
 800715c:	682b      	ldr	r3, [r5, #0]
 800715e:	4689      	mov	r9, r1
 8007160:	46a8      	mov	r8, r5
 8007162:	f04f 0b00 	mov.w	fp, #0
 8007166:	f8b9 c000 	ldrh.w	ip, [r9]
 800716a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800716e:	fb0a 440c 	mla	r4, sl, ip, r4
 8007172:	445c      	add	r4, fp
 8007174:	46c4      	mov	ip, r8
 8007176:	b29b      	uxth	r3, r3
 8007178:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800717c:	f84c 3b04 	str.w	r3, [ip], #4
 8007180:	f859 3b04 	ldr.w	r3, [r9], #4
 8007184:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007188:	0c1b      	lsrs	r3, r3, #16
 800718a:	fb0a b303 	mla	r3, sl, r3, fp
 800718e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007192:	454f      	cmp	r7, r9
 8007194:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007198:	d805      	bhi.n	80071a6 <__multiply+0x124>
 800719a:	f8c8 3004 	str.w	r3, [r8, #4]
 800719e:	3504      	adds	r5, #4
 80071a0:	e79b      	b.n	80070da <__multiply+0x58>
 80071a2:	46d4      	mov	ip, sl
 80071a4:	e7b3      	b.n	800710e <__multiply+0x8c>
 80071a6:	46e0      	mov	r8, ip
 80071a8:	e7dd      	b.n	8007166 <__multiply+0xe4>
 80071aa:	3e01      	subs	r6, #1
 80071ac:	e799      	b.n	80070e2 <__multiply+0x60>
	...

080071b0 <__pow5mult>:
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b4:	4615      	mov	r5, r2
 80071b6:	f012 0203 	ands.w	r2, r2, #3
 80071ba:	4606      	mov	r6, r0
 80071bc:	460f      	mov	r7, r1
 80071be:	d007      	beq.n	80071d0 <__pow5mult+0x20>
 80071c0:	3a01      	subs	r2, #1
 80071c2:	4c21      	ldr	r4, [pc, #132]	; (8007248 <__pow5mult+0x98>)
 80071c4:	2300      	movs	r3, #0
 80071c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80071ca:	f7ff fec8 	bl	8006f5e <__multadd>
 80071ce:	4607      	mov	r7, r0
 80071d0:	10ad      	asrs	r5, r5, #2
 80071d2:	d035      	beq.n	8007240 <__pow5mult+0x90>
 80071d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80071d6:	b93c      	cbnz	r4, 80071e8 <__pow5mult+0x38>
 80071d8:	2010      	movs	r0, #16
 80071da:	f7fe fad1 	bl	8005780 <malloc>
 80071de:	6270      	str	r0, [r6, #36]	; 0x24
 80071e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80071e4:	6004      	str	r4, [r0, #0]
 80071e6:	60c4      	str	r4, [r0, #12]
 80071e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80071ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80071f0:	b94c      	cbnz	r4, 8007206 <__pow5mult+0x56>
 80071f2:	f240 2171 	movw	r1, #625	; 0x271
 80071f6:	4630      	mov	r0, r6
 80071f8:	f7ff ff3a 	bl	8007070 <__i2b>
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8007202:	4604      	mov	r4, r0
 8007204:	6003      	str	r3, [r0, #0]
 8007206:	f04f 0800 	mov.w	r8, #0
 800720a:	07eb      	lsls	r3, r5, #31
 800720c:	d50a      	bpl.n	8007224 <__pow5mult+0x74>
 800720e:	4639      	mov	r1, r7
 8007210:	4622      	mov	r2, r4
 8007212:	4630      	mov	r0, r6
 8007214:	f7ff ff35 	bl	8007082 <__multiply>
 8007218:	4639      	mov	r1, r7
 800721a:	4681      	mov	r9, r0
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff fe87 	bl	8006f30 <_Bfree>
 8007222:	464f      	mov	r7, r9
 8007224:	106d      	asrs	r5, r5, #1
 8007226:	d00b      	beq.n	8007240 <__pow5mult+0x90>
 8007228:	6820      	ldr	r0, [r4, #0]
 800722a:	b938      	cbnz	r0, 800723c <__pow5mult+0x8c>
 800722c:	4622      	mov	r2, r4
 800722e:	4621      	mov	r1, r4
 8007230:	4630      	mov	r0, r6
 8007232:	f7ff ff26 	bl	8007082 <__multiply>
 8007236:	6020      	str	r0, [r4, #0]
 8007238:	f8c0 8000 	str.w	r8, [r0]
 800723c:	4604      	mov	r4, r0
 800723e:	e7e4      	b.n	800720a <__pow5mult+0x5a>
 8007240:	4638      	mov	r0, r7
 8007242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007246:	bf00      	nop
 8007248:	08009800 	.word	0x08009800

0800724c <__lshift>:
 800724c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007250:	460c      	mov	r4, r1
 8007252:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6849      	ldr	r1, [r1, #4]
 800725a:	eb0a 0903 	add.w	r9, sl, r3
 800725e:	68a3      	ldr	r3, [r4, #8]
 8007260:	4607      	mov	r7, r0
 8007262:	4616      	mov	r6, r2
 8007264:	f109 0501 	add.w	r5, r9, #1
 8007268:	42ab      	cmp	r3, r5
 800726a:	db32      	blt.n	80072d2 <__lshift+0x86>
 800726c:	4638      	mov	r0, r7
 800726e:	f7ff fe2b 	bl	8006ec8 <_Balloc>
 8007272:	2300      	movs	r3, #0
 8007274:	4680      	mov	r8, r0
 8007276:	f100 0114 	add.w	r1, r0, #20
 800727a:	461a      	mov	r2, r3
 800727c:	4553      	cmp	r3, sl
 800727e:	db2b      	blt.n	80072d8 <__lshift+0x8c>
 8007280:	6920      	ldr	r0, [r4, #16]
 8007282:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007286:	f104 0314 	add.w	r3, r4, #20
 800728a:	f016 021f 	ands.w	r2, r6, #31
 800728e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007292:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007296:	d025      	beq.n	80072e4 <__lshift+0x98>
 8007298:	f1c2 0e20 	rsb	lr, r2, #32
 800729c:	2000      	movs	r0, #0
 800729e:	681e      	ldr	r6, [r3, #0]
 80072a0:	468a      	mov	sl, r1
 80072a2:	4096      	lsls	r6, r2
 80072a4:	4330      	orrs	r0, r6
 80072a6:	f84a 0b04 	str.w	r0, [sl], #4
 80072aa:	f853 0b04 	ldr.w	r0, [r3], #4
 80072ae:	459c      	cmp	ip, r3
 80072b0:	fa20 f00e 	lsr.w	r0, r0, lr
 80072b4:	d814      	bhi.n	80072e0 <__lshift+0x94>
 80072b6:	6048      	str	r0, [r1, #4]
 80072b8:	b108      	cbz	r0, 80072be <__lshift+0x72>
 80072ba:	f109 0502 	add.w	r5, r9, #2
 80072be:	3d01      	subs	r5, #1
 80072c0:	4638      	mov	r0, r7
 80072c2:	f8c8 5010 	str.w	r5, [r8, #16]
 80072c6:	4621      	mov	r1, r4
 80072c8:	f7ff fe32 	bl	8006f30 <_Bfree>
 80072cc:	4640      	mov	r0, r8
 80072ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d2:	3101      	adds	r1, #1
 80072d4:	005b      	lsls	r3, r3, #1
 80072d6:	e7c7      	b.n	8007268 <__lshift+0x1c>
 80072d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80072dc:	3301      	adds	r3, #1
 80072de:	e7cd      	b.n	800727c <__lshift+0x30>
 80072e0:	4651      	mov	r1, sl
 80072e2:	e7dc      	b.n	800729e <__lshift+0x52>
 80072e4:	3904      	subs	r1, #4
 80072e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ea:	f841 2f04 	str.w	r2, [r1, #4]!
 80072ee:	459c      	cmp	ip, r3
 80072f0:	d8f9      	bhi.n	80072e6 <__lshift+0x9a>
 80072f2:	e7e4      	b.n	80072be <__lshift+0x72>

080072f4 <__mcmp>:
 80072f4:	6903      	ldr	r3, [r0, #16]
 80072f6:	690a      	ldr	r2, [r1, #16]
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	b530      	push	{r4, r5, lr}
 80072fc:	d10c      	bne.n	8007318 <__mcmp+0x24>
 80072fe:	0092      	lsls	r2, r2, #2
 8007300:	3014      	adds	r0, #20
 8007302:	3114      	adds	r1, #20
 8007304:	1884      	adds	r4, r0, r2
 8007306:	4411      	add	r1, r2
 8007308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800730c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007310:	4295      	cmp	r5, r2
 8007312:	d003      	beq.n	800731c <__mcmp+0x28>
 8007314:	d305      	bcc.n	8007322 <__mcmp+0x2e>
 8007316:	2301      	movs	r3, #1
 8007318:	4618      	mov	r0, r3
 800731a:	bd30      	pop	{r4, r5, pc}
 800731c:	42a0      	cmp	r0, r4
 800731e:	d3f3      	bcc.n	8007308 <__mcmp+0x14>
 8007320:	e7fa      	b.n	8007318 <__mcmp+0x24>
 8007322:	f04f 33ff 	mov.w	r3, #4294967295
 8007326:	e7f7      	b.n	8007318 <__mcmp+0x24>

08007328 <__mdiff>:
 8007328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732c:	460d      	mov	r5, r1
 800732e:	4607      	mov	r7, r0
 8007330:	4611      	mov	r1, r2
 8007332:	4628      	mov	r0, r5
 8007334:	4614      	mov	r4, r2
 8007336:	f7ff ffdd 	bl	80072f4 <__mcmp>
 800733a:	1e06      	subs	r6, r0, #0
 800733c:	d108      	bne.n	8007350 <__mdiff+0x28>
 800733e:	4631      	mov	r1, r6
 8007340:	4638      	mov	r0, r7
 8007342:	f7ff fdc1 	bl	8006ec8 <_Balloc>
 8007346:	2301      	movs	r3, #1
 8007348:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007350:	bfa4      	itt	ge
 8007352:	4623      	movge	r3, r4
 8007354:	462c      	movge	r4, r5
 8007356:	4638      	mov	r0, r7
 8007358:	6861      	ldr	r1, [r4, #4]
 800735a:	bfa6      	itte	ge
 800735c:	461d      	movge	r5, r3
 800735e:	2600      	movge	r6, #0
 8007360:	2601      	movlt	r6, #1
 8007362:	f7ff fdb1 	bl	8006ec8 <_Balloc>
 8007366:	692b      	ldr	r3, [r5, #16]
 8007368:	60c6      	str	r6, [r0, #12]
 800736a:	6926      	ldr	r6, [r4, #16]
 800736c:	f105 0914 	add.w	r9, r5, #20
 8007370:	f104 0214 	add.w	r2, r4, #20
 8007374:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007378:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800737c:	f100 0514 	add.w	r5, r0, #20
 8007380:	f04f 0e00 	mov.w	lr, #0
 8007384:	f852 ab04 	ldr.w	sl, [r2], #4
 8007388:	f859 4b04 	ldr.w	r4, [r9], #4
 800738c:	fa1e f18a 	uxtah	r1, lr, sl
 8007390:	b2a3      	uxth	r3, r4
 8007392:	1ac9      	subs	r1, r1, r3
 8007394:	0c23      	lsrs	r3, r4, #16
 8007396:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800739a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800739e:	b289      	uxth	r1, r1
 80073a0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80073a4:	45c8      	cmp	r8, r9
 80073a6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80073aa:	4694      	mov	ip, r2
 80073ac:	f845 3b04 	str.w	r3, [r5], #4
 80073b0:	d8e8      	bhi.n	8007384 <__mdiff+0x5c>
 80073b2:	45bc      	cmp	ip, r7
 80073b4:	d304      	bcc.n	80073c0 <__mdiff+0x98>
 80073b6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80073ba:	b183      	cbz	r3, 80073de <__mdiff+0xb6>
 80073bc:	6106      	str	r6, [r0, #16]
 80073be:	e7c5      	b.n	800734c <__mdiff+0x24>
 80073c0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80073c4:	fa1e f381 	uxtah	r3, lr, r1
 80073c8:	141a      	asrs	r2, r3, #16
 80073ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073d4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80073d8:	f845 3b04 	str.w	r3, [r5], #4
 80073dc:	e7e9      	b.n	80073b2 <__mdiff+0x8a>
 80073de:	3e01      	subs	r6, #1
 80073e0:	e7e9      	b.n	80073b6 <__mdiff+0x8e>

080073e2 <__d2b>:
 80073e2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073e6:	460e      	mov	r6, r1
 80073e8:	2101      	movs	r1, #1
 80073ea:	ec59 8b10 	vmov	r8, r9, d0
 80073ee:	4615      	mov	r5, r2
 80073f0:	f7ff fd6a 	bl	8006ec8 <_Balloc>
 80073f4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80073f8:	4607      	mov	r7, r0
 80073fa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073fe:	bb34      	cbnz	r4, 800744e <__d2b+0x6c>
 8007400:	9301      	str	r3, [sp, #4]
 8007402:	f1b8 0300 	subs.w	r3, r8, #0
 8007406:	d027      	beq.n	8007458 <__d2b+0x76>
 8007408:	a802      	add	r0, sp, #8
 800740a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800740e:	f7ff fe00 	bl	8007012 <__lo0bits>
 8007412:	9900      	ldr	r1, [sp, #0]
 8007414:	b1f0      	cbz	r0, 8007454 <__d2b+0x72>
 8007416:	9a01      	ldr	r2, [sp, #4]
 8007418:	f1c0 0320 	rsb	r3, r0, #32
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	430b      	orrs	r3, r1
 8007422:	40c2      	lsrs	r2, r0
 8007424:	617b      	str	r3, [r7, #20]
 8007426:	9201      	str	r2, [sp, #4]
 8007428:	9b01      	ldr	r3, [sp, #4]
 800742a:	61bb      	str	r3, [r7, #24]
 800742c:	2b00      	cmp	r3, #0
 800742e:	bf14      	ite	ne
 8007430:	2102      	movne	r1, #2
 8007432:	2101      	moveq	r1, #1
 8007434:	6139      	str	r1, [r7, #16]
 8007436:	b1c4      	cbz	r4, 800746a <__d2b+0x88>
 8007438:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800743c:	4404      	add	r4, r0
 800743e:	6034      	str	r4, [r6, #0]
 8007440:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007444:	6028      	str	r0, [r5, #0]
 8007446:	4638      	mov	r0, r7
 8007448:	b003      	add	sp, #12
 800744a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800744e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007452:	e7d5      	b.n	8007400 <__d2b+0x1e>
 8007454:	6179      	str	r1, [r7, #20]
 8007456:	e7e7      	b.n	8007428 <__d2b+0x46>
 8007458:	a801      	add	r0, sp, #4
 800745a:	f7ff fdda 	bl	8007012 <__lo0bits>
 800745e:	9b01      	ldr	r3, [sp, #4]
 8007460:	617b      	str	r3, [r7, #20]
 8007462:	2101      	movs	r1, #1
 8007464:	6139      	str	r1, [r7, #16]
 8007466:	3020      	adds	r0, #32
 8007468:	e7e5      	b.n	8007436 <__d2b+0x54>
 800746a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800746e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007472:	6030      	str	r0, [r6, #0]
 8007474:	6918      	ldr	r0, [r3, #16]
 8007476:	f7ff fdad 	bl	8006fd4 <__hi0bits>
 800747a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800747e:	e7e1      	b.n	8007444 <__d2b+0x62>

08007480 <_calloc_r>:
 8007480:	b538      	push	{r3, r4, r5, lr}
 8007482:	fb02 f401 	mul.w	r4, r2, r1
 8007486:	4621      	mov	r1, r4
 8007488:	f7fe f9e4 	bl	8005854 <_malloc_r>
 800748c:	4605      	mov	r5, r0
 800748e:	b118      	cbz	r0, 8007498 <_calloc_r+0x18>
 8007490:	4622      	mov	r2, r4
 8007492:	2100      	movs	r1, #0
 8007494:	f7fe f987 	bl	80057a6 <memset>
 8007498:	4628      	mov	r0, r5
 800749a:	bd38      	pop	{r3, r4, r5, pc}

0800749c <__ssputs_r>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	688e      	ldr	r6, [r1, #8]
 80074a2:	429e      	cmp	r6, r3
 80074a4:	4682      	mov	sl, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	4690      	mov	r8, r2
 80074aa:	4699      	mov	r9, r3
 80074ac:	d837      	bhi.n	800751e <__ssputs_r+0x82>
 80074ae:	898a      	ldrh	r2, [r1, #12]
 80074b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80074b4:	d031      	beq.n	800751a <__ssputs_r+0x7e>
 80074b6:	6825      	ldr	r5, [r4, #0]
 80074b8:	6909      	ldr	r1, [r1, #16]
 80074ba:	1a6f      	subs	r7, r5, r1
 80074bc:	6965      	ldr	r5, [r4, #20]
 80074be:	2302      	movs	r3, #2
 80074c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80074c4:	fb95 f5f3 	sdiv	r5, r5, r3
 80074c8:	f109 0301 	add.w	r3, r9, #1
 80074cc:	443b      	add	r3, r7
 80074ce:	429d      	cmp	r5, r3
 80074d0:	bf38      	it	cc
 80074d2:	461d      	movcc	r5, r3
 80074d4:	0553      	lsls	r3, r2, #21
 80074d6:	d530      	bpl.n	800753a <__ssputs_r+0x9e>
 80074d8:	4629      	mov	r1, r5
 80074da:	f7fe f9bb 	bl	8005854 <_malloc_r>
 80074de:	4606      	mov	r6, r0
 80074e0:	b950      	cbnz	r0, 80074f8 <__ssputs_r+0x5c>
 80074e2:	230c      	movs	r3, #12
 80074e4:	f8ca 3000 	str.w	r3, [sl]
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ee:	81a3      	strh	r3, [r4, #12]
 80074f0:	f04f 30ff 	mov.w	r0, #4294967295
 80074f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f8:	463a      	mov	r2, r7
 80074fa:	6921      	ldr	r1, [r4, #16]
 80074fc:	f7fe f948 	bl	8005790 <memcpy>
 8007500:	89a3      	ldrh	r3, [r4, #12]
 8007502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800750a:	81a3      	strh	r3, [r4, #12]
 800750c:	6126      	str	r6, [r4, #16]
 800750e:	6165      	str	r5, [r4, #20]
 8007510:	443e      	add	r6, r7
 8007512:	1bed      	subs	r5, r5, r7
 8007514:	6026      	str	r6, [r4, #0]
 8007516:	60a5      	str	r5, [r4, #8]
 8007518:	464e      	mov	r6, r9
 800751a:	454e      	cmp	r6, r9
 800751c:	d900      	bls.n	8007520 <__ssputs_r+0x84>
 800751e:	464e      	mov	r6, r9
 8007520:	4632      	mov	r2, r6
 8007522:	4641      	mov	r1, r8
 8007524:	6820      	ldr	r0, [r4, #0]
 8007526:	f000 f91d 	bl	8007764 <memmove>
 800752a:	68a3      	ldr	r3, [r4, #8]
 800752c:	1b9b      	subs	r3, r3, r6
 800752e:	60a3      	str	r3, [r4, #8]
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	441e      	add	r6, r3
 8007534:	6026      	str	r6, [r4, #0]
 8007536:	2000      	movs	r0, #0
 8007538:	e7dc      	b.n	80074f4 <__ssputs_r+0x58>
 800753a:	462a      	mov	r2, r5
 800753c:	f000 f92b 	bl	8007796 <_realloc_r>
 8007540:	4606      	mov	r6, r0
 8007542:	2800      	cmp	r0, #0
 8007544:	d1e2      	bne.n	800750c <__ssputs_r+0x70>
 8007546:	6921      	ldr	r1, [r4, #16]
 8007548:	4650      	mov	r0, sl
 800754a:	f7fe f935 	bl	80057b8 <_free_r>
 800754e:	e7c8      	b.n	80074e2 <__ssputs_r+0x46>

08007550 <_svfiprintf_r>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	461d      	mov	r5, r3
 8007556:	898b      	ldrh	r3, [r1, #12]
 8007558:	061f      	lsls	r7, r3, #24
 800755a:	b09d      	sub	sp, #116	; 0x74
 800755c:	4680      	mov	r8, r0
 800755e:	460c      	mov	r4, r1
 8007560:	4616      	mov	r6, r2
 8007562:	d50f      	bpl.n	8007584 <_svfiprintf_r+0x34>
 8007564:	690b      	ldr	r3, [r1, #16]
 8007566:	b96b      	cbnz	r3, 8007584 <_svfiprintf_r+0x34>
 8007568:	2140      	movs	r1, #64	; 0x40
 800756a:	f7fe f973 	bl	8005854 <_malloc_r>
 800756e:	6020      	str	r0, [r4, #0]
 8007570:	6120      	str	r0, [r4, #16]
 8007572:	b928      	cbnz	r0, 8007580 <_svfiprintf_r+0x30>
 8007574:	230c      	movs	r3, #12
 8007576:	f8c8 3000 	str.w	r3, [r8]
 800757a:	f04f 30ff 	mov.w	r0, #4294967295
 800757e:	e0c8      	b.n	8007712 <_svfiprintf_r+0x1c2>
 8007580:	2340      	movs	r3, #64	; 0x40
 8007582:	6163      	str	r3, [r4, #20]
 8007584:	2300      	movs	r3, #0
 8007586:	9309      	str	r3, [sp, #36]	; 0x24
 8007588:	2320      	movs	r3, #32
 800758a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800758e:	2330      	movs	r3, #48	; 0x30
 8007590:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007594:	9503      	str	r5, [sp, #12]
 8007596:	f04f 0b01 	mov.w	fp, #1
 800759a:	4637      	mov	r7, r6
 800759c:	463d      	mov	r5, r7
 800759e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80075a2:	b10b      	cbz	r3, 80075a8 <_svfiprintf_r+0x58>
 80075a4:	2b25      	cmp	r3, #37	; 0x25
 80075a6:	d13e      	bne.n	8007626 <_svfiprintf_r+0xd6>
 80075a8:	ebb7 0a06 	subs.w	sl, r7, r6
 80075ac:	d00b      	beq.n	80075c6 <_svfiprintf_r+0x76>
 80075ae:	4653      	mov	r3, sl
 80075b0:	4632      	mov	r2, r6
 80075b2:	4621      	mov	r1, r4
 80075b4:	4640      	mov	r0, r8
 80075b6:	f7ff ff71 	bl	800749c <__ssputs_r>
 80075ba:	3001      	adds	r0, #1
 80075bc:	f000 80a4 	beq.w	8007708 <_svfiprintf_r+0x1b8>
 80075c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075c2:	4453      	add	r3, sl
 80075c4:	9309      	str	r3, [sp, #36]	; 0x24
 80075c6:	783b      	ldrb	r3, [r7, #0]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	f000 809d 	beq.w	8007708 <_svfiprintf_r+0x1b8>
 80075ce:	2300      	movs	r3, #0
 80075d0:	f04f 32ff 	mov.w	r2, #4294967295
 80075d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80075d8:	9304      	str	r3, [sp, #16]
 80075da:	9307      	str	r3, [sp, #28]
 80075dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075e0:	931a      	str	r3, [sp, #104]	; 0x68
 80075e2:	462f      	mov	r7, r5
 80075e4:	2205      	movs	r2, #5
 80075e6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80075ea:	4850      	ldr	r0, [pc, #320]	; (800772c <_svfiprintf_r+0x1dc>)
 80075ec:	f7f8 fdd0 	bl	8000190 <memchr>
 80075f0:	9b04      	ldr	r3, [sp, #16]
 80075f2:	b9d0      	cbnz	r0, 800762a <_svfiprintf_r+0xda>
 80075f4:	06d9      	lsls	r1, r3, #27
 80075f6:	bf44      	itt	mi
 80075f8:	2220      	movmi	r2, #32
 80075fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80075fe:	071a      	lsls	r2, r3, #28
 8007600:	bf44      	itt	mi
 8007602:	222b      	movmi	r2, #43	; 0x2b
 8007604:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007608:	782a      	ldrb	r2, [r5, #0]
 800760a:	2a2a      	cmp	r2, #42	; 0x2a
 800760c:	d015      	beq.n	800763a <_svfiprintf_r+0xea>
 800760e:	9a07      	ldr	r2, [sp, #28]
 8007610:	462f      	mov	r7, r5
 8007612:	2000      	movs	r0, #0
 8007614:	250a      	movs	r5, #10
 8007616:	4639      	mov	r1, r7
 8007618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800761c:	3b30      	subs	r3, #48	; 0x30
 800761e:	2b09      	cmp	r3, #9
 8007620:	d94d      	bls.n	80076be <_svfiprintf_r+0x16e>
 8007622:	b1b8      	cbz	r0, 8007654 <_svfiprintf_r+0x104>
 8007624:	e00f      	b.n	8007646 <_svfiprintf_r+0xf6>
 8007626:	462f      	mov	r7, r5
 8007628:	e7b8      	b.n	800759c <_svfiprintf_r+0x4c>
 800762a:	4a40      	ldr	r2, [pc, #256]	; (800772c <_svfiprintf_r+0x1dc>)
 800762c:	1a80      	subs	r0, r0, r2
 800762e:	fa0b f000 	lsl.w	r0, fp, r0
 8007632:	4318      	orrs	r0, r3
 8007634:	9004      	str	r0, [sp, #16]
 8007636:	463d      	mov	r5, r7
 8007638:	e7d3      	b.n	80075e2 <_svfiprintf_r+0x92>
 800763a:	9a03      	ldr	r2, [sp, #12]
 800763c:	1d11      	adds	r1, r2, #4
 800763e:	6812      	ldr	r2, [r2, #0]
 8007640:	9103      	str	r1, [sp, #12]
 8007642:	2a00      	cmp	r2, #0
 8007644:	db01      	blt.n	800764a <_svfiprintf_r+0xfa>
 8007646:	9207      	str	r2, [sp, #28]
 8007648:	e004      	b.n	8007654 <_svfiprintf_r+0x104>
 800764a:	4252      	negs	r2, r2
 800764c:	f043 0302 	orr.w	r3, r3, #2
 8007650:	9207      	str	r2, [sp, #28]
 8007652:	9304      	str	r3, [sp, #16]
 8007654:	783b      	ldrb	r3, [r7, #0]
 8007656:	2b2e      	cmp	r3, #46	; 0x2e
 8007658:	d10c      	bne.n	8007674 <_svfiprintf_r+0x124>
 800765a:	787b      	ldrb	r3, [r7, #1]
 800765c:	2b2a      	cmp	r3, #42	; 0x2a
 800765e:	d133      	bne.n	80076c8 <_svfiprintf_r+0x178>
 8007660:	9b03      	ldr	r3, [sp, #12]
 8007662:	1d1a      	adds	r2, r3, #4
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	9203      	str	r2, [sp, #12]
 8007668:	2b00      	cmp	r3, #0
 800766a:	bfb8      	it	lt
 800766c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007670:	3702      	adds	r7, #2
 8007672:	9305      	str	r3, [sp, #20]
 8007674:	4d2e      	ldr	r5, [pc, #184]	; (8007730 <_svfiprintf_r+0x1e0>)
 8007676:	7839      	ldrb	r1, [r7, #0]
 8007678:	2203      	movs	r2, #3
 800767a:	4628      	mov	r0, r5
 800767c:	f7f8 fd88 	bl	8000190 <memchr>
 8007680:	b138      	cbz	r0, 8007692 <_svfiprintf_r+0x142>
 8007682:	2340      	movs	r3, #64	; 0x40
 8007684:	1b40      	subs	r0, r0, r5
 8007686:	fa03 f000 	lsl.w	r0, r3, r0
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	4303      	orrs	r3, r0
 800768e:	3701      	adds	r7, #1
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	7839      	ldrb	r1, [r7, #0]
 8007694:	4827      	ldr	r0, [pc, #156]	; (8007734 <_svfiprintf_r+0x1e4>)
 8007696:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800769a:	2206      	movs	r2, #6
 800769c:	1c7e      	adds	r6, r7, #1
 800769e:	f7f8 fd77 	bl	8000190 <memchr>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	d038      	beq.n	8007718 <_svfiprintf_r+0x1c8>
 80076a6:	4b24      	ldr	r3, [pc, #144]	; (8007738 <_svfiprintf_r+0x1e8>)
 80076a8:	bb13      	cbnz	r3, 80076f0 <_svfiprintf_r+0x1a0>
 80076aa:	9b03      	ldr	r3, [sp, #12]
 80076ac:	3307      	adds	r3, #7
 80076ae:	f023 0307 	bic.w	r3, r3, #7
 80076b2:	3308      	adds	r3, #8
 80076b4:	9303      	str	r3, [sp, #12]
 80076b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076b8:	444b      	add	r3, r9
 80076ba:	9309      	str	r3, [sp, #36]	; 0x24
 80076bc:	e76d      	b.n	800759a <_svfiprintf_r+0x4a>
 80076be:	fb05 3202 	mla	r2, r5, r2, r3
 80076c2:	2001      	movs	r0, #1
 80076c4:	460f      	mov	r7, r1
 80076c6:	e7a6      	b.n	8007616 <_svfiprintf_r+0xc6>
 80076c8:	2300      	movs	r3, #0
 80076ca:	3701      	adds	r7, #1
 80076cc:	9305      	str	r3, [sp, #20]
 80076ce:	4619      	mov	r1, r3
 80076d0:	250a      	movs	r5, #10
 80076d2:	4638      	mov	r0, r7
 80076d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076d8:	3a30      	subs	r2, #48	; 0x30
 80076da:	2a09      	cmp	r2, #9
 80076dc:	d903      	bls.n	80076e6 <_svfiprintf_r+0x196>
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d0c8      	beq.n	8007674 <_svfiprintf_r+0x124>
 80076e2:	9105      	str	r1, [sp, #20]
 80076e4:	e7c6      	b.n	8007674 <_svfiprintf_r+0x124>
 80076e6:	fb05 2101 	mla	r1, r5, r1, r2
 80076ea:	2301      	movs	r3, #1
 80076ec:	4607      	mov	r7, r0
 80076ee:	e7f0      	b.n	80076d2 <_svfiprintf_r+0x182>
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	4622      	mov	r2, r4
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <_svfiprintf_r+0x1ec>)
 80076f8:	a904      	add	r1, sp, #16
 80076fa:	4640      	mov	r0, r8
 80076fc:	f7fe f998 	bl	8005a30 <_printf_float>
 8007700:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007704:	4681      	mov	r9, r0
 8007706:	d1d6      	bne.n	80076b6 <_svfiprintf_r+0x166>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	065b      	lsls	r3, r3, #25
 800770c:	f53f af35 	bmi.w	800757a <_svfiprintf_r+0x2a>
 8007710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007712:	b01d      	add	sp, #116	; 0x74
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	ab03      	add	r3, sp, #12
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4622      	mov	r2, r4
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <_svfiprintf_r+0x1ec>)
 8007720:	a904      	add	r1, sp, #16
 8007722:	4640      	mov	r0, r8
 8007724:	f7fe fc3a 	bl	8005f9c <_printf_i>
 8007728:	e7ea      	b.n	8007700 <_svfiprintf_r+0x1b0>
 800772a:	bf00      	nop
 800772c:	0800980c 	.word	0x0800980c
 8007730:	08009812 	.word	0x08009812
 8007734:	08009816 	.word	0x08009816
 8007738:	08005a31 	.word	0x08005a31
 800773c:	0800749d 	.word	0x0800749d

08007740 <__ascii_mbtowc>:
 8007740:	b082      	sub	sp, #8
 8007742:	b901      	cbnz	r1, 8007746 <__ascii_mbtowc+0x6>
 8007744:	a901      	add	r1, sp, #4
 8007746:	b142      	cbz	r2, 800775a <__ascii_mbtowc+0x1a>
 8007748:	b14b      	cbz	r3, 800775e <__ascii_mbtowc+0x1e>
 800774a:	7813      	ldrb	r3, [r2, #0]
 800774c:	600b      	str	r3, [r1, #0]
 800774e:	7812      	ldrb	r2, [r2, #0]
 8007750:	1c10      	adds	r0, r2, #0
 8007752:	bf18      	it	ne
 8007754:	2001      	movne	r0, #1
 8007756:	b002      	add	sp, #8
 8007758:	4770      	bx	lr
 800775a:	4610      	mov	r0, r2
 800775c:	e7fb      	b.n	8007756 <__ascii_mbtowc+0x16>
 800775e:	f06f 0001 	mvn.w	r0, #1
 8007762:	e7f8      	b.n	8007756 <__ascii_mbtowc+0x16>

08007764 <memmove>:
 8007764:	4288      	cmp	r0, r1
 8007766:	b510      	push	{r4, lr}
 8007768:	eb01 0302 	add.w	r3, r1, r2
 800776c:	d807      	bhi.n	800777e <memmove+0x1a>
 800776e:	1e42      	subs	r2, r0, #1
 8007770:	4299      	cmp	r1, r3
 8007772:	d00a      	beq.n	800778a <memmove+0x26>
 8007774:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007778:	f802 4f01 	strb.w	r4, [r2, #1]!
 800777c:	e7f8      	b.n	8007770 <memmove+0xc>
 800777e:	4283      	cmp	r3, r0
 8007780:	d9f5      	bls.n	800776e <memmove+0xa>
 8007782:	1881      	adds	r1, r0, r2
 8007784:	1ad2      	subs	r2, r2, r3
 8007786:	42d3      	cmn	r3, r2
 8007788:	d100      	bne.n	800778c <memmove+0x28>
 800778a:	bd10      	pop	{r4, pc}
 800778c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007790:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007794:	e7f7      	b.n	8007786 <memmove+0x22>

08007796 <_realloc_r>:
 8007796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007798:	4607      	mov	r7, r0
 800779a:	4614      	mov	r4, r2
 800779c:	460e      	mov	r6, r1
 800779e:	b921      	cbnz	r1, 80077aa <_realloc_r+0x14>
 80077a0:	4611      	mov	r1, r2
 80077a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80077a6:	f7fe b855 	b.w	8005854 <_malloc_r>
 80077aa:	b922      	cbnz	r2, 80077b6 <_realloc_r+0x20>
 80077ac:	f7fe f804 	bl	80057b8 <_free_r>
 80077b0:	4625      	mov	r5, r4
 80077b2:	4628      	mov	r0, r5
 80077b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077b6:	f000 f821 	bl	80077fc <_malloc_usable_size_r>
 80077ba:	42a0      	cmp	r0, r4
 80077bc:	d20f      	bcs.n	80077de <_realloc_r+0x48>
 80077be:	4621      	mov	r1, r4
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7fe f847 	bl	8005854 <_malloc_r>
 80077c6:	4605      	mov	r5, r0
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d0f2      	beq.n	80077b2 <_realloc_r+0x1c>
 80077cc:	4631      	mov	r1, r6
 80077ce:	4622      	mov	r2, r4
 80077d0:	f7fd ffde 	bl	8005790 <memcpy>
 80077d4:	4631      	mov	r1, r6
 80077d6:	4638      	mov	r0, r7
 80077d8:	f7fd ffee 	bl	80057b8 <_free_r>
 80077dc:	e7e9      	b.n	80077b2 <_realloc_r+0x1c>
 80077de:	4635      	mov	r5, r6
 80077e0:	e7e7      	b.n	80077b2 <_realloc_r+0x1c>

080077e2 <__ascii_wctomb>:
 80077e2:	b149      	cbz	r1, 80077f8 <__ascii_wctomb+0x16>
 80077e4:	2aff      	cmp	r2, #255	; 0xff
 80077e6:	bf85      	ittet	hi
 80077e8:	238a      	movhi	r3, #138	; 0x8a
 80077ea:	6003      	strhi	r3, [r0, #0]
 80077ec:	700a      	strbls	r2, [r1, #0]
 80077ee:	f04f 30ff 	movhi.w	r0, #4294967295
 80077f2:	bf98      	it	ls
 80077f4:	2001      	movls	r0, #1
 80077f6:	4770      	bx	lr
 80077f8:	4608      	mov	r0, r1
 80077fa:	4770      	bx	lr

080077fc <_malloc_usable_size_r>:
 80077fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007800:	1f18      	subs	r0, r3, #4
 8007802:	2b00      	cmp	r3, #0
 8007804:	bfbc      	itt	lt
 8007806:	580b      	ldrlt	r3, [r1, r0]
 8007808:	18c0      	addlt	r0, r0, r3
 800780a:	4770      	bx	lr

0800780c <pow>:
 800780c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007810:	ed2d 8b04 	vpush	{d8-d9}
 8007814:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007ae8 <pow+0x2dc>
 8007818:	b08d      	sub	sp, #52	; 0x34
 800781a:	ec57 6b10 	vmov	r6, r7, d0
 800781e:	ec55 4b11 	vmov	r4, r5, d1
 8007822:	f000 f965 	bl	8007af0 <__ieee754_pow>
 8007826:	f999 3000 	ldrsb.w	r3, [r9]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	3301      	adds	r3, #1
 800782e:	eeb0 8a40 	vmov.f32	s16, s0
 8007832:	eef0 8a60 	vmov.f32	s17, s1
 8007836:	46c8      	mov	r8, r9
 8007838:	d05f      	beq.n	80078fa <pow+0xee>
 800783a:	4622      	mov	r2, r4
 800783c:	462b      	mov	r3, r5
 800783e:	4620      	mov	r0, r4
 8007840:	4629      	mov	r1, r5
 8007842:	f7f9 f94b 	bl	8000adc <__aeabi_dcmpun>
 8007846:	4683      	mov	fp, r0
 8007848:	2800      	cmp	r0, #0
 800784a:	d156      	bne.n	80078fa <pow+0xee>
 800784c:	4632      	mov	r2, r6
 800784e:	463b      	mov	r3, r7
 8007850:	4630      	mov	r0, r6
 8007852:	4639      	mov	r1, r7
 8007854:	f7f9 f942 	bl	8000adc <__aeabi_dcmpun>
 8007858:	9001      	str	r0, [sp, #4]
 800785a:	b1e8      	cbz	r0, 8007898 <pow+0x8c>
 800785c:	2200      	movs	r2, #0
 800785e:	2300      	movs	r3, #0
 8007860:	4620      	mov	r0, r4
 8007862:	4629      	mov	r1, r5
 8007864:	f7f9 f908 	bl	8000a78 <__aeabi_dcmpeq>
 8007868:	2800      	cmp	r0, #0
 800786a:	d046      	beq.n	80078fa <pow+0xee>
 800786c:	2301      	movs	r3, #1
 800786e:	9302      	str	r3, [sp, #8]
 8007870:	4b96      	ldr	r3, [pc, #600]	; (8007acc <pow+0x2c0>)
 8007872:	9303      	str	r3, [sp, #12]
 8007874:	4b96      	ldr	r3, [pc, #600]	; (8007ad0 <pow+0x2c4>)
 8007876:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800787a:	2200      	movs	r2, #0
 800787c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007880:	9b00      	ldr	r3, [sp, #0]
 8007882:	2b02      	cmp	r3, #2
 8007884:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007888:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800788c:	d033      	beq.n	80078f6 <pow+0xea>
 800788e:	a802      	add	r0, sp, #8
 8007890:	f000 fefd 	bl	800868e <matherr>
 8007894:	bb48      	cbnz	r0, 80078ea <pow+0xde>
 8007896:	e05d      	b.n	8007954 <pow+0x148>
 8007898:	f04f 0a00 	mov.w	sl, #0
 800789c:	f04f 0b00 	mov.w	fp, #0
 80078a0:	4652      	mov	r2, sl
 80078a2:	465b      	mov	r3, fp
 80078a4:	4630      	mov	r0, r6
 80078a6:	4639      	mov	r1, r7
 80078a8:	f7f9 f8e6 	bl	8000a78 <__aeabi_dcmpeq>
 80078ac:	ec4b ab19 	vmov	d9, sl, fp
 80078b0:	2800      	cmp	r0, #0
 80078b2:	d054      	beq.n	800795e <pow+0x152>
 80078b4:	4652      	mov	r2, sl
 80078b6:	465b      	mov	r3, fp
 80078b8:	4620      	mov	r0, r4
 80078ba:	4629      	mov	r1, r5
 80078bc:	f7f9 f8dc 	bl	8000a78 <__aeabi_dcmpeq>
 80078c0:	4680      	mov	r8, r0
 80078c2:	b318      	cbz	r0, 800790c <pow+0x100>
 80078c4:	2301      	movs	r3, #1
 80078c6:	9302      	str	r3, [sp, #8]
 80078c8:	4b80      	ldr	r3, [pc, #512]	; (8007acc <pow+0x2c0>)
 80078ca:	9303      	str	r3, [sp, #12]
 80078cc:	9b01      	ldr	r3, [sp, #4]
 80078ce:	930a      	str	r3, [sp, #40]	; 0x28
 80078d0:	9b00      	ldr	r3, [sp, #0]
 80078d2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80078d6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80078da:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0d5      	beq.n	800788e <pow+0x82>
 80078e2:	4b7b      	ldr	r3, [pc, #492]	; (8007ad0 <pow+0x2c4>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078ec:	b11b      	cbz	r3, 80078f6 <pow+0xea>
 80078ee:	f7fd ff1d 	bl	800572c <__errno>
 80078f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80078fa:	eeb0 0a48 	vmov.f32	s0, s16
 80078fe:	eef0 0a68 	vmov.f32	s1, s17
 8007902:	b00d      	add	sp, #52	; 0x34
 8007904:	ecbd 8b04 	vpop	{d8-d9}
 8007908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800790c:	ec45 4b10 	vmov	d0, r4, r5
 8007910:	f000 feb5 	bl	800867e <finite>
 8007914:	2800      	cmp	r0, #0
 8007916:	d0f0      	beq.n	80078fa <pow+0xee>
 8007918:	4652      	mov	r2, sl
 800791a:	465b      	mov	r3, fp
 800791c:	4620      	mov	r0, r4
 800791e:	4629      	mov	r1, r5
 8007920:	f7f9 f8b4 	bl	8000a8c <__aeabi_dcmplt>
 8007924:	2800      	cmp	r0, #0
 8007926:	d0e8      	beq.n	80078fa <pow+0xee>
 8007928:	2301      	movs	r3, #1
 800792a:	9302      	str	r3, [sp, #8]
 800792c:	4b67      	ldr	r3, [pc, #412]	; (8007acc <pow+0x2c0>)
 800792e:	9303      	str	r3, [sp, #12]
 8007930:	f999 3000 	ldrsb.w	r3, [r9]
 8007934:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007938:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800793c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007940:	b913      	cbnz	r3, 8007948 <pow+0x13c>
 8007942:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007946:	e7a2      	b.n	800788e <pow+0x82>
 8007948:	4962      	ldr	r1, [pc, #392]	; (8007ad4 <pow+0x2c8>)
 800794a:	2000      	movs	r0, #0
 800794c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007950:	2b02      	cmp	r3, #2
 8007952:	d19c      	bne.n	800788e <pow+0x82>
 8007954:	f7fd feea 	bl	800572c <__errno>
 8007958:	2321      	movs	r3, #33	; 0x21
 800795a:	6003      	str	r3, [r0, #0]
 800795c:	e7c5      	b.n	80078ea <pow+0xde>
 800795e:	eeb0 0a48 	vmov.f32	s0, s16
 8007962:	eef0 0a68 	vmov.f32	s1, s17
 8007966:	f000 fe8a 	bl	800867e <finite>
 800796a:	9000      	str	r0, [sp, #0]
 800796c:	2800      	cmp	r0, #0
 800796e:	f040 8081 	bne.w	8007a74 <pow+0x268>
 8007972:	ec47 6b10 	vmov	d0, r6, r7
 8007976:	f000 fe82 	bl	800867e <finite>
 800797a:	2800      	cmp	r0, #0
 800797c:	d07a      	beq.n	8007a74 <pow+0x268>
 800797e:	ec45 4b10 	vmov	d0, r4, r5
 8007982:	f000 fe7c 	bl	800867e <finite>
 8007986:	2800      	cmp	r0, #0
 8007988:	d074      	beq.n	8007a74 <pow+0x268>
 800798a:	ec53 2b18 	vmov	r2, r3, d8
 800798e:	ee18 0a10 	vmov	r0, s16
 8007992:	4619      	mov	r1, r3
 8007994:	f7f9 f8a2 	bl	8000adc <__aeabi_dcmpun>
 8007998:	f999 9000 	ldrsb.w	r9, [r9]
 800799c:	4b4b      	ldr	r3, [pc, #300]	; (8007acc <pow+0x2c0>)
 800799e:	b1b0      	cbz	r0, 80079ce <pow+0x1c2>
 80079a0:	2201      	movs	r2, #1
 80079a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	930a      	str	r3, [sp, #40]	; 0x28
 80079aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80079b2:	f1b9 0f00 	cmp.w	r9, #0
 80079b6:	d0c4      	beq.n	8007942 <pow+0x136>
 80079b8:	4652      	mov	r2, sl
 80079ba:	465b      	mov	r3, fp
 80079bc:	4650      	mov	r0, sl
 80079be:	4659      	mov	r1, fp
 80079c0:	f7f8 ff1c 	bl	80007fc <__aeabi_ddiv>
 80079c4:	f1b9 0f02 	cmp.w	r9, #2
 80079c8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079cc:	e7c1      	b.n	8007952 <pow+0x146>
 80079ce:	2203      	movs	r2, #3
 80079d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079d4:	900a      	str	r0, [sp, #40]	; 0x28
 80079d6:	4629      	mov	r1, r5
 80079d8:	4620      	mov	r0, r4
 80079da:	2200      	movs	r2, #0
 80079dc:	4b3e      	ldr	r3, [pc, #248]	; (8007ad8 <pow+0x2cc>)
 80079de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80079e2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80079e6:	f7f8 fddf 	bl	80005a8 <__aeabi_dmul>
 80079ea:	4604      	mov	r4, r0
 80079ec:	460d      	mov	r5, r1
 80079ee:	f1b9 0f00 	cmp.w	r9, #0
 80079f2:	d124      	bne.n	8007a3e <pow+0x232>
 80079f4:	4b39      	ldr	r3, [pc, #228]	; (8007adc <pow+0x2d0>)
 80079f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80079fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079fe:	4630      	mov	r0, r6
 8007a00:	4652      	mov	r2, sl
 8007a02:	465b      	mov	r3, fp
 8007a04:	4639      	mov	r1, r7
 8007a06:	f7f9 f841 	bl	8000a8c <__aeabi_dcmplt>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d056      	beq.n	8007abc <pow+0x2b0>
 8007a0e:	ec45 4b10 	vmov	d0, r4, r5
 8007a12:	f000 fe49 	bl	80086a8 <rint>
 8007a16:	4622      	mov	r2, r4
 8007a18:	462b      	mov	r3, r5
 8007a1a:	ec51 0b10 	vmov	r0, r1, d0
 8007a1e:	f7f9 f82b 	bl	8000a78 <__aeabi_dcmpeq>
 8007a22:	b920      	cbnz	r0, 8007a2e <pow+0x222>
 8007a24:	4b2e      	ldr	r3, [pc, #184]	; (8007ae0 <pow+0x2d4>)
 8007a26:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007a2a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a2e:	f998 3000 	ldrsb.w	r3, [r8]
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d142      	bne.n	8007abc <pow+0x2b0>
 8007a36:	f7fd fe79 	bl	800572c <__errno>
 8007a3a:	2322      	movs	r3, #34	; 0x22
 8007a3c:	e78d      	b.n	800795a <pow+0x14e>
 8007a3e:	4b29      	ldr	r3, [pc, #164]	; (8007ae4 <pow+0x2d8>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007a46:	4630      	mov	r0, r6
 8007a48:	4652      	mov	r2, sl
 8007a4a:	465b      	mov	r3, fp
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	f7f9 f81d 	bl	8000a8c <__aeabi_dcmplt>
 8007a52:	2800      	cmp	r0, #0
 8007a54:	d0eb      	beq.n	8007a2e <pow+0x222>
 8007a56:	ec45 4b10 	vmov	d0, r4, r5
 8007a5a:	f000 fe25 	bl	80086a8 <rint>
 8007a5e:	4622      	mov	r2, r4
 8007a60:	462b      	mov	r3, r5
 8007a62:	ec51 0b10 	vmov	r0, r1, d0
 8007a66:	f7f9 f807 	bl	8000a78 <__aeabi_dcmpeq>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	d1df      	bne.n	8007a2e <pow+0x222>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	4b18      	ldr	r3, [pc, #96]	; (8007ad4 <pow+0x2c8>)
 8007a72:	e7da      	b.n	8007a2a <pow+0x21e>
 8007a74:	2200      	movs	r2, #0
 8007a76:	2300      	movs	r3, #0
 8007a78:	ec51 0b18 	vmov	r0, r1, d8
 8007a7c:	f7f8 fffc 	bl	8000a78 <__aeabi_dcmpeq>
 8007a80:	2800      	cmp	r0, #0
 8007a82:	f43f af3a 	beq.w	80078fa <pow+0xee>
 8007a86:	ec47 6b10 	vmov	d0, r6, r7
 8007a8a:	f000 fdf8 	bl	800867e <finite>
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f af33 	beq.w	80078fa <pow+0xee>
 8007a94:	ec45 4b10 	vmov	d0, r4, r5
 8007a98:	f000 fdf1 	bl	800867e <finite>
 8007a9c:	2800      	cmp	r0, #0
 8007a9e:	f43f af2c 	beq.w	80078fa <pow+0xee>
 8007aa2:	2304      	movs	r3, #4
 8007aa4:	9302      	str	r3, [sp, #8]
 8007aa6:	4b09      	ldr	r3, [pc, #36]	; (8007acc <pow+0x2c0>)
 8007aa8:	9303      	str	r3, [sp, #12]
 8007aaa:	2300      	movs	r3, #0
 8007aac:	930a      	str	r3, [sp, #40]	; 0x28
 8007aae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007ab2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007ab6:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007aba:	e7b8      	b.n	8007a2e <pow+0x222>
 8007abc:	a802      	add	r0, sp, #8
 8007abe:	f000 fde6 	bl	800868e <matherr>
 8007ac2:	2800      	cmp	r0, #0
 8007ac4:	f47f af11 	bne.w	80078ea <pow+0xde>
 8007ac8:	e7b5      	b.n	8007a36 <pow+0x22a>
 8007aca:	bf00      	nop
 8007acc:	08009928 	.word	0x08009928
 8007ad0:	3ff00000 	.word	0x3ff00000
 8007ad4:	fff00000 	.word	0xfff00000
 8007ad8:	3fe00000 	.word	0x3fe00000
 8007adc:	47efffff 	.word	0x47efffff
 8007ae0:	c7efffff 	.word	0xc7efffff
 8007ae4:	7ff00000 	.word	0x7ff00000
 8007ae8:	200001e0 	.word	0x200001e0
 8007aec:	00000000 	.word	0x00000000

08007af0 <__ieee754_pow>:
 8007af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af4:	b091      	sub	sp, #68	; 0x44
 8007af6:	ed8d 1b00 	vstr	d1, [sp]
 8007afa:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007afe:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007b02:	ea58 0302 	orrs.w	r3, r8, r2
 8007b06:	ec57 6b10 	vmov	r6, r7, d0
 8007b0a:	f000 84be 	beq.w	800848a <__ieee754_pow+0x99a>
 8007b0e:	4b7a      	ldr	r3, [pc, #488]	; (8007cf8 <__ieee754_pow+0x208>)
 8007b10:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007b14:	429c      	cmp	r4, r3
 8007b16:	463d      	mov	r5, r7
 8007b18:	ee10 aa10 	vmov	sl, s0
 8007b1c:	dc09      	bgt.n	8007b32 <__ieee754_pow+0x42>
 8007b1e:	d103      	bne.n	8007b28 <__ieee754_pow+0x38>
 8007b20:	b93e      	cbnz	r6, 8007b32 <__ieee754_pow+0x42>
 8007b22:	45a0      	cmp	r8, r4
 8007b24:	dc0d      	bgt.n	8007b42 <__ieee754_pow+0x52>
 8007b26:	e001      	b.n	8007b2c <__ieee754_pow+0x3c>
 8007b28:	4598      	cmp	r8, r3
 8007b2a:	dc02      	bgt.n	8007b32 <__ieee754_pow+0x42>
 8007b2c:	4598      	cmp	r8, r3
 8007b2e:	d10e      	bne.n	8007b4e <__ieee754_pow+0x5e>
 8007b30:	b16a      	cbz	r2, 8007b4e <__ieee754_pow+0x5e>
 8007b32:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007b36:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007b3a:	ea54 030a 	orrs.w	r3, r4, sl
 8007b3e:	f000 84a4 	beq.w	800848a <__ieee754_pow+0x99a>
 8007b42:	486e      	ldr	r0, [pc, #440]	; (8007cfc <__ieee754_pow+0x20c>)
 8007b44:	b011      	add	sp, #68	; 0x44
 8007b46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b4a:	f000 bda5 	b.w	8008698 <nan>
 8007b4e:	2d00      	cmp	r5, #0
 8007b50:	da53      	bge.n	8007bfa <__ieee754_pow+0x10a>
 8007b52:	4b6b      	ldr	r3, [pc, #428]	; (8007d00 <__ieee754_pow+0x210>)
 8007b54:	4598      	cmp	r8, r3
 8007b56:	dc4d      	bgt.n	8007bf4 <__ieee754_pow+0x104>
 8007b58:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007b5c:	4598      	cmp	r8, r3
 8007b5e:	dd4c      	ble.n	8007bfa <__ieee754_pow+0x10a>
 8007b60:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007b64:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007b68:	2b14      	cmp	r3, #20
 8007b6a:	dd26      	ble.n	8007bba <__ieee754_pow+0xca>
 8007b6c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007b70:	fa22 f103 	lsr.w	r1, r2, r3
 8007b74:	fa01 f303 	lsl.w	r3, r1, r3
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d13e      	bne.n	8007bfa <__ieee754_pow+0x10a>
 8007b7c:	f001 0101 	and.w	r1, r1, #1
 8007b80:	f1c1 0b02 	rsb	fp, r1, #2
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	d15b      	bne.n	8007c40 <__ieee754_pow+0x150>
 8007b88:	4b5b      	ldr	r3, [pc, #364]	; (8007cf8 <__ieee754_pow+0x208>)
 8007b8a:	4598      	cmp	r8, r3
 8007b8c:	d124      	bne.n	8007bd8 <__ieee754_pow+0xe8>
 8007b8e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007b92:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007b96:	ea53 030a 	orrs.w	r3, r3, sl
 8007b9a:	f000 8476 	beq.w	800848a <__ieee754_pow+0x99a>
 8007b9e:	4b59      	ldr	r3, [pc, #356]	; (8007d04 <__ieee754_pow+0x214>)
 8007ba0:	429c      	cmp	r4, r3
 8007ba2:	dd2d      	ble.n	8007c00 <__ieee754_pow+0x110>
 8007ba4:	f1b9 0f00 	cmp.w	r9, #0
 8007ba8:	f280 8473 	bge.w	8008492 <__ieee754_pow+0x9a2>
 8007bac:	2000      	movs	r0, #0
 8007bae:	2100      	movs	r1, #0
 8007bb0:	ec41 0b10 	vmov	d0, r0, r1
 8007bb4:	b011      	add	sp, #68	; 0x44
 8007bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	d13e      	bne.n	8007c3c <__ieee754_pow+0x14c>
 8007bbe:	f1c3 0314 	rsb	r3, r3, #20
 8007bc2:	fa48 f103 	asr.w	r1, r8, r3
 8007bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007bca:	4543      	cmp	r3, r8
 8007bcc:	f040 8469 	bne.w	80084a2 <__ieee754_pow+0x9b2>
 8007bd0:	f001 0101 	and.w	r1, r1, #1
 8007bd4:	f1c1 0b02 	rsb	fp, r1, #2
 8007bd8:	4b4b      	ldr	r3, [pc, #300]	; (8007d08 <__ieee754_pow+0x218>)
 8007bda:	4598      	cmp	r8, r3
 8007bdc:	d118      	bne.n	8007c10 <__ieee754_pow+0x120>
 8007bde:	f1b9 0f00 	cmp.w	r9, #0
 8007be2:	f280 845a 	bge.w	800849a <__ieee754_pow+0x9aa>
 8007be6:	4948      	ldr	r1, [pc, #288]	; (8007d08 <__ieee754_pow+0x218>)
 8007be8:	4632      	mov	r2, r6
 8007bea:	463b      	mov	r3, r7
 8007bec:	2000      	movs	r0, #0
 8007bee:	f7f8 fe05 	bl	80007fc <__aeabi_ddiv>
 8007bf2:	e7dd      	b.n	8007bb0 <__ieee754_pow+0xc0>
 8007bf4:	f04f 0b02 	mov.w	fp, #2
 8007bf8:	e7c4      	b.n	8007b84 <__ieee754_pow+0x94>
 8007bfa:	f04f 0b00 	mov.w	fp, #0
 8007bfe:	e7c1      	b.n	8007b84 <__ieee754_pow+0x94>
 8007c00:	f1b9 0f00 	cmp.w	r9, #0
 8007c04:	dad2      	bge.n	8007bac <__ieee754_pow+0xbc>
 8007c06:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007c0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007c0e:	e7cf      	b.n	8007bb0 <__ieee754_pow+0xc0>
 8007c10:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007c14:	d106      	bne.n	8007c24 <__ieee754_pow+0x134>
 8007c16:	4632      	mov	r2, r6
 8007c18:	463b      	mov	r3, r7
 8007c1a:	4610      	mov	r0, r2
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	f7f8 fcc3 	bl	80005a8 <__aeabi_dmul>
 8007c22:	e7c5      	b.n	8007bb0 <__ieee754_pow+0xc0>
 8007c24:	4b39      	ldr	r3, [pc, #228]	; (8007d0c <__ieee754_pow+0x21c>)
 8007c26:	4599      	cmp	r9, r3
 8007c28:	d10a      	bne.n	8007c40 <__ieee754_pow+0x150>
 8007c2a:	2d00      	cmp	r5, #0
 8007c2c:	db08      	blt.n	8007c40 <__ieee754_pow+0x150>
 8007c2e:	ec47 6b10 	vmov	d0, r6, r7
 8007c32:	b011      	add	sp, #68	; 0x44
 8007c34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c38:	f000 bc68 	b.w	800850c <__ieee754_sqrt>
 8007c3c:	f04f 0b00 	mov.w	fp, #0
 8007c40:	ec47 6b10 	vmov	d0, r6, r7
 8007c44:	f000 fd12 	bl	800866c <fabs>
 8007c48:	ec51 0b10 	vmov	r0, r1, d0
 8007c4c:	f1ba 0f00 	cmp.w	sl, #0
 8007c50:	d127      	bne.n	8007ca2 <__ieee754_pow+0x1b2>
 8007c52:	b124      	cbz	r4, 8007c5e <__ieee754_pow+0x16e>
 8007c54:	4b2c      	ldr	r3, [pc, #176]	; (8007d08 <__ieee754_pow+0x218>)
 8007c56:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d121      	bne.n	8007ca2 <__ieee754_pow+0x1b2>
 8007c5e:	f1b9 0f00 	cmp.w	r9, #0
 8007c62:	da05      	bge.n	8007c70 <__ieee754_pow+0x180>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	2000      	movs	r0, #0
 8007c6a:	4927      	ldr	r1, [pc, #156]	; (8007d08 <__ieee754_pow+0x218>)
 8007c6c:	f7f8 fdc6 	bl	80007fc <__aeabi_ddiv>
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	da9d      	bge.n	8007bb0 <__ieee754_pow+0xc0>
 8007c74:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007c78:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007c7c:	ea54 030b 	orrs.w	r3, r4, fp
 8007c80:	d108      	bne.n	8007c94 <__ieee754_pow+0x1a4>
 8007c82:	4602      	mov	r2, r0
 8007c84:	460b      	mov	r3, r1
 8007c86:	4610      	mov	r0, r2
 8007c88:	4619      	mov	r1, r3
 8007c8a:	f7f8 fad5 	bl	8000238 <__aeabi_dsub>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	e7ac      	b.n	8007bee <__ieee754_pow+0xfe>
 8007c94:	f1bb 0f01 	cmp.w	fp, #1
 8007c98:	d18a      	bne.n	8007bb0 <__ieee754_pow+0xc0>
 8007c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	e786      	b.n	8007bb0 <__ieee754_pow+0xc0>
 8007ca2:	0fed      	lsrs	r5, r5, #31
 8007ca4:	1e6b      	subs	r3, r5, #1
 8007ca6:	930d      	str	r3, [sp, #52]	; 0x34
 8007ca8:	ea5b 0303 	orrs.w	r3, fp, r3
 8007cac:	d102      	bne.n	8007cb4 <__ieee754_pow+0x1c4>
 8007cae:	4632      	mov	r2, r6
 8007cb0:	463b      	mov	r3, r7
 8007cb2:	e7e8      	b.n	8007c86 <__ieee754_pow+0x196>
 8007cb4:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <__ieee754_pow+0x220>)
 8007cb6:	4598      	cmp	r8, r3
 8007cb8:	f340 80fe 	ble.w	8007eb8 <__ieee754_pow+0x3c8>
 8007cbc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8007cc0:	4598      	cmp	r8, r3
 8007cc2:	dd0a      	ble.n	8007cda <__ieee754_pow+0x1ea>
 8007cc4:	4b0f      	ldr	r3, [pc, #60]	; (8007d04 <__ieee754_pow+0x214>)
 8007cc6:	429c      	cmp	r4, r3
 8007cc8:	dc0d      	bgt.n	8007ce6 <__ieee754_pow+0x1f6>
 8007cca:	f1b9 0f00 	cmp.w	r9, #0
 8007cce:	f6bf af6d 	bge.w	8007bac <__ieee754_pow+0xbc>
 8007cd2:	a307      	add	r3, pc, #28	; (adr r3, 8007cf0 <__ieee754_pow+0x200>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	e79f      	b.n	8007c1a <__ieee754_pow+0x12a>
 8007cda:	4b0e      	ldr	r3, [pc, #56]	; (8007d14 <__ieee754_pow+0x224>)
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	ddf4      	ble.n	8007cca <__ieee754_pow+0x1da>
 8007ce0:	4b09      	ldr	r3, [pc, #36]	; (8007d08 <__ieee754_pow+0x218>)
 8007ce2:	429c      	cmp	r4, r3
 8007ce4:	dd18      	ble.n	8007d18 <__ieee754_pow+0x228>
 8007ce6:	f1b9 0f00 	cmp.w	r9, #0
 8007cea:	dcf2      	bgt.n	8007cd2 <__ieee754_pow+0x1e2>
 8007cec:	e75e      	b.n	8007bac <__ieee754_pow+0xbc>
 8007cee:	bf00      	nop
 8007cf0:	8800759c 	.word	0x8800759c
 8007cf4:	7e37e43c 	.word	0x7e37e43c
 8007cf8:	7ff00000 	.word	0x7ff00000
 8007cfc:	08009811 	.word	0x08009811
 8007d00:	433fffff 	.word	0x433fffff
 8007d04:	3fefffff 	.word	0x3fefffff
 8007d08:	3ff00000 	.word	0x3ff00000
 8007d0c:	3fe00000 	.word	0x3fe00000
 8007d10:	41e00000 	.word	0x41e00000
 8007d14:	3feffffe 	.word	0x3feffffe
 8007d18:	2200      	movs	r2, #0
 8007d1a:	4b63      	ldr	r3, [pc, #396]	; (8007ea8 <__ieee754_pow+0x3b8>)
 8007d1c:	f7f8 fa8c 	bl	8000238 <__aeabi_dsub>
 8007d20:	a355      	add	r3, pc, #340	; (adr r3, 8007e78 <__ieee754_pow+0x388>)
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	4604      	mov	r4, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	f7f8 fc3d 	bl	80005a8 <__aeabi_dmul>
 8007d2e:	a354      	add	r3, pc, #336	; (adr r3, 8007e80 <__ieee754_pow+0x390>)
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	4606      	mov	r6, r0
 8007d36:	460f      	mov	r7, r1
 8007d38:	4620      	mov	r0, r4
 8007d3a:	4629      	mov	r1, r5
 8007d3c:	f7f8 fc34 	bl	80005a8 <__aeabi_dmul>
 8007d40:	2200      	movs	r2, #0
 8007d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d46:	4b59      	ldr	r3, [pc, #356]	; (8007eac <__ieee754_pow+0x3bc>)
 8007d48:	4620      	mov	r0, r4
 8007d4a:	4629      	mov	r1, r5
 8007d4c:	f7f8 fc2c 	bl	80005a8 <__aeabi_dmul>
 8007d50:	4602      	mov	r2, r0
 8007d52:	460b      	mov	r3, r1
 8007d54:	a14c      	add	r1, pc, #304	; (adr r1, 8007e88 <__ieee754_pow+0x398>)
 8007d56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d5a:	f7f8 fa6d 	bl	8000238 <__aeabi_dsub>
 8007d5e:	4622      	mov	r2, r4
 8007d60:	462b      	mov	r3, r5
 8007d62:	f7f8 fc21 	bl	80005a8 <__aeabi_dmul>
 8007d66:	4602      	mov	r2, r0
 8007d68:	460b      	mov	r3, r1
 8007d6a:	2000      	movs	r0, #0
 8007d6c:	4950      	ldr	r1, [pc, #320]	; (8007eb0 <__ieee754_pow+0x3c0>)
 8007d6e:	f7f8 fa63 	bl	8000238 <__aeabi_dsub>
 8007d72:	4622      	mov	r2, r4
 8007d74:	462b      	mov	r3, r5
 8007d76:	4680      	mov	r8, r0
 8007d78:	4689      	mov	r9, r1
 8007d7a:	4620      	mov	r0, r4
 8007d7c:	4629      	mov	r1, r5
 8007d7e:	f7f8 fc13 	bl	80005a8 <__aeabi_dmul>
 8007d82:	4602      	mov	r2, r0
 8007d84:	460b      	mov	r3, r1
 8007d86:	4640      	mov	r0, r8
 8007d88:	4649      	mov	r1, r9
 8007d8a:	f7f8 fc0d 	bl	80005a8 <__aeabi_dmul>
 8007d8e:	a340      	add	r3, pc, #256	; (adr r3, 8007e90 <__ieee754_pow+0x3a0>)
 8007d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d94:	f7f8 fc08 	bl	80005a8 <__aeabi_dmul>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	460b      	mov	r3, r1
 8007d9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007da0:	f7f8 fa4a 	bl	8000238 <__aeabi_dsub>
 8007da4:	4602      	mov	r2, r0
 8007da6:	460b      	mov	r3, r1
 8007da8:	4604      	mov	r4, r0
 8007daa:	460d      	mov	r5, r1
 8007dac:	4630      	mov	r0, r6
 8007dae:	4639      	mov	r1, r7
 8007db0:	f7f8 fa44 	bl	800023c <__adddf3>
 8007db4:	2000      	movs	r0, #0
 8007db6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007dba:	4632      	mov	r2, r6
 8007dbc:	463b      	mov	r3, r7
 8007dbe:	f7f8 fa3b 	bl	8000238 <__aeabi_dsub>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	4629      	mov	r1, r5
 8007dca:	f7f8 fa35 	bl	8000238 <__aeabi_dsub>
 8007dce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007dd0:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	4606      	mov	r6, r0
 8007dd8:	460f      	mov	r7, r1
 8007dda:	f040 81eb 	bne.w	80081b4 <__ieee754_pow+0x6c4>
 8007dde:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8007e98 <__ieee754_pow+0x3a8>
 8007de2:	e9dd 4500 	ldrd	r4, r5, [sp]
 8007de6:	2400      	movs	r4, #0
 8007de8:	4622      	mov	r2, r4
 8007dea:	462b      	mov	r3, r5
 8007dec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007df0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007df4:	f7f8 fa20 	bl	8000238 <__aeabi_dsub>
 8007df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dfc:	f7f8 fbd4 	bl	80005a8 <__aeabi_dmul>
 8007e00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e04:	4680      	mov	r8, r0
 8007e06:	4689      	mov	r9, r1
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	f7f8 fbcc 	bl	80005a8 <__aeabi_dmul>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fa10 	bl	800023c <__adddf3>
 8007e1c:	4622      	mov	r2, r4
 8007e1e:	462b      	mov	r3, r5
 8007e20:	4680      	mov	r8, r0
 8007e22:	4689      	mov	r9, r1
 8007e24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e28:	f7f8 fbbe 	bl	80005a8 <__aeabi_dmul>
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4604      	mov	r4, r0
 8007e30:	460d      	mov	r5, r1
 8007e32:	4602      	mov	r2, r0
 8007e34:	4649      	mov	r1, r9
 8007e36:	4640      	mov	r0, r8
 8007e38:	e9cd 4500 	strd	r4, r5, [sp]
 8007e3c:	f7f8 f9fe 	bl	800023c <__adddf3>
 8007e40:	4b1c      	ldr	r3, [pc, #112]	; (8007eb4 <__ieee754_pow+0x3c4>)
 8007e42:	4299      	cmp	r1, r3
 8007e44:	4606      	mov	r6, r0
 8007e46:	460f      	mov	r7, r1
 8007e48:	468b      	mov	fp, r1
 8007e4a:	f340 82f7 	ble.w	800843c <__ieee754_pow+0x94c>
 8007e4e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007e52:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007e56:	4303      	orrs	r3, r0
 8007e58:	f000 81ea 	beq.w	8008230 <__ieee754_pow+0x740>
 8007e5c:	a310      	add	r3, pc, #64	; (adr r3, 8007ea0 <__ieee754_pow+0x3b0>)
 8007e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e66:	f7f8 fb9f 	bl	80005a8 <__aeabi_dmul>
 8007e6a:	a30d      	add	r3, pc, #52	; (adr r3, 8007ea0 <__ieee754_pow+0x3b0>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	e6d5      	b.n	8007c1e <__ieee754_pow+0x12e>
 8007e72:	bf00      	nop
 8007e74:	f3af 8000 	nop.w
 8007e78:	60000000 	.word	0x60000000
 8007e7c:	3ff71547 	.word	0x3ff71547
 8007e80:	f85ddf44 	.word	0xf85ddf44
 8007e84:	3e54ae0b 	.word	0x3e54ae0b
 8007e88:	55555555 	.word	0x55555555
 8007e8c:	3fd55555 	.word	0x3fd55555
 8007e90:	652b82fe 	.word	0x652b82fe
 8007e94:	3ff71547 	.word	0x3ff71547
 8007e98:	00000000 	.word	0x00000000
 8007e9c:	bff00000 	.word	0xbff00000
 8007ea0:	8800759c 	.word	0x8800759c
 8007ea4:	7e37e43c 	.word	0x7e37e43c
 8007ea8:	3ff00000 	.word	0x3ff00000
 8007eac:	3fd00000 	.word	0x3fd00000
 8007eb0:	3fe00000 	.word	0x3fe00000
 8007eb4:	408fffff 	.word	0x408fffff
 8007eb8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007ebc:	f04f 0200 	mov.w	r2, #0
 8007ec0:	da05      	bge.n	8007ece <__ieee754_pow+0x3de>
 8007ec2:	4bd3      	ldr	r3, [pc, #844]	; (8008210 <__ieee754_pow+0x720>)
 8007ec4:	f7f8 fb70 	bl	80005a8 <__aeabi_dmul>
 8007ec8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007ecc:	460c      	mov	r4, r1
 8007ece:	1523      	asrs	r3, r4, #20
 8007ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007ed4:	4413      	add	r3, r2
 8007ed6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ed8:	4bce      	ldr	r3, [pc, #824]	; (8008214 <__ieee754_pow+0x724>)
 8007eda:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007ede:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8007ee2:	429c      	cmp	r4, r3
 8007ee4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007ee8:	dd08      	ble.n	8007efc <__ieee754_pow+0x40c>
 8007eea:	4bcb      	ldr	r3, [pc, #812]	; (8008218 <__ieee754_pow+0x728>)
 8007eec:	429c      	cmp	r4, r3
 8007eee:	f340 815e 	ble.w	80081ae <__ieee754_pow+0x6be>
 8007ef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007efc:	f04f 0a00 	mov.w	sl, #0
 8007f00:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8007f04:	930c      	str	r3, [sp, #48]	; 0x30
 8007f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f08:	4bc4      	ldr	r3, [pc, #784]	; (800821c <__ieee754_pow+0x72c>)
 8007f0a:	4413      	add	r3, r2
 8007f0c:	ed93 7b00 	vldr	d7, [r3]
 8007f10:	4629      	mov	r1, r5
 8007f12:	ec53 2b17 	vmov	r2, r3, d7
 8007f16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007f1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007f1e:	f7f8 f98b 	bl	8000238 <__aeabi_dsub>
 8007f22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007f26:	4606      	mov	r6, r0
 8007f28:	460f      	mov	r7, r1
 8007f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007f2e:	f7f8 f985 	bl	800023c <__adddf3>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	2000      	movs	r0, #0
 8007f38:	49b9      	ldr	r1, [pc, #740]	; (8008220 <__ieee754_pow+0x730>)
 8007f3a:	f7f8 fc5f 	bl	80007fc <__aeabi_ddiv>
 8007f3e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	4630      	mov	r0, r6
 8007f48:	4639      	mov	r1, r7
 8007f4a:	f7f8 fb2d 	bl	80005a8 <__aeabi_dmul>
 8007f4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f52:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f56:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	9302      	str	r3, [sp, #8]
 8007f5e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007f62:	106d      	asrs	r5, r5, #1
 8007f64:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007f68:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	4614      	mov	r4, r2
 8007f78:	461d      	mov	r5, r3
 8007f7a:	f7f8 fb15 	bl	80005a8 <__aeabi_dmul>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4630      	mov	r0, r6
 8007f84:	4639      	mov	r1, r7
 8007f86:	f7f8 f957 	bl	8000238 <__aeabi_dsub>
 8007f8a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f8e:	4606      	mov	r6, r0
 8007f90:	460f      	mov	r7, r1
 8007f92:	4620      	mov	r0, r4
 8007f94:	4629      	mov	r1, r5
 8007f96:	f7f8 f94f 	bl	8000238 <__aeabi_dsub>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007fa2:	f7f8 f949 	bl	8000238 <__aeabi_dsub>
 8007fa6:	4642      	mov	r2, r8
 8007fa8:	464b      	mov	r3, r9
 8007faa:	f7f8 fafd 	bl	80005a8 <__aeabi_dmul>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	f7f8 f93f 	bl	8000238 <__aeabi_dsub>
 8007fba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007fbe:	f7f8 faf3 	bl	80005a8 <__aeabi_dmul>
 8007fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007fc6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fca:	4610      	mov	r0, r2
 8007fcc:	4619      	mov	r1, r3
 8007fce:	f7f8 faeb 	bl	80005a8 <__aeabi_dmul>
 8007fd2:	a37b      	add	r3, pc, #492	; (adr r3, 80081c0 <__ieee754_pow+0x6d0>)
 8007fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd8:	4604      	mov	r4, r0
 8007fda:	460d      	mov	r5, r1
 8007fdc:	f7f8 fae4 	bl	80005a8 <__aeabi_dmul>
 8007fe0:	a379      	add	r3, pc, #484	; (adr r3, 80081c8 <__ieee754_pow+0x6d8>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	f7f8 f929 	bl	800023c <__adddf3>
 8007fea:	4622      	mov	r2, r4
 8007fec:	462b      	mov	r3, r5
 8007fee:	f7f8 fadb 	bl	80005a8 <__aeabi_dmul>
 8007ff2:	a377      	add	r3, pc, #476	; (adr r3, 80081d0 <__ieee754_pow+0x6e0>)
 8007ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff8:	f7f8 f920 	bl	800023c <__adddf3>
 8007ffc:	4622      	mov	r2, r4
 8007ffe:	462b      	mov	r3, r5
 8008000:	f7f8 fad2 	bl	80005a8 <__aeabi_dmul>
 8008004:	a374      	add	r3, pc, #464	; (adr r3, 80081d8 <__ieee754_pow+0x6e8>)
 8008006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800a:	f7f8 f917 	bl	800023c <__adddf3>
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	f7f8 fac9 	bl	80005a8 <__aeabi_dmul>
 8008016:	a372      	add	r3, pc, #456	; (adr r3, 80081e0 <__ieee754_pow+0x6f0>)
 8008018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800801c:	f7f8 f90e 	bl	800023c <__adddf3>
 8008020:	4622      	mov	r2, r4
 8008022:	462b      	mov	r3, r5
 8008024:	f7f8 fac0 	bl	80005a8 <__aeabi_dmul>
 8008028:	a36f      	add	r3, pc, #444	; (adr r3, 80081e8 <__ieee754_pow+0x6f8>)
 800802a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802e:	f7f8 f905 	bl	800023c <__adddf3>
 8008032:	4622      	mov	r2, r4
 8008034:	4606      	mov	r6, r0
 8008036:	460f      	mov	r7, r1
 8008038:	462b      	mov	r3, r5
 800803a:	4620      	mov	r0, r4
 800803c:	4629      	mov	r1, r5
 800803e:	f7f8 fab3 	bl	80005a8 <__aeabi_dmul>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4630      	mov	r0, r6
 8008048:	4639      	mov	r1, r7
 800804a:	f7f8 faad 	bl	80005a8 <__aeabi_dmul>
 800804e:	4642      	mov	r2, r8
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	464b      	mov	r3, r9
 8008056:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800805a:	f7f8 f8ef 	bl	800023c <__adddf3>
 800805e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008062:	f7f8 faa1 	bl	80005a8 <__aeabi_dmul>
 8008066:	4622      	mov	r2, r4
 8008068:	462b      	mov	r3, r5
 800806a:	f7f8 f8e7 	bl	800023c <__adddf3>
 800806e:	4642      	mov	r2, r8
 8008070:	4606      	mov	r6, r0
 8008072:	460f      	mov	r7, r1
 8008074:	464b      	mov	r3, r9
 8008076:	4640      	mov	r0, r8
 8008078:	4649      	mov	r1, r9
 800807a:	f7f8 fa95 	bl	80005a8 <__aeabi_dmul>
 800807e:	2200      	movs	r2, #0
 8008080:	4b68      	ldr	r3, [pc, #416]	; (8008224 <__ieee754_pow+0x734>)
 8008082:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008086:	f7f8 f8d9 	bl	800023c <__adddf3>
 800808a:	4632      	mov	r2, r6
 800808c:	463b      	mov	r3, r7
 800808e:	f7f8 f8d5 	bl	800023c <__adddf3>
 8008092:	9802      	ldr	r0, [sp, #8]
 8008094:	460d      	mov	r5, r1
 8008096:	4604      	mov	r4, r0
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	4640      	mov	r0, r8
 800809e:	4649      	mov	r1, r9
 80080a0:	f7f8 fa82 	bl	80005a8 <__aeabi_dmul>
 80080a4:	2200      	movs	r2, #0
 80080a6:	4680      	mov	r8, r0
 80080a8:	4689      	mov	r9, r1
 80080aa:	4b5e      	ldr	r3, [pc, #376]	; (8008224 <__ieee754_pow+0x734>)
 80080ac:	4620      	mov	r0, r4
 80080ae:	4629      	mov	r1, r5
 80080b0:	f7f8 f8c2 	bl	8000238 <__aeabi_dsub>
 80080b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80080b8:	f7f8 f8be 	bl	8000238 <__aeabi_dsub>
 80080bc:	4602      	mov	r2, r0
 80080be:	460b      	mov	r3, r1
 80080c0:	4630      	mov	r0, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	f7f8 f8b8 	bl	8000238 <__aeabi_dsub>
 80080c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80080cc:	f7f8 fa6c 	bl	80005a8 <__aeabi_dmul>
 80080d0:	4622      	mov	r2, r4
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	462b      	mov	r3, r5
 80080d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80080dc:	f7f8 fa64 	bl	80005a8 <__aeabi_dmul>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	4630      	mov	r0, r6
 80080e6:	4639      	mov	r1, r7
 80080e8:	f7f8 f8a8 	bl	800023c <__adddf3>
 80080ec:	4606      	mov	r6, r0
 80080ee:	460f      	mov	r7, r1
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	4640      	mov	r0, r8
 80080f6:	4649      	mov	r1, r9
 80080f8:	f7f8 f8a0 	bl	800023c <__adddf3>
 80080fc:	9802      	ldr	r0, [sp, #8]
 80080fe:	a33c      	add	r3, pc, #240	; (adr r3, 80081f0 <__ieee754_pow+0x700>)
 8008100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008104:	4604      	mov	r4, r0
 8008106:	460d      	mov	r5, r1
 8008108:	f7f8 fa4e 	bl	80005a8 <__aeabi_dmul>
 800810c:	4642      	mov	r2, r8
 800810e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008112:	464b      	mov	r3, r9
 8008114:	4620      	mov	r0, r4
 8008116:	4629      	mov	r1, r5
 8008118:	f7f8 f88e 	bl	8000238 <__aeabi_dsub>
 800811c:	4602      	mov	r2, r0
 800811e:	460b      	mov	r3, r1
 8008120:	4630      	mov	r0, r6
 8008122:	4639      	mov	r1, r7
 8008124:	f7f8 f888 	bl	8000238 <__aeabi_dsub>
 8008128:	a333      	add	r3, pc, #204	; (adr r3, 80081f8 <__ieee754_pow+0x708>)
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f7f8 fa3b 	bl	80005a8 <__aeabi_dmul>
 8008132:	a333      	add	r3, pc, #204	; (adr r3, 8008200 <__ieee754_pow+0x710>)
 8008134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008138:	4606      	mov	r6, r0
 800813a:	460f      	mov	r7, r1
 800813c:	4620      	mov	r0, r4
 800813e:	4629      	mov	r1, r5
 8008140:	f7f8 fa32 	bl	80005a8 <__aeabi_dmul>
 8008144:	4602      	mov	r2, r0
 8008146:	460b      	mov	r3, r1
 8008148:	4630      	mov	r0, r6
 800814a:	4639      	mov	r1, r7
 800814c:	f7f8 f876 	bl	800023c <__adddf3>
 8008150:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008152:	4b35      	ldr	r3, [pc, #212]	; (8008228 <__ieee754_pow+0x738>)
 8008154:	4413      	add	r3, r2
 8008156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800815a:	f7f8 f86f 	bl	800023c <__adddf3>
 800815e:	4604      	mov	r4, r0
 8008160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008162:	460d      	mov	r5, r1
 8008164:	f7f8 f9b6 	bl	80004d4 <__aeabi_i2d>
 8008168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800816a:	4b30      	ldr	r3, [pc, #192]	; (800822c <__ieee754_pow+0x73c>)
 800816c:	4413      	add	r3, r2
 800816e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008172:	4606      	mov	r6, r0
 8008174:	460f      	mov	r7, r1
 8008176:	4622      	mov	r2, r4
 8008178:	462b      	mov	r3, r5
 800817a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800817e:	f7f8 f85d 	bl	800023c <__adddf3>
 8008182:	4642      	mov	r2, r8
 8008184:	464b      	mov	r3, r9
 8008186:	f7f8 f859 	bl	800023c <__adddf3>
 800818a:	4632      	mov	r2, r6
 800818c:	463b      	mov	r3, r7
 800818e:	f7f8 f855 	bl	800023c <__adddf3>
 8008192:	9802      	ldr	r0, [sp, #8]
 8008194:	4632      	mov	r2, r6
 8008196:	463b      	mov	r3, r7
 8008198:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800819c:	f7f8 f84c 	bl	8000238 <__aeabi_dsub>
 80081a0:	4642      	mov	r2, r8
 80081a2:	464b      	mov	r3, r9
 80081a4:	f7f8 f848 	bl	8000238 <__aeabi_dsub>
 80081a8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081ac:	e607      	b.n	8007dbe <__ieee754_pow+0x2ce>
 80081ae:	f04f 0a01 	mov.w	sl, #1
 80081b2:	e6a5      	b.n	8007f00 <__ieee754_pow+0x410>
 80081b4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008208 <__ieee754_pow+0x718>
 80081b8:	e613      	b.n	8007de2 <__ieee754_pow+0x2f2>
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w
 80081c0:	4a454eef 	.word	0x4a454eef
 80081c4:	3fca7e28 	.word	0x3fca7e28
 80081c8:	93c9db65 	.word	0x93c9db65
 80081cc:	3fcd864a 	.word	0x3fcd864a
 80081d0:	a91d4101 	.word	0xa91d4101
 80081d4:	3fd17460 	.word	0x3fd17460
 80081d8:	518f264d 	.word	0x518f264d
 80081dc:	3fd55555 	.word	0x3fd55555
 80081e0:	db6fabff 	.word	0xdb6fabff
 80081e4:	3fdb6db6 	.word	0x3fdb6db6
 80081e8:	33333303 	.word	0x33333303
 80081ec:	3fe33333 	.word	0x3fe33333
 80081f0:	e0000000 	.word	0xe0000000
 80081f4:	3feec709 	.word	0x3feec709
 80081f8:	dc3a03fd 	.word	0xdc3a03fd
 80081fc:	3feec709 	.word	0x3feec709
 8008200:	145b01f5 	.word	0x145b01f5
 8008204:	be3e2fe0 	.word	0xbe3e2fe0
 8008208:	00000000 	.word	0x00000000
 800820c:	3ff00000 	.word	0x3ff00000
 8008210:	43400000 	.word	0x43400000
 8008214:	0003988e 	.word	0x0003988e
 8008218:	000bb679 	.word	0x000bb679
 800821c:	08009930 	.word	0x08009930
 8008220:	3ff00000 	.word	0x3ff00000
 8008224:	40080000 	.word	0x40080000
 8008228:	08009950 	.word	0x08009950
 800822c:	08009940 	.word	0x08009940
 8008230:	a3b4      	add	r3, pc, #720	; (adr r3, 8008504 <__ieee754_pow+0xa14>)
 8008232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008236:	4640      	mov	r0, r8
 8008238:	4649      	mov	r1, r9
 800823a:	f7f7 ffff 	bl	800023c <__adddf3>
 800823e:	4622      	mov	r2, r4
 8008240:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008244:	462b      	mov	r3, r5
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f7 fff5 	bl	8000238 <__aeabi_dsub>
 800824e:	4602      	mov	r2, r0
 8008250:	460b      	mov	r3, r1
 8008252:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008256:	f7f8 fc37 	bl	8000ac8 <__aeabi_dcmpgt>
 800825a:	2800      	cmp	r0, #0
 800825c:	f47f adfe 	bne.w	8007e5c <__ieee754_pow+0x36c>
 8008260:	4aa3      	ldr	r2, [pc, #652]	; (80084f0 <__ieee754_pow+0xa00>)
 8008262:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008266:	4293      	cmp	r3, r2
 8008268:	f340 810a 	ble.w	8008480 <__ieee754_pow+0x990>
 800826c:	151b      	asrs	r3, r3, #20
 800826e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008272:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008276:	fa4a f303 	asr.w	r3, sl, r3
 800827a:	445b      	add	r3, fp
 800827c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008280:	4e9c      	ldr	r6, [pc, #624]	; (80084f4 <__ieee754_pow+0xa04>)
 8008282:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008286:	4116      	asrs	r6, r2
 8008288:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800828c:	2000      	movs	r0, #0
 800828e:	ea23 0106 	bic.w	r1, r3, r6
 8008292:	f1c2 0214 	rsb	r2, r2, #20
 8008296:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800829a:	fa4a fa02 	asr.w	sl, sl, r2
 800829e:	f1bb 0f00 	cmp.w	fp, #0
 80082a2:	4602      	mov	r2, r0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4620      	mov	r0, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	bfb8      	it	lt
 80082ac:	f1ca 0a00 	rsblt	sl, sl, #0
 80082b0:	f7f7 ffc2 	bl	8000238 <__aeabi_dsub>
 80082b4:	e9cd 0100 	strd	r0, r1, [sp]
 80082b8:	4642      	mov	r2, r8
 80082ba:	464b      	mov	r3, r9
 80082bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80082c0:	f7f7 ffbc 	bl	800023c <__adddf3>
 80082c4:	2000      	movs	r0, #0
 80082c6:	a378      	add	r3, pc, #480	; (adr r3, 80084a8 <__ieee754_pow+0x9b8>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	4604      	mov	r4, r0
 80082ce:	460d      	mov	r5, r1
 80082d0:	f7f8 f96a 	bl	80005a8 <__aeabi_dmul>
 80082d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80082d8:	4606      	mov	r6, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f7 ffaa 	bl	8000238 <__aeabi_dsub>
 80082e4:	4602      	mov	r2, r0
 80082e6:	460b      	mov	r3, r1
 80082e8:	4640      	mov	r0, r8
 80082ea:	4649      	mov	r1, r9
 80082ec:	f7f7 ffa4 	bl	8000238 <__aeabi_dsub>
 80082f0:	a36f      	add	r3, pc, #444	; (adr r3, 80084b0 <__ieee754_pow+0x9c0>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f8 f957 	bl	80005a8 <__aeabi_dmul>
 80082fa:	a36f      	add	r3, pc, #444	; (adr r3, 80084b8 <__ieee754_pow+0x9c8>)
 80082fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008300:	4680      	mov	r8, r0
 8008302:	4689      	mov	r9, r1
 8008304:	4620      	mov	r0, r4
 8008306:	4629      	mov	r1, r5
 8008308:	f7f8 f94e 	bl	80005a8 <__aeabi_dmul>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4640      	mov	r0, r8
 8008312:	4649      	mov	r1, r9
 8008314:	f7f7 ff92 	bl	800023c <__adddf3>
 8008318:	4604      	mov	r4, r0
 800831a:	460d      	mov	r5, r1
 800831c:	4602      	mov	r2, r0
 800831e:	460b      	mov	r3, r1
 8008320:	4630      	mov	r0, r6
 8008322:	4639      	mov	r1, r7
 8008324:	f7f7 ff8a 	bl	800023c <__adddf3>
 8008328:	4632      	mov	r2, r6
 800832a:	463b      	mov	r3, r7
 800832c:	4680      	mov	r8, r0
 800832e:	4689      	mov	r9, r1
 8008330:	f7f7 ff82 	bl	8000238 <__aeabi_dsub>
 8008334:	4602      	mov	r2, r0
 8008336:	460b      	mov	r3, r1
 8008338:	4620      	mov	r0, r4
 800833a:	4629      	mov	r1, r5
 800833c:	f7f7 ff7c 	bl	8000238 <__aeabi_dsub>
 8008340:	4642      	mov	r2, r8
 8008342:	4606      	mov	r6, r0
 8008344:	460f      	mov	r7, r1
 8008346:	464b      	mov	r3, r9
 8008348:	4640      	mov	r0, r8
 800834a:	4649      	mov	r1, r9
 800834c:	f7f8 f92c 	bl	80005a8 <__aeabi_dmul>
 8008350:	a35b      	add	r3, pc, #364	; (adr r3, 80084c0 <__ieee754_pow+0x9d0>)
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	4604      	mov	r4, r0
 8008358:	460d      	mov	r5, r1
 800835a:	f7f8 f925 	bl	80005a8 <__aeabi_dmul>
 800835e:	a35a      	add	r3, pc, #360	; (adr r3, 80084c8 <__ieee754_pow+0x9d8>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f7 ff68 	bl	8000238 <__aeabi_dsub>
 8008368:	4622      	mov	r2, r4
 800836a:	462b      	mov	r3, r5
 800836c:	f7f8 f91c 	bl	80005a8 <__aeabi_dmul>
 8008370:	a357      	add	r3, pc, #348	; (adr r3, 80084d0 <__ieee754_pow+0x9e0>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f7 ff61 	bl	800023c <__adddf3>
 800837a:	4622      	mov	r2, r4
 800837c:	462b      	mov	r3, r5
 800837e:	f7f8 f913 	bl	80005a8 <__aeabi_dmul>
 8008382:	a355      	add	r3, pc, #340	; (adr r3, 80084d8 <__ieee754_pow+0x9e8>)
 8008384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008388:	f7f7 ff56 	bl	8000238 <__aeabi_dsub>
 800838c:	4622      	mov	r2, r4
 800838e:	462b      	mov	r3, r5
 8008390:	f7f8 f90a 	bl	80005a8 <__aeabi_dmul>
 8008394:	a352      	add	r3, pc, #328	; (adr r3, 80084e0 <__ieee754_pow+0x9f0>)
 8008396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800839a:	f7f7 ff4f 	bl	800023c <__adddf3>
 800839e:	4622      	mov	r2, r4
 80083a0:	462b      	mov	r3, r5
 80083a2:	f7f8 f901 	bl	80005a8 <__aeabi_dmul>
 80083a6:	4602      	mov	r2, r0
 80083a8:	460b      	mov	r3, r1
 80083aa:	4640      	mov	r0, r8
 80083ac:	4649      	mov	r1, r9
 80083ae:	f7f7 ff43 	bl	8000238 <__aeabi_dsub>
 80083b2:	4604      	mov	r4, r0
 80083b4:	460d      	mov	r5, r1
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4640      	mov	r0, r8
 80083bc:	4649      	mov	r1, r9
 80083be:	f7f8 f8f3 	bl	80005a8 <__aeabi_dmul>
 80083c2:	2200      	movs	r2, #0
 80083c4:	e9cd 0100 	strd	r0, r1, [sp]
 80083c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80083cc:	4620      	mov	r0, r4
 80083ce:	4629      	mov	r1, r5
 80083d0:	f7f7 ff32 	bl	8000238 <__aeabi_dsub>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083dc:	f7f8 fa0e 	bl	80007fc <__aeabi_ddiv>
 80083e0:	4632      	mov	r2, r6
 80083e2:	4604      	mov	r4, r0
 80083e4:	460d      	mov	r5, r1
 80083e6:	463b      	mov	r3, r7
 80083e8:	4640      	mov	r0, r8
 80083ea:	4649      	mov	r1, r9
 80083ec:	f7f8 f8dc 	bl	80005a8 <__aeabi_dmul>
 80083f0:	4632      	mov	r2, r6
 80083f2:	463b      	mov	r3, r7
 80083f4:	f7f7 ff22 	bl	800023c <__adddf3>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4620      	mov	r0, r4
 80083fe:	4629      	mov	r1, r5
 8008400:	f7f7 ff1a 	bl	8000238 <__aeabi_dsub>
 8008404:	4642      	mov	r2, r8
 8008406:	464b      	mov	r3, r9
 8008408:	f7f7 ff16 	bl	8000238 <__aeabi_dsub>
 800840c:	4602      	mov	r2, r0
 800840e:	460b      	mov	r3, r1
 8008410:	2000      	movs	r0, #0
 8008412:	4939      	ldr	r1, [pc, #228]	; (80084f8 <__ieee754_pow+0xa08>)
 8008414:	f7f7 ff10 	bl	8000238 <__aeabi_dsub>
 8008418:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800841c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008420:	4602      	mov	r2, r0
 8008422:	460b      	mov	r3, r1
 8008424:	da2f      	bge.n	8008486 <__ieee754_pow+0x996>
 8008426:	4650      	mov	r0, sl
 8008428:	ec43 2b10 	vmov	d0, r2, r3
 800842c:	f000 f9c0 	bl	80087b0 <scalbn>
 8008430:	ec51 0b10 	vmov	r0, r1, d0
 8008434:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008438:	f7ff bbf1 	b.w	8007c1e <__ieee754_pow+0x12e>
 800843c:	4b2f      	ldr	r3, [pc, #188]	; (80084fc <__ieee754_pow+0xa0c>)
 800843e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008442:	429e      	cmp	r6, r3
 8008444:	f77f af0c 	ble.w	8008260 <__ieee754_pow+0x770>
 8008448:	4b2d      	ldr	r3, [pc, #180]	; (8008500 <__ieee754_pow+0xa10>)
 800844a:	440b      	add	r3, r1
 800844c:	4303      	orrs	r3, r0
 800844e:	d00b      	beq.n	8008468 <__ieee754_pow+0x978>
 8008450:	a325      	add	r3, pc, #148	; (adr r3, 80084e8 <__ieee754_pow+0x9f8>)
 8008452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800845a:	f7f8 f8a5 	bl	80005a8 <__aeabi_dmul>
 800845e:	a322      	add	r3, pc, #136	; (adr r3, 80084e8 <__ieee754_pow+0x9f8>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f7ff bbdb 	b.w	8007c1e <__ieee754_pow+0x12e>
 8008468:	4622      	mov	r2, r4
 800846a:	462b      	mov	r3, r5
 800846c:	f7f7 fee4 	bl	8000238 <__aeabi_dsub>
 8008470:	4642      	mov	r2, r8
 8008472:	464b      	mov	r3, r9
 8008474:	f7f8 fb1e 	bl	8000ab4 <__aeabi_dcmpge>
 8008478:	2800      	cmp	r0, #0
 800847a:	f43f aef1 	beq.w	8008260 <__ieee754_pow+0x770>
 800847e:	e7e7      	b.n	8008450 <__ieee754_pow+0x960>
 8008480:	f04f 0a00 	mov.w	sl, #0
 8008484:	e718      	b.n	80082b8 <__ieee754_pow+0x7c8>
 8008486:	4621      	mov	r1, r4
 8008488:	e7d4      	b.n	8008434 <__ieee754_pow+0x944>
 800848a:	2000      	movs	r0, #0
 800848c:	491a      	ldr	r1, [pc, #104]	; (80084f8 <__ieee754_pow+0xa08>)
 800848e:	f7ff bb8f 	b.w	8007bb0 <__ieee754_pow+0xc0>
 8008492:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008496:	f7ff bb8b 	b.w	8007bb0 <__ieee754_pow+0xc0>
 800849a:	4630      	mov	r0, r6
 800849c:	4639      	mov	r1, r7
 800849e:	f7ff bb87 	b.w	8007bb0 <__ieee754_pow+0xc0>
 80084a2:	4693      	mov	fp, r2
 80084a4:	f7ff bb98 	b.w	8007bd8 <__ieee754_pow+0xe8>
 80084a8:	00000000 	.word	0x00000000
 80084ac:	3fe62e43 	.word	0x3fe62e43
 80084b0:	fefa39ef 	.word	0xfefa39ef
 80084b4:	3fe62e42 	.word	0x3fe62e42
 80084b8:	0ca86c39 	.word	0x0ca86c39
 80084bc:	be205c61 	.word	0xbe205c61
 80084c0:	72bea4d0 	.word	0x72bea4d0
 80084c4:	3e663769 	.word	0x3e663769
 80084c8:	c5d26bf1 	.word	0xc5d26bf1
 80084cc:	3ebbbd41 	.word	0x3ebbbd41
 80084d0:	af25de2c 	.word	0xaf25de2c
 80084d4:	3f11566a 	.word	0x3f11566a
 80084d8:	16bebd93 	.word	0x16bebd93
 80084dc:	3f66c16c 	.word	0x3f66c16c
 80084e0:	5555553e 	.word	0x5555553e
 80084e4:	3fc55555 	.word	0x3fc55555
 80084e8:	c2f8f359 	.word	0xc2f8f359
 80084ec:	01a56e1f 	.word	0x01a56e1f
 80084f0:	3fe00000 	.word	0x3fe00000
 80084f4:	000fffff 	.word	0x000fffff
 80084f8:	3ff00000 	.word	0x3ff00000
 80084fc:	4090cbff 	.word	0x4090cbff
 8008500:	3f6f3400 	.word	0x3f6f3400
 8008504:	652b82fe 	.word	0x652b82fe
 8008508:	3c971547 	.word	0x3c971547

0800850c <__ieee754_sqrt>:
 800850c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008510:	4955      	ldr	r1, [pc, #340]	; (8008668 <__ieee754_sqrt+0x15c>)
 8008512:	ec55 4b10 	vmov	r4, r5, d0
 8008516:	43a9      	bics	r1, r5
 8008518:	462b      	mov	r3, r5
 800851a:	462a      	mov	r2, r5
 800851c:	d112      	bne.n	8008544 <__ieee754_sqrt+0x38>
 800851e:	ee10 2a10 	vmov	r2, s0
 8008522:	ee10 0a10 	vmov	r0, s0
 8008526:	4629      	mov	r1, r5
 8008528:	f7f8 f83e 	bl	80005a8 <__aeabi_dmul>
 800852c:	4602      	mov	r2, r0
 800852e:	460b      	mov	r3, r1
 8008530:	4620      	mov	r0, r4
 8008532:	4629      	mov	r1, r5
 8008534:	f7f7 fe82 	bl	800023c <__adddf3>
 8008538:	4604      	mov	r4, r0
 800853a:	460d      	mov	r5, r1
 800853c:	ec45 4b10 	vmov	d0, r4, r5
 8008540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008544:	2d00      	cmp	r5, #0
 8008546:	ee10 0a10 	vmov	r0, s0
 800854a:	4621      	mov	r1, r4
 800854c:	dc0f      	bgt.n	800856e <__ieee754_sqrt+0x62>
 800854e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008552:	4330      	orrs	r0, r6
 8008554:	d0f2      	beq.n	800853c <__ieee754_sqrt+0x30>
 8008556:	b155      	cbz	r5, 800856e <__ieee754_sqrt+0x62>
 8008558:	ee10 2a10 	vmov	r2, s0
 800855c:	4620      	mov	r0, r4
 800855e:	4629      	mov	r1, r5
 8008560:	f7f7 fe6a 	bl	8000238 <__aeabi_dsub>
 8008564:	4602      	mov	r2, r0
 8008566:	460b      	mov	r3, r1
 8008568:	f7f8 f948 	bl	80007fc <__aeabi_ddiv>
 800856c:	e7e4      	b.n	8008538 <__ieee754_sqrt+0x2c>
 800856e:	151b      	asrs	r3, r3, #20
 8008570:	d073      	beq.n	800865a <__ieee754_sqrt+0x14e>
 8008572:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008576:	07dd      	lsls	r5, r3, #31
 8008578:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800857c:	bf48      	it	mi
 800857e:	0fc8      	lsrmi	r0, r1, #31
 8008580:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008584:	bf44      	itt	mi
 8008586:	0049      	lslmi	r1, r1, #1
 8008588:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800858c:	2500      	movs	r5, #0
 800858e:	1058      	asrs	r0, r3, #1
 8008590:	0fcb      	lsrs	r3, r1, #31
 8008592:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8008596:	0049      	lsls	r1, r1, #1
 8008598:	2316      	movs	r3, #22
 800859a:	462c      	mov	r4, r5
 800859c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80085a0:	19a7      	adds	r7, r4, r6
 80085a2:	4297      	cmp	r7, r2
 80085a4:	bfde      	ittt	le
 80085a6:	19bc      	addle	r4, r7, r6
 80085a8:	1bd2      	suble	r2, r2, r7
 80085aa:	19ad      	addle	r5, r5, r6
 80085ac:	0fcf      	lsrs	r7, r1, #31
 80085ae:	3b01      	subs	r3, #1
 80085b0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80085b4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80085b8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80085bc:	d1f0      	bne.n	80085a0 <__ieee754_sqrt+0x94>
 80085be:	f04f 0c20 	mov.w	ip, #32
 80085c2:	469e      	mov	lr, r3
 80085c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80085c8:	42a2      	cmp	r2, r4
 80085ca:	eb06 070e 	add.w	r7, r6, lr
 80085ce:	dc02      	bgt.n	80085d6 <__ieee754_sqrt+0xca>
 80085d0:	d112      	bne.n	80085f8 <__ieee754_sqrt+0xec>
 80085d2:	428f      	cmp	r7, r1
 80085d4:	d810      	bhi.n	80085f8 <__ieee754_sqrt+0xec>
 80085d6:	2f00      	cmp	r7, #0
 80085d8:	eb07 0e06 	add.w	lr, r7, r6
 80085dc:	da42      	bge.n	8008664 <__ieee754_sqrt+0x158>
 80085de:	f1be 0f00 	cmp.w	lr, #0
 80085e2:	db3f      	blt.n	8008664 <__ieee754_sqrt+0x158>
 80085e4:	f104 0801 	add.w	r8, r4, #1
 80085e8:	1b12      	subs	r2, r2, r4
 80085ea:	428f      	cmp	r7, r1
 80085ec:	bf88      	it	hi
 80085ee:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80085f2:	1bc9      	subs	r1, r1, r7
 80085f4:	4433      	add	r3, r6
 80085f6:	4644      	mov	r4, r8
 80085f8:	0052      	lsls	r2, r2, #1
 80085fa:	f1bc 0c01 	subs.w	ip, ip, #1
 80085fe:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8008602:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008606:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800860a:	d1dd      	bne.n	80085c8 <__ieee754_sqrt+0xbc>
 800860c:	430a      	orrs	r2, r1
 800860e:	d006      	beq.n	800861e <__ieee754_sqrt+0x112>
 8008610:	1c5c      	adds	r4, r3, #1
 8008612:	bf13      	iteet	ne
 8008614:	3301      	addne	r3, #1
 8008616:	3501      	addeq	r5, #1
 8008618:	4663      	moveq	r3, ip
 800861a:	f023 0301 	bicne.w	r3, r3, #1
 800861e:	106a      	asrs	r2, r5, #1
 8008620:	085b      	lsrs	r3, r3, #1
 8008622:	07e9      	lsls	r1, r5, #31
 8008624:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008628:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800862c:	bf48      	it	mi
 800862e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8008632:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8008636:	461c      	mov	r4, r3
 8008638:	e780      	b.n	800853c <__ieee754_sqrt+0x30>
 800863a:	0aca      	lsrs	r2, r1, #11
 800863c:	3815      	subs	r0, #21
 800863e:	0549      	lsls	r1, r1, #21
 8008640:	2a00      	cmp	r2, #0
 8008642:	d0fa      	beq.n	800863a <__ieee754_sqrt+0x12e>
 8008644:	02d6      	lsls	r6, r2, #11
 8008646:	d50a      	bpl.n	800865e <__ieee754_sqrt+0x152>
 8008648:	f1c3 0420 	rsb	r4, r3, #32
 800864c:	fa21 f404 	lsr.w	r4, r1, r4
 8008650:	1e5d      	subs	r5, r3, #1
 8008652:	4099      	lsls	r1, r3
 8008654:	4322      	orrs	r2, r4
 8008656:	1b43      	subs	r3, r0, r5
 8008658:	e78b      	b.n	8008572 <__ieee754_sqrt+0x66>
 800865a:	4618      	mov	r0, r3
 800865c:	e7f0      	b.n	8008640 <__ieee754_sqrt+0x134>
 800865e:	0052      	lsls	r2, r2, #1
 8008660:	3301      	adds	r3, #1
 8008662:	e7ef      	b.n	8008644 <__ieee754_sqrt+0x138>
 8008664:	46a0      	mov	r8, r4
 8008666:	e7bf      	b.n	80085e8 <__ieee754_sqrt+0xdc>
 8008668:	7ff00000 	.word	0x7ff00000

0800866c <fabs>:
 800866c:	ec51 0b10 	vmov	r0, r1, d0
 8008670:	ee10 2a10 	vmov	r2, s0
 8008674:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008678:	ec43 2b10 	vmov	d0, r2, r3
 800867c:	4770      	bx	lr

0800867e <finite>:
 800867e:	ee10 3a90 	vmov	r3, s1
 8008682:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8008686:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800868a:	0fc0      	lsrs	r0, r0, #31
 800868c:	4770      	bx	lr

0800868e <matherr>:
 800868e:	2000      	movs	r0, #0
 8008690:	4770      	bx	lr
 8008692:	0000      	movs	r0, r0
 8008694:	0000      	movs	r0, r0
	...

08008698 <nan>:
 8008698:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086a0 <nan+0x8>
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	00000000 	.word	0x00000000
 80086a4:	7ff80000 	.word	0x7ff80000

080086a8 <rint>:
 80086a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086aa:	ec51 0b10 	vmov	r0, r1, d0
 80086ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80086b2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80086b6:	2e13      	cmp	r6, #19
 80086b8:	460b      	mov	r3, r1
 80086ba:	ee10 4a10 	vmov	r4, s0
 80086be:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80086c2:	dc56      	bgt.n	8008772 <rint+0xca>
 80086c4:	2e00      	cmp	r6, #0
 80086c6:	da2b      	bge.n	8008720 <rint+0x78>
 80086c8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80086cc:	4302      	orrs	r2, r0
 80086ce:	d023      	beq.n	8008718 <rint+0x70>
 80086d0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80086d4:	4302      	orrs	r2, r0
 80086d6:	4254      	negs	r4, r2
 80086d8:	4314      	orrs	r4, r2
 80086da:	0c4b      	lsrs	r3, r1, #17
 80086dc:	0b24      	lsrs	r4, r4, #12
 80086de:	045b      	lsls	r3, r3, #17
 80086e0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80086e4:	ea44 0103 	orr.w	r1, r4, r3
 80086e8:	460b      	mov	r3, r1
 80086ea:	492f      	ldr	r1, [pc, #188]	; (80087a8 <rint+0x100>)
 80086ec:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80086f0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80086f4:	4602      	mov	r2, r0
 80086f6:	4639      	mov	r1, r7
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7f7 fd9f 	bl	800023c <__adddf3>
 80086fe:	e9cd 0100 	strd	r0, r1, [sp]
 8008702:	463b      	mov	r3, r7
 8008704:	4632      	mov	r2, r6
 8008706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800870a:	f7f7 fd95 	bl	8000238 <__aeabi_dsub>
 800870e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008712:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008716:	4639      	mov	r1, r7
 8008718:	ec41 0b10 	vmov	d0, r0, r1
 800871c:	b003      	add	sp, #12
 800871e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008720:	4a22      	ldr	r2, [pc, #136]	; (80087ac <rint+0x104>)
 8008722:	4132      	asrs	r2, r6
 8008724:	ea01 0702 	and.w	r7, r1, r2
 8008728:	4307      	orrs	r7, r0
 800872a:	d0f5      	beq.n	8008718 <rint+0x70>
 800872c:	0852      	lsrs	r2, r2, #1
 800872e:	4011      	ands	r1, r2
 8008730:	430c      	orrs	r4, r1
 8008732:	d00b      	beq.n	800874c <rint+0xa4>
 8008734:	ea23 0202 	bic.w	r2, r3, r2
 8008738:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800873c:	2e13      	cmp	r6, #19
 800873e:	fa43 f306 	asr.w	r3, r3, r6
 8008742:	bf0c      	ite	eq
 8008744:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008748:	2400      	movne	r4, #0
 800874a:	4313      	orrs	r3, r2
 800874c:	4916      	ldr	r1, [pc, #88]	; (80087a8 <rint+0x100>)
 800874e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008752:	4622      	mov	r2, r4
 8008754:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008758:	4620      	mov	r0, r4
 800875a:	4629      	mov	r1, r5
 800875c:	f7f7 fd6e 	bl	800023c <__adddf3>
 8008760:	e9cd 0100 	strd	r0, r1, [sp]
 8008764:	4622      	mov	r2, r4
 8008766:	462b      	mov	r3, r5
 8008768:	e9dd 0100 	ldrd	r0, r1, [sp]
 800876c:	f7f7 fd64 	bl	8000238 <__aeabi_dsub>
 8008770:	e7d2      	b.n	8008718 <rint+0x70>
 8008772:	2e33      	cmp	r6, #51	; 0x33
 8008774:	dd07      	ble.n	8008786 <rint+0xde>
 8008776:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800877a:	d1cd      	bne.n	8008718 <rint+0x70>
 800877c:	ee10 2a10 	vmov	r2, s0
 8008780:	f7f7 fd5c 	bl	800023c <__adddf3>
 8008784:	e7c8      	b.n	8008718 <rint+0x70>
 8008786:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800878a:	f04f 32ff 	mov.w	r2, #4294967295
 800878e:	40f2      	lsrs	r2, r6
 8008790:	4210      	tst	r0, r2
 8008792:	d0c1      	beq.n	8008718 <rint+0x70>
 8008794:	0852      	lsrs	r2, r2, #1
 8008796:	4210      	tst	r0, r2
 8008798:	bf1f      	itttt	ne
 800879a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800879e:	ea20 0202 	bicne.w	r2, r0, r2
 80087a2:	4134      	asrne	r4, r6
 80087a4:	4314      	orrne	r4, r2
 80087a6:	e7d1      	b.n	800874c <rint+0xa4>
 80087a8:	08009960 	.word	0x08009960
 80087ac:	000fffff 	.word	0x000fffff

080087b0 <scalbn>:
 80087b0:	b570      	push	{r4, r5, r6, lr}
 80087b2:	ec55 4b10 	vmov	r4, r5, d0
 80087b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80087ba:	4606      	mov	r6, r0
 80087bc:	462b      	mov	r3, r5
 80087be:	b9aa      	cbnz	r2, 80087ec <scalbn+0x3c>
 80087c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80087c4:	4323      	orrs	r3, r4
 80087c6:	d03b      	beq.n	8008840 <scalbn+0x90>
 80087c8:	4b31      	ldr	r3, [pc, #196]	; (8008890 <scalbn+0xe0>)
 80087ca:	4629      	mov	r1, r5
 80087cc:	2200      	movs	r2, #0
 80087ce:	ee10 0a10 	vmov	r0, s0
 80087d2:	f7f7 fee9 	bl	80005a8 <__aeabi_dmul>
 80087d6:	4b2f      	ldr	r3, [pc, #188]	; (8008894 <scalbn+0xe4>)
 80087d8:	429e      	cmp	r6, r3
 80087da:	4604      	mov	r4, r0
 80087dc:	460d      	mov	r5, r1
 80087de:	da12      	bge.n	8008806 <scalbn+0x56>
 80087e0:	a327      	add	r3, pc, #156	; (adr r3, 8008880 <scalbn+0xd0>)
 80087e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e6:	f7f7 fedf 	bl	80005a8 <__aeabi_dmul>
 80087ea:	e009      	b.n	8008800 <scalbn+0x50>
 80087ec:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80087f0:	428a      	cmp	r2, r1
 80087f2:	d10c      	bne.n	800880e <scalbn+0x5e>
 80087f4:	ee10 2a10 	vmov	r2, s0
 80087f8:	4620      	mov	r0, r4
 80087fa:	4629      	mov	r1, r5
 80087fc:	f7f7 fd1e 	bl	800023c <__adddf3>
 8008800:	4604      	mov	r4, r0
 8008802:	460d      	mov	r5, r1
 8008804:	e01c      	b.n	8008840 <scalbn+0x90>
 8008806:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800880a:	460b      	mov	r3, r1
 800880c:	3a36      	subs	r2, #54	; 0x36
 800880e:	4432      	add	r2, r6
 8008810:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008814:	428a      	cmp	r2, r1
 8008816:	dd0b      	ble.n	8008830 <scalbn+0x80>
 8008818:	ec45 4b11 	vmov	d1, r4, r5
 800881c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008888 <scalbn+0xd8>
 8008820:	f000 f83c 	bl	800889c <copysign>
 8008824:	a318      	add	r3, pc, #96	; (adr r3, 8008888 <scalbn+0xd8>)
 8008826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800882a:	ec51 0b10 	vmov	r0, r1, d0
 800882e:	e7da      	b.n	80087e6 <scalbn+0x36>
 8008830:	2a00      	cmp	r2, #0
 8008832:	dd08      	ble.n	8008846 <scalbn+0x96>
 8008834:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008838:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800883c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008840:	ec45 4b10 	vmov	d0, r4, r5
 8008844:	bd70      	pop	{r4, r5, r6, pc}
 8008846:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800884a:	da0d      	bge.n	8008868 <scalbn+0xb8>
 800884c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008850:	429e      	cmp	r6, r3
 8008852:	ec45 4b11 	vmov	d1, r4, r5
 8008856:	dce1      	bgt.n	800881c <scalbn+0x6c>
 8008858:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008880 <scalbn+0xd0>
 800885c:	f000 f81e 	bl	800889c <copysign>
 8008860:	a307      	add	r3, pc, #28	; (adr r3, 8008880 <scalbn+0xd0>)
 8008862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008866:	e7e0      	b.n	800882a <scalbn+0x7a>
 8008868:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800886c:	3236      	adds	r2, #54	; 0x36
 800886e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008872:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008876:	4620      	mov	r0, r4
 8008878:	4629      	mov	r1, r5
 800887a:	2200      	movs	r2, #0
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <scalbn+0xe8>)
 800887e:	e7b2      	b.n	80087e6 <scalbn+0x36>
 8008880:	c2f8f359 	.word	0xc2f8f359
 8008884:	01a56e1f 	.word	0x01a56e1f
 8008888:	8800759c 	.word	0x8800759c
 800888c:	7e37e43c 	.word	0x7e37e43c
 8008890:	43500000 	.word	0x43500000
 8008894:	ffff3cb0 	.word	0xffff3cb0
 8008898:	3c900000 	.word	0x3c900000

0800889c <copysign>:
 800889c:	ec51 0b10 	vmov	r0, r1, d0
 80088a0:	ee11 0a90 	vmov	r0, s3
 80088a4:	ee10 2a10 	vmov	r2, s0
 80088a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80088ac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80088b0:	ea41 0300 	orr.w	r3, r1, r0
 80088b4:	ec43 2b10 	vmov	d0, r2, r3
 80088b8:	4770      	bx	lr
	...

080088bc <_init>:
 80088bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088be:	bf00      	nop
 80088c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088c2:	bc08      	pop	{r3}
 80088c4:	469e      	mov	lr, r3
 80088c6:	4770      	bx	lr

080088c8 <_fini>:
 80088c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ca:	bf00      	nop
 80088cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088ce:	bc08      	pop	{r3}
 80088d0:	469e      	mov	lr, r3
 80088d2:	4770      	bx	lr
